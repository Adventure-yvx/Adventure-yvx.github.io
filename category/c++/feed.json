{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"c++\" category",
    "description": "",
    "home_page_url": "https://adventure-yx.github.io",
    "items": [
        {
            "id": "https://adventure-yx.github.io/2023/06/06/C++Boost%E5%BA%93%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "url": "https://adventure-yx.github.io/2023/06/06/C++Boost%E5%BA%93%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "title": "C++Boost库 内存管理",
            "date_published": "2023-06-06T02:10:08.000Z",
            "content_html": "<h1 id=\"smart_ptr库\"><a class=\"markdownIt-Anchor\" href=\"#smart_ptr库\">#</a> smart_ptr 库</h1>\n<h2 id=\"raii机制\"><a class=\"markdownIt-Anchor\" href=\"#raii机制\">#</a> RAII 机制</h2>\n<p>为了管理内存等资源，通常采用 RAII 机制（资源获取即初始化，Resource Acquisition Is Initialization），在使用资源的类的构造函数中申请资源，然后使用，最终在析构函数中释放资源</p>\n<p>如果对象是<strong>用声明的方式在栈上创建</strong>的（一个局部对象），那么 RAII 机制会正常工作，当离开作用域时对象会自动销毁从而调用析构函数释放资源。</p>\n<p>但如果对象是<strong>用 new 操作符在堆上创建</strong>的，那么他的析构函数就不会自动调用，必须明确地用对应的 delete 操作符销毁它才能释放资源。</p>\n<blockquote>\n<p>new 和 delete 以及指针的不恰当应用时造成资源获取 / 释放问题的根源。</p>\n</blockquote>\n<h2 id=\"智能指针\"><a class=\"markdownIt-Anchor\" href=\"#智能指针\">#</a> 智能指针</h2>\n<p>智能指针可以在退出作用域时（不管是正常流程离开或是因异常离开），总调用 delete 来析构在堆上动态分配的对象。</p>\n<p>存在多种智能指针，其中最著名的时 C++98 标准中的 <code> std::auto_ptr</code> ，它部分地解决了获取资源自动释放的问题，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    auto_ptr<span class=\"token operator\">&lt;</span>class_need_resource<span class=\"token operator\">></span> \t<span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> class_need_resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    auto_ptr<span class=\"token operator\">&lt;</span>demo_class<span class=\"token operator\">></span>\t\t\t<span class=\"token function\">p2</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>\t<span class=\"token comment\">// 离开作用域时，p1，p2 自动析构从而释放内存等资源</span></pre></td></tr></table></figure><p>auto_ptr 的构造函数接受 new 操作符或者对象工厂创建出的对象指针作为参数，从而代理了原始指针。虽然他是一个对象，但因为重载了 <code>operator*</code>  和 <code>operator-&gt;</code> ，其行为非常类似指针，可以把它用在大多数普通指针可用的地方。当推出作用域时（离开 main 函数或者发生异常），C++ 语言会确保 auto_ptr 对象销毁，调用 auto_ptr 的析构函数，进而使用 delete 操作符删除原始指针释放资源。</p>\n<p>auto_ptr 很好用，被包含在 C<ins>98 标准库中令他在世界范围内被广泛使用，使智能指针的思想、用法深入人心。但它也存在一些缺陷，所以在 C</ins>11/14 标准提供了更完善的 <code>unique_ptr</code> 、 <code>shared_ptr</code> 、 <code>weak_ptr</code> ，而这些正是基于 <code>boost.smart_ptr</code>  库</p>\n",
            "tags": [
                "C++",
                "Boost"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/05/C++Boost%E5%BA%93%20%E5%87%BD%E6%95%B0%E4%B8%8E%E5%9B%9E%E8%B0%83/",
            "url": "https://adventure-yx.github.io/2023/06/05/C++Boost%E5%BA%93%20%E5%87%BD%E6%95%B0%E4%B8%8E%E5%9B%9E%E8%B0%83/",
            "title": "C++Boost库 函数与回调",
            "date_published": "2023-06-05T02:10:08.000Z",
            "content_html": "<h1 id=\"函数与回调\"><a class=\"markdownIt-Anchor\" href=\"#函数与回调\">#</a> 函数与回调</h1>\n<p>围绕函数与函数对象，共有 4 个 Boost 库，应用了 C<ins> 中高级的语言特性和技巧，功能很强大，相应的用法也比较复杂灵活。其中前三个 ref、bind、function 已经被收入 C</ins>11 标准。</p>\n<ul>\n<li>\n<p><strong>ref 工具类</strong></p>\n<p>是本章其他库的基础，可以包装对象的引用，在传递参数时，消除对象拷贝的代价，或者将不可拷贝的对象变为可以拷贝。</p>\n</li>\n<li>\n<p><strong>bind</strong></p>\n<p>是 C<ins> 标准库中函数适配器的增强，可以适配任意的可调用对象 —— 包括函数指针，函数引用和函数对象，把它们变成一个新的函数对象，是迈向 C</ins> 函数式编程的第一步。</p>\n</li>\n<li>\n<p><strong>function</strong></p>\n<p>是对 C/C++ 中函数指针类型的增强，能够容纳任意的可调用对象，可以配合 bind 使用。</p>\n</li>\n<li>\n<p><strong>signals2</strong></p>\n<p>实现了威力强大的观察者模式。参考 <code>Java</code>  中的 <code>Observable/Observer</code>  或者 <code>C#</code> 中的 <code>event/delegate</code></p>\n</li>\n</ul>\n<h2 id=\"ref\"><a class=\"markdownIt-Anchor\" href=\"#ref\">#</a> ref</h2>\n<p>C++ 标准库和 Boost 中的算法大量使用了函数对象作为判断式或谓词参数，而这些参数都是传值语义，算法或函数在内部保留函数对象的拷贝并使用，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">square</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 函数对象，计算整数的平方</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> result_type<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 返回结果的类型定义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>\tx <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一般情况下，传值语义都是可行的，但也有很多特殊情况：作为参数的函数对象拷贝代价过高（具有复杂的内部状态），不希望拷贝对象（内部状态不应该被改变），甚至拷贝是不可行的（noncopyable、singleton）。</p>\n<p><code> boost.ref</code>  应用代理模式，引入对象引用的包装器概念解决了这个问题。它位于命名空间 boost，为了使用 ref 组件，需要包含头文件 <code> include &lt;boost/ref.hpp&gt;</code></p>\n<h3 id=\"类摘要\"><a class=\"markdownIt-Anchor\" href=\"#类摘要\">#</a> 类摘要</h3>\n<p>ref 库定义了一个很小很简单的引用类型的包装器，名字叫 reference_wrapper</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">reference_wrapper</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">reference_wrapper</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">t_</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\t\t\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">operator</span> T<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>t_<span class=\"token punctuation\">;</span>\t<span class=\"token punctuation\">&#125;</span>\t\t\t\t\t<span class=\"token comment\">// 隐式转换</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    T<span class=\"token operator\">&amp;</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>t_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 访问被包装的对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    T<span class=\"token operator\">*</span> <span class=\"token function\">get_pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> t_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    T<span class=\"token operator\">*</span> t_<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 保存对象指针</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>reference_wrapper 的构造函数接受类型 T 的引用类型，内部使用指针存储指向 t 的引用，构造出一个 reference_wrapper 对象，从而包装了引用。</p>\n<p>get () 和 get_pointer () 这两个函数分别返回存储的引用和指针，相当于解开对 t 的包装。</p>\n<blockquote>\n<p>reference_wrapper 的构造函数被声明为 explicit，因此必须在创建对象时就赋值初始化，就像是使用一个引用类型的变量。</p>\n</blockquote>\n<p>reference_wrapper 还支持隐式类型转换，可以在需要的语境下返回存储的引用，因此它很像引用类型，能够在任何需要 T 出现的地方使用 reference_wrapper。</p>\n<h3 id=\"基本用法\"><a class=\"markdownIt-Anchor\" href=\"#基本用法\">#</a> 基本用法</h3>\n<h2 id=\"bind\"><a class=\"markdownIt-Anchor\" href=\"#bind\">#</a> bind</h2>\n<p>bind 是对 C++98 标准中函数适配器 bind1st/bind2nd 的泛化和增强，可以适配任意的可调用对象，包括函数指针、函数引用、成员函数指针和函数对象。</p>\n<p>bind 远远地超越了 STL 中的函数绑定器 bind1st/bind2nd，可以绑定最多 9 个函数参数，而且对被绑定对象的要求很低，可以在没有 result_type 内部类型定义的情况下完成对函数对象的绑定。</p>\n<p>bind 位于命名空间 boost，为了使用 bind 组件，需要包含头文件 <code> &lt;boost/bind.hpp&gt;</code> ，即</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/bind.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> boost<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code> bind</code>  库用于将函数对象与参数进行绑定，从而创建一个新的函数对象。这对于在代码中<strong>实现参数传递和延迟求值</strong>非常有用。</p>\n<p><code> bind</code>  库通过使用 <code> _1</code> 、 <code> _2</code>  等占位符来指定函数对象中的参数位置，从而实现参数的绑定。绑定后的函数对象可以像普通函数一样使用。</p>\n</blockquote>\n<h3 id=\"工作原理\"><a class=\"markdownIt-Anchor\" href=\"#工作原理\">#</a> 工作原理</h3>\n<p>bind 并不是一个单独的类或函数，而是非常庞大的家族，依据绑定的参数个数和要绑定的调用对象类型，总数有数十个不同的重载形式，但他们的名字都叫 bind，编译器会根据具体的绑定代码自动确定要使用的正确形式。</p>\n<p>bind 的基本形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token operator\">></span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A1</span><span class=\"token operator\">></span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>F f<span class=\"token punctuation\">,</span> A1 a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>arg<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span> _1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>arg<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">></span> _2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>arg<span class=\"token operator\">&lt;</span><span class=\"token number\">9</span><span class=\"token operator\">></span> _9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>bind 接受的第一个参数必须是一个可调用对象 f，可以是函数、函数指针、函数对象和成员函数指针，之后 bind 接受最多 9 个参数，参数数量必须与 f 的参数数量相等。</p>\n<p>绑定完成后，bind 会返回一个函数对象，它内部保存了 f 的拷贝，具有 operator ()，返回值类型被自动推导为 f 的返回值类型被自动推导为 f 的返回值类型。在发生调用时，这个函数对象把之前存储的参数转发给 f 完成调用。</p>\n<blockquote>\n<p>例如一个函数 <code> func(a1, a2)</code> ，它等价于一个具有无参 operator () 的 bind 函数对象调用 <code> bind(func, a1, a2)</code></p>\n</blockquote>\n<p>这是 bind 最简单的形式。bind 表达式存储了 func 和 a1、a2 的拷贝，产生了一个临时函数对象。因为 func 接受两个参数，而 a1 和 a2 都是实参，因此临时函数对象将具有一个无参的 operator ()。当 operator () 调用发生时函数对象把 a1、a2 的拷贝传递给 func，完成真正的函数调用。</p>\n<p>bind 的真正威力在于它的占位符，他们分别被定义为_1、_2、_3 一直到_9，位于一个匿名命名空间。占位符可以取代 bind 中参数的位置，<strong>在发生函数调用时才接受真正的参数</strong>。</p>\n<p>占位符的名字表示他在调用式中的顺序，而在绑定表达式中没有顺序的要求，_1 不一定要第一个出现，也不一定只出现一次。</p>\n<blockquote>\n<p>例如 <code> bind(func, _2, _1)(a1, a2)</code>  等价于 <code> func(a2, a1)</code></p>\n</blockquote>\n<h3 id=\"绑定普通函数\"><a class=\"markdownIt-Anchor\" href=\"#绑定普通函数\">#</a> 绑定普通函数</h3>\n<p>bind 可以绑定普通函数，可以使用函数名或函数指针。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/bind.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">auto</span> test1 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// f(1, 2)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">auto</span> test2 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// g(1, 2, 3)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">auto</span> test3 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// f(x, 9) </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">auto</span> test4 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// f(x, y)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">auto</span> test5 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// f(y, x)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">auto</span> test6 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//f (x, x), y 参数被忽略</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">auto</span> test7 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// g(x, 8, y)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">auto</span> test8 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> _3<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//g (z, y, y), x 参数被忽略</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> test8 <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>必须绑定表达式中提供函数要求的所有参数，无论是真是参数还是占位符</p>\n</blockquote>\n<p>bind 也可以绑定函数指针</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span> f_type<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 函数指针定义</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g<span class=\"token punctuation\">)</span> g_type<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 函数指针定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    f_type pf <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    g_type pg <span class=\"token operator\">=</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> z <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// (*pf)(x, 9)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>pg<span class=\"token punctuation\">,</span> _3<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// (*pg)(z, y, y)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"绑定类的成员函数\"><a class=\"markdownIt-Anchor\" href=\"#绑定类的成员函数\">#</a> 绑定类的成员函数</h3>\n<p><strong>类的成员函数不同于普通函数，因为成员函数指针不能直接调用 operator ()，它必须被绑定到一个对象或指针，然后才能得到 this 指针进而调用成员函数。因此 bind 需要 “牺牲” 一个占位符的位置，要求用户提供一个类的实例、引用或者指针，通过对象作为第一个参数来调用成员函数。</strong></p>\n<blockquote>\n<p>实际上成员函数的第一个（隐含的）参数就是对象指针。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>X<span class=\"token double-colon punctuation\">::</span>fun<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这意味着使用成员函数时只能最多绑定 8 个参数。</p>\n<p>例如，有一个 demo 类：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    demo a<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 类的实例 a</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    demo <span class=\"token operator\">&amp;</span>ra <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 类的实例 a 的引用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    demo <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 类的实例 a 的指针</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo<span class=\"token double-colon punctuation\">::</span>f<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo<span class=\"token double-colon punctuation\">::</span>f<span class=\"token punctuation\">,</span> ra<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo<span class=\"token double-colon punctuation\">::</span>f<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>必须在成员函数前加上取地址操作符 &amp;，表明这是一个成员函数指针，否则会无法通过编译，这是与绑定普通函数的一个小小的不同。</p>\n</blockquote>\n<blockquote>\n<p>bind 可以绑定成员函数，也可以使用专门用来绑定成员函数的 <code> boost::mem_fn</code> ，它同样被收录进 C++11</p>\n</blockquote>\n<p>示例：使用 bind 搭配标准算法 for_each 用来调用容器中所有对象的 print () 函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/bind.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> boost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">point</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>point<span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>point<span class=\"token double-colon punctuation\">::</span>print<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>bind 同样支持绑定虚拟成员函数，用法与非虚函数相同，虚函数的行为由实际调用发生时的实例来将决定。</p>\n</blockquote>\n<h3 id=\"绑定类的成员变量\"><a class=\"markdownIt-Anchor\" href=\"#绑定类的成员变量\">#</a> 绑定类的成员变量</h3>\n<p>bind 的另一个对类的操作是他可以绑定 public 成员变量，就像是一个选择器，用法和绑定成员函数类似，只需要把成员变量名像一个成员函数一样去使用。</p>\n<p>如上例 point 类，假设我们已经在 vector 中存储了大量的 point 对象，而我们想要得到他们的 x 坐标值：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>point<span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>point<span class=\"token double-colon punctuation\">::</span>x<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code> bind(&amp;point::x, _1)</code>  取出 point 对象的成员变量 x。</li>\n<li><code> transform</code>  算法调用 bind 表达式操作容器 v，这个把成员变量填入到 v2 中。</li>\n</ul>\n<p>使用 bind 也可以实现直接选择出 pair 对的 first 和 second 成员，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> string<span class=\"token operator\">></span> pair_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pair_t <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pair_t<span class=\"token double-colon punctuation\">::</span>first <span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pair_t<span class=\"token double-colon punctuation\">::</span>second<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// string</span></pre></td></tr></table></figure><h3 id=\"绑定函数对象\"><a class=\"markdownIt-Anchor\" href=\"#绑定函数对象\">#</a> 绑定函数对象</h3>\n<p>bind 可以绑定任意的函数对象，包括标准库中的所有与定义的函数对象。</p>\n<h3 id=\"对比c11标准\"><a class=\"markdownIt-Anchor\" href=\"#对比c11标准\">#</a> 对比 C++11 标准</h3>\n<p>C++11 标准使用可变参数模板和完美转发简化了 bind 的定义，支持绑定任意数量的参数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> BoundArgs<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>unspecified <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>F<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">,</span> BoundArgs<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//bind 函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> std<span class=\"token double-colon punctuation\">::</span>placeholders <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">extern</span> unspecified _1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">extern</span> unspecified _2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>std::bind</code>  的用法与 <code>boost::bind</code>  完全相同。但是为了避免冲突，标准占位符位于 <code>std::placeholder</code>  命名空间</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>placeholder<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>另外</p>\n<p>C++11 标准还提供了语言级别的 lambda 表达式，它可以就地声明匿名函数对象，用法非常灵活。lambda 表达式某种程度上也可以代替 bind。捕获列表 [] 相当于绑定的变量，函数参数列表 () 则相当于 bind 的占位符：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> lf <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t<span class=\"token comment\">//lambda 表达式，捕获所有外部变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 调用函数 f, x 占位，绑定一个参数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">lf</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 等价于 bind 表达式</span></pre></td></tr></table></figure><p>相比较，lambda 表达式更类似函数的形式更利于理解。</p>\n<h2 id=\"function\"><a class=\"markdownIt-Anchor\" href=\"#function\">#</a> function</h2>\n<p>function 是一个函数对象的” 容器 “，概念上像是 C/C++ 中函数指针类型的泛化，是一种” 智能函数指针 “。它<strong>以对象的形式封装了原始的函数指针或函数对象</strong>，能够容纳任意符合函数签名的可调用对象。因此它<strong>可以被用于回调机制，暂时保管函数或函数对象，在之后需要的时机再调用，使回调机制拥有更多的弹性</strong>。</p>\n<p>function 可以配合 bind/lambda 使用，存储 bind/lambda 表达式的结果，使 bind/lambda 可以被多次调用。</p>\n<h3 id=\"类摘要-2\"><a class=\"markdownIt-Anchor\" href=\"#类摘要-2\">#</a> 类摘要</h3>\n<p>同 bind 一样，function 也不是一个单独的类，function 可以容纳 0 到 10 个参数的函数，因此多达 11 个类，命名分别为 function0 到 function10。但通常使用一个更通用的 function 类：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">Signature</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">function</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">functionN</span> <span class=\"token operator\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TN</span><span class=\"token operator\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pubilc<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">typedef</span> R \tresult_type<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 内部类型定义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">typedef</span> TN \targN_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> arity <span class=\"token operator\">=</span> N<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 参数个数常量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">F</span><span class=\"token operator\">></span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> function<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 基本操作</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">safe_bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//bool 转型</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Functor</span><span class=\"token operator\">></span> Functor<span class=\"token operator\">*</span> <span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 访问内部元素</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Functor</span><span class=\"token operator\">></span> <span class=\"token keyword\">bool</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Functor<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>type_info<span class=\"token operator\">&amp;</span> <span class=\"token function\">target_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    result_type <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arg1_type<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 调用操作符</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"function的声明\"><a class=\"markdownIt-Anchor\" href=\"#function的声明\">#</a> function 的声明</h3>\n<p>function 只需要一个模板参数，这个参数就是将要容纳的函数类型，例如：</p>\n<p><code> function&lt;int ()&gt; func;</code></p>\n<p>将声明一个可以容纳返回值为 int、无参函数的 function 对象。尖括号中的类型声明就是一个没有函数名的函数原型。它也具有很好的可读性，可以读作 function of int ()，表明这是一个容纳 int () 的 function 对象。</p>\n<p>function 的函数类型声明也可以像真的函数那样带有参数名，例如</p>\n<p><code> function&lt;int (int a, int b, int c)&gt; func2;</code>  与 <code> function&lt;int (int , int , int)&gt; func2;</code>  是完全等价的。</p>\n<blockquote>\n<p>如果我们已经知道将要容纳的函数，那么也可以用 C++11 关键字 decltype 来直接获取函数类型。例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 使用 decltype 推导函数类型</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"操作函数\"><a class=\"markdownIt-Anchor\" href=\"#操作函数\">#</a> 操作函数</h3>\n<p>function 的构造函数可以接受任意符合模板中声明的函数类型的可调用对象，如函数指针和函数对象，或是另一个 function 对象的引用，之后在内部存储一份它的拷贝。</p>\n<h3 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\">#</a> 用法</h3>\n<p>function 就像是一个函数的容器，也可以把 function 想象成一个泛化的函数指针，只要符合它声明中的函数类型，任何普通函数、成员函数、函数对象都可以存储在 function 对象中，然后在任何需要的时候被调用。</p>\n<p>这种能够容纳任意可调用对象的能力是非常重要的，在编写泛型代码的时候尤其有用，他使我们可以接受任意的函数或者函数对象，增加程序的灵活性。与原始的函数指针相比，function 对象的体积更大（3 个指针大小），速度稍慢（10% 左右的性能差异）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/function.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> boost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 无参构造一个 function 对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 此时 function 不持有任何对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    func <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//func 存储函数 f</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 验证已存储函数 f</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 调用 function 的 operator ()</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    func <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//function 清空，相当于 clear ()</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只要函数签名式一致，function 也可以存储成员函数和函数对象，或者是 bind/lambda 表达式。假设有一个类 demo_class，它既有普通成员函数，又重载了 operator ()：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">demo_class</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t<span class=\"token comment\">// 加法操作</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 重载 operator ()</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>demo_class<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>func1 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo_class<span class=\"token double-colon punctuation\">::</span>add<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>demo_class sc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>存储成员函数时可以<strong>直接在 function 声明的函数签名式中指定类的类型，然后用 bind 绑定成员函数</strong>：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>demo_class<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>func1 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo_class<span class=\"token double-colon punctuation\">::</span>add<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>demo_class sc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>也可以在函数类型中<strong>仅写出成员函数的签名，在 bind 时直接绑定类的实例</strong>：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>func <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo_class<span class=\"token double-colon punctuation\">::</span>add<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"使用ref库\"><a class=\"markdownIt-Anchor\" href=\"#使用ref库\">#</a> 使用 ref 库</h3>\n<p>function 使用拷贝语义保存参数，当参数很大时拷贝的代价往往很高，或者有时不能拷贝参数。</p>\n<p>这时可以使用 ref 库，它允许以引用的方式传递参数，能够降低 function 拷贝的代价。</p>\n<p>function 并不要求 ref 库提供 operator ()，因为它能够自动识别包装类 reference_wrapper，并调用 get () 方法获得被包装的对象：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>demo_class sc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>func <span class=\"token operator\">=</span> <span class=\"token function\">cref</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 使用 cref () 函数包装常对象的引用，cref () 是一个常引用包装只能调用 const 成员对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 调用被引用的对象</span></pre></td></tr></table></figure><h3 id=\"用于回调\"><a class=\"markdownIt-Anchor\" href=\"#用于回调\">#</a> 用于回调</h3>\n<p>function 可以容纳任意符合函数签名式的可调用物，因此它非常适合代替函数指针，存储用于回调的函数。</p>\n<p>作为示例，定义一个 demo 类，它使用 function 代替函数指针作为内部类型保存回调函数，存储形式为 void (int) 的可调用物：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">demo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func_t<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//function 类型定义</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    func_t func<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">//function 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 内部成员变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">n</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">CallBack</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>CallBack f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        func <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 存储回调函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//demo 类定义结束</span></pre></td></tr></table></figure><ul>\n<li>demo 类使用模板函数 accept () 接受回调函数。之所以使用模板函数，是因为这种形式更加灵活，用户可以在不知道也不关心内部存储形式的情况下传递任何可调用对象，包括函数指针和函数对象</li>\n<li>demo 类的成员函数 run () 用于调用回调函数</li>\n</ul>\n<p>接下来定义一个用于回调的函数，他将输入翻倍：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">call_back_func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"call_back_func:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>demo 的回调可以这样使用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    demo <span class=\"token function\">dc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>call_back_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 接受回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 调用回调函数，输出 “call_back_func:20”</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<p>使用普通函数进行回调并不能体现 function 的好处，</p>\n<hr>\n<p>function 还可以搭配 bind 库，把 bind 表达式作为回调函数，可以<strong>接受类成员函数</strong>，或者把不符合函数签名式的函数 bind 转为可接受的形式。</p>\n<p>示例如下，定义一个回调函数工厂类，他有两个回调函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">call_back_factory</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">call_back_func1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"call_back_factory1:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">call_back_func2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"call_back_factory2:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">*</span> j <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    demo <span class=\"token function\">dc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    call_back_factory cbf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>call_back_factory<span class=\"token double-colon punctuation\">::</span>call_bcak_func1<span class=\"token punctuation\">,</span> cbf<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 输出：call_back_factory1:20</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>call_back_factory<span class=\"token double-colon punctuation\">::</span>call_bcak_func2<span class=\"token punctuation\">,</span> cbf<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 输出：call_back_factory2:100</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>通过以上示例可以看到 function 用于回调的好处，它无需改变回调的接口就可以解耦客户代码，使客户代码不必绑死在一种回调形式上，进而可以持续演化，而 function 始终能够保持与客户代码争取沟通。</p>\n</blockquote>\n<h3 id=\"对比c11的auto\"><a class=\"markdownIt-Anchor\" href=\"#对比c11的auto\">#</a> 对比 C++11 的 auto</h3>\n<p>一些情况下，C++11 的新关键字 auto 可以近似地取代 function，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> func <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 存储一个普通函数指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>demo sc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span> func2 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo<span class=\"token double-colon punctuation\">::</span>add<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 存储一个 bind 表达式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>但他们的实现大不相同。</strong></p>\n<ul>\n<li>function 类似一个容器，可以容纳任意有 operator () 的类型（函数指针、函数对象、lambda 表达式），它是运行时的，可以任意拷贝、赋值、存储其他可调用物。</li>\n<li>auto 仅是编译器推导出的一个静态类型变量，他很难再赋以其他值，也无法容纳其他类型，不能用于泛型编程。</li>\n</ul>\n<p>当需要存储一个可调用物用于回调时，最好使用 function，它具有更多的灵活性，特别是把回调作为类的一个成员的时候我们只能使用 function。</p>\n<p>auto 的优点在于，它的类型是在编译器推导的，没有运行时开销，效率上要比 function 略高一点，但他声明的变量不能存储其他类型的可调用物，不具有灵活性，只能用于有限范围的延后回调。</p>\n<h3 id=\"对比c11的stdfunction\"><a class=\"markdownIt-Anchor\" href=\"#对比c11的stdfunction\">#</a> 对比 C++11 的 std::function</h3>\n<p>C++11 标准定义了 <code> std::function</code> ，声明摘要如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> ArgTypes<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">function</span><span class=\"token operator\">&lt;</span><span class=\"token function\">R</span><span class=\"token punctuation\">(</span>ArgTypes<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token operator\">></span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>function<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 交换函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>F<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> A<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 显式 bool 转型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    R <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ArgTypes<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// operator()</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>type_info<span class=\"token operator\">&amp;</span> <span class=\"token function\">target_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> T<span class=\"token operator\">*</span> <span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>std::function</code>  与 <code>boost::function</code>  基本相同，只有少量区别：</p>\n<ul>\n<li>\n<p>没有 <code>clear()</code>  和 <code>empty()</code>  成员函数；</p>\n</li>\n<li>\n<p>提供 <code>assign()</code>  成员函数；</p>\n</li>\n<li>\n<p><code>explicit()</code>  显式 bool 转型。</p>\n<p>因此，同 shared_ptr 一样，在函数返回值或者函数参数等语境里转型 bool 需要使用 <code>static_cast&lt;bool&gt;(f)</code>  或者 <code>!!f</code>  的形式。</p>\n</li>\n</ul>\n",
            "tags": [
                "C++",
                "Boost"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/02/VS%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "url": "https://adventure-yx.github.io/2023/06/02/VS%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "title": "字符集和Visual Studio中的字符处理",
            "date_published": "2023-06-02T07:12:08.000Z",
            "content_html": "<h1 id=\"字符集\"><a class=\"markdownIt-Anchor\" href=\"#字符集\">#</a> 字符集</h1>\n<ul>\n<li>\n<p>ASCII（American Standard Code for Information Interchange）</p>\n<p>一个字节（8bit）表示的字符编码，其中只用到了前 7 位，表示 127 个字符。</p>\n</li>\n<li>\n<p>ANSI 多字节字符集（American National Standard Institute）</p>\n<p>由字节数据的最高位判断：</p>\n<ul>\n<li>最高位为 0，代表是单字节，按照 ASCII 表进行编码</li>\n<li>最高位为 1，代表是本地化扩展字符，需要将相邻的两个字节组成一个整体，来进行码值求取，得到的码值对应的本地化字符集中可以得到相应的字符是什么。\n<ul>\n<li>简体中文系统下，ANSI 编码代表 GB2312 编码 (GBK 是 GB2312 的扩展，兼容 GB2312)</li>\n<li>繁体中文系统下，ANSI 编码代表 BIG5 编码</li>\n<li>日文系统下，ANSI 编码代表 JIS 编码</li>\n</ul>\n</li>\n<li>不同 ANSI 编码之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中。需要将不同的 ANSI 编码都转换成 UTF-8 编码，进而存储。</li>\n</ul>\n</li>\n<li>\n<p>Unicode 编码（Universal Multiple-Octet Coded Character Set，通用多八位编码字符集）</p>\n<p>国际组织制定的可以容纳世界上所有文字和字符的编码方案，使用定宽 2 个字节 <code>Ox0000-OxFFFF</code>  来表示一个字符。对于英文浪费了一个字节。</p>\n</li>\n<li>\n<p>UTF-8（8bit Unicode Transformation Format，8 位 Unicode 通用转换格式）</p>\n<p>UTF-8 是 Unicode 的实现方式之一，是一种针对 Unicode 的可变长度字符编码，使用 1-4 个字节进行编码</p>\n<p>对单字节字符，第一位为 0，后 7 位与 ASCII 码一致。</p>\n</li>\n<li>\n<p>UTF-16</p>\n<p>可变长度字符编码，将字符编码成 2 字节或者 4 字节</p>\n</li>\n<li>\n<p>UTF-32</p>\n<p>固定长度的编码，始终占用 4 字节。</p>\n</li>\n</ul>\n<h1 id=\"字符类型\"><a class=\"markdownIt-Anchor\" href=\"#字符类型\">#</a> 字符类型</h1>\n<ul>\n<li>\n<p><strong>char</strong></p>\n<p>字符型，单位是字节，占 8bit</p>\n</li>\n<li>\n<p><strong>wchar_t</strong></p>\n<p>宽字符，单位是双字节，占 16bit</p>\n<p>wchar_t 是 Unicode 定义的数据类型，定义在 <code>&lt;string.h&gt;</code>  中。在 ANSI 中使用 wchar_t 会报错，wchar_t 类型的字符是按 Unicode 的编码方式存储的。</p>\n<blockquote>\n<p>给 wchar_t 类型变量赋值时，要注意类型以及编码方式是否匹配。</p>\n<p><code>wchar_t *str = L&quot;aaabbb&quot;;</code></p>\n<p>str 是 wchar_t 类型，而 wchar_t 是 Unicode 数据类型，所以后面的字符串要用 L 指令转化为 Unicode 编码</p>\n</blockquote>\n</li>\n<li>\n<p><strong>TCHAR</strong></p>\n<p>TCHAR 是一个宏，并不是实际的某一个类型。当使用多字节字符集时，TCHAR 就是 char；当使用 Unicode 字符集时，TCHAR 就可以当作 wchar_t 来用。使用 TCHAR，编译器会根据我们字符集来进行相应的转化。TCHAR 定义在 &lt;tchar.h&gt; 中，使用要先包含头文件。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span>  <span class=\"token expression\">UNICODE</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">wchar_t</span> TCHAR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> TCHAR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>LPSTR</strong>：32bit 指针，指向一个字符串，每个字符占 1 个字节。相当于 <code>char*</code></p>\n</li>\n<li>\n<p><strong>LPCSTR</strong>：32bit 指针，指向一个常字符串，每个字符占 1 个字节。相当于 <code>const char*</code></p>\n</li>\n<li>\n<p><strong>LPTSTR</strong>：32bit 指针，指向一个字符串，每个字节可能占 1 个字节或 2 个字节，取决于 Unicode 是否定义。相当于 <code>tchar*</code></p>\n</li>\n<li>\n<p><strong>LPCTSTR</strong>：32bit 指针，指向一个常字符串，每个字节可能占 1 个字节或 2 个字节，取决于 Unicode 是否定义。相当于 <code>const tchar*</code></p>\n</li>\n<li>\n<p><strong>LPWSTR</strong>：32bit 指针，指向一个 Unicode 字符串的指针，每个字符占 2 字节。相当于 <code>wchar_t*</code></p>\n</li>\n<li>\n<p><strong>LPCWSTR</strong>：32bit 指针，指向一个 Unicode 常字符串的指针，每个字符占 2 字节。相当于 <code>const wchar_t*</code></p>\n</li>\n</ul>\n<h1 id=\"l指令\"><a class=\"markdownIt-Anchor\" href=\"#l指令\">#</a> L 指令</h1>\n<p>字符串前面加 L 表示该字符串是 Unicode 字符串，可以将 ANSI 字符串转换为 Unicode 字符串，就是每个字符占 2 个字节。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"_t宏\"><a class=\"markdownIt-Anchor\" href=\"#_t宏\">#</a> _T () 宏</h1>\n<p>_T (&quot;&quot;) 是一个宏定义在 tchar.h 下。</p>\n<p>_T () 或者 TEXT () 宏，可以把引号括起来的字符串，根据环境选择合适的编码方式。</p>\n<ul>\n<li>如果定义的是 Unicode，那么_T (“abc”) 就相当于 L&quot;abc&quot;，也就是宽字符；</li>\n<li>如果是多字节编码，那么英文采用单字节，汉字采用单字节；</li>\n<li>在 Unicode 环境下，要求 LPCWSTR 的地方不可以给一个 char*，而在多字节编码下可以。</li>\n</ul>\n<blockquote>\n<p>Windows 使用两种字符集 ANSI 和 UNICODE，前者就是通常使用的单字节方式，但这种方式处理中文这样的双字节字符不方便，容易出现半个汉字的情况。而后者是双字节，方便处理双字节字符。Windows NT 的所有与字符有关的函数都提供两种方式的版本，Windows 9x 只支持 ANSI 方式。</p>\n</blockquote>\n<blockquote>\n<p>比如</p>\n<p><code>wchar_t Str[] = L&quot;Hello World!&quot;;</code>  是双字节存储字符串，_T 是与之适配的宏。</p>\n</blockquote>\n<p>当有 <code>#ifdef _UNICODE</code>  的时候，_T () 就是 L；</p>\n<p>当没有 <code>#ifdef _UNICODE</code>  的时候，_T () 就是 ANSI 的。</p>\n<h1 id=\"mfc中cstring和stdstring的转换\"><a class=\"markdownIt-Anchor\" href=\"#mfc中cstring和stdstring的转换\">#</a> MFC 中 CString 和 std::string 的转换</h1>\n<p>CString 实际是 CStringT，也就是模板类</p>\n<p>在 Unicode 环境下，实际是 CStringW</p>\n<p>在多字符集环境下，实际是 CStringA</p>\n<p>std::string 是多字符集环境下的</p>\n<h2 id=\"unicode环境下\"><a class=\"markdownIt-Anchor\" href=\"#unicode环境下\">#</a> Unicode 环境下</h2>\n<ul>\n<li>\n<p>CString 转换 std::string</p>\n<p>CString 实际是 CStringW，要转换为多字符集，需要进行转码。使用 WideCharToMultiByte 转换成多字符集，然后再构造 std::string</p>\n</li>\n<li>\n<p>std::string 转换 CString</p>\n<p>CStringT 模板类会自动做 char* 到 wchar_t * 的转码</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//CString -> std::string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">strCS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>USES_CONVERSION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">strS</span><span class=\"token punctuation\">(</span><span class=\"token function\">W2A</span><span class=\"token punctuation\">(</span>strCS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//std::string -> CString</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CString strCStemp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>strCStemp <span class=\"token operator\">=</span> strS<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 不能写在同一行</span></pre></td></tr></table></figure><h2 id=\"多字符集环境下\"><a class=\"markdownIt-Anchor\" href=\"#多字符集环境下\">#</a> 多字符集环境下</h2>\n<p>CString 就是 CStringA</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//CString -> std::string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">strCS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string str1 str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>str1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">GetBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CStringA<span class=\"token punctuation\">)</span>str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//std::string -> CString</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string strTemp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>CString str <span class=\"token operator\">=</span> strTemp<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// 可以写在一行</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/02/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8CVisual%20Studio%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "url": "https://adventure-yx.github.io/2023/06/02/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8CVisual%20Studio%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "title": "字符集和Visual Studio中的字符处理",
            "date_published": "2023-06-02T07:12:08.000Z",
            "content_html": "<h1 id=\"字符集\"><a class=\"markdownIt-Anchor\" href=\"#字符集\">#</a> 字符集</h1>\n<ul>\n<li>\n<p>ASCII（American Standard Code for Information Interchange）</p>\n<p>一个字节（8bit）表示的字符编码，其中只用到了前 7 位，表示 127 个字符。</p>\n</li>\n<li>\n<p>ANSI 多字节字符集（American National Standard Institute）</p>\n<p>由字节数据的最高位判断：</p>\n<ul>\n<li>最高位为 0，代表是单字节，按照 ASCII 表进行编码</li>\n<li>最高位为 1，代表是本地化扩展字符，需要将相邻的两个字节组成一个整体，来进行码值求取，得到的码值对应的本地化字符集中可以得到相应的字符是什么。\n<ul>\n<li>简体中文系统下，ANSI 编码代表 GB2312 编码 (GBK 是 GB2312 的扩展，兼容 GB2312)</li>\n<li>繁体中文系统下，ANSI 编码代表 BIG5 编码</li>\n<li>日文系统下，ANSI 编码代表 JIS 编码</li>\n</ul>\n</li>\n<li>不同 ANSI 编码之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中。需要将不同的 ANSI 编码都转换成 UTF-8 编码，进而存储。</li>\n</ul>\n</li>\n<li>\n<p>Unicode 编码（Universal Multiple-Octet Coded Character Set，通用多八位编码字符集）</p>\n<p>国际组织制定的可以容纳世界上所有文字和字符的编码方案，使用定宽 2 个字节 <code>Ox0000-OxFFFF</code>  来表示一个字符。对于英文浪费了一个字节。</p>\n</li>\n<li>\n<p>UTF-8（8bit Unicode Transformation Format，8 位 Unicode 通用转换格式）</p>\n<p>UTF-8 是 Unicode 的实现方式之一，是一种针对 Unicode 的可变长度字符编码，使用 1-4 个字节进行编码</p>\n<p>对单字节字符，第一位为 0，后 7 位与 ASCII 码一致。</p>\n</li>\n<li>\n<p>UTF-16</p>\n<p>可变长度字符编码，将字符编码成 2 字节或者 4 字节</p>\n</li>\n<li>\n<p>UTF-32</p>\n<p>固定长度的编码，始终占用 4 字节。</p>\n</li>\n</ul>\n<h1 id=\"字符类型\"><a class=\"markdownIt-Anchor\" href=\"#字符类型\">#</a> 字符类型</h1>\n<ul>\n<li>\n<p><strong>char</strong></p>\n<p>字符型，单位是字节，占 8bit</p>\n</li>\n<li>\n<p><strong>wchar_t</strong></p>\n<p>宽字符，单位是双字节，占 16bit</p>\n<p>wchar_t 是 Unicode 定义的数据类型，定义在 <code>&lt;string.h&gt;</code>  中。在 ANSI 中使用 wchar_t 会报错，wchar_t 类型的字符是按 Unicode 的编码方式存储的。</p>\n<blockquote>\n<p>给 wchar_t 类型变量赋值时，要注意类型以及编码方式是否匹配。</p>\n<p><code>wchar_t *str = L&quot;aaabbb&quot;;</code></p>\n<p>str 是 wchar_t 类型，而 wchar_t 是 Unicode 数据类型，所以后面的字符串要用 L 指令转化为 Unicode 编码</p>\n</blockquote>\n</li>\n<li>\n<p><strong>TCHAR</strong></p>\n<p>TCHAR 是一个宏，并不是实际的某一个类型。当使用多字节字符集时，TCHAR 就是 char；当使用 Unicode 字符集时，TCHAR 就可以当作 wchar_t 来用。使用 TCHAR，编译器会根据我们字符集来进行相应的转化。TCHAR 定义在 &lt;tchar.h&gt; 中，使用要先包含头文件。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span>  <span class=\"token expression\">UNICODE</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">wchar_t</span> TCHAR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> TCHAR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>LPSTR</strong>：32bit 指针，指向一个字符串，每个字符占 1 个字节。相当于 <code>char*</code></p>\n</li>\n<li>\n<p><strong>LPCSTR</strong>：32bit 指针，指向一个常字符串，每个字符占 1 个字节。相当于 <code>const char*</code></p>\n</li>\n<li>\n<p><strong>LPTSTR</strong>：32bit 指针，指向一个字符串，每个字节可能占 1 个字节或 2 个字节，取决于 Unicode 是否定义。相当于 <code>tchar*</code></p>\n</li>\n<li>\n<p><strong>LPCTSTR</strong>：32bit 指针，指向一个常字符串，每个字节可能占 1 个字节或 2 个字节，取决于 Unicode 是否定义。相当于 <code>const tchar*</code></p>\n</li>\n<li>\n<p><strong>LPWSTR</strong>：32bit 指针，指向一个 Unicode 字符串的指针，每个字符占 2 字节。相当于 <code>wchar_t*</code></p>\n</li>\n<li>\n<p><strong>LPCWSTR</strong>：32bit 指针，指向一个 Unicode 常字符串的指针，每个字符占 2 字节。相当于 <code>const wchar_t*</code></p>\n</li>\n</ul>\n<h1 id=\"l指令\"><a class=\"markdownIt-Anchor\" href=\"#l指令\">#</a> L 指令</h1>\n<p>字符串前面加 L 表示该字符串是 Unicode 字符串，可以将 ANSI 字符串转换为 Unicode 字符串，就是每个字符占 2 个字节。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"_t宏\"><a class=\"markdownIt-Anchor\" href=\"#_t宏\">#</a> _T () 宏</h1>\n<p>_T (&quot;&quot;) 是一个宏定义在 tchar.h 下。</p>\n<p>_T () 或者 TEXT () 宏，可以把引号括起来的字符串，根据环境选择合适的编码方式。</p>\n<ul>\n<li>如果定义的是 Unicode，那么_T (“abc”) 就相当于 L&quot;abc&quot;，也就是宽字符；</li>\n<li>如果是多字节编码，那么英文采用单字节，汉字采用单字节；</li>\n<li>在 Unicode 环境下，要求 LPCWSTR 的地方不可以给一个 char*，而在多字节编码下可以。</li>\n</ul>\n<blockquote>\n<p>Windows 使用两种字符集 ANSI 和 UNICODE，前者就是通常使用的单字节方式，但这种方式处理中文这样的双字节字符不方便，容易出现半个汉字的情况。而后者是双字节，方便处理双字节字符。Windows NT 的所有与字符有关的函数都提供两种方式的版本，Windows 9x 只支持 ANSI 方式。</p>\n</blockquote>\n<blockquote>\n<p>比如</p>\n<p><code>wchar_t Str[] = L&quot;Hello World!&quot;;</code>  是双字节存储字符串，_T 是与之适配的宏。</p>\n</blockquote>\n<p>当有 <code>#ifdef _UNICODE</code>  的时候，_T () 就是 L；</p>\n<p>当没有 <code>#ifdef _UNICODE</code>  的时候，_T () 就是 ANSI 的。</p>\n<h1 id=\"mfc中cstring和stdstring的转换\"><a class=\"markdownIt-Anchor\" href=\"#mfc中cstring和stdstring的转换\">#</a> MFC 中 CString 和 std::string 的转换</h1>\n<p>CString 实际是 CStringT，也就是模板类</p>\n<p>在 Unicode 环境下，实际是 CStringW</p>\n<p>在多字符集环境下，实际是 CStringA</p>\n<p>std::string 是多字符集环境下的</p>\n<h2 id=\"unicode环境下\"><a class=\"markdownIt-Anchor\" href=\"#unicode环境下\">#</a> Unicode 环境下</h2>\n<ul>\n<li>\n<p>CString 转换 std::string</p>\n<p>CString 实际是 CStringW，要转换为多字符集，需要进行转码。使用 WideCharToMultiByte 转换成多字符集，然后再构造 std::string</p>\n</li>\n<li>\n<p>std::string 转换 CString</p>\n<p>CStringT 模板类会自动做 char* 到 wchar_t * 的转码</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//CString -> std::string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">strCS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>USES_CONVERSION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">strS</span><span class=\"token punctuation\">(</span><span class=\"token function\">W2A</span><span class=\"token punctuation\">(</span>strCS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//std::string -> CString</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CString strCStemp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>strCStemp <span class=\"token operator\">=</span> strS<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 不能写在同一行</span></pre></td></tr></table></figure><h2 id=\"多字符集环境下\"><a class=\"markdownIt-Anchor\" href=\"#多字符集环境下\">#</a> 多字符集环境下</h2>\n<p>CString 就是 CStringA</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//CString -> std::string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">strCS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string str1 str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>str1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">GetBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CStringA<span class=\"token punctuation\">)</span>str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//std::string -> CString</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string strTemp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>CString str <span class=\"token operator\">=</span> strTemp<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// 可以写在一行</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/05/25/MFC/",
            "url": "https://adventure-yx.github.io/2023/05/25/MFC/",
            "title": "MFC",
            "date_published": "2023-05-25T02:12:08.000Z",
            "content_html": "<h1 id=\"vs应用程序工程中文件的组成结构\"><a class=\"markdownIt-Anchor\" href=\"#vs应用程序工程中文件的组成结构\">#</a> VS 应用程序工程中文件的组成结构</h1>\n<p>如果已经以 Debug 方式编译链接过程序，则会在解决方案文件夹下和工程子文件夹下各有一个名为 “Debug” 的文件夹，而如果是 Release 方式编译则会有名为 “Release” 的文件夹。这两种编译方式将产生两种不同版本的可执行文件：</p>\n<ul>\n<li>\n<p>Debug 版本</p>\n<p>可执行文件中包含了用于调试的信息和代码。</p>\n</li>\n<li>\n<p>Release 版本</p>\n<p>没有调试信息，不能进行调试，但可执行文件较小。</p>\n</li>\n</ul>\n<p>工程中文件结构：</p>\n<ol>\n<li>\n<p>解决方案相关文件</p>\n<p>包括解决方案文件夹下的.sdf 文件、.sln 文件、.suo 文件和 ipch 文件夹。</p>\n<p>.sdf 文件和 ipch 目录一般与智能提示、错误提示、代码恢复和团队本地仓库有关。</p>\n<p>.sln 文件和.suo 文件为 MFC 自动生成的解决方案文件，它包含当前解决方案中的工程信息，存储解决方案的设置。</p>\n</li>\n<li>\n<p>工程相关文件</p>\n<p>包括工程文件夹下的.vcxproj 文件和.vcxproj.filters 文件。</p>\n<p>.vcxproj 文件是 MFC 生成的工程文件，它包含当前工程的设置和工程所包含的文件等信息。</p>\n<p>.vcxproj.filters 文件存放工程的虚拟目录信息，也就是在解决方案浏览器中的目录结构信息。</p>\n</li>\n<li>\n<p>应用程序头文件和源文件</p>\n<p>应用程序向导（MFC Application Wizard）会根据应用程序的类型（单文档、多文档或基于对话框的程序）自动生成一些头文件和源文件，这些文件是工程的主体部分，用于实现主框架、文档、视图等。</p>\n<ul>\n<li>HelloWorld.h：应用程序的主头文件。主要包含由 CWinAppEx 类派生的 CHelloWorldApp 类的声明，以及 CHelloWorldApp 类的全局对象 theApp 的声明。</li>\n<li>HelloWorld.cpp：应用程序的主源文件。主要包含 CHelloWorldApp 类的实现，CHelloWorldApp 类的全局对象 theApp 的声明。</li>\n<li>MainFrm.h 和 MainFrm.cpp：从 CFrameWndEx 类派生出 CMainFrame 类，用于创建主框架、菜单栏、工具栏、状态栏等。</li>\n<li>HelloWorldDoc.h 和 HelloWorldDoc.cpp：从 CDocument 类派生出 CHelloWorldDoc 文档类，包含一些用来初始化文档、串行化（保存和装入）文档和调试的成员函数。</li>\n<li>HelloWorldView.h 和 HelloWorldView.cpp：从 CView 类派生出 CHelloWorldView 视图类，用来显示和打印文档数据，包含了一些绘图和用于调试的成员函数。</li>\n<li>ClassView.h 和 ClassView.cpp：从 CDockablePane 类派生出 CClassView 类，用于实现应用程序左侧面板的 Class View。</li>\n<li>FlieView.h 和 FlieView.cpp：从 CDockablePane 类派生出 CFlieView 类，用于实现应用程序左侧面板的 Flie View。</li>\n<li>OutputWnd.h 和 OutputWnd.cpp：从 CDockablePane 类派生出 COutputWnd 类，用于实现应用程序下侧面板的 Output。</li>\n<li>PropertiesWnd.h 和 PropertiesWnd.cpp：从 CDockablePane 类派生出 CPropertiesWnd 类，用于实现应用程序右侧面板的 Properties。</li>\n<li>ViewTree.h 和 ViewTree.cpp：由 CTreeCtrl 类派生出 CViewTree 类，用于实现出现在 ClassView 和 FileView 中的树视图。</li>\n</ul>\n</li>\n<li>\n<p>资源文件</p>\n<p>一般使用 MFC 生成窗口程序都会有对话框、图标、菜单等资源，应用程序向导会生成资源相关文件：res 目录、HelloWorld.rc 文件和 Resource.h 文件。</p>\n<ul>\n<li>res 目录：工程文件夹下的 res 目录中含有应用程序默认图标、工具栏使用图标等图标文件。</li>\n<li>HelloWorld.rc：包含默认菜单定义、字符串表和加速键表，制定了默认的 About 对话框和应用程序默认图标文件等。</li>\n<li>Resource.h：含有各种资源的 ID 定义。</li>\n</ul>\n</li>\n<li>\n<p>预编译头文件</p>\n<p>几乎所有 MFC 程序的文件都要包含 afxwin.h 等文件（外部依赖项），如果每次都编译一次则会大大减慢编译速度。所以把常用的 MFC 头文件都放到了 stdafx.h 中，然后由 stdafx.cpp 包含 stdafx.h 文件，编译器对 stdafx.cpp 只编译一次，并生成编译后的预编译头 HelloWorld.pch（Precomplied Header Flie），大大提高了编译效率。</p>\n</li>\n<li>\n<p>编译链接生成的文件</p>\n<p>工程文件夹下的 Debug 和 Release 子文件夹中包含了编译链接时产生的中间文件。</p>\n<p>解决方案文件夹下的 Debug 和 Release 子文件夹中主要包含有应用程序的可执行文件。</p>\n</li>\n</ol>\n<h1 id=\"mfc应用程序框架分析\"><a class=\"markdownIt-Anchor\" href=\"#mfc应用程序框架分析\">#</a> MFC 应用程序框架分析</h1>\n<p>程序运行都有入口函数，Windows 应用程序的入口函数时 WinMain 函数，MFC 程序也是从 WinMain 函数开始的。</p>\n<ul>\n<li>MFC 应用程序，使用 MFC 库，应用程序框架开发。</li>\n<li>SDK 应用程序，不使用 MFC 库，直接用 Windows API 函数进行软件开发。</li>\n</ul>\n<h2 id=\"sdk应用程序\"><a class=\"markdownIt-Anchor\" href=\"#sdk应用程序\">#</a> SDK 应用程序</h2>\n<pre><code class=\"language-cpp\">\n</code></pre>\n<h3 id=\"程序运行流程\"><a class=\"markdownIt-Anchor\" href=\"#程序运行流程\">#</a> 程序运行流程</h3>\n<ol>\n<li>进入 WinMain 函数</li>\n<li>初始化 WNDCLASSEX，调用 RegisterClassEx 函数注册窗口类</li>\n<li>调用 ShowWindow 和 UpdateWindow 函数显示并更新窗口</li>\n<li>进入消息循环</li>\n</ol>\n<blockquote>\n<p>关于消息循环</p>\n<p>Windows 应用程序是消息驱动的，系统或用户让应用程序进行某项操作或完成某个任务时会发送消息，进入程序的消息队列，然后消息循环会将消息队列中的消息取出，交予相应的窗口过程处理。</p>\n</blockquote>\n<h2 id=\"mfc应用程序\"><a class=\"markdownIt-Anchor\" href=\"#mfc应用程序\">#</a> MFC 应用程序</h2>\n<blockquote>\n<p>SDK 应用程序和 MFC 应用程序对比</p>\n<p>运行流程是类似的，都是先进行初始化过程，再注册并创建窗口，然后显示、更新窗口，最后进入消息循环，消息都由窗口过程函数处理。</p>\n</blockquote>\n<h2 id=\"mfc应用程序框架主要类之间的关系\"><a class=\"markdownIt-Anchor\" href=\"#mfc应用程序框架主要类之间的关系\">#</a> MFC 应用程序框架主要类之间的关系</h2>\n<p>自动生成的框架中比较重要的类包括：CHelloWorldApp、CMainFrame、CHelloWorldDoc 和 CHelloWorldView</p>\n<p>CHelloWorldApp 类处理消息，将收到的消息分发给相应的对象。</p>\n<p>CMainFrame 类是视图类 CHelloWorldView 的父窗口，CHelloWorldView 就显示在 CMainFrame 的客户区中。</p>\n<p>视图类 CHelloWorldView 用来显示文档类 CHelloWorldDoc 中的数据，并根据对视图类的操作修改文档类的数据。一个视图类只能跟一个文档类相联系，而一个文档类可以跟多个视图类相联系。</p>\n<h1 id=\"mfc消息映射机制\"><a class=\"markdownIt-Anchor\" href=\"#mfc消息映射机制\">#</a> MFC 消息映射机制</h1>\n<p>Windows 应用程序是消息驱动的。在 MFC 软件开发中，界面操作或者线程之间通信都会用到消息，通过对消息的处理实现相应的操作。比较典型的过程是，用户操作窗口，然后有消息产生，送给窗口的消息处理函数处理，对用户的操作做出响应。</p>\n<h2 id=\"什么是消息\"><a class=\"markdownIt-Anchor\" href=\"#什么是消息\">#</a> 什么是消息</h2>\n<p>窗口消息一般由三个部分组成：</p>\n<ul>\n<li>一个无符号整数，是消息值；</li>\n<li>消息附带的 WPARAM 类型的参数；</li>\n<li>消息附带的 LPARAM 类型的参数。</li>\n</ul>\n<p>实际一般所说的是狭义上的消息值，也就是一个无符号整数，经常被定义为宏。</p>\n<h2 id=\"什么是消息映射机制\"><a class=\"markdownIt-Anchor\" href=\"#什么是消息映射机制\">#</a> 什么是消息映射机制</h2>\n<p>MFC 使用一种消息映射机制来处理消息，在应用程序框架中的表现就是，<strong>一个消息与消息处理函数 —— 对应的消息映射表，以及消息处理函数的声明和实现等代码</strong>。</p>\n<p>当窗口收到消息时，会到消息映射表中查找该消息对应的消息处理函数，然后由消息处理函数进行相应的处理。</p>\n<p>SDK 编程时需要在窗口过程中 —— 判断消息值进行相应的处理，相比之下 MFC 的消息映射机制要方便好用的多。</p>\n<h2 id=\"windows消息分类\"><a class=\"markdownIt-Anchor\" href=\"#windows消息分类\">#</a> Windows 消息分类</h2>\n<p>Windows 消息分为<strong>系统消息</strong>和<strong>用户自定义消息</strong>。系统消息有三种：</p>\n<ul>\n<li>标准 Windows 消息。除 WM_COMMAND 外的 WM_开头的消息是标准消息。例如：WM_CREATE、WM_CLOSE。</li>\n<li>命令消息。WM_COMMAND，消息中附带了标志符 ID 来区分是来自哪个菜单、工具栏按钮或加速键的消息。</li>\n<li>通知消息。通知消息一般由列表框等子窗口发送给父窗口，消息名也是 WM_COMMAND，其中附带了控件通知码来区分控件。</li>\n</ul>\n<p>CWnd 的派生类都可以接收到标准 Windows 消息、通知消息和命令消息。命令消息还可以由文档类等接收。</p>\n<p>用户自定义消息实际上就是用户定义一个宏作为消息，此宏的值应该大于等于 WM_USER，然后宏就可以跟系统消息一样使用，窗口类中可以定义它的处理函数。</p>\n<h2 id=\"消息映射表\"><a class=\"markdownIt-Anchor\" href=\"#消息映射表\">#</a> 消息映射表</h2>\n<p>除了一些没有基类的类或 CObject 的直接派生类外，其他的类都可以自动生成消息映射表。</p>\n<p>消息映射表如下（CMainFrame.cpp）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">BEGIN_MESSAGE_MAP</span><span class=\"token punctuation\">(</span>CMainFrame<span class=\"token punctuation\">,</span> CFrameWndEx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">ON_WM_CREATE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ON_COMMAND</span><span class=\"token punctuation\">(</span>ID_VIEW_CUSTOMIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnViewCustomize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">ON_REGISTERED_MESSAGE</span><span class=\"token punctuation\">(</span>AFX_WM_CREATETOOLBAR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnToolbarCreateNew<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">ON_COMMAND_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">ON_UPDATE_COMMAND_UI_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnUpdateApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">ON_WM_SETTINGCHANGE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">END_MESSAGE_MAP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 BEGIN_MESSAGE_MAP 和 END_MESSAGE_MAP 之间的内容成为消息映射入口项。</p>\n<p>消息映射除了在 CMainFrame 的实现文件中添加消息映射表外，在类的定义文件 MainFrm.h 中还会添加一个宏调用： <code> DECLEAR_MESSAGE_MAP</code></p>\n<p>一般这个宏调用写在类定义的结尾处。</p>\n<h2 id=\"添加消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#添加消息处理函数\">#</a> 添加消息处理函数</h2>\n<ol>\n<li>\n<p>在类定义中加入消息处理函数的函数声明，以 afx_msg 打头。例如 MainFrm.h 中的声明：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>afx_msg <span class=\"token keyword\">int</span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>LPCREATESTRUCT lpCreateStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tafx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnViewCustomize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tafx_msg LRESULT <span class=\"token function\">OnToolbarCreateNew</span><span class=\"token punctuation\">(</span>WPARAM wp<span class=\"token punctuation\">,</span> LPARAM lp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tafx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnApplicationLook</span><span class=\"token punctuation\">(</span>UINT id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tafx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnUpdateApplicationLook</span><span class=\"token punctuation\">(</span>CCmdUI<span class=\"token operator\">*</span> pCmdUI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tafx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnSettingChange</span><span class=\"token punctuation\">(</span>UINT uFlags<span class=\"token punctuation\">,</span> LPCTSTR lpszSection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在类的消息映射表中添加该消息的消息映射入口项。例如 MainFrm.h 中的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_WM_CREATE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">ON_COMMAND</span><span class=\"token punctuation\">(</span>ID_VIEW_CUSTOMIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnViewCustomize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ON_REGISTERED_MESSAGE</span><span class=\"token punctuation\">(</span>AFX_WM_CREATETOOLBAR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnToolbarCreateNew<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">ON_COMMAND_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">ON_UPDATE_COMMAND_UI_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnUpdateApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">ON_WM_SETTINGCHANGE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>在类的实现中添加消息处理函数的函数实现。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">CMainFrame</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>LPCREATESTRUCT lpCreateStruct<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>通过以上 3 个步骤后，WM_CREATE 等消息就可以在窗口类中被消息处理函数处理了。</p>\n<h2 id=\"各种windows消息的消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#各种windows消息的消息处理函数\">#</a> 各种 Windows 消息的消息处理函数</h2>\n<blockquote>\n<p>标准 Windows 消息。除 WM_COMMAND 外的 WM_开头的消息是标准消息。例如：WM_CREATE、WM_CLOSE。</p>\n</blockquote>\n<p>标准 Windows 消息的消息处理函数都与 WM_CREATE 消息类似。</p>\n<blockquote>\n<p>命令消息。WM_COMMAND，消息中附带了标志符 ID 来区分是来自哪个菜单、工具栏按钮或加速键的消息。</p>\n</blockquote>\n<p>命令消息的消息映射入口如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_COMMAND</span><span class=\"token punctuation\">(</span>ID_VIEW_CUSTOMIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnViewCustomize<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>消息为 <code>ID_VIEW_CUSTOMIZE</code></li>\n<li>消息处理函数为 <code>OnViewCustomize</code></li>\n</ul>\n<p>如果想用批量处理函数批量处理这些命令消息，则可以像 CMainFrame 消息映射表中的：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_COMMAND_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>值在 <code>ID_VIEW_APPLOOK_WIN_2000</code>  到 <code>ID_VIEW_APPLOOK_WINDOWS_7</code>  之间的菜单项等命令消息都由 CMainFrame 的 <code>OnApplicationLook</code>  函数处理。</li>\n<li>函数原型为 <code>afx_msg void OnApplicationLook(UINT id);</code></li>\n<li>参数 id 为用户操作的菜单项等的 ID</li>\n</ul>\n<blockquote>\n<p>通知消息。通知消息一般由列表框等子窗口发送给父窗口，消息名也是 WM_COMMAND，其中附带了控件通知码来区分控件。</p>\n</blockquote>\n<p>在操作列表框等控件时往往会给父窗口发送 <code>WM_NOTIFY</code>  通知消息。</p>\n<p><code>WM_NOTIFY</code>  消息的 <code>WPARAM</code>  参数为发送通知消息的控件的 ID； <code> LPARAM</code>  参数指向一个结构体，可能是 NMHDR 结构体，也可能是第一个元素为 NMHDR 结构体变量的其他结构体。</p>\n<p>NMHDR 结构体定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Typedef <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagNMHDR</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    HWND hwndFrom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT idFrom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    UINT code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>NMHDR<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>hwndFrom 为发送通知消息控件的句柄；</li>\n<li>idFrom 为控件 ID；</li>\n<li>code 为要处理的通知消息的通知码，例如 NM_CLICK</li>\n</ul>\n<p>通知消息的消息映射入口形式如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_NOTIFY</span><span class=\"token punctuation\">(</span>wNotifyCode<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> memberFxn<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>wNotifyCode 为要处理的通知消息通知码；</li>\n<li>id 为控件标识 ID；</li>\n<li>memberFxn 为此消息的消息处理函数。</li>\n</ul>\n<blockquote>\n<p>用户自定义消息</p>\n<ol>\n<li>定义消息宏</li>\n<li>在消息映射表中添加消息映射入口项</li>\n<li>在 MainFrm.h 中添加消息处理函数的函数声明</li>\n<li>在 MainFrm.cpp 中实现此函数</li>\n</ol>\n</blockquote>\n<h1 id=\"对话框-创建对话框\"><a class=\"markdownIt-Anchor\" href=\"#对话框-创建对话框\">#</a> 对话框 - 创建对话框</h1>\n<p><img data-src=\"image-20230525105517622.png\" alt=\"image-20230525105517622\"></p>\n<ol>\n<li>创建对话框资源，添加控件。</li>\n<li>创建对话框类，添加控件变量，添加控件的消息处理函数。</li>\n</ol>\n<blockquote>\n<p>添加控件变量时，类的成员变量一般以 m_开头，标识它是一个成员变量。</p>\n</blockquote>\n<h1 id=\"对话框类的数据交换和检验\"><a class=\"markdownIt-Anchor\" href=\"#对话框类的数据交换和检验\">#</a> 对话框类的数据交换和检验</h1>\n<p>在程序运行界面中，用户往往会改变控件的属性，例如在编辑框中输入字符串，或者改变组合框中的选中项，又或者改变复选框的选中状态等。</p>\n<p><strong>控件的属性改变后，MFC 会相应的修改控件关联变量的值</strong>。这种同步的改变是通过<strong> MFC 为对话框类自动生成的成员函数 DoDataExchange () 函数</strong>实现的，这也叫做<strong>对话框的数据交换和检验机制</strong>。</p>\n<p>为三个编辑框添加了变了之后，在 AdditionTestDlg.cpp 中 CAdditionTestDlg 的 DoDataExchange () 函数的函数体中多了三条 DDX_Text 调用语句。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DoDataExchange</span><span class=\"token punctuation\">(</span>CDataExchange<span class=\"token operator\">*</span> pDX<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 处理 MFC 默认的数据交换</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">CDialogEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DoDataExchange</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 处理控件 IDC_SUMMAND_EDIT 和变量 m_editSummand 之间的数据交换</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">DDX_Text</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">,</span> IDC_SUMMAND_EDIT<span class=\"token punctuation\">,</span> m_editSummand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 处理控件 IDC_ADDEND_EDIT 和变量 m_editAddend 之间的数据交换</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">DDX_Text</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">,</span> IDC_ADDEND_EDIT<span class=\"token punctuation\">,</span> m_editAddend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 处理控件 IDC_SUM_EDIT 和变量 m_editSum 之间的数据交换</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">DDX_Text</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">,</span> IDC_SUM_EDIT<span class=\"token punctuation\">,</span> m_editSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>数据交换机制：</p>\n<p>如果在程序运行界面中输入被加数，通过 CAdditionTestDlg 的 DoDataExchange () 函数可以将输入的值保存到 m_editSummand 变量中；反之，如果程序运行中修改了变量 m_editSummand 的值，则通过 CAdditionTestDlg 的 DoDataExchange () 函数也可以将新的变量值显示到被加数的编辑框中。</p>\n<p>但这种数据交换机制中，DoDataExchange () 函数并不是自动调用的，而是需要我们在程序中调用 CDialogEx::UpdateData () 函数，由 UpdateData () 再去自动调用 DoDataExchange ()</p>\n</blockquote>\n<p>CDialogEx::UpdateData () 函数原型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>BOOL bSaveAndValidate <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 bSaveAndValidate 用于指示数据传输的方向，TRUE 表示从控件传给变量，FALSE 表示从变量传给控件。默认为 TRUE，从控件传给变量。</li>\n<li>返回值表示操作是否成功。</li>\n</ul>\n<h1 id=\"对话框-为控件添加消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#对话框-为控件添加消息处理函数\">#</a> 对话框 - 为控件添加消息处理函数</h1>\n<h2 id=\"添加消息处理函数-2\"><a class=\"markdownIt-Anchor\" href=\"#添加消息处理函数-2\">#</a> 添加消息处理函数</h2>\n<ul>\n<li>\n<p>使用类向导添加消息处理函数</p>\n<p><img data-src=\"image-20230525133212478.png\" alt=\"image-20230525133212478\"></p>\n</li>\n<li>\n<p>通过资源视图 “Add Event Handler…” 添加消息处理函数</p>\n<p>在按钮控件上点击右键进入</p>\n<p><img data-src=\"image-20230525133538866.png\" alt=\"image-20230525133538866\"></p>\n</li>\n<li>\n<p>在控件的属性视图中添加消息处理函数</p>\n<p><img data-src=\"image-20230525133733319.png\" alt=\"image-20230525133733319\"></p>\n</li>\n<li>\n<p>双击控件添加消息处理函数</p>\n<p>最直接最简单的方法，双击 “计算” 按钮，MFC 会自动为其在 CAdditionDlg 类中添加 BN_CLICKED 消息的处理函数 OnBnClickedAddButton ()</p>\n</li>\n</ul>\n<h2 id=\"在消息处理函数中添加自定义功能\"><a class=\"markdownIt-Anchor\" href=\"#在消息处理函数中添加自定义功能\">#</a> 在消息处理函数中添加自定义功能</h2>\n<p>添加消息处理函数之后，得到一个空的 OnBnClickedAddButton () 函数的函数体，要实现我们想要的功能，还需要在函数体中加入自定义功能代码。</p>\n<p>要实现加法功能：获取被加数和加数的数值，然后计算他们的和并显示到和的编辑框里。函数体为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedAddButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加控件通知处理程序代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 将各控件中的数据保存到相应的位置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 将被加数和加数的和赋值给 m_editSum</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tm_editSum <span class=\"token operator\">=</span> m_editSummand <span class=\"token operator\">+</span> m_editAddend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 根据各变量的值更新相应的控件。和编辑框会显示 m_editSum 的值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"设置控件的tab顺序\"><a class=\"markdownIt-Anchor\" href=\"#设置控件的tab顺序\">#</a> 设置控件的 Tab 顺序</h2>\n<ul>\n<li>Ctrl+D</li>\n<li>主菜单 -&gt;format-&gt;tab order</li>\n</ul>\n<h1 id=\"对话框-模态与非模态对话框及其弹出过程\"><a class=\"markdownIt-Anchor\" href=\"#对话框-模态与非模态对话框及其弹出过程\">#</a> 对话框 - 模态与非模态对话框及其弹出过程</h1>\n<ul>\n<li>\n<p>模态对话框</p>\n<p>弹出后，本应用程序其他窗口不再接受用户输入，只有该对话框相应用户输入，在对他进行操作退出后，其他窗口才能继续与用户交互。</p>\n</li>\n<li>\n<p>非模态对话框</p>\n<p>弹出后，本应用程序其他窗口仍能相应用户输入。非模态对话框一般用来显示提示信息等。</p>\n</li>\n<li>\n<p>对话框是怎么弹出的？</p>\n<p>应用程序 App 类实例的初始化工作由 <code>CAdditionTestApp::InitInstance()</code>  实现</p>\n<p>其中后半段有定义对话框对象并弹出对话框：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CAdditionTestDlg dlg<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 定义对话框类 CAdditionDlg dlg</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tm_pMainWnd <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dlg<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 将 dlg 设置为主窗口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  INT_PTR nResponse <span class=\"token operator\">=</span> dlg<span class=\"token punctuation\">.</span><span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 弹出对话框 dlg，并将 DoModal 函数返回值（退出时点击按钮的 ID）赋值给 nResponse</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nResponse <span class=\"token operator\">==</span> IDOK<span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 判断返回值是否为 OK 按钮（其 ID 为 IDOK，已删除）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">// TODO: “确定” 来关闭对话框的代码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nResponse <span class=\"token operator\">==</span> IDCANCEL<span class=\"token punctuation\">)</span>\t\t\t\t\t\t<span class=\"token comment\">// 判断返回值是否为 Cancel 按钮（其 ID 为 IDCANCEL，退出按钮）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// TODO: “取消” 来关闭对话框的代码</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>弹出对话框比较关键的一个函数，就是对话框类的<strong> DoModal () 函数</strong>。</p>\n<p><code>CDialog::DoModal()</code>  函数的原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">virtual</span> INT_PTR <span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>返回值：整数值，指定了传递给 CDialog::EndDialog（该函数用于关闭对话框）的 nResult 参数值。如果不能创建对话框，则返回 - 1；如果出现其他错误，则返回 IDABORT</li>\n<li>调用了它对话框就会弹出，返回值是退出对话框时所点的按钮的 ID，比如，点击 “退出” 按钮，那么 DoModal 返回值就是 IDCANCEL</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"添加模态对话框并弹出它\"><a class=\"markdownIt-Anchor\" href=\"#添加模态对话框并弹出它\">#</a> 添加模态对话框并弹出它</h2>\n<ol>\n<li>\n<p>右键资源文件中 “Dialog” 文件夹，插入 Dialog，创建一个新的对话框模板</p>\n<p>设置 ID 为 IDD_TIP_DIALOG，Caption 为 “提示 “</p>\n</li>\n<li>\n<p>在对话框模板上右键选择 Add Class… 添加对话框类</p>\n<p>设置”class name“为 CTipDlg，在 Solution Explorer 中生成 TipDlg.h 和 TipDlg.cpp.</p>\n</li>\n<li>\n<p>要在点” 计算 “按钮之后弹出此提示对话框，那么就要在” 计算 “按钮的消息处理函数 OnBnClickedAddButton () 中访问提示对话框类。所以为了访问 CTipDlg 类，在 AdditionTestDlg.cpp 中包含 CTipDlg 的头文件 <code>#include &quot;TipDlg.h&quot;</code></p>\n</li>\n<li>\n<p>修改 OnBnClickedAddButton () 的函数体，在所有代码之前，构造 CTipDlg 类的对象 tipDlg，并通过语句 tipDlg.DoModal (); 弹出对话框，最后判断 DoModal () 函数的返回值是 IDOK 还是 IDCANCEL 来确定是否继续进行计算。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedAddButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tINT_PTR nRes<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 用于保存 DoModal 函数的返回值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tCTipDlg tipDlg<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 构造对话框类 CTipDlg 的实例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tnRes <span class=\"token operator\">=</span> tipDlg<span class=\"token punctuation\">.</span><span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 弹出对话框</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IDCANCEL <span class=\"token operator\">==</span> nRes<span class=\"token punctuation\">)</span>\t\t\t\t\t<span class=\"token comment\">// 判断对话框退出后返回值是否为 IDCANCEL，如果是则 return, 否则继续向下执行</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 将各控件中的数据保存到相应的位置</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 将被加数和加数的和赋值给 m_editSum</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tm_editSum <span class=\"token operator\">=</span> m_editSummand <span class=\"token operator\">+</span> m_editAddend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 根据各变量的值更新相应的控件。和编辑框会显示 m_editSum 的值</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试</p>\n</li>\n</ol>\n<h2 id=\"添加非模态对话框并显示\"><a class=\"markdownIt-Anchor\" href=\"#添加非模态对话框并显示\">#</a> 添加非模态对话框并显示</h2>\n<p>非模态对话框显示后，程序其他窗口仍然能正常运行，可以响应用户输入，还可以相互切换。</p>\n<p>实际上，模态和非模态对话框在创建对话框资源和生成对话框类上是没有区别的。</p>\n<p>需要修改的是，对话框类实例的创建和显示，也就是在 CAdditionTestDlg::OnBnClickedAddButton () 函数体中添加的对话框显示代码。具体步骤：</p>\n<ol>\n<li>\n<p>在 AdditionTestDlg.h 中包含 CTipDlg 头文件并定义 CTipDlg 类型的指针成员变量。</p>\n<p>删除 <code>AdditionTestDlg.cpp</code>  中包含的 <code>#include &quot;TipDlg.h&quot;</code> ，而在 <code>AdditionTestDlg.h</code>  中包含 <code>#include &quot;TipDlg.h&quot;</code> ，因为我们要在 AdditionTestDlg.h 中定义 CTipDlg 类型的指针变量，所以要先包含它的头文件；然后在 AdditionTestDlg.h 中为 CAdditionTestDlg 类添加 private 成员变量 CTipDlg *m_pTipDlg;</p>\n</li>\n<li>\n<p>在 CAdditionTestDlg 类的狗在函数中初始化成员变量 <code>m_pTipDlg(NULL)</code></p>\n</li>\n<li>\n<p>修改 CAdditionTestDlg::OnBnClickedAddButton () 函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedAddButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加控件通知处理程序代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 模态对话框</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tINT_PTR nRes;\t\t\t\t\t\t\t// 用于保存 DoModal 函数的返回值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tCTipDlg tipDlg;\t\t\t\t\t\t\t// 构造对话框类 CTipDlg 的实例</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tnRes = tipDlg.DoModal ();\t\t\t\t// 弹出对话框</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tif (IDCANCEL == nRes)\t\t\t\t\t// 判断对话框退出后返回值是否为 IDCANCEL，如果是则 return, 否则继续向下执行</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\treturn;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 非模态对话框</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 动态创建对话框</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_pTipDlg <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 创建非模态对话框实例</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tm_pTipDlg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CTipDlg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tm_pTipDlg<span class=\"token operator\">-></span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>IDD_TIP_DIALOG<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 显示非模态对话框</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tm_pTipDlg<span class=\"token operator\">-></span><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>SW_SHOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 将各控件中的数据保存到相应的位置</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 将被加数和加数的和赋值给 m_editSum</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tm_editSum <span class=\"token operator\">=</span> m_editSummand <span class=\"token operator\">+</span> m_editAddend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 根据各变量的值更新相应的控件。和编辑框会显示 m_editSum 的值</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>因为此对话框实例是动态创建的，所以需要手动删除动态对象来销毁对话框。我们在 CAdditionTestDlg 类的析构函数中添加删除代码。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">CAdditionTestDlg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 如果非模态对话框已经创建则删除它</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_pTipDlg <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span> m_pTipDlg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试。</p>\n</li>\n</ol>\n<h1 id=\"对话框-属性页对话框及其相关类\"><a class=\"markdownIt-Anchor\" href=\"#对话框-属性页对话框及其相关类\">#</a> 对话框 - 属性页对话框及其相关类</h1>\n<p>右键点属性弹出的对话框，通过标签切换各个界面。</p>\n<p>主要用到的类：CPropertyPage 类和 CPropertySheet 类。</p>\n<ul>\n<li>\n<p>CPropertyPage 类</p>\n<p>CPropertyPage 类继承自 CDialog 类，它被用于处理某单个属性页，所以要为每个属性页都创建一个继承自 CPropertyPage 类的子类</p>\n<ul>\n<li>\n<p>构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">CPropertyPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">CPropertyPage</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tUINT nIDTemplate<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    UINT nIDCaption <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    DWORD dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROPSHEETPAGE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">CPropertyPage</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tLPCTSTR lpszTemplateName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    UINT nIDCaption <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    DWORD dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROPSHEETPAGE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li></li>\n</ul>\n</li>\n<li>\n<p>CPropertySheet 类</p>\n<p>CPropertySheet 类继承自 CWnd 类，它是属性表类，负责加载、打开或删除属性页，并可以在属性页对话框中切换属性页，和对话框类似有模态和非模态两种。</p>\n</li>\n<li></li>\n</ul>\n<h1 id=\"对话框-向导对话框\"><a class=\"markdownIt-Anchor\" href=\"#对话框-向导对话框\">#</a> 对话框 - 向导对话框</h1>\n<h1 id=\"对话框-消息对话框\"><a class=\"markdownIt-Anchor\" href=\"#对话框-消息对话框\">#</a> 对话框 - 消息对话框</h1>\n<h1 id=\"对话框-文件对话框\"><a class=\"markdownIt-Anchor\" href=\"#对话框-文件对话框\">#</a> 对话框 - 文件对话框</h1>\n<h1 id=\"对话框-字体对话框\"><a class=\"markdownIt-Anchor\" href=\"#对话框-字体对话框\">#</a> 对话框 - 字体对话框</h1>\n<h1 id=\"对话框-颜色对话框\"><a class=\"markdownIt-Anchor\" href=\"#对话框-颜色对话框\">#</a> 对话框 - 颜色对话框</h1>\n<h1 id=\"常用控件\"><a class=\"markdownIt-Anchor\" href=\"#常用控件\">#</a> 常用控件</h1>\n<h1 id=\"菜单与cmenu类\"><a class=\"markdownIt-Anchor\" href=\"#菜单与cmenu类\">#</a> 菜单与 CMenu 类</h1>\n<ul>\n<li>\n<p>下拉式菜单</p>\n<p>一般在窗口标题栏下面显示，通常是由主菜单栏、子菜单及子菜单中的菜单项和分割条组成。</p>\n</li>\n<li>\n<p>弹出式菜单</p>\n<p>一般通过单击鼠标右键显示，它的主菜单不可见，只显示子菜单。</p>\n</li>\n</ul>\n<p>菜单可以在 VS 的 Resource View 资源视图中直接创建编辑。打开资源视图中的 Menu 中 ID 为 IDR_MAINFRAME 的菜单资源。</p>\n<p>点击菜单栏中的某一项会弹出子菜单，子菜单中有多个菜单项和分割条。菜单项中有”…“表示点击后会弹出对话框。带下划线的表示热键</p>\n<h1 id=\"工具栏与ctoolbar类\"><a class=\"markdownIt-Anchor\" href=\"#工具栏与ctoolbar类\">#</a> 工具栏与 CToolBar 类</h1>\n<p>打开资源视图中的 ToolBar 中 ID 为 IDR_MAINFRAME 的工具栏资源。</p>\n<h1 id=\"状态栏\"><a class=\"markdownIt-Anchor\" href=\"#状态栏\">#</a> 状态栏</h1>\n<p>状态栏一般在窗口的最底部，用来显示各种状态。</p>\n<p>状态栏实际上也是一个窗口，一般分为几个窗格，每个窗格分别用来显示不同的信息和状态等，如菜单项和工具栏按钮的提示信息。</p>\n<p>用 MFC 向导生成的单文档或多文档程序都会自动创建状态栏，在结果界面中可以看到窗口底部有个状态栏，该状态栏被分为了几个窗格，分别用来显示菜单项和工具栏按钮的提示信息及 Caps Lock、Num Lock、Scroll Lock 键的状态。</p>\n<p><img data-src=\"C:%5CUsers%5CAdministrator%5CDocuments%5CMFC%5Cimage-20230529160507134.png\" alt=\"image-20230529160507134\"></p>\n<p>也可以自定义状态栏，加入新的提示信息或指示器。</p>\n<h2 id=\"cstatusbar类\"><a class=\"markdownIt-Anchor\" href=\"#cstatusbar类\">#</a> CStatusBar 类</h2>\n<p>MFC 为状态栏提供了 CStatusBar 类，封装了状态栏的属性和操作。</p>\n<p>CStatusBar 类的几个主要成员函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个状态栏</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span> pParentWnd<span class=\"token punctuation\">,</span> DWORD dwStyle <span class=\"token operator\">=</span> WS_CHILD<span class=\"token operator\">|</span>WS_VISIBLE<span class=\"token operator\">|</span>CBRS_BOTTOM<span class=\"token punctuation\">,</span> UINT nID <span class=\"token operator\">=</span> AFX_IDW_STATUS_BAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 pParentWnd 为状态栏父窗口指针。</li>\n<li>参数 dwStyle 为状态栏风格，除了标准 windows 风格外它还支持：\n<ul>\n<li>CBRS_TOP：位于框架窗口顶部</li>\n<li>CBRS_BOTTOM：位于框架窗口顶部</li>\n<li>CBRS_NOALIGN：父窗口大小改变时状态栏不会被重新定位</li>\n</ul>\n</li>\n<li>参数 nID 指定状态栏的 ID</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 为每个指示器设置显示文本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BOOL <span class=\"token function\">SetIndicators</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> UINT<span class=\"token operator\">*</span> IpIDArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nIDCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用 IpIDArray 数组中的对应元素为每个指示器设置一个 ID，然后加载每个 ID 代表的字符串，设置为这些指示器的显示文本。</p>\n<ul>\n<li>参数 IpIDArray 为指向一个 ID 数组的指针</li>\n<li>参数 nIDCount 为 IpIDArray 数组的元素个数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>UINT <span class=\"token function\">GetItemID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>获取由 nIndex 指定的指示器的 ID。</p>\n<ul>\n<li>参数 nIndex 为要获取 ID 的指示器索引</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString <span class=\"token function\">GetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>获取状态栏窗格中显示的文本。</p>\n<ul>\n<li>参数 nIndex 为要获取文本的窗格索引</li>\n<li>返回值为包含窗格文本的 CString 对象</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">SetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">,</span> LPCTSTR lpszNewText<span class=\"token punctuation\">,</span> BOOL bUpdate <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>设置状态窗格的显示文本。</p>\n<ul>\n<li>参数 nIndex 为要设置文本的窗格索引</li>\n<li>参数 lpszNewText 为指向新的窗格文本的指针</li>\n<li>参数 bUpdate 表示是否设置后立即更新显示</li>\n</ul>\n<h2 id=\"状态栏创建\"><a class=\"markdownIt-Anchor\" href=\"#状态栏创建\">#</a> 状态栏创建</h2>\n<p>在 MainFrm.h 中可以看到，CMainFrame 类的成员变量中创建状态栏使用的是 CMFCStatusBar 类对象。CMFCStatusBar 类和 CStatusBar 类用法类似，功能更加丰富。</p>\n<ol>\n<li>\n<p>构造一个 CMFCStatusBar 类的对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CMFCStatusBar     m_wndStatusBar<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>调用 CMFCStatusBar::Create 函数来创建状态栏窗口。</p>\n<p>在 CMainFrame::OnCreate 函数的实现中，可以找到 CMFCStatusBar::Create 函数的调用</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token function\">TRACE0</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未能创建状态栏\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 未能创建</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>调用 CMFCStatusBar::SetIndicators 函数为状态栏划分窗格，并为每个指示器设置显示文本。</p>\n<p>该函数需要一个 ID 数组的参数，在 MainFrm.cpp 中定义了如下一个窗格 ID 的数组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> UINT indicators<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tID_SEPARATOR<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// 状态行指示器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tID_INDICATOR_CAPS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tID_INDICATOR_NUM<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tID_INDICATOR_SCRL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>indicators 数组定义了状态栏窗格的划分信息。</p>\n<p>第一个元素一般为 ID_SEPARATOR，对应的窗格用来显示命令提示信息，后三项为指示器文本的字符 ID，可以根据这些 ID 在 String Table 字符串资源中找到相应的字符串。查找方法，在 Resource View 资源视图中，打开 String Table 字符串资源，可以看到 ID、Value 和 Caption 三列，ID 对应的 Caption 列文本就是要查找的字符串。</p>\n<p>划分窗格</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetIndicators</span><span class=\"token punctuation\">(</span>indicators<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>indicators<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>之后我们就可以通过 CMFCStatusBar::SetPaneText 设置窗格文本。</p>\n</li>\n</ol>\n<h2 id=\"状态栏应用实例-添加时间窗格\"><a class=\"markdownIt-Anchor\" href=\"#状态栏应用实例-添加时间窗格\">#</a> 状态栏应用实例 - 添加时间窗格</h2>\n<ol>\n<li>\n<p>在资源视图的 String Table 中添加新的字符串资源，ID 为 ID_INDICATOR_TIME，Caption 为 “00:00:00”。这是为了给时间的显示预留空间，因为状态栏会根据字符串的长度为相应的窗格确定缺省宽度。</p>\n</li>\n<li>\n<p>在 indicators 数组插入 ID_INDICATOR_TIME</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> UINT indicators<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tID_SEPARATOR<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// 状态行指示器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tID_INDICATOR_CAPS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tID_INDICATOR_NUM<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tID_INDICATOR_SCRL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tID_INDICATOR_TIME<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>要实时显示系统时间，就需要一个定时器，每秒钟更新一次时间显示。在 CMainFrame::OnCreate 函数中开启定时器</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">CMainFrame</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>LPCREATESTRUCT lpCreateStruct<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CFrameWndEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>lpCreateStruct<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 启动定时器，定时器 ID 为 1，定时时间为 1000ms</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 Class View 类视图中找到 CMainFrame 类，右键点击属性，然后在属性页中，点工具栏上的 Messages 消息按钮，显示出消息列表，找到 WM_TIMER 消息，添加其消息处理函数 <code>void CMainFrame::OnTimer(UINT_PTR nIDEvent)</code> ，并修改此函数实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMainFrame</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>UINT_PTR nIDEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加消息处理程序代码和 / 或调用默认值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tCString strTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 获取当前系统时间，并保存到 curTime</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tCTime curTime <span class=\"token operator\">=</span> <span class=\"token class-name\">CTime</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 格式化 curTime, 将字符串保存到 strTime</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstrTime <span class=\"token operator\">=</span> curTime<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%H:%M:%S\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 在状态栏的时间窗格中显示系统时间字符串</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tm_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> strTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token class-name\">CFrameWndEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>nIDEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试实现</p>\n</li>\n</ol>\n<h1 id=\"文档视图框架\"><a class=\"markdownIt-Anchor\" href=\"#文档视图框架\">#</a> 文档 / 视图框架</h1>\n<p>MFC 向导自动生成的项目中包含 CxxxDoc 类，CxxxView 类和 CMainFrame 类。</p>\n<p>文档 / 视图结构是 MFC 提供的一种设计，它将数据的处理和显示分开，这样更便于对程序的维护和扩展。</p>\n<ul>\n<li>\n<p>文档</p>\n<p>文档对象用于管理和维护数据，包括保存数据，取出数据以及修改数据等操作，在数据被修改以后，文档可以通知其对应的所有视图更新显示。</p>\n</li>\n<li>\n<p>视图</p>\n<p>视图对象将文档中的数据可视化，负责从文档对象中取出数据显示给用户，并接受用户的输入和编辑，将数据的改变反映给文档对象。视图充当了文档和用户之间媒介的角色。</p>\n</li>\n<li>\n<p>框架</p>\n<p>一个文档可能有多个视图界面，这就需要有框架来管理。框架就是用来管理文档和视图的。框架窗口是应用程序的主窗口，应用程序执行时会先创建一个最顶层的框架窗口。视图窗口是没有菜单和边界的子窗口，它必须包含在框架窗口中，即置于框架窗口的客户区内。</p>\n</li>\n</ul>\n<h2 id=\"文档模板\"><a class=\"markdownIt-Anchor\" href=\"#文档模板\">#</a> 文档模板</h2>\n<p>文档模板中存放了文档、视图和框架相关的信息，应用程序通过文档模板创建文档对象，框架窗口对象和视图对象。另外，文档、视图、框架之间的关系也是文档模板来管理的。</p>\n<p>在 HelloWorld.cpp 中，CHelloWorldApp 应用程序类的成员函数 <code>CHelloWorldApp::InitInstance()</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token class-name\">CHelloWorldApp</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 注册应用程序的文档模板。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 文档模板将用作文档、框架窗口和视图之间的连接</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tCSingleDocTemplate<span class=\"token operator\">*</span> pDocTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tpDocTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CSingleDocTemplate</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tIDR_MAINFRAME<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CHelloWorldDoc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CMainFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 主 SDI 框架窗口</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CHelloWorldView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pDocTemplate<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">AddDocTemplate</span><span class=\"token punctuation\">(</span>pDocTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在构造文档模板类 CSingleDocTemplate 的对象时，第一个参数是资源 ID:IDR_MAINFRAME，它包括框架窗口图标等，后面 3 个参数是 RUNTIME_CLASS 宏的调用，RUNTIME_CLASS 用于获取类的运行信息，文档模板可以根据这些动态创建信息来创建相应类的对象，即文档对象、框架窗口对象和视图对象。</p>\n<p>AddDocTemplate (pDocTemplate) 函数用来注册文档模板对象。</p>\n<h2 id=\"框架类-文档类-视图类\"><a class=\"markdownIt-Anchor\" href=\"#框架类-文档类-视图类\">#</a> 框架类、文档类、视图类</h2>\n<ul>\n<li>\n<p>CMainFrame 框架类继承于 CFrameWndEx 类，而 CFrameWndEx 类又继承于 CFrameWnd 类，CFrameWnd 类中用于管理文档和视图的成员函数有：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获得当前活动视图对象对应文档对象的指针，如果不存在返回 NULL</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">virtual</span> CDocument<span class=\"token operator\">*</span> <span class=\"token function\">GetActiveDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 获得当前活动视图对象的指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CView<span class=\"token operator\">*</span> <span class=\"token function\">GetActiveView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 设置活动视图。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 参数 pViewNew 为要激活的视图对象的指针。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 参数 bNotify 指定视图是否接受激活通知。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetActiveView</span><span class=\"token punctuation\">(</span>CView<span class=\"token operator\">*</span> pViewNew<span class=\"token punctuation\">,</span> BOLL bNotify <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>CHelloWorldDoc 文档类继承于 CDocument 类，主要成员函数有：</p>\n<pre><code class=\"language-cpp\">\n</code></pre>\n</li>\n<li>\n<p>CHelloWorldView 视图类继承于 CView 类，CView 类中与文档 / 视图结构相关的成员函数包括：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取视图关联的文档对象的指针，如果视图没有关联到文档上则返回 NULL</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CDocument<span class=\"token operator\">*</span> <span class=\"token function\">GetDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"各对象之间关系\"><a class=\"markdownIt-Anchor\" href=\"#各对象之间关系\">#</a> 各对象之间关系</h2>\n<p>涉及到的对象包括<strong>应用程序对象</strong>、<strong>文档模板对象</strong>、<strong>文档对象</strong>、<strong>视图对象</strong>和<strong>框架窗口对象</strong>。</p>\n<ol>\n<li>\n<p>应用程序对象保存了一个文档模板的列表。</p>\n<p>在任何对象中调用全局函数 <code>AfxGetApp()</code>  都可以获得应用程序对象的指针。通过调用 <code>CWinAppEx::GetFirstDocTemplatePosition()</code> 、 <code>CWinAppEx::GetNextDocTemplate()</code>  函数可以遍历所有的文档模板。</p>\n</li>\n<li>\n<p>文档模板对象用于维护文档、视图和框架窗口的映射关系，它包含一个已打开文档的列表。</p>\n<p>我们可以通过调用 CDocTemplate::GetFirstDocPosition ()、CDocTemplate::GetNextDoc () 来遍历该文档模板对应的所有文档。</p>\n</li>\n<li>\n<p>框架窗口对象中包含有指向当前活动视图对象的指针。</p>\n<p>AfxGetApp ()-&gt;m_pMainWnd 即为主框架窗口对象的指针，可以通过调用 CFrameWndEx::GetActiveView 来获取当前活动视图对象的指针，并且使用 CFrameWndEx::GetActiveDocument 函数获取当前活动视图对应的文档。</p>\n</li>\n<li>\n<p>文档对象中维护着该文档的视图列表，已经创建该文档的文档模板对象的指针。</p>\n<p>可以通过调用</p>\n</li>\n<li>\n<p>视图是框架窗口的子窗口，它保存有指向对应文档对象的指针。</p>\n<p>可以通过调用 CView::GetParentFrame 获取其所属的框架窗口对象的指针，调用 CView::GetDocument 获取该视图对应的文档对象的指针。</p>\n</li>\n</ol>\n<p>另外，在 MDI 多文档程序中，调用 CMDIFrameWnd::MDIGetActive 可以获取当前活动的 MDI 子窗口。</p>\n<h2 id=\"分割窗口和csplitterwnd类\"><a class=\"markdownIt-Anchor\" href=\"#分割窗口和csplitterwnd类\">#</a> 分割窗口和 CSplitterWnd 类</h2>\n<p>将一个窗口分割成多个窗口，每个窗口都包含视图。</p>\n<p>MFC 分割窗口：动态分割，静态分割。</p>\n<ul>\n<li>动态分割通常用于创建同一文档对应的多个视图，而且这些视图一般都是同一类型的视图，能够在用户编辑文档的不同部分时提供方便。动态分割窗口最多可以有两行两列。</li>\n<li>静态分割比较常见，窗口创建时分割的窗格就已经生成了，而且用户不能改变窗格的数量和顺序。静态分割窗口最多支持 16 行 16 列。通常静态分割的每个窗格中包含不同类的视图，当然也可以包含同一类的视图。</li>\n</ul>\n<h1 id=\"mfc常用类cstring类\"><a class=\"markdownIt-Anchor\" href=\"#mfc常用类cstring类\">#</a> MFC 常用类：CString 类</h1>\n<p>CString 类提供了对字符串的便捷操作。</p>\n<blockquote>\n<p>CStringT 是一个操作可变长度字符串的模板类</p>\n<p>CStringT 模板类有三个实例：CString、CStringA 和 CStringW，分别提供对 TCHAR、char 和 wchar_t 字符类型的字符串的操作。</p>\n<ul>\n<li>char 类型定义的是 ANSI 字符</li>\n<li>wchar_t 类型定义的是 Unicode 字符</li>\n<li>TCHAR 类型取决于字符编码</li>\n</ul>\n</blockquote>\n<ol>\n<li>\n<p>CString 类的构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 将一个已经存在的 CString 对象 stringSrc 的内容拷贝到该 CString 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">CString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> CString<span class=\"token operator\">&amp;</span> stringSrc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CString <span class=\"token function\">str1</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.xxx.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将常量字符串拷贝到 str1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CString <span class=\"token function\">str2</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 将 str1 拷贝到 str2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 2. 将字符串 Ipch 中的前 nLength 个字符串拷贝到该 CString 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">CString</span><span class=\"token punctuation\">(</span>LPCTSTR Ipch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.xxx.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 构造的字符串对象内容为 “www”</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 3. 使用此函数构造的 CString 对象中将含有 nLength 个重复的 ch 字符。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">CString</span><span class=\"token punctuation\">(</span>TCHAR ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nLength <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'w'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t\t<span class=\"token comment\">//str 为 www</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 类的大小写转换及顺序转换函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将字符串中的所有大写字符转换为小写字符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString<span class=\"token operator\">&amp;</span> <span class=\"token function\">MakeLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 将字符串中的所有小写字符转换为大写字符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CString<span class=\"token operator\">&amp;</span> <span class=\"token function\">MakeUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 将字符串中的所有字符顺序颠倒</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>CString<span class=\"token operator\">&amp;</span> <span class=\"token function\">MakeReverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ZiFuChuan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">MakeLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">MakeUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">MakeReverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 对象的连接</p>\n<p>多个 CSstring 对象可以通过重载运算符 +，+= 实现连接</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"baidu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//\"baidu\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>str <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str <span class=\"token operator\">+</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//\"www.baidu.\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>str <span class=\"token operator\">+=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">//\"www.baidu.com\"</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 对象的比较</p>\n<ul>\n<li>\n<p>可以通过 ==、!=、&gt;、&lt;、&gt;=、&lt;= 等重载运算符实现；</p>\n</li>\n<li>\n<p>也可以通过 Compare 和 CompareNoCase 成员函数实现。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将该 CString 对象与 psz 字符比较，如果相等则返回 0，如果小于 psz 则返回小于 0，如果大于则返回大于 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Compare</span><span class=\"token punctuation\">(</span>PCXSTR psz<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 功能相同，但不区分大小写</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">CompareNoCase</span><span class=\"token punctuation\">(</span>PCXSTR psz<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>CString 对象字符串的提取操作</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 提取字符串左边 nCount 个字符的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">Left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 提取字符串右边 nCount 个字符的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CString <span class=\"token function\">Right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 3. 提取字符串中以索引 iFirst 位置开始的 nCount 个字符组成的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CString <span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> iFirst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 4. 提取字符串中以索引 iFirst 位置开始至字符串结尾的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>CString <span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> iFirst<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>CString str1 <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yigezifuchuan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>CString str2 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">Left</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// \"yig\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>str2 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// \"ige\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>str3 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// \"ifuchuan\"</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 对象字符串的查找操作</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 CString 对象字符串的 iStart 的索引位置开始，查找字符串 pszSub 或字符 ch 第一次出现的位置，如果没有找到则返回 - 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>PCXSTR pszSub<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>XCHAR ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 查找字符串 pszCharSet 中任意字符，返回第一次出现的位置，如果没有找到则返回 - 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">FindOneOf</span><span class=\"token punctuation\">(</span>PCXSTR pszCharSet<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 从字符串末尾开始查找指定的字符 ch，返回其位置，找不到则返回 - 1。尽管是从后向前查找，但是位置的索引还是要从开始算起</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">ReverseFind</span><span class=\"token punctuation\">(</span>XCHAR ch<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>CString str <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jizhuomi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> nIndex1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> nIndex2 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">FindOneOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mui\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> nIndex3 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">ReverseFind</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 7</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 类对象字符串的替换和删除</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString str <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jizhuomi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 用字符 chNEW 替换 chOLD，返回替换的字符个数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'j'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//str 为 \"jjzhuomj\", n1=2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 从字符串中删除 iIndex 位置开始的 nCount 个字符，返回删除操作后的字符串长度</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//str 为 \"jhuomj\", n2=6</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 删除字符串中所有由 chRemove 指定的字符，返回删除的字符个数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> n3 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'j'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//str 为 \"huom\", n3=2</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 类的格式化字符串方法</p>\n<p>使用 CString 类的 Format 成员函数可以将 int，short，long，float，double 等数据类型格式化为字符串对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">float</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2.3f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%d, b=%f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//str 为 \"a=1, b=2.300000\"</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"mfc常用类ctime类\"><a class=\"markdownIt-Anchor\" href=\"#mfc常用类ctime类\">#</a> MFC 常用类：CTime 类</h1>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/04/02/C++11/",
            "url": "https://adventure-yx.github.io/2023/04/02/C++11/",
            "title": "C++11/14/17",
            "date_published": "2023-04-02T12:10:08.000Z",
            "content_html": "<h1 id=\"安全性智能指针\"><a class=\"markdownIt-Anchor\" href=\"#安全性智能指针\">#</a> 安全性 —— 智能指针</h1>\n<p><strong>内存泄漏</strong>：由于疏忽或错误导致的程序未能释放已经不再使用的内存。</p>\n<p>进一步解释：</p>\n<ul>\n<li>\n<p>并非指内存从物理上消失，而是指程序在运行过程中，由于疏忽或错误而失去了对该内存的控制，从而造成了内存的浪费。</p>\n</li>\n<li>\n<p>常指堆内存泄漏，因为堆是动态分配的，而且是用户来控制的，如果使用不当，会产生内存泄漏。</p>\n</li>\n<li>\n<p>使用 malloc、calloc、realloc、new 等分配内存时，使用完后要调用相应的 free 或 delete 释放内存，否则这块内存就会造成内存泄漏。</p>\n</li>\n<li>\n<p>指针重新赋值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p <span class=\"token operator\">=</span> np<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>开始时，指针 p 和 p1 分别指向一块内存空间，但指针 p 被重新赋值，导致 p 初始时指向的那块内存空间无法找到，从而发生了内存泄漏。</p>\n</li>\n</ul>\n<p>解决内存泄漏最有效的方法是使用<strong>智能指针（smart pointer）</strong>。</p>\n<p>智能指针是存储指向动态分配（堆）对象指针的类，用于生存期的控制，能够确保在<strong>离开指针所在作用域时，自动地销毁动态分配的对象</strong>，防止内存泄露。</p>\n<p>智能指针的核心实现技术是<strong>引用计数</strong>，每使用它一次，内部引用计数加 1，每析构一次内部的引用计数减 1，减为 0 时，删除所指向的堆内存。</p>\n<p>C++11 中提供了三种智能指针，使用这些智能指针时需要引用头文件 <code> &lt;memory&gt;</code> :</p>\n<ul>\n<li><code> std::shared_ptr</code> ：共享的智能指针</li>\n<li><code> std::unique_ptr</code> ：独占的智能指针</li>\n<li><code> std::weak_ptr</code> ：弱引用的智能指针，它不共享指针，不能操作资源，是用来监视 <code>shared_ptr</code>  的。</li>\n</ul>\n<h2 id=\"共享智能指针shared_ptr\"><a class=\"markdownIt-Anchor\" href=\"#共享智能指针shared_ptr\">#</a> 共享智能指针（shared_ptr）</h2>\n<h3 id=\"shared_ptr的初始化\"><a class=\"markdownIt-Anchor\" href=\"#shared_ptr的初始化\">#</a> shared_ptr 的初始化</h3>\n<p>共享智能指针是指<strong>多个智能指针可以同时管理同一块有效的内存</strong>，共享智能指针  <code>shared_ptr</code>  是一个<strong>模板类</strong>，如果要进行初始化有三种方式：</p>\n<ul>\n<li>构造函数</li>\n<li><code>std::make_shared</code>  辅助函数</li>\n<li>reset 方法</li>\n</ul>\n<p>共享智能指针对象初始化完毕之后就指向了要管理的那块堆内存，如果想要查看当前有多少个智能指针同时管理着这块内存可以使用共享智能指针提供的一个成员函数 use_count，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 管理当前对象的 shared_ptr 实例数量，或若无被管理对象则为 0。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"通过构造函数初始化\"><a class=\"markdownIt-Anchor\" href=\"#通过构造函数初始化\">#</a> 通过构造函数初始化</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//shared_ptr&lt;T> 类模板中，提供了多种实用的构造函数，语法格式如下:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> 智能指针名字<span class=\"token punctuation\">(</span>创建堆内存<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 使用智能指针管理一块 int 型的堆内存</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr1管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 使用智能指针管理一块字符数组对应的堆内存</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token function\">ptr2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr2管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 创建智能指针对象，不管理任何内存</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr3管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 创建智能指针对象，初始化为空</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr4</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr4管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ptr1管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ptr2管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ptr3管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ptr4管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><blockquote>\n<p>如果智能指针被初始化了一块有效内存，那么这块内存的引用计数 + 1，如果智能指针没有被初始化或者被初始化为 nullptr 空指针，引用计数不会 + 1。另外，不要使用一个原始指针初始化多个 shared_ptr。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//error, 编译不会报错，运行会出错</span></pre></td></tr></table></figure><h3 id=\"通过拷贝和移动构造函数初始化\"><a class=\"markdownIt-Anchor\" href=\"#通过拷贝和移动构造函数初始化\">#</a> 通过拷贝和移动构造函数初始化</h3>\n<p>当一个智能指针被初始化之后，就可以通过这个智能指针初始化其他新对象。在创建新对象的时候，对应的拷贝构造函数或者移动构造函数就被自动调用了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 使用智能指针管理一块 int 型的堆内存，内部引用计数为 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr1管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 调用拷贝构造函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr2</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr2管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr3 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr3管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 调用移动构造函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr4</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr4管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr5 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr5管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr5<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ptr1管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ptr2管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ptr3管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ptr4管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ptr5管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr></table></figure><blockquote>\n<p>如果使用拷贝的方式初始化共享智能指针对象，这两个对象会同时管理同一块堆内存，堆内存对应的引用计数也会增加；如果使用移动的方式初始智能指针对象，只是转让了内存的所有权，管理内存的对象并不会增加，因此内存的引用计数不会变化。</p>\n</blockquote>\n<h3 id=\"通过-stdmake_shared-初始化\"><a class=\"markdownIt-Anchor\" href=\"#通过-stdmake_shared-初始化\">#</a> 通过 std::make_shared 初始化</h3>\n<p>通过 C++ 提供的 std::make_shared () 就可以完成内存对象的创建并将其初始化给智能指针，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">make_shared</span><span class=\"token punctuation\">(</span> Args<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>T</code> ：模板参数的数据类型</li>\n<li><code>Args&amp;&amp;... args</code>  ：要初始化的数据，如果是通过 make_shared 创建对象，需按照构造函数的参数列表指定</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"construct Test...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"construct Test, x = \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"construct Test, str = \"</span> <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"destruct Test ...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 使用智能指针管理一块 int 型的堆内存，内部引用计数为 1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr1管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr2管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span> ptr3 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr3管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span> ptr4 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr_test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr4管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>使用 std::make_shared () 模板函数可以完成内存地址的创建，并将最终得到的内存地址传递给共享智能指针对象管理。如果申请的内存是普通类型，通过函数的（）可完成地址的初始化，如果要创建一个类对象，函数的（）内部需要指定构造对象需要的参数，也就是类构造函数的参数。</p>\n</blockquote>\n<h3 id=\"通过-reset-方法初始化\"><a class=\"markdownIt-Anchor\" href=\"#通过-reset-方法初始化\">#</a> 通过 reset 方法初始化</h3>\n<p>共享智能指针类提供的 std::shared_ptr::reset 方法函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span> Y<span class=\"token operator\">*</span> ptr <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Deleter</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span> Y<span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">,</span> Deleter d <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Deleter</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Alloc</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span> Y<span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">,</span> Deleter d<span class=\"token punctuation\">,</span> Alloc alloc <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>ptr：指向要取得所有权的对象的指针</li>\n<li>d：指向要取得所有权的对象的指针</li>\n<li>aloc：内部存储所用的分配器</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 使用智能指针管理一块 int 型的堆内存，内部引用计数为 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr3 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr4 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr1管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr2管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr3管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr4管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr1管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr2管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr3管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr4管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    ptr5<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr5管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr5<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ptr1管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ptr2管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ptr3管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ptr4管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ptr1管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ptr2管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ptr3管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ptr4管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ptr5管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><blockquote>\n<p>对于一个未初始化的共享智能指针，可以通过 reset 方法来初始化，当智能指针中有值的时候，调用 reset 会使引用计数减 1。</p>\n</blockquote>\n<h3 id=\"获取原始指针\"><a class=\"markdownIt-Anchor\" href=\"#获取原始指针\">#</a> 获取原始指针</h3>\n<hr>\n<h2 id=\"独占智能指针unique_ptr\"><a class=\"markdownIt-Anchor\" href=\"#独占智能指针unique_ptr\">#</a> 独占智能指针（unique_ptr）</h2>\n<h3 id=\"unique_ptr的初始化\"><a class=\"markdownIt-Anchor\" href=\"#unique_ptr的初始化\">#</a> unique_ptr 的初始化</h3>\n<p>std::unique_ptr 是一个独占型的智能指针，它不允许其他的智能指针共享其内部的指针，可以通过它的构造函数初始化一个独占智能指针对象，但是不允许通过赋值将一个 unique_ptr 赋值给另一个 unique_ptr。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过构造函数初始化对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//error, 不允许将一个 unique_ptr 赋值给另一个 unique_ptr</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>std::unique_ptr 不允许复制，但是可以通过函数返回给其他的 std::unique_ptr，还可以通过  <code>std::move</code>  来转移给其他的 std::unique_ptr，这样原始指针的所有权就被转移了，这个原始指针还是被独占的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">unique_ptr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 通过构造函数初始化</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 通过转移所有权的方式初始化</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr3 <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>unique_ptr 独占智能指针类也有一个 reset 方法，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span> pointer ptr <span class=\"token operator\">=</span> <span class=\"token function\">pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用 reset 方法可以让 unique_ptr 解除对原始内存的管理，也可以用来初始化一个独占的智能指针。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 解除对原始内存的管理</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t <span class=\"token comment\">// 重新指定智能指针管理的原始内存</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果想要获取独占智能指针管理的原始地址，可以调用 get () 方法，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pointer <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 得到内存地址中存储的实际数值 250</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"删除器\"><a class=\"markdownIt-Anchor\" href=\"#删除器\">#</a> 删除器</h3>\n<p>unique_ptr 指定删除器和 shared_ptr 指定删除器是有区别的，unique_ptr 指定删除器的时候需要确定删除器的类型，所以不能像 shared_ptr 那样直接指定删除器，举例说明：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">using</span> func_ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> func_ptr<span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的代码中第 7 行，func_ptr 的类型和 lambda 表达式的类型是一致的。在 lambda 表达式没有捕获任何变量的情况下是正确的，如果捕获了变量，编译时则会报错：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">using</span> func_ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> func_ptr<span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的代码中错误原因是这样的，在 lambda 表达式没有捕获任何外部变量时，可以直接转换为函数指针，一旦捕获了就无法转换了，如果想要让编译器成功通过编译，那么需要使用可调用对象包装器来处理声明的函数指针：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">using</span> func_ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<h2 id=\"弱引用智能指针weak_ptr\"><a class=\"markdownIt-Anchor\" href=\"#弱引用智能指针weak_ptr\">#</a> 弱引用智能指针（weak_ptr）</h2>\n<p>弱引用智能指针 std::weak_ptr 可以看做是 shared_ptr 的助手，它不管理 shared_ptr 内部的指针。std::weak_ptr 没有重载操作符 * 和 -&gt;，因为它不共享指针，不能操作资源，所以它的构造不会增加引用计数，析构也不会减少引用计数，它的主要作用就是作为一个旁观者监视 shared_ptr 中管理的资源是否存在。</p>\n<h3 id=\"初始化\"><a class=\"markdownIt-Anchor\" href=\"#初始化\">#</a> 初始化</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 默认构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token function\">weak_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 拷贝构造</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">weak_ptr</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> weak_ptr<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">U</span><span class=\"token operator\">></span> <span class=\"token function\">weak_ptr</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> weak_ptr<span class=\"token operator\">&lt;</span>U<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 通过 shared_ptr 对象构造</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">U</span><span class=\"token operator\">></span> <span class=\"token function\">weak_ptr</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> shared_ptr<span class=\"token operator\">&lt;</span>U<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 C++11 中，weak_ptr 的初始化可以通过以上提供的构造函数来完成初始化，具体使用方法如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp1<span class=\"token punctuation\">;</span>    \t<span class=\"token comment\">// 构造了一个空 weak_ptr 对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">wp2</span><span class=\"token punctuation\">(</span>wp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 通过一个空 weak_ptr 对象构造了另一个空 weak_ptr 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">wp3</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 通过一个 shared_ptr 对象构造了一个可用的 weak_ptr 实例对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp4<span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    wp4 <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 隐式类型转换，通过一个 shared_ptr 对象构造了一个可用的 weak_ptr 实例对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    wp5 <span class=\"token operator\">=</span> wp3<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 通过一个 weak_ptr 对象构造了一个可用的 weak_ptr 实例对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"其他常用方法\"><a class=\"markdownIt-Anchor\" href=\"#其他常用方法\">#</a> 其他常用方法</h3>\n<h4 id=\"use_count\"><a class=\"markdownIt-Anchor\" href=\"#use_count\">#</a> use_count()</h4>\n<p>通过调用 std::weak_ptr 类提供的 use_count () 方法可以获得当前所观测资源的引用计数，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数返回所监测的资源的引用计数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>修改一下上面的测试程序，添加打印资源引用计数的代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">wp2</span><span class=\"token punctuation\">(</span>wp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">wp3</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    wp4 <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    wp5 <span class=\"token operator\">=</span> wp3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use_count: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wp1: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wp2: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wp3: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wp4: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wp5: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp5<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 输出：</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>use_count<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>wp1<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>wp2<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>wp3<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>wp4<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>wp5<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>通过打印的结果可以知道，虽然弱引用智能指针 wp3、wp4、wp5 监测的资源是同一个，但是它的引用计数并没有发生任何的变化，也进一步证明了 weak_ptr 只是监测资源，并不管理资源。</p>\n<h4 id=\"expired\"><a class=\"markdownIt-Anchor\" href=\"#expired\">#</a> expired()</h4>\n<p>通过调用 std::weak_ptr 类提供的 expired () 方法来判断观测的资源是否已经被释放，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回 true 表示资源已经被释放，返回 false 表示资源没有被释放</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数使用方法如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">shared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">weak</span><span class=\"token punctuation\">(</span>shared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1. weak \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>weak<span class=\"token punctuation\">.</span><span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"is not\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" expired\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    shared<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"2. weak \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>weak<span class=\"token punctuation\">.</span><span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"is not\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" expired\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 输出：</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">1.</span> weak is <span class=\"token operator\">not</span> expired</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">2.</span> weak is expired</pre></td></tr></table></figure><p>weak_ptr 监测的就是 shared_ptr 管理的资源，当共享智能指针调用 shared.reset (); 之后管理的资源被释放，因此 weak.expired () 函数的结果返回 true，表示监测的资源已经不存在了。</p>\n<h4 id=\"lock\"><a class=\"markdownIt-Anchor\" href=\"#lock\">#</a> lock()</h4>\n<p>通过调用 std::weak_ptr 类提供的 lock () 方法来获取管理所监测资源的 shared_ptr 对象，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span>element_type<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数的使用方法如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> sp1<span class=\"token punctuation\">,</span> sp2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    sp1 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    wp <span class=\"token operator\">=</span> sp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    sp2 <span class=\"token operator\">=</span> wp<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use_count: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    sp1<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use_count: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    sp1 <span class=\"token operator\">=</span> wp<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use_count: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*sp1: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>sp1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*sp2: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>sp2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 输出：</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>use_count<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>use_count<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>use_count<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">*</span>sp1<span class=\"token operator\">:</span> <span class=\"token number\">520</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">*</span>sp2<span class=\"token operator\">:</span> <span class=\"token number\">520</span></pre></td></tr></table></figure><ul>\n<li>sp2 = wp.lock (); 通过调用 lock () 方法得到一个用于管理 weak_ptr 对象所监测的资源的共享智能指针对象，使用这个对象初始化 sp2，此时所监测资源的引用计数为 2</li>\n<li>sp1.reset (); 共享智能指针 sp1 被重置，weak_ptr 对象所监测的资源的引用计数减 1</li>\n<li>sp1 = wp.lock ();sp1 重新被初始化，并且管理的还是 weak_ptr 对象所监测的资源，因此引用计数加 1</li>\n<li>共享智能指针对象 sp1 和 sp2 管理的是同一块内存，因此最终打印的内存中的结果是相同的，都是 520</li>\n</ul>\n<h4 id=\"reset\"><a class=\"markdownIt-Anchor\" href=\"#reset\">#</a> reset()</h4>\n<p>通过调用 std::weak_ptr 类提供的 reset () 方法来清空对象，使其不监测任何资源，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数的使用方法如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">wp</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1. wp \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>wp<span class=\"token punctuation\">.</span><span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"is not\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" expired\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    wp<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"2. wp \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>wp<span class=\"token punctuation\">.</span><span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"is not\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" expired\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">1.</span> wp is <span class=\"token operator\">not</span> expired</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">2.</span> wp is expired</pre></td></tr></table></figure><h3 id=\"返回管理this的shared_ptr\"><a class=\"markdownIt-Anchor\" href=\"#返回管理this的shared_ptr\">#</a> 返回管理 this 的 shared_ptr</h3>\n<h3 id=\"解决循环引用问题\"><a class=\"markdownIt-Anchor\" href=\"#解决循环引用问题\">#</a> 解决循环引用问题</h3>\n<hr>\n<h1 id=\"多线程\"><a class=\"markdownIt-Anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<p><code>C++11</code>  之前，C++ 语言没有对并发编程提供语言级别的支持，这使得我们在编写可移植的并发程序时，存在诸多的不便。 <code>C++11</code>  中增加了线程以及线程相关的类，很方便地支持了并发编程，使得编写的多线程程序的可移植性得到了很大的提高。</p>\n<h2 id=\"处理日期和时间的-chrono-库\"><a class=\"markdownIt-Anchor\" href=\"#处理日期和时间的-chrono-库\">#</a> 处理日期和时间的 chrono 库</h2>\n<p>C++11 中提供了日期和时间相关的库 chrono，通过 chrono 库可以很方便地处理日期和时间，为程序的开发提供了便利。chrono 库主要包含三种类型的类： <code>时间间隔duration</code> 、 <code>时钟clocks</code> 、 <code>时间点time point</code> 。</p>\n<h3 id=\"时间间隔-duration\"><a class=\"markdownIt-Anchor\" href=\"#时间间隔-duration\">#</a> 时间间隔 duration</h3>\n<p>duration 表示一段时间间隔，用来记录时间长度，可以表示几秒、几分钟、几个小时的时间间隔。</p>\n<p><strong>duration 类的原型</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义于头文件 &lt;chrono></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rep</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Period</span> <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>ratio<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">duration</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>Rep</code> ：这是一个数值类型，表示时钟数（周期）的类型（默认为整型）。</p>\n</li>\n<li>\n<p><code>Period</code> ：表示时钟的周期，它的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义于头文件 &lt;ratio></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>intmax_t Num<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>intmax_t Denom <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ratio</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>ratio</code>  类表示每个时钟周期的秒数，其中第一个模板参数  <code>Num</code>  代表分子， <code>Denom</code>  代表分母，该分母值默认为 1，因此，<strong>ratio 代表的是一个分子除以分母的数值</strong>，比如：ratio&lt;2&gt; 代表一个时钟周期是 2 秒，ratio&lt;60 &gt; 代表一分钟，ratio&lt;60<em>60&gt; 代表一个小时，ratio&lt;60</em>60*24&gt; 代表一天。而 ratio&lt;1,1000&gt; 代表的是 1/1000 秒，也就是 1 毫秒，ratio&lt;1,1000000 &gt; 代表一微秒，ratio&lt;1,1000000000 &gt; 代表一纳秒。</p>\n<p>为了方便使用，在标准库中定义了一些常用的时间间隔，比如：时、分、秒、毫秒、微秒、纳秒，它们都位于 chrono 命名空间下，定义如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>纳秒：std::chrono::nanoseconds</td>\n<td>duration&lt;Rep*/* 至少 64 位的有符号整数类型 <em>/</em>, std::nano&gt;</td>\n</tr>\n<tr>\n<td>微秒：std::chrono::microseconds</td>\n<td>duration&lt;Rep*/* 至少 55 位的有符号整数类型 <em>/</em>, std::micro&gt;</td>\n</tr>\n<tr>\n<td>毫秒：std::chrono::milliseconds</td>\n<td>duration&lt;Rep*/* 至少 45 位的有符号整数类型 <em>/</em>, std::milli&gt;</td>\n</tr>\n<tr>\n<td>秒： std::chrono::seconds</td>\n<td>duration&lt;Rep*/* 至少 35 位的有符号整数类型 <em>/</em>&gt;</td>\n</tr>\n<tr>\n<td>分钟：std::chrono::minutes</td>\n<td>duration&lt;Rep*/* 至少 29 位的有符号整数类型 <em>/</em>, std::ratio&lt;60&gt;&gt;</td>\n</tr>\n<tr>\n<td>小时：std::chrono::hours</td>\n<td>duration&lt;Rep*/* 至少 23 位的有符号整数类型 <em>/</em>, std::ratio&lt;3600&gt;&gt;</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><strong>duration 类的构造函数</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">duration</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> duration<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2. 通过指定时钟周期的类型来构造对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rep2</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">explicit</span> <span class=\"token function\">duration</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> Rep2<span class=\"token operator\">&amp;</span> r <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 3. 通过指定时钟周期类型，和时钟周期长度来构造对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rep2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Period2</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token function\">duration</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> duration<span class=\"token operator\">&lt;</span>Rep2<span class=\"token punctuation\">,</span>Period2<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> d <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>为了更加方便的进行 duration 对象之间的操作，类内部进行了操作符重载：</p>\n<table>\n<thead>\n<tr>\n<th>操作符重载</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>operator=</td>\n<td>赋值内容 (公开成员函数)</td>\n</tr>\n<tr>\n<td>operator+<br/>operator-</td>\n<td>实现一元 + 和一元 - (公开成员函数)</td>\n</tr>\n<tr>\n<td>operator++<br/>operator++(int)<br/>operator–<br/>operator–(int)</td>\n<td>递增或递减周期计数 (公开成员函数)</td>\n</tr>\n<tr>\n<td>operator+=<br/>operator-=<br/>operator*=<br/>operator/=<br/>operator%=</td>\n<td>实现二个时长间的复合赋值 (公开成员函数)</td>\n</tr>\n</tbody>\n</table>\n<p>duration 类还提供了获取时间间隔的时钟周期数的方法 count ()，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">constexpr</span> rep <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>duration 类的使用</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;chrono></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>hours <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 一小时</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>milliseconds ms<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 3 毫秒</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>duration<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> ratio<span class=\"token operator\">&lt;</span><span class=\"token number\">1000</span><span class=\"token operator\">>></span> <span class=\"token function\">ks</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 3000 秒</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// chrono::duration&lt;int, ratio&lt;1000>> d3(3.5);  // error</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>duration<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token function\">dd</span><span class=\"token punctuation\">(</span><span class=\"token number\">6.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 6.6 秒</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 使用小数表示时钟周期的次数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>duration<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>ratio<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token operator\">>></span> <span class=\"token function\">hz</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"时间点-time-point\"><a class=\"markdownIt-Anchor\" href=\"#时间点-time-point\">#</a> 时间点 time point</h3>\n<p>chrono 库中提供了一个表示时间点的类  <code>time_point</code> ，该类的定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义于头文件 &lt;chrono></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Duration</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">Clock</span><span class=\"token double-colon punctuation\">::</span>duration</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">time_point</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>它被实现成如同存储一个 Duration 类型的自 Clock 的纪元起始开始的时间间隔的值，通过这个类最终可以得到时间中的某一个时间点。</p>\n<ul>\n<li>Clock：此时间点在此时钟上计量</li>\n<li>Duration：用于计量从纪元起时间的 std::chrono::duration 类型</li>\n</ul>\n<p><strong>time_point 类的构造函数</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 构造一个以新纪元 (epoch，即：1970.1.1) 作为值的对象，需要和时钟类一起使用，不能单独使用该无参构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">time_point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2. 构造一个对象，表示一个时间点，其中 d 的持续时间从 epoch 开始，需要和时钟类一起使用，不能单独使用该构造函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">time_point</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> duration<span class=\"token operator\">&amp;</span> d <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 3. 拷贝构造函数，构造与 t 相同时间点的对象，使用的时候需要指定模板参数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Duration2</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">time_point</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> time_point<span class=\"token operator\">&lt;</span>Clock<span class=\"token punctuation\">,</span>Duration2<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> t <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"时钟-clocks\"><a class=\"markdownIt-Anchor\" href=\"#时钟-clocks\">#</a> 时钟 clocks</h3>\n<p>chrono 库中提供了获取当前的系统时间的时钟类，包含的时钟一共有三种：</p>\n<ul>\n<li><code>system_clock</code> ：系统的时钟，系统的时钟可以修改，甚至可以网络对时，因此使用系统时间计算时间差可能不准。</li>\n<li><code>steady_clock</code> ：是固定的时钟，相当于秒表。开始计时后，时间只会增长并且不能修改，适合用于记录程序耗时</li>\n<li><code>high_resolution_clock</code> ：和时钟类  <code>steady_clock</code>  是等价的（是它的别名）。</li>\n</ul>\n<p>在这些时钟类的内部有  <code>time_point</code> 、 <code>duration</code> 、 <code>Rep</code> 、 <code>Period</code>  等信息，基于这些信息来获取当前时间，以及实现  <code>time_t</code>  和  <code>time_point</code>  之间的相互转换。</p>\n<h4 id=\"system_clock\"><a class=\"markdownIt-Anchor\" href=\"#system_clock\">#</a> system_clock</h4>\n<h4 id=\"steady_clock\"><a class=\"markdownIt-Anchor\" href=\"#steady_clock\">#</a> steady_clock</h4>\n<h4 id=\"high_resolution_clock\"><a class=\"markdownIt-Anchor\" href=\"#high_resolution_clock\">#</a> high_resolution_clock</h4>\n<h3 id=\"转换函数\"><a class=\"markdownIt-Anchor\" href=\"#转换函数\">#</a> 转换函数</h3>\n<h4 id=\"duration_cast\"><a class=\"markdownIt-Anchor\" href=\"#duration_cast\">#</a> duration_cast</h4>\n<h4 id=\"time_point_cast\"><a class=\"markdownIt-Anchor\" href=\"#time_point_cast\">#</a> time_point_cast</h4>\n<hr>\n<h2 id=\"线程类-thread\"><a class=\"markdownIt-Anchor\" href=\"#线程类-thread\">#</a> 线程类 thread</h2>\n<p>C++11 中提供的线程类叫做  <code>std::thread</code> ，基于这个类创建一个新的线程非常的简单，只需要提供线程函数或者函数对象即可，并且可以同时指定线程函数的参数。这个类提供的一些常用 API：</p>\n<h3 id=\"构造函数\"><a class=\"markdownIt-Anchor\" href=\"#构造函数\">#</a> 构造函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 默认构造函，构造一个线程对象，在这个线程中不执行任何处理动作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 移动构造函数，将 other 的线程所有权转移给新的 thread 对象。之后 other 不再表示执行线程。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span> thread<span class=\"token operator\">&amp;&amp;</span> other <span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 创建线程对象，并在该线程中执行函数 f 中的业务逻辑，args 是要传递给函数 f 的参数。任务函数 f 的可选类型有很多，普通函数，类成员函数，匿名函数，仿函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">thread</span><span class=\"token punctuation\">(</span> Function<span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">,</span> Args<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 使用 =delete 显示删除拷贝构造，不允许线程对象之间的拷贝</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> thread<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"公共成员函数\"><a class=\"markdownIt-Anchor\" href=\"#公共成员函数\">#</a> 公共成员函数</h3>\n<h3 id=\"get_id\"><a class=\"markdownIt-Anchor\" href=\"#get_id\">#</a> get_id()</h3>\n<p>应用程序启动之后默认只有一个线程，这个线程一般称之为<strong>主线程或父线程</strong>，通过线程类创建出的线程一般称之为<strong>子线程</strong>，每个被创建出的线程实例都对应一个线程 ID，这个 ID 是唯一的，可以通过这个 ID 来区分和识别各个已经存在的线程实例，这个获取线程 ID 的函数叫做  <code>get_id()</code> ，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>thread<span class=\"token double-colon punctuation\">::</span>id <span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>示例程序：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;chrono></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> string str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"子线程: i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"num: \"</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>             <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", str: \"</span> <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"子线程: i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"主线程的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    thread <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i love you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    thread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>func1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t 的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t1的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上面的示例程序中有一个 bug，在主线程中依次创建出两个子线程，打印两个子线程的线程 ID，最后主线程执行完毕就退出了（主线程就是执行 main () 函数的那个线程）。默认情况下，主线程销毁时会将与其关联的两个子线程也一并销毁，但是这时有可能子线程中的任务还没有执行完毕，最后也就得不到我们想要的结果了。</p>\n</blockquote>\n<p>当启动了一个线程（创建了一个 thread 对象）之后，在这个线程结束的时候 <code>std::terminate ()</code> ，我们如何去回收线程所使用的资源呢？thread 库给我们两种选择：</p>\n<ul>\n<li>加入式 <code>join()</code></li>\n<li>分离式 <code>detach()</code></li>\n</ul>\n<p>另外，我们必须要在线程对象销毁之前在二者之间作出选择，否则程序运行期间就会有 bug 产生。</p>\n<h3 id=\"join\"><a class=\"markdownIt-Anchor\" href=\"#join\">#</a> join()</h3>\n<p><code>join()</code>  字面意思是连接一个线程，意味着主动地等待线程的终止（线程阻塞）。在某个线程中通过子线程对象调用  <code>join()</code>  函数，调用这个函数的线程被阻塞，但是子线程对象中的任务函数会继续执行，当任务执行完毕之后  <code>join()</code>  会清理当前子线程中的相关资源然后返回，同时，调用该函数的线程解除阻塞继续向下执行。</p>\n<p>再次强调，我们一定要搞清楚这个函数阻塞的是哪一个线程，函数在哪个线程中被执行，那么函数就阻塞哪个线程。该函数的函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>有了这样一个线程阻塞函数之后，就可以解决在上面测试程序中的 bug 了，** 如果要阻塞主线程的执行，只需要在主线程中通过子线程对象调用这个方法即可，当调用这个方法的子线程对象中的任务函数执行完毕之后，主线程的阻塞也就随之解除了。** 修改之后的示例代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"主线程的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    thread <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i love you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    thread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>func1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t 的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t1的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当主线程运行到第八行 t.join ();，根据子线程对象 t 的任务函数 func () 的执行情况，主线程会做如下处理：</p>\n<ul>\n<li>如果任务函数 func () 还没执行完毕，主线程阻塞，直到任务执行完毕，主线程解除阻塞，继续向下运行</li>\n<li>如果任务函数 func () 已经执行完毕，主线程不会阻塞，继续向下运行</li>\n</ul>\n<p>同样，第 9 行的代码亦如此。</p>\n<h3 id=\"detach\"><a class=\"markdownIt-Anchor\" href=\"#detach\">#</a> detach()</h3>\n<p><code>detach()</code>  函数的作用是进行线程分离，分离主线程和创建出的子线程。在线程分离之后，主线程退出也会一并销毁创建出的所有子线程，在主线程退出之前，它可以脱离主线程继续独立的运行，任务执行完毕之后，这个子线程会自动释放自己占用的系统资源。该函数函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>线程分离函数没有参数也没有返回值，只需要在线程成功之后，通过线程对象调用该函数即可，继续将上面的测试程序修改一下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"主线程的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    thread <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i love you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    thread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>func1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t 的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t1的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    t<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 让主线程休眠，等待子线程执行完毕</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep_for</span><span class=\"token punctuation\">(</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注意事项：线程分离函数 detach () 不会阻塞线程，子线程和主线程分离之后，在主线程中就不能再对这个子线程做任何控制了，比如：通过 join () 阻塞主线程等待子线程中的任务执行完毕，或者调用 get_id () 获取子线程的线程 ID。有利就有弊，鱼和熊掌不可兼得，建议使用 join ()。</p>\n</blockquote>\n<h3 id=\"joinable\"><a class=\"markdownIt-Anchor\" href=\"#joinable\">#</a> joinable()</h3>\n<p>joinable () 函数用于判断主线程和子线程是否处理关联（连接）状态，一般情况下，二者之间的关系处于关联状态，该函数返回一个布尔类型：</p>\n<ul>\n<li>返回值为 true：主线程和子线程之间有关联（连接）关系</li>\n<li>返回值为 false：主线程和子线程之间没有关联（连接）关系<br>\n C++</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">joinable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"operator\"><a class=\"markdownIt-Anchor\" href=\"#operator\">#</a> operator=</h3>\n<p><strong>线程中的资源是不能被复制的</strong>，因此通过 = 操作符进行赋值操作最终并不会得到两个完全相同的对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// move (1)\t</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>thread<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>thread<span class=\"token operator\">&amp;&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// copy [deleted] (2)\t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>thread<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> other<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过以上 = 操作符的重载声明可以得知：</p>\n<ul>\n<li>如果 other 是一个右值，会进行资源所有权的转移</li>\n<li>如果 other 不是右值，禁止拷贝，该函数被显示删除（=delete），不可用</li>\n</ul>\n<h3 id=\"静态函数\"><a class=\"markdownIt-Anchor\" href=\"#静态函数\">#</a> 静态函数</h3>\n<p>thread 线程类还提供了一个静态方法，用于<strong>获取当前计算机的 CPU 核心数</strong>，根据这个结果在程序中创建出数量相等的线程，<strong>每个线程独自占有一个 CPU 核心，这些线程就不用分时复用 CPU 时间片，此时程序的并发效率是最高的。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">unsigned</span> <span class=\"token function\">hardware_concurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">hardware_concurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"CPU number: \"</span> <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<h2 id=\"线程命名空间-this_thread\"><a class=\"markdownIt-Anchor\" href=\"#线程命名空间-this_thread\">#</a> 线程命名空间 this_thread</h2>\n<hr>\n<h2 id=\"call_once-函数\"><a class=\"markdownIt-Anchor\" href=\"#call_once-函数\">#</a> call_once 函数</h2>\n<hr>\n<h2 id=\"线程同步之互斥锁-mutex\"><a class=\"markdownIt-Anchor\" href=\"#线程同步之互斥锁-mutex\">#</a> 线程同步之互斥锁 mutex</h2>\n<hr>\n<h2 id=\"线程同步之条件变量\"><a class=\"markdownIt-Anchor\" href=\"#线程同步之条件变量\">#</a> 线程同步之条件变量</h2>\n<hr>\n<h2 id=\"线程同步之原子变量-atomic\"><a class=\"markdownIt-Anchor\" href=\"#线程同步之原子变量-atomic\">#</a> 线程同步之原子变量 atomic</h2>\n<hr>\n<h2 id=\"线程异步\"><a class=\"markdownIt-Anchor\" href=\"#线程异步\">#</a> 线程异步</h2>\n<hr>\n<h1 id=\"易学和易用性\"><a class=\"markdownIt-Anchor\" href=\"#易学和易用性\">#</a> 易学和易用性</h1>\n<h2 id=\"lambda表达式\"><a class=\"markdownIt-Anchor\" href=\"#lambda表达式\">#</a> lambda 表达式</h2>\n<h3 id=\"基本用法\"><a class=\"markdownIt-Anchor\" href=\"#基本用法\">#</a> 基本用法</h3>\n<p>lambda 表达式是 C++11 最重要也是最常用的特性之一，这是现代编程语言的一个特点，lambda 表达式有以下优点：</p>\n<ul>\n<li>声明式的编程风格：就地匿名定义目标函数或函数对象，不需要额外写一个命名函数或函数对象。</li>\n<li>简洁：避免了代码膨胀和功能分散，让开发更加高效。</li>\n<li>在需要的时间和地点实现功能闭包，让程序更加灵活。</li>\n</ul>\n<p>lambda 表达式定义了一个匿名函数，并且可以捕获一定范围内的变量。lambda 表达式的语法形式简单，归纳如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>capture<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span> opt <span class=\"token operator\">-></span> ret <span class=\"token punctuation\">&#123;</span>body<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中 <code>capture</code>  是捕获列表， <code>params</code>  是参数列表， <code>opt</code>  是函数选项， <code>ret</code>  是返回值类型， <code>body</code>  是函数体。</p>\n<ol>\n<li>\n<p>捕获列表 [ ]：捕获一定范围内的变量</p>\n</li>\n<li>\n<p>参数列表 ( )：和普通函数的参数列表一样，如果没有参数，参数列表可以省略不写。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\t<span class=\"token comment\">// 没有参数，参数列表为空</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\t\t<span class=\"token comment\">// 没有参数，参数列表省略不写</span></pre></td></tr></table></figure></li>\n<li>\n<p>opt 选项，不需要可以省略</p>\n<ul>\n<li>mutable: 可以修改按值传递进来的拷贝（注意是能修改拷贝，而不是值本身）</li>\n<li>exception: 指定函数抛出的异常，如抛出整数类型的异常，可以使用 throw ();</li>\n</ul>\n</li>\n<li>\n<p>ret 返回值类型：在 C++11 中，lambda 表达式的返回值是通过返回值后置语法来定义的。</p>\n</li>\n<li>\n<p>函数体：函数的实现，这部分不能省略，但函数体可以为空。</p>\n</li>\n</ol>\n<h3 id=\"捕获列表\"><a class=\"markdownIt-Anchor\" href=\"#捕获列表\">#</a> 捕获列表</h3>\n<p>lambda 表达式的捕获列表可以捕获一定范围内的变量，具体使用方式如下：</p>\n<ul>\n<li><code>[]</code>  - 不捕捉任何变量</li>\n<li><code>[&amp;]</code>  - 捕获外部作用域中所有变量，并作为引用在函数体内使用 (<strong>按引用捕获</strong>)</li>\n<li><code>[=]</code>  - 捕获外部作用域中所有变量，并作为副本在函数体内使用 (<strong>按值捕获</strong>)\n<ul>\n<li><strong>拷贝的副本在匿名函数体内部是只读的</strong></li>\n</ul>\n</li>\n<li><code>[=, &amp;foo]</code>  - 按值捕获外部作用域中所有变量，并按照引用捕获外部变量 foo</li>\n<li><code>[bar]</code>  - 按值捕获 bar 变量，同时不捕获其他变量</li>\n<li><code>[&amp;bar]</code>  - 按引用捕获 bar 变量，同时不捕获其他变量</li>\n<li><code>[this]</code>  - 捕获当前类中的 this 指针\n<ul>\n<li>让 lambda 表达式拥有和当前类成员函数同样的访问权限</li>\n<li>如果已经使用了 &amp; 或者 =, 默认添加此选项</li>\n</ul>\n</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">auto</span> x1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> m_number<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">auto</span> x2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> m_number <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">auto</span> x3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> m_number <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">auto</span> x4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> m_number<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">auto</span> x5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> m_number <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">auto</span> x6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> m_number <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">auto</span> x7 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> m_number<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> m_number <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>x1：错误，没有捕获外部变量，不能使用类成员 m_number</li>\n<li>x2：正确，以值拷贝的方式捕获所有外部变量</li>\n<li>x3：正确，以引用的方式捕获所有外部变量</li>\n<li>x4：正确，捕获 this 指针，可访问对象内部成员</li>\n<li>x5：错误，捕获 this 指针，可访问类内部成员，没有捕获到变量 x，y，因此不能访问。</li>\n<li>x6：正确，捕获 this 指针，x，y</li>\n<li>x7：正确，捕获 this 指针，并且可以修改对象内部变量的值</li>\n</ul>\n<blockquote>\n<p>在匿名函数内部，需要<strong>通过 lambda 表达式的捕获列表控制如何捕获外部变量，以及访问哪些变量</strong>。默认状态下 lambda 表达式无法修改通过复制方式捕获外部变量，如果希望修改这些外部变量，需要通过引用的方式进行捕获。</p>\n</blockquote>\n<h3 id=\"返回值\"><a class=\"markdownIt-Anchor\" href=\"#返回值\">#</a> 返回值</h3>\n<p>一般情况，lambda 表达式的返回值是非常明显的，因此在 C++11 中允许省略 lambda 表达式的返回值。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 完整的 lambda 表达式定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 忽略返回值的 lambda 表达式定义</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一般情况，不指定 lambda 表达式的返回值，编译器会根据 return 语句自动推导返回值的类型，但需要注意的是 <strong>labmda 表达式不能通过列表初始化自动推导出返回值类型</strong>。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ok，可以自动推导出返回值类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//error，不能推导出返回值类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">auto</span> f1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 基于列表初始化推导返回值，错误</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"函数本质\"><a class=\"markdownIt-Anchor\" href=\"#函数本质\">#</a> 函数本质</h3>\n<p>使用  <code>lambda 表达式捕获列表</code> 捕获外部变量，如果希望去修改按值捕获的外部变量，那么应该如何处理呢？这就需要使用 mutable 选项，<strong>被 mutable 修改时 lambda 表达式就算没有参数也要写明参数列表，并且可以去掉按值捕获的外部变量的只读（const）属性</strong>。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> f1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">//error, 按值捕获外部变量，a 是只读的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> f2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">mutable</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// ok</span></pre></td></tr></table></figure><p>为什么通过值拷贝的方式捕获的外部变量是只读的:</p>\n<ul>\n<li><strong>lambda 表达式的类型在 C++11 中会被看做是一个带 operator () 的类，即仿函数。</strong></li>\n<li><strong>按照 C++ 标准，lambda 表达式的 operator () 默认是 const 的，一个 const 成员函数是无法修改成员变量值的。</strong></li>\n</ul>\n<p><strong>mutable 选项的作用就在于取消 operator () 的 const 属性。</strong></p>\n<p>因为 lambda 表达式在 C++ 中会被看做是一个仿函数，因此可以使用 <code>std::function</code>  和 <code>std::bind</code>  来存储和操作 lambda 表达式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 包装可调用函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 绑定可调用函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f2 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> placeholders<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 函数调用</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于没有捕获任何变量的 lambda 表达式，还可以转换成一个普通的函数指针：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> func_ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 没有捕获任何外部变量的匿名函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>func_ptr f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 函数调用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1314</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr>\n<h2 id=\"指针空值类型-nullptr\"><a class=\"markdownIt-Anchor\" href=\"#指针空值类型-nullptr\">#</a> 指针空值类型 - nullptr</h2>\n<p>在 C++ 程序开发中，为了提高程序的健壮性，一般会在定义指针的同时完成初始化操作，或者在指针的指向尚未明确的情况下，都会给指针初始化为  <code>NULL</code> ，<strong>避免产生野指针（没有明确指向的指针，操作也这种指针极可能导致程序发生异常）</strong>。 <code>C++98/03</code>  标准中，将一个指针初始化为空指针的方式有 2 种：</p>\n<ul>\n<li><code>char *ptr = 0;</code></li>\n<li><code>char *ptr = NULL;</code></li>\n</ul>\n<p>在底层源码中 NULL 这个宏是这样定义的:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\"><span class=\"token constant\">NULL</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NULL</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NULL</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>也就是说如果源码是 C++ 程序  <code>NULL</code>  就是  <code>0</code> ，如果是 C 程序  <code>NULL</code>  表示  <code>(void*)0</code> 。</p>\n<p>那么为什么要这样做呢？ 是由于 C++ 中， <code>void *</code>  类型无法隐式转换为其他类型的指针，此时使用  <code>0</code>  代替  <code>((void *)0)</code> ，用于解决空指针的问题。这个 0（0x0000 0000）表示的就是虚拟地址空间中的 0 地址，这块地址是只读的。</p>\n<p>C++ 中将 NULL 定义为字面常量 0，并不能保证在所有场景下都能很好的工作，比如，函数重载时， <code>NULL</code>  和  <code>0</code>  无法区分：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"void func(char *p)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"void func(int p)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 想要调用重载函数 void func (char *p)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 想要调用重载函数 void func (int p)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 测试结果</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>通过打印的结果可以看到，虽然调用  <code>func(NULL)</code> ; 最终链接到的还是  <code>void func(int p)</code>  和预期是不一样的，其实这个原因前边已经说的很明白了，在 C++ 中  <code>NULL</code>  和  <code>0</code>  是等价的。</p>\n<p>出于兼容性的考虑，C++11 标准并没有对 NULL 的宏定义做任何修改，而是另其炉灶，引入了一个新的关键字  <code>nullptr</code> 。<strong>nullptr 专用于初始化空类型指针，不同类型的指针变量都可以使用 nullptr 来初始化</strong>：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>    ptr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span>   ptr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span><span class=\"token operator\">*</span> ptr3 <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对应上面的代码编译器会分别将 nullptr 隐式转换成 int*、char* 以及 double* 指针类型。</p>\n<p>使用 nullptr 可以很完美的解决上边提到的函数重载问题:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"void func(char *p)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"void func(int p)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 测试结果</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>通过输出的结果可以看出， <code>nullptr</code>  无法隐式转换为整形，但是<strong>可以隐式匹配指针类型</strong>。<strong>在 C++11 标准下，相比 NULL 和 0，使用 nullptr 初始化空指针可以令我们编写的程序更加健壮。</strong></p>\n<hr>\n<h2 id=\"自动类型推导\"><a class=\"markdownIt-Anchor\" href=\"#自动类型推导\">#</a> 自动类型推导</h2>\n<p>在 C++11 中增加了很多新的特性，比如可以使用  <code>auto</code>  自动推导变量的类型，还能够结合  <code>decltype</code>  来表示函数的返回值。使用新的特性可以让我们写出更加简洁，更加现代的代码。</p>\n<h3 id=\"auto\"><a class=\"markdownIt-Anchor\" href=\"#auto\">#</a> auto</h3>\n<p>在 C++11 之前 auto 和 static 是对应的，表示变量是自动存储的，但是非 static 的局部变量默认都是自动存储的，因此这个关键字变得非常鸡肋。</p>\n<p>在 C++11 中他们赋予了新的含义，使用这个关键字能够像别的语言一样自动推导出变量的实际类型。</p>\n<ol>\n<li>推导规则</li>\n</ol>\n<h3 id=\"decltype\"><a class=\"markdownIt-Anchor\" href=\"#decltype\">#</a> decltype</h3>\n<p>在某些情况下，不需要或者不能定义变量，但是希望得到某种类型，这时候就可以使用 C++11 提供的 decltype 关键字了，它的作用是在编译器编译的时候推导出一个表达式的类型，语法格式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">decltype</span> <span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>decltype 是 “declare type” 的缩写，意思是 “声明类型”。decltype 的推导是在编译期完成的，它只是用于表达式类型的推导，并不会计算表达式的值。来看一组简单的例子：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> b <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// b -> int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span> c <span class=\"token operator\">=</span> <span class=\"token number\">52.13</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// c -> double</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">*</span>c<span class=\"token punctuation\">)</span> d <span class=\"token operator\">=</span> <span class=\"token number\">520.1314</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// d -> double</span></pre></td></tr></table></figure><p>可以看到 decltype 推导的表达式可简单可复杂，在这一点上 auto 是做不到的，auto 只能推导已初始化的变量类型。</p>\n<h3 id=\"c14-函数返回类型推导\"><a class=\"markdownIt-Anchor\" href=\"#c14-函数返回类型推导\">#</a> c++14 函数返回类型推导</h3>\n<p>C<ins>11 允许 lambda 函数根据 return 语句的表达式类型推断返回类型。C</ins>14 为一般的函数也提供了这个能力。C++14 还拓展了原有的规则，使得函数体并不是 {return expression;} 形式的函数也可以使用返回类型推导。</p>\n<p>为了启用返回类型推导，函数声明必须将 auto 作为返回类型，但没有 C++11 的后置返回类型说明符：</p>\n<p>auto DeduceReturnType (); // 返回类型由编译器推断<br>\n如果函数实现中含有多个 return 语句，这些表达式必须可以推断为相同的类型。[9]</p>\n<p>使用返回类型推导的函数可以前向声明，但在定义之前不可以使用。它们的定义在使用它们的翻译单元（translation unit）之中必须是可用的。</p>\n<p>这样的函数中可以存在递归，但递归调用必须在函数定义中的至少一个 return 语句之后：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token function\">Correct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回类型被推断为 int</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Correct</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，可以调用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token function\">Wrong</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Wrong</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不能调用，之前没有 return 语句</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回类型被推断为 int</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"c17-auto表达式\"><a class=\"markdownIt-Anchor\" href=\"#c17-auto表达式\">#</a> c++17 auto 表达式</h3>\n<hr>\n<h2 id=\"基于范围的-for-循环\"><a class=\"markdownIt-Anchor\" href=\"#基于范围的-for-循环\">#</a> 基于范围的 for 循环</h2>\n<p>在  <code>C++98/03</code>  中，不同的容器和数组遍历的方式不尽相同，写法不统一，也不够简洁，而  <code>C++11</code>  基于范围的 for 循环可以以简洁、统一的方式来遍历容器和数组，用起来也更方便。</p>\n<h3 id=\"for循环新语法\"><a class=\"markdownIt-Anchor\" href=\"#for循环新语法\">#</a> for 循环新语法</h3>\n<p>传统 for 循环使用迭代器遍历容器：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们在遍历的过程中需要给出容器的两端：开头（begin）和结尾（end），因为这种遍历方式不是基于范围来设计的。在<strong>基于范围的 for 循环中</strong>，不需要再传递容器的两端，循环会自动以容器为范围展开，并且循环中也屏蔽掉了迭代器的遍历细节，直接抽取容器中的元素进行运算，使用这种方式进行循环遍历会让编码和维护变得更加简便。</p>\n<p>C++98/03 中普通的 for 循环，语法格式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>表达式 <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> 表达式 <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> 表达式 <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 循环体</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>C++11 基于范围的 for 循环，语法格式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>declaration <span class=\"token operator\">:</span> expression<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 循环体</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的语法格式中  <code>declaration</code>  表示遍历声明，在遍历过程中，当前被遍历到的元素会被存储到声明的变量中。 <code>expression</code>  是要遍历的对象，它可以是<strong>表达式</strong>、<strong>容器</strong>、<strong>数组</strong>、<strong>初始化列表</strong>等。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> value <span class=\"token operator\">:</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上面的例子中，是将容器中遍历的当前元素拷贝到了声明的变量 value 中，因此无法对容器中的元素进行写操作，如果需要在遍历过程中修改元素的值，需要使用引用。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"遍历修改之前的容器: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>value <span class=\"token operator\">:</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> value<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"遍历修改之后的容器: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>value <span class=\"token operator\">:</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 输出：</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>遍历修改之前的容器<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>遍历修改之后的容器<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span></pre></td></tr></table></figure><p>对容器的遍历过程中，如果只是读数据，不允许修改元素的值，可以使用  <code>const</code>  定义保存元素数据的变量，在定义的时候建议使用  <code>const auto &amp;</code> ，这样相对于  <code>const auto</code>  效率要更高一些。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> value <span class=\"token operator\">:</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用细节\"><a class=\"markdownIt-Anchor\" href=\"#使用细节\">#</a> 使用细节</h3>\n<p><strong>关系型容器 map 的遍历：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> m<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lucy\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lily\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 基于范围的 for 循环方式</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> it <span class=\"token operator\">:</span> m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"id: \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", name: \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 普通的 for 循环方式</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"id: \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", name: \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的例子中使用两种方式对 map 进行了遍历，通过对比有两点需要注意的事项：</p>\n<ul>\n<li>使用普通的 for 循环方式（基于迭代器）遍历关联性容器， auto 自动推导出的是一个<strong>迭代器类型</strong>，需要使用迭代器的方式取出元素中的键值对（和指针的操作方法相同）：\n<ul>\n<li>it-&gt;first</li>\n<li>it-&gt;second</li>\n</ul>\n</li>\n<li>使用基于范围的 for 循环遍历关联性容器，auto 自动推导出的类型是容器中的 value_type，相当于一个对组（std::pair）对象，提取键值对的方式如下：\n<ul>\n<li>it.first</li>\n<li>it.second</li>\n</ul>\n</li>\n</ul>\n<p><strong>元素只读：</strong></p>\n<p>通过对基于范围的 for 循环语法的介绍可以得知，在 for 循环内部声明一个变量的引用就可以修改遍历的表达式中的元素的值，但是这并不适用于所有的情况，对应 set 容器来说，内部元素都是只读的，这是由容器的特性决定的，因此在 for 循环中  <code>auto &amp;</code>  会被视为  <code>const auto &amp;</code>  。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> st<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item <span class=\"token operator\">:</span> st<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//error, 不能给常量赋值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>除此之外，<strong>在遍历关联型容器时也会出现同样的问题，基于范围的 for 循环中，虽然可以得到一个 std::pair 引用，但是我们是不能修改里边的 first 值的，也就是 key 值。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> m<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lucy\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lily\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> item <span class=\"token operator\">:</span> m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//item.first 是一个常量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"id: \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>first<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", name: \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>对应基于范围的 for 循环来说，冒号后边的表达式只会被执行一次。在得到遍历对象之后会先确定好迭代的范围，基于这个范围直接进行遍历。如果是普通的 for 循环，在每次迭代的时候都需要判断是否已经到了结束边界。</p>\n</blockquote>\n<h1 id=\"通用性能提升\"><a class=\"markdownIt-Anchor\" href=\"#通用性能提升\">#</a> 通用性能提升</h1>\n<h2 id=\"右值引用\"><a class=\"markdownIt-Anchor\" href=\"#右值引用\">#</a> 右值引用</h2>\n<h3 id=\"左值-右值\"><a class=\"markdownIt-Anchor\" href=\"#左值-右值\">#</a> 左值、右值</h3>\n<p>C++11 增加了一个新的类型，称为<strong>右值引用（ R-value reference）</strong>，标记为  <code>&amp;&amp;</code> 。在介绍右值引用类型之前先要了解什么是左值和右值：</p>\n<ul>\n<li>lvalue 是  <code>loactor value</code>  的缩写，rvalue 是  <code>read value</code>  的缩写</li>\n<li><strong>左值是指存储在内存中、有明确存储地址（可取地址）的数据；</strong></li>\n<li><strong>右值是指可以提供数据值的数据（不可取地址）；</strong></li>\n</ul>\n<p>通过描述可以看出，区分左值与右值的便捷方法是：<strong>可以对表达式取地址（&amp;）就是左值，否则为右值</strong>。所有有名字的变量或对象都是左值，而右值是匿名的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">520</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1314</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一般情况下，位于  <code>=</code>  前的表达式为左值，位于  <code>=</code>  后边的表达式为右值。也就是说例子中的  <code>a, b</code>  为左值， <code>520,1314</code>  为右值。 <code>a=b</code>  是一种特殊情况，在这个表达式中  <code>a, b</code>  都是左值，因为变量  <code>b</code>  是可以被取地址的，不能视为右值</p>\n<h3 id=\"纯右值-将亡值\"><a class=\"markdownIt-Anchor\" href=\"#纯右值-将亡值\">#</a> 纯右值、将亡值</h3>\n<p>C++11 中右值可以分为两种：一个是将亡值（ xvalue, expiring value），另一个则是纯右值（ prvalue, PureRvalue**）**：</p>\n<ul>\n<li><strong>纯右值：非引用返回的临时变量、运算表达式产生的临时变量、原始字面量和 lambda 表达式等</strong></li>\n<li><strong>将亡值：与右值引用相关的表达式，比如，T&amp;&amp; 类型函数的返回值、 std::move 的返回值等。</strong></li>\n</ul>\n<h3 id=\"右值引用-2\"><a class=\"markdownIt-Anchor\" href=\"#右值引用-2\">#</a> 右值引用</h3>\n<p>右值引用就是对一个右值进行引用的类型。因为右值是匿名的，所以我们只能通过引用的方式找到它。** 无论声明左值引用还是右值引用都必须立即进行初始化，因为引用类型本身并不拥有所绑定对象的内存，只是该对象的一个别名。** 通过右值引用的声明，该右值又 “重获新生”，其生命周期与右值引用类型变量的生命周期一样，只要该变量还活着，该右值临时量将会一直存活下去。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">=</span> <span class=\"token number\">520</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"construct: my name is jerry\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Test<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copy construct: my name is tom\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Test <span class=\"token function\">getObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;&amp;</span> a2 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    Test<span class=\"token operator\">&amp;</span> t <span class=\"token operator\">=</span> <span class=\"token function\">getObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    Test<span class=\"token operator\">&amp;&amp;</span> t <span class=\"token operator\">=</span> <span class=\"token function\">getObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">const</span> Test<span class=\"token operator\">&amp;</span> t <span class=\"token operator\">=</span> <span class=\"token function\">getObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>该例中 <code>int&amp;&amp; value = 520;</code>  里面 <code>520</code>  是纯右值， <code>value</code>  是对 <code>520</code>  这个右值的引用；</li>\n<li>在  <code>int &amp;&amp;a2 = a1;</code>  中  <code>a1</code>  虽然写在了  <code>=</code>  右边，但是它仍然是一个左值，<strong>使用左值初始化一个右值引用类型是不合法的。</strong></li>\n<li>在  <code>Test&amp; t = getObj()</code>  这句代码中语法是错误的，<strong>右值不能给普通的左值引用赋值。</strong></li>\n<li>在  <code>Test&amp;&amp; t = getObj();</code>  中  <code>getObj()</code>  返回的临时对象被称之为将亡值， <code>t</code>  是这个将亡值的右值引用。</li>\n<li><code>const Test&amp; t = getObj()</code>  这句代码的语法是正确的，<strong>常量左值引用是一个万能引用类型，它可以接受左值、右值、常量左值和常量右值。</strong></li>\n</ul>\n<h3 id=\"性能优化\"><a class=\"markdownIt-Anchor\" href=\"#性能优化\">#</a> 性能优化</h3>\n<hr>\n<h2 id=\"转移和完美转发\"><a class=\"markdownIt-Anchor\" href=\"#转移和完美转发\">#</a> 转移和完美转发</h2>\n<h3 id=\"move\"><a class=\"markdownIt-Anchor\" href=\"#move\">#</a> move</h3>\n<p>在 C++11 添加了右值引用，并且不能使用左值初始化右值引用，如果想要使用左值初始化一个右值引用需要借助  <code>std::move ()</code>  函数，<strong>使用 std::move 方法可以将左值转换为右值。使用这个函数并不能移动任何东西，而是和移动构造函数一样都具有移动语义，将对象的状态或者所有权从一个对象转移到另一个对象，只是转移，没有内存拷贝。</strong></p>\n<p>从实现上讲，std::move 基本等同于一个类型转换： <code>static_cast&lt;T&amp;&amp;&gt;(lvalue);</code> ，函数原型如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Ty</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>_NODISCARD <span class=\"token keyword\">constexpr</span> remove_reference_t<span class=\"token operator\">&lt;</span>_Ty<span class=\"token operator\">></span><span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>_Ty<span class=\"token operator\">&amp;&amp;</span> _Arg<span class=\"token punctuation\">)</span> _NOEXCEPT</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// forward _Arg as movable</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>remove_reference_t<span class=\"token operator\">&lt;</span>_Ty<span class=\"token operator\">></span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>_Arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用方法：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span>：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Test t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Test <span class=\"token operator\">&amp;&amp;</span> v1 <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Test <span class=\"token operator\">&amp;&amp;</span> v2 <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>在第 4 行中，使用左值初始化右值引用，因此语法是错误的</li>\n<li>在第 5 行中，使用 move () 函数将左值转换为了右值，这样就可以初始化右值引用了。</li>\n</ul>\n<p>假设一个临时容器很大，并且需要将这个容器赋值给另一个容器，就可以执行如下操作：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ls<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ls<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ls<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ls1 <span class=\"token operator\">=</span> ls<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 需要拷贝，效率低</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ls2 <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果不使用 std::move，拷贝的代价很大，性能较低。使用 move 几乎没有任何代价，只是转换了资源的所有权。如果一个对象内部有较大的堆内存或者动态数组时，使用  <code>move ()</code>  就可以非常方便的进行数据所有权的转移。另外，我们也可以给类编写相应的移动构造函数 <code>（T::T(T&amp;&amp; another)）</code> 和和具有移动语义的赋值函数 <code>（T&amp;&amp; T::operator=(T&amp;&amp; rhs)）</code> ，在构造对象和赋值的时候尽可能的进行资源的重复利用，因为它们都是接收一个右值引用参数。</p>\n<h3 id=\"forward\"><a class=\"markdownIt-Anchor\" href=\"#forward\">#</a> forward</h3>\n<p>右值引用类型是独立于值的，一个右值引用作为函数参数的形参时，在函数内部转发该参数给内部其他函数时，它就变成一个左值，并不是原来的类型了。如果需要按照参数原来的类型转发到另一个函数，可以使用 C++11 提供的  <code>std::forward ()</code>  函数，该函数实现的功能称之为完美转发。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数原型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> T<span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">forward</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">remove_reference</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>type<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> T<span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">forward</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">remove_reference</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>type<span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 精简之后的样子</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>当 T 为左值引用类型时，t 将被转换为 T 类型的左值</strong></li>\n<li><strong>当 T 不是左值引用类型时，t 将被转换为 T 类型的右值</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"l-value: \"</span> <span class=\"token operator\">&lt;&lt;</span> t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r-value: \"</span> <span class=\"token operator\">&lt;&lt;</span> t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testForward</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;&amp;</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">testForward</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1314</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">testForward</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">testForward</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">testForward</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">testForward</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 测试结果</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>l<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">520</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">520</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">520</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>l<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>l<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>l<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>l<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>l<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>l<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr></table></figure><ul>\n<li><code>testForward(520);</code>  函数的形参为未定引用类型  <code>T&amp;&amp;</code> ，实参为右值，初始化后被推导为一个右值引用\n<ul>\n<li><code>printValue(v);</code>  已命名的右值 v，编译器会视为左值处理，<strong>实参为左值</strong></li>\n<li><code>printValue(move(v));</code>  已命名的右值编译器会视为左值处理，通过 move 又将其转换为右值，<strong>实参为右值</strong></li>\n<li><code>printValue(forward&lt;T&gt;(v));</code> forward 的模板参数为右值引用，最终得到一个右值，<strong>实参为右值</strong></li>\n</ul>\n</li>\n<li><code>testForward(num);</code>  函数的形参为未定引用类型  <code>T&amp;&amp;</code> ，实参为左值，初始化后被推导为一个左值引用\n<ul>\n<li><code>printValue(v);</code>  <strong>实参为左值</strong></li>\n<li><code>printValue(move(v));</code>  通过 move 将左值转换为右值，<strong>实参为右值</strong></li>\n<li><code>printValue(forward&lt;T&gt;(v));</code> forward 的模板参数为左值引用，最终得到一个左值引用，<strong>实参为左值</strong></li>\n</ul>\n</li>\n<li><code>testForward(forward&lt;int&gt;(num));</code> forward 的模板类型为 int，最终会得到一个右值，函数的形参为未定引用类型  <code>T&amp;&amp;</code>  被右值初始化后得到一个右值引用类型\n<ul>\n<li><code>printValue(v);</code>  已命名的右值 v，编译器会视为左值处理，<strong>实参为左值</strong></li>\n<li><code>printValue(move(v));</code>  已命名的右值编译器会视为左值处理，通过 move 又将其转换为右值，<strong>实参为右值</strong></li>\n<li><code>printValue(forward&lt;T&gt;(v));</code> forward 的模板参数为右值引用，最终得到一个右值，<strong>实参为右值</strong></li>\n</ul>\n</li>\n<li><code>testForward(forward&lt;int&amp;&gt;(num));</code> forward 的模板类型为 int&amp;，最终会得到一个左值，函数的形参为未定引用类型  <code>T&amp;&amp;</code>  被左值初始化后得到一个左值引用类型\n<ul>\n<li><code>printValue(v);</code>  <strong>实参为左值</strong></li>\n<li><code>printValue(move(v));</code>  通过 move 将左值转换为右值，<strong>实参为右值</strong></li>\n<li><code>printValue(forward&lt;T&gt;(v));</code> forward 的模板参数为左值引用，最终得到一个左值，<strong>实参为左值</strong></li>\n</ul>\n</li>\n<li><code>testForward(forward&lt;int&amp;&amp;&gt;(num));</code> forward 的模板类型为 int&amp;&amp;，最终会得到一个右值，函数的形参为未定引用类型  <code>T&amp;&amp;</code>  被右值初始化后得到一个右值引用类型\n<ul>\n<li><code>printValue(v);</code>  已命名的右值 v，编译器会视为左值处理，<strong>实参为左值</strong></li>\n<li><code>printValue(move(v));</code>  已命名的右值编译器会视为左值处理，通过 move 又将其转换为右值，<strong>实参为右值</strong></li>\n<li><code>printValue(forward&lt;T&gt;(v));</code> forward 的模板参数为右值引用，最终得到一个右值，<strong>实参为右值</strong></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"列表初始化\"><a class=\"markdownIt-Anchor\" href=\"#列表初始化\">#</a> 列表初始化</h2>\n<p>关于 C<ins> 中的变量，数组，对象等都有不同的初始化方法，在这些繁琐的初始化方法中没有任何一种方式适用于所有的情况。为了统一初始化方式，并且让初始化行为具有确定的效果，在 C</ins>11 中提出了列表初始化的概念。</p>\n<h3 id=\"统一的初始化\"><a class=\"markdownIt-Anchor\" href=\"#统一的初始化\">#</a> 统一的初始化</h3>\n<p>在 <code>C++98/03</code>  中，对于普通数组和可以直接进行内存拷贝（memcpy ()）的对象是可以使用列表初始化来初始化数据的：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数组的初始化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span> array1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 对象的初始化</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">double</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>zhang3<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在  <code>C++11</code>  中，列表初始化变得更加灵活了：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Test <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    Test <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Test t2 <span class=\"token operator\">=</span> <span class=\"token number\">520</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Test t3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">520</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Test t4<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">520</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1314</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1314</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> arr1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> arr2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>t1</code> ：最中规中矩的初始化方式，通过提供的带参构造进行对象的初始化</li>\n<li><code>t2</code> ：语法错误，因为提供的拷贝构造函数是私有的。如果拷贝构造函数是公共的，520 会通过隐式类型转换被 Test (int) 构造成一个匿名对象，然后再通过对这个匿名对象进行拷贝构造得到 t2</li>\n<li>t3 和 t4：使用了 C++11 的初始化方式来初始化对象，效果和 t1 的方式是相同的。\n<ul>\n<li><strong>在初始时，{} 前面的等号是否书写对初始化行为没有任何影响。</strong></li>\n<li><strong>t3 虽然使用了等号，但是它仍然是列表初始化</strong>，因此私有的拷贝构造对它没有任何影响。</li>\n</ul>\n</li>\n<li>t1、arr1 和 t2、arr2：这两个是基础数据类型的列表初始化方式，可以看到，和对象的初始化方式是统一的。</li>\n<li>t4、a2、arr2 的写法，是 C++11 中新添加的语法格式，使用这种方式可以<strong>直接在变量名后边跟上初始化列表，来进行变量或者对象的初始化</strong>。</li>\n</ul>\n<p><strong>使用 new 操作符创建新对象的时候</strong>可以使用列表初始化进行对象的初始化</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">520</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">52.134</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>指针 p 指向了一个 new 操作符返回的内存，通过列表初始化将内存数据初始化为了 520</li>\n<li>变量 b 是对匿名对象使用列表初始之后，再进行拷贝初始化。</li>\n<li>数组 array 在堆上动态分配了一块内存，通过列表初始化的方式直接完成了多个元素的初始化。</li>\n</ul>\n<p>除此之外，列表初始化还可以直接用在函数返回值上：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> string name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"id: \"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", name: \"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Person <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">9527</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"华安\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    Person p <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>代码中的  <code>return &#123; 9527, &quot;华安&quot; &#125;;</code>  就相当于  <code>return (9527, &quot;华安&quot; );</code> ，直接返回了一个匿名对象。通过上面的几个例子可以看出在  <code>C++11</code>  使用列表初始化是非常便利的，它统一了各种对象的初始化方式，而且还让代码的书写更加简单清晰。</p>\n<h3 id=\"初始化列表细节\"><a class=\"markdownIt-Anchor\" href=\"#初始化列表细节\">#</a> 初始化列表细节</h3>\n<h3 id=\"stdinitializer_list\"><a class=\"markdownIt-Anchor\" href=\"#stdinitializer_list\">#</a> std::initializer_list</h3>\n<hr>\n<h2 id=\"常量表达式修饰符-constexpr\"><a class=\"markdownIt-Anchor\" href=\"#常量表达式修饰符-constexpr\">#</a> 常量表达式修饰符 - constexpr</h2>\n<h3 id=\"const\"><a class=\"markdownIt-Anchor\" href=\"#const\">#</a> const</h3>\n<p>在 C++11 之前只有  <code>const</code>  关键字，从功能上来说这个关键字有双重语义：<strong>变量只读</strong>，<strong>修饰常量</strong>，举一个简单的例子：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">//error，num 是一个只读变量，不是常量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> array1<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//ok，count 是一个常量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> a1 <span class=\"token operator\">=</span> <span class=\"token number\">520</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> a2 <span class=\"token operator\">=</span> <span class=\"token number\">250</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    b <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    a1 <span class=\"token operator\">=</span> <span class=\"token number\">1314</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b: \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 输出结果为 1314</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>函数  <code>void func(const int num)</code>  的参数  <code>num</code>  表示这个变量是只读的，但不是常量，因此使用  <code>int array[num];</code>  这种方式定义一个数组，编译器是会报错的，提示 <code>num不可用作为常量来使用。</code></li>\n<li><code>const int count = 24;</code>  中的  <code>count</code>  却是一个常量，因此可以使用这个常量来定义一个静态数组。</li>\n</ul>\n<p>另外，<strong>变量只读并不等价于常量</strong>，二者是两个概念不能混为一谈，分析一下这句测试代码  <code>const int&amp; b = a1;</code> ：</p>\n<ul>\n<li><code>b</code>  是一个常量的引用，所以 b 引用的变量是不能被修改的，也就是说  <code>b = a2;</code>  这句代码语法是错误的。</li>\n<li>在  <code>const</code>  对于变量  <code>a1</code>  是没有任何约束的， <code>a1</code>  的值变了  <code>b</code>  的值也就变了</li>\n<li>引用  <code>b</code>  是只读的，但是并不能保证它的值是不可改变的，也就是说它不是常量。</li>\n</ul>\n<h3 id=\"constexpr\"><a class=\"markdownIt-Anchor\" href=\"#constexpr\">#</a> constexpr</h3>\n<p>在 C++11 中添加了一个新的关键字  <code>constexpr</code> ，这个关键字是用来修饰常量表达式的。<strong>所谓常量表达式，指的就是由多个（≥1）常量（值不会改变）组成并且在编译过程中就得到计算结果的表达式。</strong></p>\n<p>在介绍 gcc/g++ 工作流程的时候，<strong>C++ 程序从编写完毕到执行分为四个阶段：预处理、 编译、汇编和链接 4 个阶段</strong>，得到可执行程序之后就可以运行了。需要额外强调的是，<strong>常量表达式和非常量表达式的计算时机不同，非常量表达式只能在程序运行阶段计算出结果，但是常量表达式的计算往往发生在程序的编译阶段</strong>，这可以极大提高程序的执行效率，因为表达式只需要在编译阶段计算一次，节省了每次程序运行时都需要计算一次的时间。</p>\n<p>那么问题来了，编译器如何识别表达式是不是常量表达式呢？</p>\n<p>在 C++11 中添加了  <code>constexpr</code>  关键字之后就可以在程序中使用它来修改常量表达式，用来提高程序的执行效率。在使用中建议将  <code>const</code>  和  <code>constexpr</code>  的功能区分开，即<strong>凡是表达 “只读” 语义的场景都使用</strong>  <code>const</code> <strong>，表达 “常量” 语义的场景都使用</strong>  <code>constexpr</code> 。</p>\n<p>在定义常量时，const 和 constexpr 是等价的，都可以在程序的编译阶段计算出结果，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 不是常量表达式，m 的值只有在运行时才会获取。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">520</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 是一个常量表达式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 是一个常量表达式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">520</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 是一个常量表达式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 是一个常量表达式</span></pre></td></tr></table></figure><p>对于 C++ 内置类型的数据，可以直接用  <code>constexpr</code>  修饰，但如果是自定义的数据类型（用 struct 或者 class 实现），直接用  <code>constexpr</code>  修饰是不行的。</p>\n<p>如果要定义一个结构体 / 类常量对象，可以这样写：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> Test t<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//error，不能修改常量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    t<span class=\"token punctuation\">.</span>num <span class=\"token operator\">+=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"id: \"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", num: \"</span> <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在第 13 行的代码中  <code>t.num += 100;</code>  的操作是错误的，对象 t 是一个常量，因此它的成员也是常量，常量是不能被修改的。</p>\n<h3 id=\"常量表达式函数\"><a class=\"markdownIt-Anchor\" href=\"#常量表达式函数\">#</a> 常量表达式函数</h3>\n<p>为了提高 C++ 程序的执行效率，我们可以将程序中值不需要发生变化的变量定义为常量，也可以使用  <code>constexpr</code>  修饰函数的返回值，这种函数被称作<strong>常量表达式函数</strong>，这些函数主要包括以下几种：<strong>普通函数 / 类成员函数、类的构造函数、模板函数。</strong></p>\n<h3 id=\"修饰普通函数\"><a class=\"markdownIt-Anchor\" href=\"#修饰普通函数\">#</a> 修饰普通函数</h3>\n<p><code>constexpr</code>  并不能修改任意函数的返回值，使这些函数成为常量表达式函数，必须要满足以下几个条件：</p>\n<ol>\n<li>\n<p><strong>函数必须要有返回值，并且 return 返回的表达式必须是常量表达式。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//error，不是常量表达式函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a: \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//error，不是常量表达式函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>函数  <code>func1()</code>  没有返回值，不满足常量表达式函数要求</li>\n<li>函数  <code>func2()</code>  返回值不是常量表达式，不满足常量表达式函数要求</li>\n</ul>\n</li>\n<li>\n<p><strong>函数在使用之前，必须有对应的定义语句。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在测试程序  <code>constexpr int num = func1();</code>  中，还没有定义  <code>func1()</code>  就直接调用了，应该将  <code>func1()</code>  函数的定义放到  <code>main()</code>  函数的上边。</p>\n</li>\n<li>\n<p><strong>整个函数的函数体中，不能出现非常量表达式之外的语句（using 指令、typedef 语句以及 static_assert 断言、return 语句除外）。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"i: \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">using</span> mytype <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> mytype a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> mytype b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> mytype c <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> c <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因为  <code>func1()</code>  是一个常量表达式函数，在函数体内部是不允许出现非常量表达式以外的操作，因此函数体内部的  <code>for</code>  循环是一个非法操作。</p>\n</li>\n</ol>\n<blockquote>\n<p>以上三条规则不仅对应普通函数适用，对应类的成员函数也是适用的</p>\n</blockquote>\n<h3 id=\"修饰模板函数\"><a class=\"markdownIt-Anchor\" href=\"#修饰模板函数\">#</a> 修饰模板函数</h3>\n<p>C++11 语法中， <code>constexpr</code>  可以修饰函数模板，但由于模板中类型的不确定性，因此函数模板实例化后的模板函数是否符合常量表达式函数的要求也是不确定的。如果  <code>constexpr</code>  修饰的模板函数实例化结果不满足常量表达式函数的要求，则  <code>constexpr</code>  会被自动忽略，即该函数就等同于一个普通函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 定义函数模板</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">constexpr</span> T <span class=\"token function\">dispaly</span><span class=\"token punctuation\">(</span>T t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"luffy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 普通函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">dispaly</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"luffy's name: \"</span> <span class=\"token operator\">&lt;&lt;</span> ret<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", age: \"</span> <span class=\"token operator\">&lt;&lt;</span> ret<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 常量表达式函数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> ret1 <span class=\"token operator\">=</span> <span class=\"token function\">dispaly</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> ret1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p1 <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"luffy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p2 <span class=\"token operator\">=</span> <span class=\"token function\">dispaly</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"luffy's name: \"</span> <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", age: \"</span> <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面示例程序中定义了一个函数模板  <code>display()</code> ，但由于其返回值类型未定，因此在实例化之前无法判断其是否符合常量表达式函数的要求：</p>\n<ul>\n<li><code>struct Person ret = dispaly(p);</code>  由于参数  <code>p</code>  是变量，所以实例化后的函数不是常量表达式函数，此时  <code>constexpr</code>  是无效的</li>\n<li><code>constexpr int ret1 = dispaly(250);</code>  参数是常量，符合常量表达式函数的要求，此时  <code>constexpr</code>  是有效的</li>\n<li><code>constexpr struct Person p2 = dispaly(p1);</code>  参数是常量，符合常量表达式函数的要求，此时  <code>constexpr</code>  是有效的</li>\n</ul>\n<h3 id=\"修饰构造函数\"><a class=\"markdownIt-Anchor\" href=\"#修饰构造函数\">#</a> 修饰构造函数</h3>\n<p>如果想用直接得到一个常量对象，也可以使用  <code>constexpr</code>  修饰一个构造函数，这样就可以得到一个常量构造函数了。常量构造函数有一个要求：<strong>构造函数的函数体必须为空，并且必须采用初始化列表的方式为各个成员赋值。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"luffy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"luffy's name: \"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", age: \"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<h2 id=\"委托构造函数和继承构造函数\"><a class=\"markdownIt-Anchor\" href=\"#委托构造函数和继承构造函数\">#</a> 委托构造函数和继承构造函数</h2>\n<h3 id=\"委托构造函数\"><a class=\"markdownIt-Anchor\" href=\"#委托构造函数\">#</a> 委托构造函数</h3>\n<p>委托构造函数允许使用同一个类中的一个构造函数调用其它的构造函数，从而简化相关变量的初始化。下面举例说明：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_max <span class=\"token operator\">=</span> max <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> max <span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_max <span class=\"token operator\">=</span> max <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> max <span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 冗余代码</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_min <span class=\"token operator\">=</span> min <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> min <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">?</span> min <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_max <span class=\"token operator\">=</span> max <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> max <span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 冗余代码</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_min <span class=\"token operator\">=</span> min <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> min <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">?</span> min <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 冗余代码</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_middle <span class=\"token operator\">=</span> mid <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">&amp;&amp;</span> mid <span class=\"token operator\">></span> min <span class=\"token operator\">?</span> mid <span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> m_min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> m_max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">int</span> m_middle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    Test <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"min: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span>m_min <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", middle: \"</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span>m_middle <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", max: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span>m_max <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的程序中有三个构造函数，但是这三个函数中都有重复的代码，在 C++11 之前构造函数是不能调用构造函数的，加入了委托构造之后，我们就可以轻松地完成代码的优化了：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_max <span class=\"token operator\">=</span> max <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> max <span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_min <span class=\"token operator\">=</span> min <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> min <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">?</span> min <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_middle <span class=\"token operator\">=</span> mid <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">&amp;&amp;</span> mid <span class=\"token operator\">></span> min <span class=\"token operator\">?</span> mid <span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> m_min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span> m_max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">int</span> m_middle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    Test <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"min: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span>m_min <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", middle: \"</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span>m_middle <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", max: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span>m_max <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在修改之后的代码中可以看到，重复的代码全部没有了，并且在一个构造函数中调用了其他的构造函数用于相关数据的初始化，相当于是一个链式调用。在使用委托构造函数的时候还需要注意一些几个问题：</p>\n<ul>\n<li>\n<p><strong>这种链式的构造函数调用不能形成一个闭环（死循环），否则会在运行期抛异常。</strong></p>\n</li>\n<li>\n<p><strong>如果要进行多层构造函数的链式调用，建议将构造函数的调用的写在初始列表中而不是函数体内部，否则编译器会提示形参的重复定义。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_max <span class=\"token operator\">=</span> max <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> max <span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//error, 此处编译器会报错，提示形参 max 被重复定义</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_min <span class=\"token operator\">=</span> min <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> min <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">?</span> min <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>在初始化列表中调用了代理构造函数初始化某个类成员变量之后，就不能在初始化列表中再次初始化这个变量了。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 错误，使用了委托构造函数就不能再次 m_max 初始化了</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_min <span class=\"token operator\">=</span> min <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> min <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">?</span> min <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"继承构造函数\"><a class=\"markdownIt-Anchor\" href=\"#继承构造函数\">#</a> 继承构造函数</h3>\n<p>C++11 中提供的继承构造函数可以让派生类直接使用基类的构造函数，而无需自己再写构造函数，尤其是在基类有很多构造函数的情况下，可以极大地简化派生类构造函数的编写。先来看没有继承构造函数之前的处理方式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_j</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">,</span> string k<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_j</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_k</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> m_i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">double</span> m_j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    string m_k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">,</span> string k<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    Child <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13.14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i love you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"int: \"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span>m_i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", double: \"</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span>m_j <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", string: \"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span>m_k <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过测试代码可以看出，在子类中初始化从基类继承的类成员，需要在子类中重新定义和基类一致的构造函数，这是非常繁琐的，C++11 中通过添加继承构造函数这个新特性完美的解决了这个问题，使得代码更加精简。</p>\n<p>继承构造函数的使用方法是这样的：通过使用  <code>using 类名::构造函数名</code> （其实类名和构造函数名是一样的）来声明使用基类的构造函数，这样子类中就可以不定义相同的构造函数了，直接使用基类的构造函数来构造派生类对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_j</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">,</span> string k<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_j</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_k</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> m_i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">double</span> m_j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    string m_k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">using</span> Base<span class=\"token double-colon punctuation\">::</span>Base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    Child <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"int: \"</span> <span class=\"token operator\">&lt;&lt;</span> c1<span class=\"token punctuation\">.</span>m_i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", double: \"</span> <span class=\"token operator\">&lt;&lt;</span> c1<span class=\"token punctuation\">.</span>m_j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    Child <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13.14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i love you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"int: \"</span> <span class=\"token operator\">&lt;&lt;</span> c2<span class=\"token punctuation\">.</span>m_i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", double: \"</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> c2<span class=\"token punctuation\">.</span>m_j <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", string: \"</span> <span class=\"token operator\">&lt;&lt;</span> c2<span class=\"token punctuation\">.</span>m_k <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在修改之后的子类中，没有添加任何构造函数，而是添加了  <code>using Base::Base;</code>  这样就可以在子类中直接继承父类的所有的构造函数，通过他们去构造子类对象了。</p>\n<p>另外如果在子类中隐藏了父类中的同名函数，也可以通过  <code>using</code>  的方式在子类中使用基类中的这些父类函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_j</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">,</span> string k<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_j</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_k</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"base class: i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> string str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"base class: i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", str = \"</span> <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> m_i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">double</span> m_j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    string m_k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">using</span> Base<span class=\"token double-colon punctuation\">::</span>Base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">using</span> Base<span class=\"token double-colon punctuation\">::</span>func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"child class: i'am superman!!!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    Child <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    c<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    c<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    c<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"superman\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 测试输出</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>child <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> i<span class=\"token number\">'</span>am superman<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>base <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> i <span class=\"token operator\">=</span> <span class=\"token number\">19</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>base <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> i <span class=\"token operator\">=</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> str <span class=\"token operator\">=</span> superman</pre></td></tr></table></figure><p>子类中的 func () 函数隐藏了基类中的两个 func () 因此默认情况下通过子类对象只能调用无参的 func ()，在上面的子类代码中添加了 using Base::func; 之后，就可以通过子类对象直接调用父类中被隐藏的带参 func () 函数了。</p>\n<hr>\n<h2 id=\"using-的使用\"><a class=\"markdownIt-Anchor\" href=\"#using-的使用\">#</a> using 的使用</h2>\n<p>在  <code>C++</code>  中  <code>using</code>  用于声明命名空间，使用命名空间也可以防止命名冲突。在程序中声明了命名空间之后，就可以直接使用命名空间中的定义的类了。在  <code>C++11</code>  中赋予了  <code>using</code>  新的功能，让 C++ 变得更年轻，更灵活。</p>\n<h3 id=\"定义别名\"><a class=\"markdownIt-Anchor\" href=\"#定义别名\">#</a> 定义别名</h3>\n<h3 id=\"模板的别名\"><a class=\"markdownIt-Anchor\" href=\"#模板的别名\">#</a> 模板的别名</h3>\n<hr>\n<h2 id=\"可调用对象包装器-绑定器\"><a class=\"markdownIt-Anchor\" href=\"#可调用对象包装器-绑定器\">#</a> 可调用对象包装器、绑定器</h2>\n<hr>\n<h2 id=\"pod-类型\"><a class=\"markdownIt-Anchor\" href=\"#pod-类型\">#</a> POD 类型</h2>\n<hr>\n<h2 id=\"默认函数控制-default-与-delete\"><a class=\"markdownIt-Anchor\" href=\"#默认函数控制-default-与-delete\">#</a> 默认函数控制 =default 与 =delete</h2>\n<hr>\n<h2 id=\"扩展的-friend-语法\"><a class=\"markdownIt-Anchor\" href=\"#扩展的-friend-语法\">#</a> 扩展的 friend 语法</h2>\n<hr>\n<h2 id=\"强类型枚举\"><a class=\"markdownIt-Anchor\" href=\"#强类型枚举\">#</a> 强类型枚举</h2>\n<hr>\n<h2 id=\"非受限联合体\"><a class=\"markdownIt-Anchor\" href=\"#非受限联合体\">#</a> 非受限联合体</h2>\n<hr>\n<h1 id=\"稳定性和兼容性\"><a class=\"markdownIt-Anchor\" href=\"#稳定性和兼容性\">#</a> 稳定性和兼容性</h1>\n<h2 id=\"noexcept\"><a class=\"markdownIt-Anchor\" href=\"#noexcept\">#</a> noexcept</h2>\n<h3 id=\"c-异常\"><a class=\"markdownIt-Anchor\" href=\"#c-异常\">#</a> C++ 异常</h3>\n<p>异常通常用于处理逻辑上可能发生的错误，在  <code>C++98</code>  中为我们提供了一套完善的异常处理机制，我们可以直接在程序中将各种类型的异常抛出，从而强制终止程序的运行。</p>\n<p>关于异常的基本语法如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 抛出异常的程序段</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    …………</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">throw</span> 表达式<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    …………</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 捕获并处理异常的程序段</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    复合语句</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型声明<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    复合语句</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>类型<span class=\"token punctuation\">(</span>形参<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    复合语句</pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"int exception, value: \"</span> <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"That's ok!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>异常被抛出后，从进入 try 块起，到异常被抛掷前，这期间在栈上构造的所有对象，都会被自动析构。析构的顺序与构造的顺序相反。这一过程称为栈的解旋。</p>\n</blockquote>\n<h3 id=\"异常接口声明\"><a class=\"markdownIt-Anchor\" href=\"#异常接口声明\">#</a> 异常接口声明</h3>\n<p>为了加强程序的可读性，可以在函数声明中列出可能抛出的所有异常类型，常用的有如下三种书写方式：</p>\n<ol>\n<li>\n<p>显示指定可以抛出的异常类型</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyException</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">msg</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    string msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">divisionMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span>MyException<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"division by zero!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// throw 100;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">double</span> v <span class=\"token operator\">=</span> <span class=\"token function\">divisionMethod</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"value: \"</span> <span class=\"token operator\">&lt;&lt;</span> v <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"catch except: \"</span>  <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>MyException e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"catch except: \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>msg <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第 7 行代码在  <code>divisionMethod</code>  函数后添加了  <code>throw</code>  异常接口声明，其参数表示可以抛出的异常类型，分别为  <code>int</code>  和  <code>MyException</code>  类型。</p>\n</li>\n<li>\n<p>抛出任意异常类型</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyException</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">msg</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    string msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">divisionMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"division by zero!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// throw 100;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第 7 行代码在  <code>divisionMethod</code>  没有添加异常接口声明，表示在该函数中<strong>可以抛出任意类型的异常</strong>。</p>\n</li>\n<li>\n<p>不抛出任何异常</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyException</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">msg</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    string msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">divisionMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"division by zero!!!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第 7 行代码在  <code>divisionMethod</code>  函数后添加了  <code>throw</code>  异常接口声明，其<strong>参数列表为空</strong>，表示该函数<strong>不允许抛出异常</strong>。</p>\n<blockquote>\n<p>以上程序在 VS 上的测试结果和在 Linux 上基于 G++ 的测试结果是不同的，如果违反了规则 VS 只会给出警告，而 G++ 则会直接终止程序的运行。（PS：VS 使用的不是 G++ 编译器）</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"noexcept异常声明\"><a class=\"markdownIt-Anchor\" href=\"#noexcept异常声明\">#</a> noexcept 异常声明</h3>\n<p>上面的例子中，在  <code>divisionMethod</code>  函数声明之后，我们定义了一个动态异常声明  <code>throw(MyException, int)</code> ，该声明指出了  <code>divisionMethod</code>  可能抛出的异常的类型。<strong>事实上，该特性很少被使用，因此在 C++11 中被弃用了</strong> ，而表示函数不会抛出异常的动态异常声明  <code>throw()</code>  也被新的  <code>noexcept</code>  异常声明所取代。</p>\n<p><code>noexcept</code>  形如其名， <strong>表示其修饰的函数不会抛出异常</strong> 。不过与  <code>throw ()</code>  动态异常声明不同的是，在 C++11 中如果  <code>noexcept</code>  修饰的函数抛出了异常，编译器可以选择直接调用  <code>std::terminate ()</code>  函数来终止程序的运行，这比基于异常机制的  <code>throw ()</code>  在效率上会高一些。这是因为异常机制会带来一些额外开销，比如函数抛出异常，会导致函数栈被依次地展开（栈解旋），并自动调用析构函数释放栈上的所有对象。<br>\n因此对于不会抛出异常的函数我们可以这样写:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">divisionMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"division by zero!!!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从语法上讲，noexcept 修饰符有两种形式：</p>\n<ol>\n<li>\n<p>简单地在函数声明后加上 noexcept 关键字</p>\n</li>\n<li>\n<p>可以接受一个常量表达式作为参数，如下所示∶</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">divisionMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">(</span>常量表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>常量表达式的结果会被转换成一个 bool 类型的值：</p>\n<ul>\n<li>值为 true，表示函数不会抛出异常</li>\n<li>值为 false，表示有可能抛出异常这里</li>\n<li>不带常量表达式的 noexcept 相当于声明了 noexcept（true），即不会抛出异常。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"类成员的快速初始化\"><a class=\"markdownIt-Anchor\" href=\"#类成员的快速初始化\">#</a> 类成员的快速初始化</h2>\n<h3 id=\"初始化类的非静态成员\"><a class=\"markdownIt-Anchor\" href=\"#初始化类的非静态成员\">#</a> 初始化类的非静态成员</h3>\n<p>在进行类成员变量初始化的时候，C<ins>11 标准对于 C</ins>98 做了补充，允许在定义类的时候在类内部直接对非静态成员变量进行初始化，在初始化的时候可以使用等号 = 也可以 使用花括号 {} 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">&#123;</span><span class=\"token number\">12</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">double</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.17</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">double</span> array1<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.17</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    string <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    string s2<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"hello, world\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以看到如果使用花括号 {} 的方式对类的非静态成员进行初始化，等号是可以省略不写的。</p>\n<ul>\n<li>第 9 行：错误，不能使用小括号 () 初始化对象，应该使用 花括号 {}</li>\n</ul>\n<h3 id=\"类内部赋值和初始化列表\"><a class=\"markdownIt-Anchor\" href=\"#类内部赋值和初始化列表\">#</a> 类内部赋值和初始化列表</h3>\n<p>在 C++11 之前对于非静态的类成员变量我们除了在构造函数内部进行赋值，也可以在类的初始化列表中进行初始化（这种方式比在构造函数内部赋值效率高）。那么，如果同时在类内部对非静态成员变量就地初始化和在初始化列表中进行初始化会怎么样呢？下面来测试一下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Init</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> z<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Init <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a: \"</span> <span class=\"token operator\">&lt;&lt;</span> tmp<span class=\"token punctuation\">.</span>a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", b: \"</span> <span class=\"token operator\">&lt;&lt;</span> tmp<span class=\"token punctuation\">.</span>b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", c: \"</span> <span class=\"token operator\">&lt;&lt;</span> tmp<span class=\"token punctuation\">.</span>c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>第 4 行：使用初始化列表对类的非静态成员进行初始化</li>\n<li>第 6、7、8 行：在类内部对非静态成员变量就地初始化（C++11 新特性）</li>\n</ul>\n<p>执行程序，输出的结果如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">30</span></pre></td></tr></table></figure><p>我们可以从函数的打印输出中看到，在类内部就地初始化和初始化列表并不冲突（程序可以正常运行）。程序员可以为同一成员变量既在类内部就地初始化，又在初始化列表中进行初始化，只不过初始化列表总是看起来后作用于非静态成员。也就是说，<strong>通过初始化列表指定的值会覆盖就地初始化时指定的值。</strong></p>\n<hr>\n<h2 id=\"数值类型和字符串之间的转换\"><a class=\"markdownIt-Anchor\" href=\"#数值类型和字符串之间的转换\">#</a> 数值类型和字符串之间的转换</h2>\n<h3 id=\"数值转换为字符串\"><a class=\"markdownIt-Anchor\" href=\"#数值转换为字符串\">#</a> 数值转换为字符串</h3>\n<p>使用 to_string () 方法可以非常方便地将各种数值类型转换为字符串类型，这是一个重载函，函数声明位于头文件 <string> 中，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件 &lt;string></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    string pi <span class=\"token operator\">=</span> <span class=\"token string\">\"pi is \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1415926</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    string love <span class=\"token operator\">=</span> <span class=\"token string\">\"love is \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.20</span> <span class=\"token operator\">+</span> <span class=\"token number\">13.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> pi <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> love <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"字符串转换为数值\"><a class=\"markdownIt-Anchor\" href=\"#字符串转换为数值\">#</a> 字符串转换为数值</h3>\n<p>由于 C++ 中的数值类型包括整形和浮点型，因此针对于不同的类型提供了不同的函数，通过调用这些函数可以将字符串类型转换为对应的数值类型。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义于头文件 &lt;string></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span>       <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">long</span>      <span class=\"token function\">stol</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">stoll</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>      <span class=\"token function\">stoul</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">stoull</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">float</span>       <span class=\"token function\">stof</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">double</span>      <span class=\"token function\">stod</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> <span class=\"token function\">stold</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>str</code> ：要转换的字符串</li>\n<li><code>pos</code> ：传出参数，记录从哪个字符开始无法继续进行解析，比如: 123abc, 传出的位置为 3</li>\n<li><code>base</code> ：若 base 为 0 ，则自动检测数值进制：若前缀为 0 ，则为八进制，若前缀为 0x 或 0X，则为十六进制，否则为十进制。</li>\n</ul>\n<p>这些函数虽然都有多个参数，但是除去第一个参数外其他都有默认值，一般情况下使用默认值就能满足需求。关于函数的使用示例代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    string str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"45\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    string str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"3.14159\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    string str3 <span class=\"token operator\">=</span> <span class=\"token string\">\"9527 with words\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    string str4 <span class=\"token operator\">=</span> <span class=\"token string\">\"words and 2\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> myint1 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">float</span> myint2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stof</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> myint3 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 错误： 'std::invalid_argument'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// int myint4 = std::stoi(str4);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"std::stoi(\\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> str1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\") is \"</span> <span class=\"token operator\">&lt;&lt;</span> myint1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"std::stof(\\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> str2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\") is \"</span> <span class=\"token operator\">&lt;&lt;</span> myint2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"std::stoi(\\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> str3 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\") is \"</span> <span class=\"token operator\">&lt;&lt;</span> myint3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// cout &lt;&lt; \"std::stoi(\\\"\" &lt;&lt; str4 &lt;&lt; \"\\\") is \" &lt;&lt; myint4 &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 测试输出</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"45\"</span><span class=\"token punctuation\">)</span> is <span class=\"token number\">45</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3.14159\"</span><span class=\"token punctuation\">)</span> is <span class=\"token number\">3.14159</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"9527 with words\"</span><span class=\"token punctuation\">)</span> is <span class=\"token number\">9527</span></pre></td></tr></table></figure><p>从上述测试程序可以得出这样的结论，在 C++11 提供的这些转换函数将字符串转换为数值的过程中：</p>\n<ul>\n<li>如果字符串中所有字符都是数值类型，整个字符串会被转换为对应的数值，并通过返回值返回</li>\n<li>如果字符串的前半部分字符是数值类型，后半部不是，那么前半部分会被转换为对应的数值，并通过返回值返回</li>\n<li>如果字符第一个字符不是数值类型转换失败</li>\n</ul>\n<hr>\n<h2 id=\"模板的优化\"><a class=\"markdownIt-Anchor\" href=\"#模板的优化\">#</a> 模板的优化</h2>\n<h3 id=\"模板的右尖括号\"><a class=\"markdownIt-Anchor\" href=\"#模板的右尖括号\">#</a> 模板的右尖括号</h3>\n<p>在泛型编程中，模板实例化有一个非常繁琐的地方，那就是连续的两个右尖括号（&gt;&gt;）会被编译器解析成右移操作符，而不是模板参数表的结束。我们先来看一段关于容器遍历的代码，在创建的类模板  <code>Base</code>  中提供了遍历容器的操作函数  <code>traversal()</code> :</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// test.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">traversal</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    Base<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    b<span class=\"token punctuation\">.</span><span class=\"token function\">traversal</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果使用 C++98/03 标准来编译上边的这段代码，就会得到如下的错误提示：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>test.cpp:25:20: error: <span class=\"token string\">'>>'</span> should be <span class=\"token string\">'> >'</span> within a nested template argument list</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     Base<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>根据错误提示中描述模板的两个右尖括之间需要添加空格，这样写起来就非常的麻烦，<strong>C++11 改进了编译器的解析规则，尽可能地将多个右尖括号（&gt;）解析成模板参数结束符</strong>，方便我们编写模板相关的代码。</p>\n<p>上面的这段代码，在支持  <code>C++11</code>  的编译器中编译是没有任何问题的，如果使用 g++ 直接编译需要加参数  <code>-std=c++11</code> ：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ g++ test.cpp <span class=\"token parameter variable\">-std</span><span class=\"token operator\">=</span>c++11 <span class=\"token parameter variable\">-o</span> app</pre></td></tr></table></figure><h3 id=\"默认模板参数\"><a class=\"markdownIt-Anchor\" href=\"#默认模板参数\">#</a> 默认模板参数</h3>\n<p>在  <code>C++98/03</code>  标准中，类模板可以有默认的模板参数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">=</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> T t<span class=\"token operator\">=</span><span class=\"token number\">520</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"current value: \"</span> <span class=\"token operator\">&lt;&lt;</span> t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Test<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    t<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Test<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token operator\">></span> t1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是不支持函数的默认模板参数，<strong>在 C++11 中添加了对函数模板默认参数的支持</strong>:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">=</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>\t<span class=\"token comment\">// C++98/03 不支持这种写法，C++11 中支持这种写法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>T t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"current value: \"</span> <span class=\"token operator\">&lt;&lt;</span> t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过上面的例子可以得到如下结论：当所有模板参数都有默认参数时，函数模板的调用如同一个普通函数。但对于类模板而言，哪怕所有参数都有默认参数，在使用时也必须在模板名后跟随 &lt;&gt; 来实例化。</p>\n<p>另外：函数模板的默认模板参数在使用规则上和其他的默认参数也有一些不同，它没有必须写在参数表最后的限制。这样当默认模板参数和模板参数自动推导结合起来时，书写就显得非常灵活了。我们可以指定函数模板中的一部分模板参数使用默认参数，另一部分使用自动推导，比如下面的例子：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">R</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">N</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>R <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>N arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">auto</span> ret1 <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"return value-1: \"</span> <span class=\"token operator\">&lt;&lt;</span> ret1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">auto</span> ret2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">52.134</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"return value-2: \"</span> <span class=\"token operator\">&lt;&lt;</span> ret2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">auto</span> ret3 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">52.134</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"return value-3: \"</span> <span class=\"token operator\">&lt;&lt;</span> ret3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">auto</span> ret4 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"return value-4: \"</span> <span class=\"token operator\">&lt;&lt;</span> ret4 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 测试输出</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">return</span> value<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">520</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">return</span> value<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token number\">52.134</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">return</span> value<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token number\">52</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">return</span> value<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token operator\">:</span> d</pre></td></tr></table></figure><p>根据得到的日志输出，分析一下示例代码中调用的模板函数：</p>\n<ul>\n<li><code>auto ret = func(520);</code>\n<ul>\n<li>函数返回值类型使用了默认的模板参数，函数的参数类型是自动推导出来的为 int 类型。</li>\n</ul>\n</li>\n<li><code>auto ret1 = func&lt;double&gt;(52.134);</code>\n<ul>\n<li>函数的返回值指定为 double 类型，函数参数是通过实参推导出来的，为 double 类型</li>\n</ul>\n</li>\n<li><code>auto ret3 = func&lt;int&gt;(52.134);</code>\n<ul>\n<li>函数的返回值指定为 int 类型，函数参数是通过实参推导出来的，为 double 类型</li>\n</ul>\n</li>\n<li><code>auto ret4 = func&lt;char, int&gt;(100);</code>\n<ul>\n<li>函数的参数为指定为 int 类型，函数返回值指定为 char 类型，不需要推导</li>\n</ul>\n</li>\n</ul>\n<p>当默认模板参数和模板参数自动推导同时使用时（优先级从高到低）：</p>\n<ul>\n<li><strong>如果可以推导出参数类型则使用推导出的类型</strong></li>\n<li><strong>如果函数模板无法推导出参数类型，那么编译器会使用默认模板参数</strong></li>\n<li><strong>如果无法推导出模板参数类型并且没有设置默认模板参数，编译器就会报错。</strong></li>\n</ul>\n<p>看一下下面的例子：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 函数模板定义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>T arg1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> U arg2 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arg1: \"</span> <span class=\"token operator\">&lt;&lt;</span> arg1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", arg2: \"</span> <span class=\"token operator\">&lt;&lt;</span> arg2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 模板函数调用</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//func ();    // 编译报错</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 测试输出</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>arg1<span class=\"token operator\">:</span> a<span class=\"token punctuation\">,</span> arg2<span class=\"token operator\">:</span> d</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>arg1<span class=\"token operator\">:</span> <span class=\"token number\">97</span><span class=\"token punctuation\">,</span> arg2<span class=\"token operator\">:</span> a</pre></td></tr></table></figure><p>分析一下调用的模板函数 func ()：</p>\n<ul>\n<li><code>func('a');</code> ：参数 T 被自动推导为 char 类型，U 使用的默认模板参数为 char 类型</li>\n<li><code>func(97, 'a');</code> ：参数 T 被自动推导为 int 类型，U 使用推导出的类型为 char</li>\n<li><code>func();</code> ：参数 T 没有指定默认模板类型，并且无法自动推导，编译器会直接报错\n<ul>\n<li><strong>模板参数类型的自动推导是根据模板函数调用时指定的实参进行推断的</strong>，没有实参则无法推导</li>\n<li>模板参数类型的自动推导不会参考函数模板中指定的默认参数。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"final-和-override\"><a class=\"markdownIt-Anchor\" href=\"#final-和-override\">#</a> final 和 override</h2>\n<hr>\n<h2 id=\"超长整形-long-long\"><a class=\"markdownIt-Anchor\" href=\"#超长整形-long-long\">#</a> 超长整形 long long</h2>\n<hr>\n<h2 id=\"静态断言-static_assert\"><a class=\"markdownIt-Anchor\" href=\"#静态断言-static_assert\">#</a> 静态断言 static_assert</h2>\n<hr>\n<h2 id=\"原始字面量\"><a class=\"markdownIt-Anchor\" href=\"#原始字面量\">#</a> 原始字面量</h2>\n<hr>\n<h1 id=\"c14\"><a class=\"markdownIt-Anchor\" href=\"#c14\">#</a> C++14</h1>\n<h1 id=\"c17\"><a class=\"markdownIt-Anchor\" href=\"#c17\">#</a> C++17</h1>\n<h2 id=\"结构化绑定\"><a class=\"markdownIt-Anchor\" href=\"#结构化绑定\">#</a> 结构化绑定</h2>\n<p>可以绑定 pair，tuple，数组，结构体，结构化绑定以后也可以修改原值，也可以使自定义类型支持结构化绑定，但是要修改 std</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token function\">func_two</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">func_two</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> mp <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> mp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> y <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>pair <span class=\"token function\">pa</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hihi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> y <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token number\">2.2</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">0</span> a</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token number\">1</span> b</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">4</span> hihi</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">/*       vector vec = &#123;1,2,3&#125;;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      auto&amp;[xx, yy, zz] = vec;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      cout &lt;&lt; xx &lt;&lt; endl; */</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">//vector 当然不能使用结构化绑定啦</span></pre></td></tr></table></figure>",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/03/30/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/",
            "url": "https://adventure-yx.github.io/2023/03/30/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/",
            "title": "算法进阶",
            "date_published": "2023-03-30T12:42:19.000Z",
            "content_html": "<h1 id=\"排序算法总结\"><a class=\"markdownIt-Anchor\" href=\"#排序算法总结\">#</a> 排序算法总结</h1>\n<table>\n<thead>\n<tr>\n<th>排序算法</th>\n<th>英文名称</th>\n<th>时间复杂度</th>\n<th>最佳情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>排序方式</th>\n<th>稳定性</th>\n<th>排序类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>Bubble Sort</td>\n<td>O(n²)</td>\n<td>O(n)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n<td>In-place</td>\n<td>稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>Insertion Sort</td>\n<td>O(n²)</td>\n<td>O(n)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n<td>In-place</td>\n<td>稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>Selection Sort</td>\n<td>O(n²)</td>\n<td>O(n²)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n<td>In-place</td>\n<td>不稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>Shell Sort</td>\n<td>O(n^3/2)</td>\n<td>O(nlog²n)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n<td>In-place</td>\n<td>不稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>Quick Sort</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(n²)</td>\n<td>O(logn)</td>\n<td>In-place</td>\n<td>不稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>Heap Sort</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(1)</td>\n<td>In-place</td>\n<td>不稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>Merge Sort</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(n)</td>\n<td>Out-place</td>\n<td>稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>Bucket Sort</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>Out-place</td>\n<td>稳定</td>\n<td>非比较</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>Radix Sort</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>Out-place</td>\n<td>稳定</td>\n<td>非比较</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>Counting Sort</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>Out-place</td>\n<td>稳定</td>\n<td>非比较</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>稳定：如果原本序列中 a 在 b 前面且 a=b，排序后 a 仍在 b 前面，顺序不变；</li>\n<li>不稳定：如果原本序列中 a 在 b 前面且 a=b，排序后 a 可能在 b 后面，顺序可能发生改变；</li>\n<li>内排序：所有排序操作均在内存中完成；</li>\n<li>外排序：由于数据量太大，将其放入磁盘中，排序过程中需要磁盘与内存之间的数据传输；</li>\n<li>时间复杂度：一个排序算法在执行过程中所耗费的时间量级的度量；</li>\n<li>空间复杂度：一个排序算法在运行过程中临时占用存储空间大小的度量；</li>\n</ul>\n<h2 id=\"冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h2>\n<p>遍历所有的数据，每次对相邻元素进行两两比较，如果顺序和预先规定的顺序不一致，则进行位置交换；这样一次遍历会将最大或最小的数据上浮至顶端，之后再重复同样的操作，直到所有的数据有序。数据反序时，耗时最长 O (n²)；数据正序时，耗时最短 O (n)。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 冒泡排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span>T data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                flag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                T t<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"快速排序\"><a class=\"markdownIt-Anchor\" href=\"#快速排序\">#</a> 快速排序</h2>\n<p>快速排序采用分治法。首先从数列中挑出一个元素作为中间值。依次遍历数据，所有比中间值小的元素放在左边，所有比中间值大的元素放在右边。然后按此方法对左右两个子序列分别进行递归操作，直到所有数据有序。最理想的情况是，每次划分所选择的中间数恰好将当前序列几乎等分（均匀排布），整个算法的时间复杂度为 O (n logn)。 最坏的情况是，每次所选的中间数是当前序列中的最大或最小元素（正序和逆序都是最坏），整个排序算法的时间复杂度为 O (n²)。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 快速排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Partition</span><span class=\"token punctuation\">(</span>T data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    T pivot<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token operator\">&amp;&amp;</span>data<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>pivot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        data<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token operator\">&amp;&amp;</span>data<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>pivot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        data<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    data<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>pivot<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>T data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span><span class=\"token function\">Partition</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"算法性能分析\"><a class=\"markdownIt-Anchor\" href=\"#算法性能分析\">#</a> 算法性能分析</h1>\n<h2 id=\"时间复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#时间复杂度分析\">#</a> 时间复杂度分析</h2>\n<h3 id=\"什么是时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#什么是时间复杂度\">#</a> 什么是时间复杂度</h3>\n<p><strong>时间复杂度是一个函数，它定性描述该算法的运行时间</strong>。</p>\n<p>我们在软件开发中，时间复杂度就是用来方便开发者估算出程序运行的答题时间。</p>\n<p>那么该如何估计程序运行时间呢，通常会估算算法的操作单元数量来代表程序消耗的时间，这里默认 CPU 的每个单元运行消耗的时间都是相同的。</p>\n<p>假设算法的问题规模为 n，那么操作单元数量便用函数 f (n) 来表示，随着数据规模 n 的增大，算法执行时间的增长率和 f (n) 的增长率相同，这称作为算法的渐近时间复杂度，简称时间复杂度，记为 O (f (n))。</p>\n<h3 id=\"什么是大o\"><a class=\"markdownIt-Anchor\" href=\"#什么是大o\">#</a> 什么是大 O</h3>\n<p>算法导论给出的解释：<strong>大 O 用来表示上界的</strong>，当用它作为算法的最坏情况运行时间的上界，就是对任意数据输入的运行时间的上界。</p>\n<p>同样算法导论给出了例子：拿插入排序来说，插入排序的时间复杂度我们都说是 O (n^2) 。</p>\n<p>输入数据的形式对程序运算时间是有很大影响的，在数据本来有序的情况下时间复杂度是 O (n)，但如果数据是逆序的话，插入排序的时间复杂度就是 O (n<sup>2)，也就对于所有输入情况来说，最坏是 O (n</sup>2) 的时间复杂度，所以称插入排序的时间复杂度为 O (n^2)。</p>\n<p>同样的同理再看一下快速排序，都知道快速排序是 O (nlogn)，但是当数据已经有序情况下，快速排序的时间复杂度是 O (n^2) 的，<strong>所以严格从大 O 的定义来讲，快速排序的时间复杂度应该是 O (n^2)</strong>。</p>\n<p><strong>但是我们依然说快速排序是 O (nlogn) 的时间复杂度，这个就是业内的一个默认规定，这里说的 O 代表的就是一般情况，而不是严格的上界</strong>。</p>\n<p>我们主要关心的还是一般情况下的数据形式。</p>\n<p><strong>面试中说道算法的时间复杂度是多少指的都是一般情况</strong>。但是如果面试官和我们深入探讨一个算法的实现以及性能的时候，就要时刻想着数据用例的不一样，时间复杂度也是不同的，这一点是一定要注意的。</p>\n<h3 id=\"不同数据规模的差异\"><a class=\"markdownIt-Anchor\" href=\"#不同数据规模的差异\">#</a> 不同数据规模的差异</h3>\n<p><img data-src=\"20230310124015324.png\" alt=\"时间复杂度，不同数据规模的差异\"></p>\n<p>如图中可以看出不同算法的时间复杂度在不同数据输入规模下的差异。</p>\n<p>在决定使用哪些算法的时候，不是时间复杂越低的越好（因为简化后的时间复杂度忽略了常数项等等），要考虑数据规模，如果数据规模很小甚至可以用 O (n^2) 的算法比 O (n) 的更合适（在有常数项的时候）。</p>\n<p>就像上图中 O (5n^2) 和 O (100n) 在 n 为 20 之前 很明显 O (5n^2) 是更优的，所花费的时间也是最少的。</p>\n<p>那为什么在计算时间复杂度的时候要忽略常数项系数呢，也就说 O (100n) 就是 O (n) 的时间复杂度，O (5n^2) 就是 O (n^2) 的时间复杂度，而且要默认 O (n) 优于 O (n^2) 呢 ？</p>\n<p>这里就又涉及到大 O 的定义，<strong>因为大 O 就是数据量级突破一个点且数据量级非常大的情况下所表现出的时间复杂度，这个数据量也就是常数项系数已经不起决定性作用的数据量</strong>。</p>\n<p>例如上图中 20 就是那个点，n 只要大于 20 常数项系数已经不起决定性作用了。</p>\n<p><strong>所以我们说的时间复杂度都是省略常数项系数的，是因为一般情况下都是默认数据规模足够的大，基于这样的事实，给出的算法时间复杂的的一个排行如下所示</strong>：</p>\n<p>O (1) 常数阶 &lt; O (logn) 对数阶 &lt; O (n) 线性阶 &lt; O (nlogn) 线性对数阶 &lt; O (n^2) 平方阶 &lt; O (n^3) 立方阶 &lt; O (2^n) 指数阶</p>\n<p>但是也要注意大常数，如果这个常数非常大，例如 10^7 ，10^9 ，那么常数就是不得不考虑的因素了。</p>\n<h1 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h1>\n<p>** 数组是存放在连续内存空间上的相同类型数据的集合。** 数组可以方便的通过下标索引的方式获取到下标下对应的数据。</p>\n<ul>\n<li><strong>数组下标都是从 0 开始的。</strong></li>\n<li><strong>数组内存空间的地址是连续的</strong></li>\n</ul>\n<p>正是<strong>因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。</strong></p>\n<p>使用 C++ 的话，要注意 vector 和 array 的区别，vector 的底层实现是 array，严格来讲 vector 是容器，不是数组。</p>\n<p><strong>数组的元素是不能删的，只能覆盖。</strong></p>\n<h2 id=\"二分查找\"><a class=\"markdownIt-Anchor\" href=\"#二分查找\">#</a> 二分查找</h2>\n<h3 id=\"二分查找-leetcode704\"><a class=\"markdownIt-Anchor\" href=\"#二分查找-leetcode704\">#</a> 二分查找 - LeetCode704</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9iaW5hcnktc2VhcmNoLw==\">704. 二分查找 - 力扣（LeetCode）</span></p>\n<blockquote>\n<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n<p>示例 1:</p>\n<p>输入: nums = [-1,0,3,5,9,12], target = 9<br>\n 输出: 4<br>\n 解释: 9 出现在 nums 中并且下标为 4</p>\n<p>示例 2:</p>\n<p>输入: nums = [-1,0,3,5,9,12], target = 2<br>\n 输出: -1<br>\n 解释: 2 不存在 nums 中因此返回 -1</p>\n<p>提示：你可以假设 nums 中的所有元素是不重复的。<br>\nn 将在 [1, 10000] 之间。<br>\nnums 的每个元素都将在 [-9999, 9999] 之间。</p>\n</blockquote>\n<p><strong>这道题目的前提是数组为有序数组</strong>，同时题目还强调<strong>数组中无重复元素</strong>，因为一旦有重复元素，使用二分查找法返回的元素下标可能不是唯一的，这些都是使用二分法的前提条件。</p>\n<p>二分查找涉及的很多的边界条件，逻辑比较简单，但就是写不好。例如到底是  <code>while(left &lt; right)</code>  还是  <code>while(left &lt;= right)</code> ，到底是 <code>right = middle</code>  呢，还是要 <code>right = middle - 1</code>  呢？</p>\n<p>大家写二分法经常写乱，主要是因为<strong>对区间的定义没有想清楚，区间的定义就是不变量</strong>。要在二分查找的过程中，保持不变量，就是在 while 寻找中每一次边界的处理都要坚持根据区间的定义来操作，这就是<strong>循环不变量</strong>规则。</p>\n<p>写二分法，区间的定义一般为两种，左闭右闭即 [left, right]，或者左闭右开即 [left, right)。</p>\n<h3 id=\"二分法第一种写法\"><a class=\"markdownIt-Anchor\" href=\"#二分法第一种写法\">#</a> 二分法第一种写法</h3>\n<p>第一种写法，我们定义 target 是在一个在左闭右闭的区间里，<strong>也就是 [left, right] （这个很重要非常重要）</strong>。</p>\n<p>区间的定义这就决定了二分法的代码应该如何写，<strong>因为定义 target 在 [left, right] 区间，所以有如下两点：</strong></p>\n<ul>\n<li>while (left &lt;= right) 要使用 &lt;= ，因为 left == right 是有意义的，所以使用 &lt;=</li>\n<li>if (nums [middle] &gt; target) right 要赋值为 middle - 1，因为当前这个 nums [middle] 一定不是 target，那么接下来要查找的左区间结束下标位置就是 middle - 1</li>\n</ul>\n<p>例如在数组：1,2,3,4,7,9,10 中查找元素 2，如图所示：</p>\n<p><img data-src=\"20210311153055723.jpg\" alt=\"704.二分查找\"></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义 target 在左闭右闭的区间里，[left, right]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 当 left==right，区间 [left, right] 依然有效，所以用 &lt;=</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">int</span> middle <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 防止溢出 等同于 (left + right)/2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                right <span class=\"token operator\">=</span> middle <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//target 在左区间，所以 [left, middle - 1]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                left <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//target 在右区间，所以 [middle + 1, right]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// nums[middle] == target</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">return</span> middle<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组中找到目标值，直接返回下标</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 未找到目标值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>时间复杂度：O (log n)</li>\n<li>空间复杂度：O (1)</li>\n</ul>\n<h3 id=\"二分法第二种写法\"><a class=\"markdownIt-Anchor\" href=\"#二分法第二种写法\">#</a> 二分法第二种写法</h3>\n<p>如果说定义 target 是在一个在左闭右开的区间里，也就是 [left, right) ，那么二分法的边界处理方式则截然不同。</p>\n<p>有如下两点：</p>\n<ul>\n<li>while (left &lt; right)，这里使用 &lt; , 因为 left == right 在区间 [left, right) 是没有意义的</li>\n<li>if (nums [middle] &gt; target) right 更新为 middle，因为当前 nums [middle] 不等于 target，去左区间继续寻找，而寻找区间是左闭右开区间，所以 right 更新为 middle，即：下一个查询区间不会去比较 nums [middle]</li>\n</ul>\n<p>在数组：1,2,3,4,7,9,10 中查找元素 2，如图所示：（<strong>注意和方法一的区别</strong>）</p>\n<p><img data-src=\"20210311153123632.jpg\" alt=\"704.二分查找1\"></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义 target 在左闭右开的区间里，即：[left, right)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 因为 left == right 的时候，在 [left, right) 是无效的空间，所以使用 &lt;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">int</span> middle <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                right <span class=\"token operator\">=</span> middle<span class=\"token punctuation\">;</span> <span class=\"token comment\">//target 在左区间，在 [left, middle) 中</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                left <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//target 在右区间，在 [middle + 1, right) 中</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// nums[middle] == target</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">return</span> middle<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组中找到目标值，直接返回下标</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 未找到目标值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>时间复杂度：O (log n)</li>\n<li>空间复杂度：O (1)</li>\n</ul>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>二分法是非常重要的基础算法，为什么会对二分法一看就会，一写就废？其实主要就是对区间的定义没有理解清楚，在循环中没有始终坚持根据查找区间的定义来做边界处理。</p>\n<p>区间的定义就是不变量，那么在循环中坚持根据查找区间的定义来做边界处理，就是循环不变量规则。</p>\n<h3 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> = 相关题目 =</h3>\n<h3 id=\"搜索插入位置-leetcode35\"><a class=\"markdownIt-Anchor\" href=\"#搜索插入位置-leetcode35\">#</a> 搜索插入位置 - LeetCode35</h3>\n<h3 id=\"在排序数组中查找元素的第一个和最后一个位置-leetcode34\"><a class=\"markdownIt-Anchor\" href=\"#在排序数组中查找元素的第一个和最后一个位置-leetcode34\">#</a> 在排序数组中查找元素的第一个和最后一个位置 - LeetCode34</h3>\n<h3 id=\"x的平方根-leetcode69\"><a class=\"markdownIt-Anchor\" href=\"#x的平方根-leetcode69\">#</a> x 的平方根 - LeetCode69</h3>\n<h3 id=\"有效的完全平方数-leetcode367\"><a class=\"markdownIt-Anchor\" href=\"#有效的完全平方数-leetcode367\">#</a> 有效的完全平方数 - LeetCode367</h3>\n<h2 id=\"移除元素\"><a class=\"markdownIt-Anchor\" href=\"#移除元素\">#</a> 移除元素</h2>\n<h3 id=\"移除元素-leetcode27\"><a class=\"markdownIt-Anchor\" href=\"#移除元素-leetcode27\">#</a> 移除元素 - LeetCode27</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZW1vdmUtZWxlbWVudC8=\">27. 移除元素 - 力扣（LeetCode）</span>)</p>\n<p>给你一个数组  <code>nums</code>  和一个值  <code>val</code> ，你需要 <strong>原地</strong> 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须仅使用 O (1) 额外空间并 <strong>原地</strong> 修改输入数组。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p>说明:</p>\n<p>为什么返回数值是整数，但输出的答案是数组呢？</p>\n<p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>\n<p>你可以想象内部操作如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//nums 是以 “引用” 方式传递的。也就是说，不对实参作任何拷贝</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 在函数里修改输入数组对于调用者是可见的。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 根据你的函数返回的长度，它会打印出数组中 该长度范围内 的所有元素。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>示例 1：</p>\n<p><strong>输入</strong>：nums = [3,2,2,3], val = 3<br>\n<strong> 输出</strong>：2, nums = [2,2]<br>\n<strong> 解释</strong>：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</p>\n</blockquote>\n<blockquote>\n<p>示例 2：</p>\n<p><strong>输入</strong>：nums = [0,1,2,2,3,0,4,2], val = 2<br>\n<strong> 输出</strong>：5, nums = [0,1,4,0,3]<br>\n<strong> 解释</strong>：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p>\n</blockquote>\n<p>提示：</p>\n<ul>\n<li>0 &lt;= nums.length &lt;= 100</li>\n<li>0 &lt;= nums[i] &lt;= 50</li>\n<li>0 &lt;= val &lt;= 100</li>\n</ul>\n<p><strong>注意：数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，只能覆盖。</strong></p>\n<h3 id=\"暴力解法\"><a class=\"markdownIt-Anchor\" href=\"#暴力解法\">#</a> 暴力解法</h3>\n<p>两层 for 循环，一个 for 循环<strong>遍历数组元素</strong> ，第二个 for 循环<strong>更新数组</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度 O (n^2)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 发现需要移除的元素，就将数组集体向前移动一位</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 因为下标 i 以后的数值都向前移动了一位，所以 i 也向前移动一位</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此时数组的大小 - 1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"双指针法\"><a class=\"markdownIt-Anchor\" href=\"#双指针法\">#</a> 双指针法</h3>\n<p>双指针法（快慢指针法）： <strong>通过一个快指针和慢指针在一个 for 循环下完成两个 for 循环的工作。</strong></p>\n<p>定义快慢指针</p>\n<ul>\n<li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li>\n<li>慢指针：指向更新 新数组下标的位置</li>\n</ul>\n<p><strong>双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组、链表、字符串等操作的面试题，都使用双指针法。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度：O (n)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> slowIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fastIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> fastIndex <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> fastIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>fastIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                nums<span class=\"token punctuation\">[</span>slowIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>fastIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> slowIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 相向双指针方法，基于元素顺序可以改变的题目描述改变了元素相对位置，确保了移动最少元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* 时间复杂度：O (n)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* 空间复杂度：O (1)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> leftIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> rightIndex <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>leftIndex <span class=\"token operator\">&lt;=</span> rightIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 找左边等于 val 的元素</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>leftIndex <span class=\"token operator\">&lt;=</span> rightIndex <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>leftIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token operator\">++</span>leftIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 找右边不等于 val 的元素</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>leftIndex <span class=\"token operator\">&lt;=</span> rightIndex <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>rightIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token operator\">--</span> rightIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 将右边不等于 val 的元素覆盖左边等于 val 的元素</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftIndex <span class=\"token operator\">&lt;</span> rightIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                nums<span class=\"token punctuation\">[</span>leftIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>rightIndex<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> leftIndex<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//leftIndex 一定指向了最终数组末尾的下一个元素</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"相关题目-2\"><a class=\"markdownIt-Anchor\" href=\"#相关题目-2\">#</a> = 相关题目 =</h3>\n<h3 id=\"删除排序数组中的重复项-leetcode26\"><a class=\"markdownIt-Anchor\" href=\"#删除排序数组中的重复项-leetcode26\">#</a> 删除排序数组中的重复项 - LeetCode26</h3>\n<h3 id=\"移动零-leetcode283\"><a class=\"markdownIt-Anchor\" href=\"#移动零-leetcode283\">#</a> 移动零 - LeetCode283</h3>\n<h3 id=\"比较含退格的字符串-leetcode844\"><a class=\"markdownIt-Anchor\" href=\"#比较含退格的字符串-leetcode844\">#</a> 比较含退格的字符串 - LeetCode844</h3>\n<h3 id=\"有序数组的平方-leetcode977\"><a class=\"markdownIt-Anchor\" href=\"#有序数组的平方-leetcode977\">#</a> 有序数组的平方 - LeetCode977</h3>\n<h1 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\">#</a> 链表</h1>\n<h2 id=\"链表理论基础\"><a class=\"markdownIt-Anchor\" href=\"#链表理论基础\">#</a> 链表理论基础</h2>\n<h3 id=\"单链表\"><a class=\"markdownIt-Anchor\" href=\"#单链表\">#</a> 单链表</h3>\n<p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域（存放指向下一个节点的指针），最后一个节点的指针域指向 null。链表的入口节点称为链表的头结点也就是 head。</p>\n<p>如图所示：</p>\n<p><img data-src=\"20200806194529815.png\" alt=\"链表1\"></p>\n<h3 id=\"双链表\"><a class=\"markdownIt-Anchor\" href=\"#双链表\">#</a> 双链表</h3>\n<p>单链表中的指针域只能指向节点的下一个节点。</p>\n<p>双链表：每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点。</p>\n<p>双链表 既可以向前查询也可以向后查询。</p>\n<p>如图所示：</p>\n<p><img data-src=\"20200806194559317.png\" alt=\"链表2\"></p>\n<h3 id=\"循环链表\"><a class=\"markdownIt-Anchor\" href=\"#循环链表\">#</a> 循环链表</h3>\n<p>顾名思义，就是链表首尾相连。循环链表可以用来解决约瑟夫环问题。</p>\n<h3 id=\"链表的存储方式\"><a class=\"markdownIt-Anchor\" href=\"#链表的存储方式\">#</a> 链表的存储方式</h3>\n<p>数组是在内存中是连续分布的，但是链表在内存中不是连续分布的。链表是通过指针域的指针链接在内存中各个节点。所以链表中的节点在内存中不是连续分布的 ，而是散乱分布在内存中的某地址上，<strong>分配机制取决于操作系统的内存管理</strong>。</p>\n<h3 id=\"链表的定义\"><a class=\"markdownIt-Anchor\" href=\"#链表的定义\">#</a> 链表的定义</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单链表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 节点上存储的元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ListNode <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向下一个节点的指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// 节点的构造函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>不定义构造函数行不行？</p>\n<p>答案是可以的，C++ 默认生成一个构造函数。但是这个构造函数不会初始化任何成员变量，下面举两个例子：</p>\n<p>通过自己定义构造函数初始化节点：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ListNode<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用默认构造函数初始化节点：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ListNode<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>head<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>所以如果不定义构造函数使用默认构造函数的话，在初始化的时候就不能直接给变量赋值。</p>\n<h2 id=\"移除链表元素-leetcode203\"><a class=\"markdownIt-Anchor\" href=\"#移除链表元素-leetcode203\">#</a> 移除链表元素 - LeetCode203</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZW1vdmUtbGlua2VkLWxpc3QtZWxlbWVudHMv\">203. 移除链表元素 - 力扣（LeetCode）</span></p>\n<blockquote>\n<p>给你一个链表的头节点  <code>head</code>  和一个整数  <code>val</code>  ，请你删除链表中所有满足  <code>Node.val == val</code>  的节点，并返回 <strong>新的头节点</strong></p>\n<p>示例 1： 输入：head = [1,2,6,3,4,5,6], val = 6 输出：[1,2,3,4,5]</p>\n<p>示例 2： 输入：head = [], val = 1 输出：[]</p>\n<p>示例 3： 输入：head = [7,7,7,7], val = 7 输出：[]</p>\n<p><strong>提示：</strong></p>\n<ul>\n<li>列表中的节点数目在范围  <code>[0, 104]</code>  内</li>\n<li><code>1 &lt;= Node.val &lt;= 50</code></li>\n<li><code>0 &lt;= val &lt;= 50</code></li>\n</ul>\n</blockquote>\n<ul>\n<li><strong>直接使用原来的链表来进行删除操作。</strong></li>\n</ul>\n<p><img data-src=\"D:%5CBlog%5Csource_posts%5C%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6%5C2021031609544922.png\" alt=\"203_链表删除元素3\"></p>\n<p>移除头结点和移除其他节点的操作是不一样的，因为链表的其他节点都是通过前一个节点来移除当前节点，而头结点没有前一个节点。</p>\n<p>所以头结点如何移除呢，其实只要将头结点向后移动一位就可以，这样就从链表中移除了一个头结点，然后将原头结点从内存中删掉。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">removeElements</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 删除头结点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> head<span class=\"token operator\">-></span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 注意这里不是 if</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            ListNode<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">delete</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 删除非头结点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                ListNode<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">delete</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>设置一个虚拟头结点在进行删除操作。</strong></li>\n</ul>\n<p>可以以一种统一的逻辑来移除链表的节点。<strong>设置一个虚拟头结点</strong>，这样原链表的所有节点就都可以按照统一的方式进行移除了。</p>\n<p><img data-src=\"20210316095619221.png\" alt=\"203_链表删除元素6\"></p>\n<p>这里来给链表添加一个虚拟头结点为新的头结点，此时要移除这个旧头结点元素 1。</p>\n<p>最后在题目中，return 头结点的时候，别忘了  <code>return dummyNode-&gt;next;</code> ， 这才是新的头结点</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">removeElements</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> dummyHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置一个虚拟头结点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        dummyHead<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将虚拟头结点指向 head，这样方面后面做删除操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                ListNode<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">delete</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        head <span class=\"token operator\">=</span> dummyHead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">delete</span> dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"设计链表-leetcode707\"><a class=\"markdownIt-Anchor\" href=\"#设计链表-leetcode707\">#</a> 设计链表 - LeetCode707</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZXNpZ24tbGlua2VkLWxpc3Qv\">707. 设计链表 - 力扣（LeetCode）</span></p>\n<blockquote>\n<p>在链表类中实现这些功能：</p>\n<ul>\n<li>get (index)：获取链表中第 index 个节点的值。如果索引无效，则返回 - 1。</li>\n<li>addAtHead (val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</li>\n<li>addAtTail (val)：将值为 val 的节点追加到链表的最后一个元素。</li>\n<li>addAtIndex (index,val)：在链表中的第 index 个节点之前添加值为 val 的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果 index 小于 0，则在头部插入节点。</li>\n<li>deleteAtIndex (index)：如果索引 index 有效，则删除链表中的第 index 个节点。</li>\n</ul>\n<p>示例：</p>\n<p>输入<br>\n [“MyLinkedList”, “addAtHead”, “addAtTail”, “addAtIndex”, “get”, “deleteAtIndex”, “get”]<br>\n[[], [1], [3], [1, 2], [1], [1], [1]]<br>\n 输出<br>\n [null, null, null, null, 2, null, 3]</p>\n<p>解释<br>\n MyLinkedList myLinkedList = new MyLinkedList ();<br>\nmyLinkedList.addAtHead(1);<br>\nmyLinkedList.addAtTail(3);<br>\nmyLinkedList.addAtIndex (1, 2);    // 链表变为 1-&gt;2-&gt;3<br>\nmyLinkedList.get (1);              // 返回 2<br>\nmyLinkedList.deleteAtIndex (1);    // 现在，链表变为 1-&gt;3<br>\nmyLinkedList.get (1);              // 返回 3</p>\n<p>提示：</p>\n<p>0 &lt;= index, val &lt;= 1000<br>\n 请不要使用内置的 LinkedList 库。<br>\n调用 get、addAtHead、addAtTail、addAtIndex 和 deleteAtIndex 的次数不超过 2000 。</p>\n</blockquote>\n<p>这道题目设计链表的五个接口：</p>\n<ul>\n<li>获取链表第 index 个节点的数值</li>\n<li>在链表的最前面插入一个节点</li>\n<li>在链表的最后面插入一个节点</li>\n<li>在链表第 index 个节点前面插入一个节点</li>\n<li>删除链表的第 index 个节点</li>\n</ul>\n<p>这五个接口，已经覆盖了链表的常见操作</p>\n<p><strong>链表操作的两种方式：</strong></p>\n<ol>\n<li>直接使用原来的链表来进行操作。</li>\n<li>设置一个虚拟头结点在进行操作。</li>\n</ol>\n<p>下面采用的设置一个虚拟头结点（这样更方便一些，看代码就会感受出来）。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyLinkedList</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义链表节点结构体</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 初始化链表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">MyLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        _dummyHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里定义的头结点 是一个虚拟头结点，而不是真正的链表头结点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        _size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 获取到第 index 个节点数值，如果 index 是非法数值直接返回 - 1， 注意 index 是从 0 开始的，第 0 个节点就是头结点</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>_size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果 --index 就会陷入死循环</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> cur<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 在链表最前面插入一个节点，插入完成后，新插入的节点为链表的新的头结点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addAtHead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        newNode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> _dummyHead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        _dummyHead<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        _size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 在链表最后面添加一个节点</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addAtTail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        _size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 在第 index 个节点之前插入一个新节点，例如 index 为 0，那么新插入的节点为链表的新头节点。</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// 如果 index 等于链表的长度，则说明是新插入的节点为链表的尾结点</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 如果 index 大于链表的长度，则返回空</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 如果 index 小于 0，则在头部插入节点</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> _size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        newNode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        _size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 删除第 index 个节点，如果 index 大于等于链表的长度，直接 return，注意 index 是从 0 开始的</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> _size <span class=\"token operator\">||</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur <span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">delete</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        _size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 打印链表</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">printLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">int</span> _size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    LinkedNode<span class=\"token operator\">*</span> _dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"翻转链表-leetcode206\"><a class=\"markdownIt-Anchor\" href=\"#翻转链表-leetcode206\">#</a> 翻转链表 - LeetCode206</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZXZlcnNlLWxpbmtlZC1saXN0Lw==\">206. 反转链表 - 力扣（LeetCode）</span></p>\n<p>给你单链表的头节点  <code>head</code>  ，请你反转链表，并返回反转后的链表。</p>\n<p>示例：输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL 输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p>\n<p><strong>提示：</strong></p>\n<ul>\n<li>链表中节点的数目范围是  <code>[0, 5000]</code></li>\n<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>\n</ul>\n<p>** 进阶：** 链表可以选用迭代或递归方式完成反转。</p>\n<h3 id=\"双指针法-2\"><a class=\"markdownIt-Anchor\" href=\"#双指针法-2\">#</a> 双指针法</h3>\n<p>首先定义一个 <code>cur</code>  指针，指向头节点，再定义一个 <code>pre</code>  指针，初始化为 <code>null</code> 。</p>\n<p>然后开始反转，先把 <code>cur-&gt;next</code>  节点用 <code>tmp</code>  指针保存一下，也就是保存一下这个节点。因为接下来要改变 <code>cur-&gt;next</code>  的指向，将 <code>cur-&gt;next</code>  指向 <code>pre</code> ，此时已经反转了第一个节点了。</p>\n<p>接下来，就是循环走如下代码逻辑，继续移动 pre 和 cur 指针。</p>\n<p>最后 cur 指针已经指向 null，循环结束，连边反转完毕。此时，return pre 指针就可以了，pre 指针指向了新的头节点。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> temp<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 保存 cur 的下一个节点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> pre <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            temp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 保存一下 cur 的下一个节点，因为接下来要改变 cur->next</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 翻转操作</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 更新 pre 和 cur 指针</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            cur <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"递归法\"><a class=\"markdownIt-Anchor\" href=\"#递归法\">#</a> 递归法</h3>\n<p>递归法相对抽象一些，但是其实和双指针法是一样的逻辑，同样是当 cur 为空的时候循环结束，不断将 cur 指向 pre 的过程。</p>\n<p>关键是初始化的地方，可以看到双指针法中初始化 cur = head，pre = NULL，在递归法中可以从如下代码看出初始化的逻辑也是一样的，只不过写法变了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> pre<span class=\"token punctuation\">,</span>ListNode<span class=\"token operator\">*</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 可以和双指针法的代码进行对比，如下递归的写法，其实就是做了这两步</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// pre = cur;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// cur = temp;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 和双指针法初始化是一样的逻辑</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// ListNode* cur = head;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// ListNode* pre = NULL;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们可以发现，上面的递归写法和双指针法实质上都是从前往后翻转指针指向，其实还有另外一种与双指针法不同思路的递归写法：从后往前翻转指针指向。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 边缘条件判断</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 递归调用，翻转第二个节点开始往后的链表</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>last <span class=\"token operator\">=</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 翻转头节点与第二个节点的指向</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        head<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 此时的 head 节点为尾节点，next 需要指向 NULL</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> last<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用虚拟头结点解决链表翻转\"><a class=\"markdownIt-Anchor\" href=\"#使用虚拟头结点解决链表翻转\">#</a> 使用虚拟头结点解决链表翻转</h3>\n<p>使用虚拟头结点，通过头插法实现链表的翻转（不需要栈）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 迭代方法：增加虚头结点，使用头插法实现链表翻转</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> ListNode <span class=\"token function\">reverseList1</span><span class=\"token punctuation\">(</span>ListNode head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 创建虚头结点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ListNode dumpyHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    dumpyHead<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 遍历所有节点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ListNode cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ListNode temp <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 头插法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> dumpyHead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        dumpyHead<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        cur <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> dumpyHead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用栈解决反转链表的问题\"><a class=\"markdownIt-Anchor\" href=\"#使用栈解决反转链表的问题\">#</a> 使用栈解决反转链表的问题</h3>\n<ul>\n<li>首先将所有的结点入栈</li>\n<li>然后创建一个虚拟虚拟头结点，让 cur 指向虚拟头结点。然后开始循环出栈，每出来一个元素，就把它加入到以虚拟头结点为头结点的链表当中，最后返回即可。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> ListNode <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>ListNode head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 如果链表为空，则返回空</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 如果链表中只有只有一个元素，则直接返回</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 创建栈 每一个结点都入栈</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Stack<span class=\"token operator\">&lt;</span>ListNode<span class=\"token operator\">></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-function\"><span class=\"token function\">Stack</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ListNode cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 创建一个虚拟头结点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ListNode pHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cur <span class=\"token operator\">=</span> pHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        ListNode node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 最后一个元素的 next 要赋值为空</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> pHead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>采用这种方法需要注意一点。就是当整个出栈循环结束以后，cur 正好指向原来链表的第一个结点，而此时结点 1 中的 next 指向的是结点 2，因此最后还需要 <code>cur.next = null</code></p>\n<h2 id=\"两两交换链表中的节点-leetcode24\"><a class=\"markdownIt-Anchor\" href=\"#两两交换链表中的节点-leetcode24\">#</a> 两两交换链表中的节点 - LeetCode24</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9zd2FwLW5vZGVzLWluLXBhaXJzLw==\">24. 两两交换链表中的节点 - 力扣（LeetCode）</span></p>\n<p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>\n<p>初始时，cur 指向虚拟头结点，然后进行如下三步：</p>\n<p><img data-src=\"2023042401.png\" alt=\"img\"></p>\n<p>操作之后，链表如下：</p>\n<p><img data-src=\"2023042402.png\" alt=\"img\"></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">swapPairs</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> dummyHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置一个虚拟头结点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        dummyHead<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将虚拟头结点指向 head，这样方面后面做删除操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            ListNode<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录临时节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            ListNode<span class=\"token operator\">*</span> tmp1 <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录临时节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 步骤一</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 步骤二</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> tmp1<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 步骤三</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//cur 移动两位，准备下一轮交换</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> dummyHead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"哈希表\"><a class=\"markdownIt-Anchor\" href=\"#哈希表\">#</a> 哈希表</h1>\n<h2 id=\"哈希表理论基础\"><a class=\"markdownIt-Anchor\" href=\"#哈希表理论基础\">#</a> 哈希表理论基础</h2>\n<h3 id=\"哈希表-2\"><a class=\"markdownIt-Anchor\" href=\"#哈希表-2\">#</a> 哈希表</h3>\n<p>Hash table，译为哈希表或散列表</p>\n<blockquote>\n<p>哈希表是根据关键码的值而直接进行访问的数据结构。</p>\n</blockquote>\n<p>实际数组就是一张哈希表。哈希表中关键码就是数组的索引下标，然后通过下标直接访问数组中的元素，如下图所示：</p>\n<p><img data-src=\"20210104234805168.png\" alt=\"哈希表1\"></p>\n<p>哈希表能解决什么问题？</p>\n<ul>\n<li><strong>一般哈希表都是用来快速判断一个元素是否出现集合里。</strong></li>\n</ul>\n<p>例如要查询一个名字是否在这所学校里。</p>\n<p>要枚举的话时间复杂度是 O (n)，但如果使用哈希表的话， 只需要 O (1) 就可以做到。</p>\n<p>我们只需要初始化把这所学校里学生的名字都存在哈希表里，在查询的时候通过索引直接就可以知道这位同学在不在这所学校里了。</p>\n<p>将学生姓名映射到哈希表上就涉及到了<strong> hash function ，也就是哈希函数</strong>。</p>\n<h3 id=\"哈希函数\"><a class=\"markdownIt-Anchor\" href=\"#哈希函数\">#</a> 哈希函数</h3>\n<p>哈希函数，把学生的姓名直接映射为哈希表上的索引，然后就可以通过查询索引下标快速知道这位同学是否在这所学校里了。</p>\n<p>哈希函数如下图所示，通过 hashCode 把名字转化为数值，一般 hashcode 是通过特定编码方式，可以将其他数据格式转化为不同的数值，这样就把学生名字映射为哈希表上的索引数字了。</p>\n<p><img data-src=\"D:%5CBlog%5Csource_posts%5C%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6%5C2021010423484818.png\" alt=\"哈希表2\"></p>\n<p>如果 hashCode 得到的数值大于哈希表的大小了，也就是大于 tableSize 了，怎么办？</p>\n<p>此时为了保证映射出来的索引数值都落在哈希表上，我们会在再次对数值做一个<strong>取模</strong>的操作，这样我们就保证了学生姓名一定可以映射到哈希表上了。</p>\n<p>此时问题又来了，哈希表我们刚刚说过，就是一个数组。</p>\n<p>如果学生的数量大于哈希表的大小怎么办，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表 同一个索引下标的位置。</p>\n<p>接下来<strong>哈希碰撞</strong>登场</p>\n<p>如图所示，小李和小王都映射到了索引下标 1 的位置，<strong>这一现象叫做哈希碰撞</strong>。</p>\n<p><img data-src=\"2021010423494884.png\" alt=\"哈希表3\"></p>\n<p>一般哈希碰撞有两种解决方法， <strong>拉链法</strong>和<strong>线性探测法</strong>。</p>\n<ul>\n<li>\n<p>拉链法</p>\n<p>刚刚小李和小王在索引 1 的位置发生了冲突，发生冲突的元素都被存储在链表中。 这样我们就可以通过索引找到小李和小王了</p>\n<p><img data-src=\"20210104235015226.png\" alt=\"哈希表4\"></p>\n<p>（数据规模是 dataSize， 哈希表的大小为 tableSize）</p>\n<p>其实拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。</p>\n</li>\n<li>\n<p>线性探测法</p>\n<p>使用线性探测法，一定要保证 tableSize 大于 dataSize。 我们需要依靠哈希表中的空位来解决碰撞问题。</p>\n<p>例如冲突的位置，放了小李，那么就向下找一个空位放置小王的信息。所以要求 tableSize 一定要大于 dataSize ，要不然哈希表上就没有空置的位置来存放 冲突的数据了。如图所示：</p>\n<p><img data-src=\"20210104235109950.png\" alt=\"哈希表5\"></p>\n</li>\n</ul>\n<h3 id=\"常见的三种哈希结构\"><a class=\"markdownIt-Anchor\" href=\"#常见的三种哈希结构\">#</a> 常见的三种哈希结构</h3>\n<p>当我们想使用哈希法来解决问题的时候，我们一般会选择如下三种数据结构。</p>\n<ul>\n<li>array（数组）</li>\n<li>set（集合）</li>\n<li>map（映射）</li>\n</ul>\n<p>在 C++ 中，set 和 map 分别提供以下三种数据结构，其底层实现以及优劣如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>集合</th>\n<th>底层实现</th>\n<th>是否有序</th>\n<th>数值是否可以重复</th>\n<th>能否更改数值</th>\n<th>查询效率</th>\n<th>增删效率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>std::set</td>\n<td>红黑树</td>\n<td>有序</td>\n<td>否</td>\n<td>否</td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n</tr>\n<tr>\n<td>std::multiset</td>\n<td>红黑树</td>\n<td>有序</td>\n<td>是</td>\n<td>否</td>\n<td>O(logn)</td>\n<td>O(logn)</td>\n</tr>\n<tr>\n<td>std::unordered_set</td>\n<td>哈希表</td>\n<td>无序</td>\n<td>否</td>\n<td>否</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n<p>std::unordered_set 底层实现为哈希表，std::set 和 std::multiset 的底层实现是红黑树，红黑树是一种平衡二叉搜索树，所以 key 值是有序的，但 key 不可以修改，改动 key 值会导致整棵树的错乱，所以只能删除和增加。</p>\n<table>\n<thead>\n<tr>\n<th>映射</th>\n<th>底层实现</th>\n<th>是否有序</th>\n<th>数值是否可以重复</th>\n<th>能否更改数值</th>\n<th>查询效率</th>\n<th>增删效率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>std::map</td>\n<td>红黑树</td>\n<td>key 有序</td>\n<td>key 不可重复</td>\n<td>key 不可修改</td>\n<td>O(logn)</td>\n<td>O(logn)</td>\n</tr>\n<tr>\n<td>std::multimap</td>\n<td>红黑树</td>\n<td>key 有序</td>\n<td>key 可重复</td>\n<td>key 不可修改</td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n</tr>\n<tr>\n<td>std::unordered_map</td>\n<td>哈希表</td>\n<td>key 无序</td>\n<td>key 不可重复</td>\n<td>key 不可修改</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n<p>std::unordered_map 底层实现为哈希表，std::map 和 std::multimap 的底层实现是红黑树。同理，std::map 和 std::multimap 的 key 也是有序的（这个问题也经常作为面试题，考察对语言容器底层的理解）。</p>\n<p>当我们要使用集合来解决哈希问题的时候，优先使用 unordered_set，因为它的查询和增删效率是最优的，如果需要集合是有序的，那么就用 set，如果要求不仅有序还要有重复数据的话，那么就用 multiset。</p>\n<p>那么再来看一下 map ，在 map 是一个 key value 的数据结构，map 中，对 key 是有限制，对 value 没有限制的，因为 key 的存储方式使用红黑树实现的。</p>\n<p>其他语言例如：java 里的 HashMap ，TreeMap 都是一样的原理。可以灵活贯通。</p>\n<p>虽然 std::set、std::multiset 的底层实现是红黑树，不是哈希表，std::set、std::multiset 使用红黑树来索引和存储，不过给我们的使用方式，还是哈希法的使用方式，即 key 和 value。所以使用这些数据结构来解决映射问题的方法，我们依然称之为哈希法。 map 也是一样的道理。</p>\n<h1 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h1>\n<h1 id=\"栈与队列\"><a class=\"markdownIt-Anchor\" href=\"#栈与队列\">#</a> 栈与队列</h1>\n<h1 id=\"二叉树\"><a class=\"markdownIt-Anchor\" href=\"#二叉树\">#</a> 二叉树</h1>\n<h2 id=\"二叉树理论基础\"><a class=\"markdownIt-Anchor\" href=\"#二叉树理论基础\">#</a> 二叉树理论基础</h2>\n<h3 id=\"二叉树的种类\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的种类\">#</a> 二叉树的种类</h3>\n<ul>\n<li>\n<p>满二叉树</p>\n<p>如果一棵二叉树只有度为 0 的结点和度为 2 的结点，并且度为 0 的结点在同一层上，则这棵二叉树为满二叉树。</p>\n<p><img data-src=\"20200806185805576.png\" alt=\"img\"></p>\n<p>如图，这棵二叉树为满二叉树，也可以说深度为 k，有 2^k-1 个节点的二叉树。</p>\n</li>\n<li>\n<p>完全二叉树</p>\n<p>在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2^(h-1) 个节点。</p>\n<p><img data-src=\"20200920221638903.png\" alt=\"img\"></p>\n<p><strong>优先级队列其实是一个堆，堆就是一棵完全二叉树，同时保证父子节点的顺序关系。</strong></p>\n</li>\n<li>\n<p>二叉搜索树</p>\n<p>前面介绍的树，都没有数值的，而二叉搜索树是有数值的了，<strong>二叉搜索树是一个有序树</strong>。</p>\n<ul>\n<li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li>\n<li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>\n<li>它的左、右子树也分别为二叉排序树</li>\n</ul>\n<p>下面这两棵树都是搜索树</p>\n<p><img data-src=\"20200806190304693.png\" alt=\"img\"></p>\n</li>\n<li>\n<p>平衡二叉搜索树</p>\n<p>又被称为 AVL（Adelson-Velsky and Landis）树，具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。</p>\n<p><img data-src=\"20200806190511967.png\" alt=\"img\"></p>\n<p>最后一棵 不是平衡二叉树，因为它的左右两个子树的高度差的绝对值超过了 1。</p>\n<p><strong>C++ 中 map、set、multimap，multiset 的底层实现都是平衡二叉搜索树</strong>，所以 map、set 的增删操作时间时间复杂度是 logn，注意 unordered_map、unordered_set，unordered_map、unordered_set 底层实现是哈希表。</p>\n<p><strong>一定要知道常用的容器底层都是如何实现的，最基本的就是 map、set 等</strong></p>\n</li>\n</ul>\n<h3 id=\"二叉树的存储方式\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的存储方式\">#</a> 二叉树的存储方式</h3>\n<p><strong>二叉树可以链式存储，也可以顺序存储。</strong></p>\n<p>那么链式存储方式就用指针， 顺序存储的方式就是用数组。</p>\n<p>顾名思义就是顺序存储的元素在内存是连续分布的，而链式存储则是通过指针把分布在各个地址的节点串联一起。</p>\n<p>链式存储如图：</p>\n<p><img data-src=\"2020092019554618.png\" alt=\"img\"></p>\n<p>顺序存储如图：</p>\n<p><img data-src=\"20200920200429452.png\" alt=\"img\"></p>\n<p>用数组来存储二叉树如何遍历的呢？</p>\n<p><strong>如果父节点的数组下标是 i，那么它的左孩子就是 i * 2 + 1，右孩子就是 i * 2 + 2。</strong></p>\n<p>但是用链式表示的二叉树，更有利于我们理解，所以一般我们都是用链式存储二叉树。</p>\n<h3 id=\"二叉树的遍历方式\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的遍历方式\">#</a> 二叉树的遍历方式</h3>\n<p>二叉树主要有两种遍历方式：</p>\n<ol>\n<li>深度优先遍历：先往深走，遇到叶子节点再往回走。</li>\n<li>广度优先遍历：一层一层的去遍历。</li>\n</ol>\n<p><strong>这两种遍历是图论中最基本的两种遍历方式</strong></p>\n<p>那么从深度优先遍历和广度优先遍历进一步拓展，才有如下遍历方式：</p>\n<ul>\n<li>深度优先遍历\n<ul>\n<li>前序遍历（递归法，迭代法）</li>\n<li>中序遍历（递归法，迭代法）</li>\n<li>后序遍历（递归法，迭代法）</li>\n</ul>\n</li>\n<li>广度优先遍历\n<ul>\n<li>层次遍历（迭代法）</li>\n</ul>\n</li>\n</ul>\n<p>在深度优先遍历中：有三个顺序，前中后序遍历</p>\n<p><strong>这里前中后，其实指的就是中间节点的遍历顺序</strong>，记住前中后序指的就是中间节点的位置就可以了。</p>\n<p>看如下中间节点的顺序，就可以发现，中间节点的顺序就是所谓的遍历方式</p>\n<ul>\n<li>前序遍历：中左右</li>\n<li>中序遍历：左中右</li>\n<li>后序遍历：左右中</li>\n</ul>\n<p><img data-src=\"20200806191109896.png\" alt=\"img\"></p>\n<p>最后再说一说二叉树中深度优先和广度优先遍历实现方式，我们做二叉树相关题目，经常会使用递归的方式来实现深度优先遍历，也就是实现前中后序遍历，使用递归是比较方便的。</p>\n<p><strong>之前我们讲栈与队列的时候，就说过栈其实就是递归的一种实现结构</strong>，也就说前中后序遍历的逻辑其实都是可以借助栈使用非递归的方式来实现的。</p>\n<p>而广度优先遍历的实现一般使用队列来实现，这也是队列先进先出的特点所决定的，因为需要先进先出的结构，才能一层一层的来遍历二叉树。</p>\n<h3 id=\"二叉树的定义\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的定义\">#</a> 二叉树的定义</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    TreeNode <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    TreeNode <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>二叉树的定义和链表是差不多的，相对于链表 ，二叉树的节点里多了一个指针， 有两个指针，指向左右孩子。</p>\n<h2 id=\"二叉树的递归遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的递归遍历\">#</a> 二叉树的递归遍历</h2>\n",
            "tags": [
                "C++",
                "STL",
                "算法"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/03/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "url": "https://adventure-yx.github.io/2023/03/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "title": "设计模式",
            "date_published": "2023-03-20T12:10:48.000Z",
            "content_html": "<h1 id=\"设计模式概述\"><a class=\"markdownIt-Anchor\" href=\"#设计模式概述\">#</a> 设计模式概述</h1>\n<p><strong>什么是设计模式？</strong></p>\n<p>“每一个模式描述了一个在我们周围不断重复发生的问题， 以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动”。 ——Christopher Alexander</p>\n<p><strong>23 种设计模式</strong></p>\n<ul>\n<li>创建型模式\n<ol>\n<li>单例模式（Singleton）</li>\n<li>简单工厂模式</li>\n<li>工厂模式（Factory Method）</li>\n<li>抽象工厂模式（Abstract Factory）</li>\n<li>生成器 / 建造者模式（Builder）</li>\n<li>原型模式（Prototype）</li>\n</ol>\n</li>\n<li>结构型模式\n<ol>\n<li>适配器模式（Adapter）</li>\n<li>桥接模式（Bridge)</li>\n<li>组合模式（Composite）</li>\n<li>装饰模式（Decorator）</li>\n<li>外观模式（Facade）</li>\n<li>享元模式（Flyweight）</li>\n<li>代理模式（Proxy）</li>\n</ol>\n</li>\n<li>行为模式\n<ol>\n<li>职责链模式（Chain of Responsibility）</li>\n<li>命令模式（Command）</li>\n<li>迭代器模式（Iterator）</li>\n<li>中介者模式（Mediator）</li>\n<li>备忘录模式（Memento）</li>\n<li>观察者模式（Observer）</li>\n<li>策略模式（Strategy）</li>\n<li>状态模式（State）</li>\n<li>模板方法模式（Template Method）</li>\n<li>访问者模式（Vistor）</li>\n</ol>\n</li>\n</ul>\n<p><strong>深入理解面向对象</strong></p>\n<ul>\n<li>底层思维：向下，如何把握机器底层从微观理解对象构造\n<ul>\n<li>语言构造</li>\n<li>编译转换</li>\n<li>内存模型</li>\n<li>运行时机制</li>\n</ul>\n</li>\n<li>抽象思维：向上，如何将我们的周围世界抽象为程序代码\n<ul>\n<li>面向对象\n<ul>\n<li>封装，隐藏内部实现</li>\n<li>继承，复用现有代码</li>\n<li>多态，改写对象行为</li>\n</ul>\n</li>\n<li>组件封装</li>\n<li>设计模式</li>\n<li>架构模式</li>\n</ul>\n</li>\n</ul>\n<p>软件设计固有的复杂性高</p>\n<p>软件设计复杂的根本原因：<strong>变化</strong></p>\n<ul>\n<li>客户需求的变化</li>\n<li>技术平台的变化</li>\n<li>开发团队的变化</li>\n<li>市场环境的变化</li>\n<li>……</li>\n</ul>\n<p>如何解决复杂性？</p>\n<ul>\n<li>\n<p>分解（结构化）</p>\n<p>人们面对复杂性有一个常见的做法：即分而治之，将大问题分 解为多个小问题，将复杂问题分解为多个简单问题。</p>\n</li>\n<li>\n<p>抽象（面向对象）</p>\n<p>更高层次来讲，人们处理复杂性有一个通用的技术，即抽象。 由于不能掌握全部的复杂对象，我们选择忽视它的非本质细节， 而去处理泛化和理想化了的对象模型。</p>\n</li>\n</ul>\n<p>软件设计的目标：<strong>复用</strong></p>\n<h1 id=\"uml类图\"><a class=\"markdownIt-Anchor\" href=\"#uml类图\">#</a> UML 类图</h1>\n<h1 id=\"面向对象设计原则\"><a class=\"markdownIt-Anchor\" href=\"#面向对象设计原则\">#</a> 面向对象设计原则</h1>\n<h1 id=\"创建型模式\"><a class=\"markdownIt-Anchor\" href=\"#创建型模式\">#</a> = 创建型模式 =</h1>\n<h1 id=\"单例模式singleton\"><a class=\"markdownIt-Anchor\" href=\"#单例模式singleton\">#</a> 单例模式（Singleton）</h1>\n<h1 id=\"简单工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#简单工厂模式\">#</a> 简单工厂模式</h1>\n<h1 id=\"工厂模式factory-method\"><a class=\"markdownIt-Anchor\" href=\"#工厂模式factory-method\">#</a> 工厂模式（Factory Method）</h1>\n<h1 id=\"抽象工厂模式abstract-factory\"><a class=\"markdownIt-Anchor\" href=\"#抽象工厂模式abstract-factory\">#</a> 抽象工厂模式（Abstract Factory）</h1>\n<h1 id=\"生成器建造者模式builder\"><a class=\"markdownIt-Anchor\" href=\"#生成器建造者模式builder\">#</a> 生成器 / 建造者模式（Builder）</h1>\n<h1 id=\"原型模式prototype\"><a class=\"markdownIt-Anchor\" href=\"#原型模式prototype\">#</a> 原型模式（Prototype）</h1>\n<h1 id=\"结构型模式\"><a class=\"markdownIt-Anchor\" href=\"#结构型模式\">#</a> = 结构型模式 =</h1>\n<h1 id=\"适配器模式adapter\"><a class=\"markdownIt-Anchor\" href=\"#适配器模式adapter\">#</a> 适配器模式（Adapter）</h1>\n<h1 id=\"桥接模式bridge\"><a class=\"markdownIt-Anchor\" href=\"#桥接模式bridge\">#</a> 桥接模式（Bridge)</h1>\n<h1 id=\"组合模式composite\"><a class=\"markdownIt-Anchor\" href=\"#组合模式composite\">#</a> 组合模式（Composite）</h1>\n<h1 id=\"装饰模式decorator\"><a class=\"markdownIt-Anchor\" href=\"#装饰模式decorator\">#</a> 装饰模式（Decorator）</h1>\n<h1 id=\"外观模式facade\"><a class=\"markdownIt-Anchor\" href=\"#外观模式facade\">#</a> 外观模式（Facade）</h1>\n<h1 id=\"享元模式flyweight\"><a class=\"markdownIt-Anchor\" href=\"#享元模式flyweight\">#</a> 享元模式（Flyweight）</h1>\n<h1 id=\"代理模式proxy\"><a class=\"markdownIt-Anchor\" href=\"#代理模式proxy\">#</a> 代理模式（Proxy）</h1>\n<h1 id=\"行为模式\"><a class=\"markdownIt-Anchor\" href=\"#行为模式\">#</a> = 行为模式 =</h1>\n<h1 id=\"职责链模式chain-of-responsibility\"><a class=\"markdownIt-Anchor\" href=\"#职责链模式chain-of-responsibility\">#</a> 职责链模式（Chain of Responsibility）</h1>\n<h1 id=\"命令模式command\"><a class=\"markdownIt-Anchor\" href=\"#命令模式command\">#</a> 命令模式（Command）</h1>\n<h1 id=\"迭代器模式iterator\"><a class=\"markdownIt-Anchor\" href=\"#迭代器模式iterator\">#</a> 迭代器模式（Iterator）</h1>\n<h1 id=\"中介者模式mediator\"><a class=\"markdownIt-Anchor\" href=\"#中介者模式mediator\">#</a> 中介者模式（Mediator）</h1>\n<h1 id=\"备忘录模式memento\"><a class=\"markdownIt-Anchor\" href=\"#备忘录模式memento\">#</a> 备忘录模式（Memento）</h1>\n<h1 id=\"观察者模式observer\"><a class=\"markdownIt-Anchor\" href=\"#观察者模式observer\">#</a> 观察者模式（Observer）</h1>\n<h1 id=\"策略模式strategy\"><a class=\"markdownIt-Anchor\" href=\"#策略模式strategy\">#</a> 策略模式（Strategy）</h1>\n<h1 id=\"状态模式state\"><a class=\"markdownIt-Anchor\" href=\"#状态模式state\">#</a> 状态模式（State）</h1>\n<h1 id=\"模板方法模式template-method\"><a class=\"markdownIt-Anchor\" href=\"#模板方法模式template-method\">#</a> 模板方法模式（Template Method）</h1>\n<h1 id=\"访问者模式vistor\"><a class=\"markdownIt-Anchor\" href=\"#访问者模式vistor\">#</a> 访问者模式（Vistor）</h1>\n",
            "tags": [
                "C++",
                "设计模式"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/03/10/STL/",
            "url": "https://adventure-yx.github.io/2023/03/10/STL/",
            "title": "STL",
            "date_published": "2023-03-10T12:42:19.000Z",
            "content_html": "<h1 id=\"stl概述\"><a class=\"markdownIt-Anchor\" href=\"#stl概述\">#</a> STL 概述</h1>\n<p>C++ STL（标准模板库，Standard Template Library）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈。</p>\n<blockquote>\n<p>STL 从广义上讲分为三类: algorithm (算法) 、container (容器)、iterator (迭代器)。容器和算法可以通过迭代器进行无缝的连接。</p>\n</blockquote>\n<p>在 C++ 标准中，STL 被组织为下面 13 个头文件 <code> &lt;vector&gt;</code> 、 <code>&lt;list&gt;</code> 、 <code>&lt;map&gt;</code> 、 <code>&lt;set&gt;</code> 、 <code>&lt;queue&gt;</code> 、 <code>&lt;deque&gt;</code> 、 <code>&lt;stack&gt;</code> 、 <code>&lt;algorithm&gt;</code> 、 <code>&lt;iterator&gt;</code> 、 <code>&lt;functional&gt;</code> 、 <code>&lt;memory&gt;</code> 、 <code>&lt;numeric&gt;</code> 、 <code>&lt;utility&gt;</code></p>\n<p>STL 提供了六大组件，彼此组合套用协同工作。这六大组件分别是：</p>\n<ul>\n<li>容器（Containers）：各种数据结构，如 vector、list、deque、set、map 等。从实现的角度来看，<strong>容器是一种 class template</strong>。</li>\n<li>算法（Algorithms）：各种常用算法，提供了执行各种操作的方式，包括对容器内容执行初始化、排序、搜索和转换等操作，比如 sort、search、copy、erase。从实现的角度来看，<strong>STL 算法是一种 function template</strong>。</li>\n<li>迭代器（Iterators）：迭代器用于遍历对象集合的元素，扮演容器与算法之间的胶合剂，是所谓的 “泛型指针”，共有 5 种类型，以及其他衍生变化。从实现角度来看，<em><em>迭代器是一种将 operator</em>、operator-&gt;、operator++、operator-- 等指针操作予以重载的 class template</em>*。所有的 STL 容器附带有自己专属的迭代器，因为只有容器设计者才知道如何遍历自己的元素。</li>\n<li>仿函数（Functors）：也称为函数对象（Function object），行为类似函数，可作为算法的某种策略。从实现角度来看，<strong>仿函数是一种重载了 operator () 的 class 或者 class template</strong>。</li>\n<li>适配器（Adaptors）：一种用来修饰容器或者仿函数或迭代器接口的东西。例如 STL 提供的 queue 和 stack，就是一种空间配接器，因为它们的底部完全借助于 deque。</li>\n<li>分配器（Allocators）：也称为空间配置器，负责空间的配置与管理。从实现的角度来看，配置器是一个实现了动态配置空间、空间管理、空间释放的 class template。</li>\n</ul>\n<p>STL 六大组件的交互关系</p>\n<p><img data-src=\"picturestl1.png\" alt=\"img\"></p>\n<p>使用 STL 的好处：</p>\n<ul>\n<li>STL 是 C++ 的一部分，因此不用额外安装什么，它被内建在你的编译器之内。</li>\n<li>STL 的一个重要特点是<strong>数据结构和算法的分离</strong>。(内部使用的模板，或者说泛型编程)</li>\n<li>程序员可以不用思考 STL 具体的实现过程，只要能够熟练使用 STL，把精力用在开发上。</li>\n<li>STL 具有高可重用性、高性能、高移植性、跨平台等优点\n<ul>\n<li>高可重用性: STL 中几乎所有的代码的采用了模板类和模板函数的方式实现，这相当于传统的由函数和类组成的库来说提供了更好的代码重用机会。</li>\n<li>高性能：底层使用的数据结构和算法比较优秀，如 map 是使用红黑树的变体实现的。（红黑树是平衡二叉树的一种）</li>\n<li>高移植性：因为是内建在编译器之内，项目 A 中用 STL 编写的模块可以直接移植到项目 B 上。</li>\n<li>跨平台：windows 上写的可以在 Linux 上运行 (反之亦可)</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"stl迭代器\"><a class=\"markdownIt-Anchor\" href=\"#stl迭代器\">#</a> STL 迭代器</h1>\n<ul>\n<li>\n<p>什么是迭代器：</p>\n<p>迭代器是一种检查容器内元素并且遍历容器内元素的<strong>数据类型</strong>。</p>\n</li>\n<li>\n<p>迭代器的作用</p>\n<p>迭代器提供对一个容器中的对象的访问方法，并且定义了容器中对象的范围。</p>\n</li>\n<li>\n<p>为什么需要迭代器：</p>\n<ul>\n<li>STL 提供每种容器的实现原理各不相同，如果没有迭代器，我们需要记住每一种容器中对象的访问方法，这样会变得非常麻烦。</li>\n<li>每个容器中都实现了一个迭代器用于对容器中对象的访问，虽然每个容器中的迭代器的实现方式不一样，但是对于用户来说操作方法是一致的，也就是说<strong>通过迭代器统一了对所有容器的访问方式</strong>。</li>\n<li>无论哪个容器，访问当前元素的下一个元素我们都可以通过迭代器自增进行访问。</li>\n<li><strong>迭代器是为了提高编程效率而开发的</strong>。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"stl容器\"><a class=\"markdownIt-Anchor\" href=\"#stl容器\">#</a> STL 容器</h1>\n<h2 id=\"容器的分类\"><a class=\"markdownIt-Anchor\" href=\"#容器的分类\">#</a> 容器的分类</h2>\n<ol>\n<li>序列式容器（Sequence containers）\n<ul>\n<li>每个元素都有固定的位置，取决于插入的时机和地点，和元素值无关。</li>\n<li>vector、deque、list、stack、queue</li>\n</ul>\n</li>\n<li>关联式容器（Associated containers）\n<ul>\n<li>元素位置取决于特定的排序准则，和插入顺序无关。</li>\n<li>set、multiset、map、multimap</li>\n</ul>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>数据结构</th>\n<th>描述</th>\n<th>实现头文件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>向量 (vector)</td>\n<td>连续存储的元素</td>\n<td><code> &lt;vector&gt;</code></td>\n</tr>\n<tr>\n<td>列表 (list)</td>\n<td>由节点组成的双向链表，每个结点包含着一个元素</td>\n<td><code> &lt;list&gt;</code></td>\n</tr>\n<tr>\n<td>栈 (stack)</td>\n<td>后进先出的值的排列</td>\n<td><code> &lt;stack&gt;</code></td>\n</tr>\n<tr>\n<td>队列 (queue)</td>\n<td>先进先出的值的排列</td>\n<td><code> &lt;queue&gt;</code></td>\n</tr>\n<tr>\n<td>优先队列 (priority_queue)</td>\n<td>元素的次序是由作用于所存储的值对上的某种谓词决定的一种队列</td>\n<td><code> &lt;queue&gt;</code></td>\n</tr>\n<tr>\n<td>双队列 (deque)</td>\n<td>连续存储的指向不同元素的指针所组成的数组</td>\n<td><code> &lt;deque&gt;</code></td>\n</tr>\n<tr>\n<td>集合 (set)</td>\n<td>由节点组成的红黑树，每个节点都包含着一个元素，节点之间以某种作用于元素对的谓词排列，没有两个不同的元素能够拥有相同的次序。</td>\n<td><code> &lt;set&gt;</code></td>\n</tr>\n<tr>\n<td>多重集合 (multiset)</td>\n<td>允许存在两个次序相等的元素的集合</td>\n<td><code> &lt;set&gt;</code></td>\n</tr>\n<tr>\n<td>映射 (map)</td>\n<td>由 {键，值} 对组成的集合，以某种作用于键上的谓词排列</td>\n<td><code> &lt;map&gt;</code></td>\n</tr>\n<tr>\n<td>多重映射 (multimap)</td>\n<td>允许键对有相等的次序的映射</td>\n<td><code> &lt;map&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"vector容器\"><a class=\"markdownIt-Anchor\" href=\"#vector容器\">#</a> vector 容器</h2>\n<ul>\n<li>vector 是将元素置于一个动态数组中加以管理的容器。</li>\n<li>vector 可以随机存取元素（支持索引值直接存取，用 [] 操作符或者 at () 方法）</li>\n<li>vector 尾部添加或移除元素非常快速。但是在中部或头部插入元素或移动元素比较费时。</li>\n<li>在局部函数中开 vector 数组，是在堆空间里面开的，与开全局变量比较类似，所以经常见到在局部函数中开大容量数组。</li>\n</ul>\n<h3 id=\"vector的构造方法\"><a class=\"markdownIt-Anchor\" href=\"#vector的构造方法\">#</a> vector 的构造方法</h3>\n<ul>\n<li>\n<p>vector 对象的默认构造</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> vecT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vecInt<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义了一个存 int 的 vector 容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> vecDouble<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义了一个存 double 的 vector 容器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> vecString<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义了一个存 String 的 vector 容器</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CA</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>CA<span class=\"token operator\">*</span><span class=\"token operator\">></span> vecpCA<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于存放 CA 对象指针的 vector 容器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>CA<span class=\"token operator\">></span> vecCA<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于存放 CA 对象的 vector 容器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 由于容器元素的存放是按值复制的方式进行的，所以此时 CA 必须提供 CA 的拷贝构造函数，以保证 CA 对象间拷贝正常</span></pre></td></tr></table></figure></li>\n<li>\n<p>vector 对象的带参构造</p>\n<ul>\n<li><code>vector(begin, end);  //构造函数将[begin,end)区间的元素拷贝给自身</code></li>\n<li><code>vector(n,elem);  //构造函数将n个elem拷贝给自身</code></li>\n<li><code>vector(const vector &amp;vec);  //拷贝构造函数</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> iArray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">vA</span><span class=\"token punctuation\">(</span>iArray<span class=\"token punctuation\">,</span> iArray<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义一个长度为 n 的数组，初始值默认为 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">vB</span><span class=\"token punctuation\">(</span>vA<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> vA<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">vB</span><span class=\"token punctuation\">(</span>vA<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> vA<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">vC</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 存放 3 个元素 9</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">vD</span><span class=\"token punctuation\">(</span>vA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>二维初始化</p>\n<p>定义第一维固定长度为 5，第二维可变化的二维数组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义可变长二维数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 注意：行不可变（只有 5 行）, 而列可变，可以在指定行添加元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 第一维固定长度为 5，第二维长度可以改变</span></pre></td></tr></table></figure><p>行列均可变</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始化二维均可变长数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>vectot<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> v<span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义一个行和列均可变的二维数组</span></pre></td></tr></table></figure><p>行列长度均固定 n + 1 行 m + 1 列初始值为 0</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>c++17</code>  或者 <code>c++20</code>  支持的形式（不常用）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"vector的赋值\"><a class=\"markdownIt-Anchor\" href=\"#vector的赋值\">#</a> vector 的赋值</h3>\n<ul>\n<li><code> vector.assign(begin, end);  //将[begin, end)区间中的数据拷贝赋值给本身</code></li>\n<li><code> vector.assign(n, elem);  //将n个elem拷贝赋值给本身</code></li>\n<li><code> vector&amp; operator = (const vector &amp;vec);  //重载等号操作符</code></li>\n<li><code> vector.swap(vec); //将vec和本身的元素互换</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vecIntA<span class=\"token punctuation\">,</span> vecIntB<span class=\"token punctuation\">,</span> vecIntC<span class=\"token punctuation\">,</span> vecIntD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> iArray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vecIntA<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>iArray<span class=\"token punctuation\">,</span> iArray<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vecIntB<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>vecIntA<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> vecIntA<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 用其他容器的迭代器作为参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>vecIntC<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>vecIntD <span class=\"token operator\">=</span> vecIntA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>vecIntA<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>vecIntD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"vector的迭代器\"><a class=\"markdownIt-Anchor\" href=\"#vector的迭代器\">#</a> vector 的迭代器</h3>\n<ul>\n<li><code>vector&lt;int&gt;::iterator iter; </code></li>\n<li>vector 容器的迭代器属于 “随机访问迭代器”：迭代器一次可以移动多个位置</li>\n</ul>\n<h3 id=\"方法函数\"><a class=\"markdownIt-Anchor\" href=\"#方法函数\">#</a> 方法函数</h3>\n<p>知道了如何定义初始化可变数组，下面就需要知道如何添加，删除，修改数据。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>front()</code></td>\n<td style=\"text-align:left\">返回第一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>pop_back()</code></td>\n<td style=\"text-align:left\">删除最后一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>push_back(element)</code></td>\n<td style=\"text-align:left\">在尾部加一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>size()</code></td>\n<td style=\"text-align:left\">返回实际数据个数（unsigned 类型）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>clear()</code></td>\n<td style=\"text-align:left\">清除元素个数 O (N)，N 为元素个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>resize(n, v)</code></td>\n<td style=\"text-align:left\">改变数组大小为 <code>n</code> ，新增空间数值赋为 <code>v</code> ，如果没有默认赋值为 <code>0</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>insert(it, x)</code></td>\n<td style=\"text-align:left\">向任意迭代器 <code>it</code>  插入一个元素 <code>x</code>  ，O(N)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">例： <code>insert(c.begin()+2,-1)</code></td>\n<td style=\"text-align:left\">将 <code>-1</code>  插入 <code>c[2]</code>  的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(first,last)</code></td>\n<td style=\"text-align:left\">删除 <code>[first,last)</code>  的所有元素，O (N)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>begin()</code></td>\n<td style=\"text-align:left\">返回首元素的迭代器（通俗来说就是地址）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>end()</code></td>\n<td style=\"text-align:left\">返回最后一个元素后一个位置的迭代器（地址）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>empty()</code></td>\n<td style=\"text-align:left\">判断是否为空，为空返回真，反之返回假 O (1)</td>\n</tr>\n</tbody>\n</table>\n<p>注意：  <code>end()</code>  返回的是最后一个元素的后一个位置的地址，不是最后一个元素的地址，<strong>所有 STL 容器均是如此</strong></p>\n<h3 id=\"访问\"><a class=\"markdownIt-Anchor\" href=\"#访问\">#</a> 访问</h3>\n<ol>\n<li>\n<p>下标访问</p>\n</li>\n<li>\n<p><code> at()</code>  访问</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vec<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回索引 idx 所指的数据，如果 idx 越界，运行直接报错。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vec<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回索引 idx 所指的数据，如果 idx 越界，抛出 out_of_range 异常。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 添加元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tvi<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 下标访问 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> vi<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 函数访问</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>迭代器访问</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 迭代器访问</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 相当于声明了一个迭代器类型的变量 it</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 通俗来说就是声明了一个指针变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 方式一：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 方式二：</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//vi.end () 指向尾元素地址的下一个地址</span></pre></td></tr></table></figure></li>\n<li>\n<p>C++11</p>\n<p><strong>只能遍历完整数组</strong>，如果要指定的内容进行遍历，需要另选方法。<br>\n<strong>auto</strong> 能够自动识别并获取类型。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">241</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> val <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12 241</span></pre></td></tr></table></figure></li>\n</ol>\n<p><code>vector</code>  注意：</p>\n<ul>\n<li><code>vi[i]</code>  和  <code>*(vi.begin() + i)</code>  等价</li>\n<li><code>vector</code>  和 <code>string</code>  的 <code>STL</code>  容器支持 <code>*(it + i)</code>  的元素访问，其它容器可能也可以支持这种方式访问，但用的不多。</li>\n</ul>\n<h3 id=\"vector原理\"><a class=\"markdownIt-Anchor\" href=\"#vector原理\">#</a> Vector 原理</h3>\n<ul>\n<li>vector 是动态数组，所以和数组一样拥有一段连续的内存空间，并且起始地址不变。</li>\n<li>因为 vector 地址空间是连续的，所以能高效的进行随机访问，时间复杂度为 o (1)。</li>\n<li>在 vector 中插入和删除元素，需要对现有元素进行复制、移动，时间复杂度为 o (n)。</li>\n<li>如果 vector 中存储的对象很大，或者构造函数复杂，那么插入等开销会很大。因为拷贝现有对象时需要调用拷贝构造函数。</li>\n<li>vector 扩容原理\n<ul>\n<li>新增元素：Vector 通过一个连续的数组存放元素，如果集合已满，在新增数据的时候，就会分配一块更大的内存，将原来的数据复制过来，释放之前的内存，在插入新增的元素。注意不是在原来空间后直接增加空间</li>\n<li>对 vector 的任何操作，一旦引起空间重新配置，指向原 vector 的所有迭代器就都失效了。</li>\n<li>不同的编译器实现的扩容方式不一样，VS2015 中以 1.5 倍扩容，GCC 以 2 倍扩容。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"deque容器\"><a class=\"markdownIt-Anchor\" href=\"#deque容器\">#</a> deque 容器</h2>\n<ul>\n<li>deque 是 “double-ended queue” 的缩写。</li>\n<li>deque 是双端数组而 vector 是单端的。</li>\n<li>deque 可以随机存取元素（支持索引存取，用 [] 操作符或 at () 方法）</li>\n<li>deque 头部尾部添加或移除元素都非常快 O (1)，在中部添加或移除元素比较费时。vector 只在尾部是 O (1)</li>\n<li><code>#include &lt;deque&gt;</code></li>\n<li>deque 和 vector 在操作上几乎一样，多 2 个函数。\n<ul>\n<li><code>push_front(x);  //把x插入队首 O(1)</code></li>\n<li><code>pop_front();  //删除队首元素 O(1)</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"list容器\"><a class=\"markdownIt-Anchor\" href=\"#list容器\">#</a> list 容器</h2>\n<ul>\n<li>list 是一个双向链表容器，可以高效地进行插入删除元素。</li>\n<li>list 不可以随机存取元素，所以不支持 [] 操作符和 at (pos) 函数</li>\n<li>支持迭代器自增 <code>it++;</code>  但不支持迭代器一次移动多个位置 <code>it+5;</code></li>\n</ul>\n<h3 id=\"list的构造方法\"><a class=\"markdownIt-Anchor\" href=\"#list的构造方法\">#</a> list 的构造方法</h3>\n<ul>\n<li>list 对象的默认构造： <code>list&lt;T&gt; lst;</code></li>\n<li>list 对象的带参数构造\n<ul>\n<li><code>list(n,elem); //构造函数将n个elem拷贝给自身</code></li>\n<li><code>list(beg,end); //构造函数将[beg,end)区间（迭代器）中的元素拷贝给自身</code></li>\n<li><code>list(const list &amp;lst); //拷贝构造函数</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"list的迭代器\"><a class=\"markdownIt-Anchor\" href=\"#list的迭代器\">#</a> list 的迭代器</h3>\n<p>list 容器的迭代器 是 “双向迭代器”：从两个方向读写容器。除了提供前向迭代器的全部操作外，双向迭代器还提供前置和后置的自减运算。</p>\n<ul>\n<li><code>list.begin(); //返回容器第一个元素的迭代器</code></li>\n<li><code>list.end(); //返回容器最后一个元素之后的迭代器</code></li>\n<li><code>list.rbegin(); //返回容器倒数第一个元素的迭代器</code></li>\n<li><code>list.rend(); //返回容器倒数第一个元素之后的迭代器</code></li>\n</ul>\n<p><img data-src=\"image-20230413101636171.png\" alt=\"image-20230413101636171\"></p>\n<h3 id=\"方法函数-2\"><a class=\"markdownIt-Anchor\" href=\"#方法函数-2\">#</a> 方法函数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>front()</code></td>\n<td style=\"text-align:left\">返回第一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>back()</code></td>\n<td style=\"text-align:left\">返回最后一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>push_back(element)</code></td>\n<td style=\"text-align:left\">在尾部加一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>push_front(element)</code></td>\n<td style=\"text-align:left\">在头部加一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>pop_back()</code></td>\n<td style=\"text-align:left\">删除最后一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>pop_front()</code></td>\n<td style=\"text-align:left\">删除第一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>size()</code></td>\n<td style=\"text-align:left\">返回实际数据个数（unsigned 类型）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>clear()</code></td>\n<td style=\"text-align:left\">清除元素个数 O (N)，N 为元素个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>resize(n, v)</code></td>\n<td style=\"text-align:left\">改变数组大小为 <code>n</code> ，新增空间数值赋为 <code>v</code> ，如果没有默认赋值为 <code>0</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>insert(it, x)</code></td>\n<td style=\"text-align:left\">向任意迭代器 <code>it</code>  插入一个元素 <code>x</code>  ，O(N)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">例： <code>insert(c.begin()+2,-1)</code></td>\n<td style=\"text-align:left\">将 <code>-1</code>  插入 <code>c[2]</code>  的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(first,last)</code></td>\n<td style=\"text-align:left\">删除 <code>[first,last)</code>  的所有元素，O (N)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>begin()</code></td>\n<td style=\"text-align:left\">返回首元素的迭代器（通俗来说就是地址）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>end()</code></td>\n<td style=\"text-align:left\">返回最后一个元素后一个位置的迭代器（地址）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>empty()</code></td>\n<td style=\"text-align:left\">判断是否为空，为空返回真，反之返回假 O (1)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"stack\"><a class=\"markdownIt-Anchor\" href=\"#stack\">#</a> stack</h2>\n<p>栈为数据结构的一种，是 STL 中实现的一个先进后出，后进先出的容器。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件需要添加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 声明</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>stack<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>stack<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//node 是结构体类型</span></pre></td></tr></table></figure><h3 id=\"方法函数-3\"><a class=\"markdownIt-Anchor\" href=\"#方法函数-3\">#</a> 方法函数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.push(ele)</code></td>\n<td style=\"text-align:left\">元素 <code>ele</code>  入栈，增加元素 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.pop()</code></td>\n<td style=\"text-align:left\">移除栈顶元素 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.top()</code></td>\n<td style=\"text-align:left\">取得栈顶元素（但不删除）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.empty()</code></td>\n<td style=\"text-align:left\">检测栈内是否为空，空为真 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.size()</code></td>\n<td style=\"text-align:left\">返回栈内元素的个数 O (1)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"栈遍历\"><a class=\"markdownIt-Anchor\" href=\"#栈遍历\">#</a> 栈遍历</h3>\n<p><strong>栈遍历</strong></p>\n<p>栈只能对栈顶元素进行操作，如果想要进行遍历，只能将栈中元素一个个取出来存在数组中</p>\n<p><strong>数组模拟栈进行遍历</strong></p>\n<p>通过一个<strong>数组</strong>对栈进行模拟，一个存放下标的变量 <code>top</code>  模拟指向栈顶的指针。</p>\n<p><strong>特点：</strong> 比 <code>STL</code>  的 <code>stack</code>  速度更快，遍历元素方便</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈 从左至右为栈底到栈顶</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> tt <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//tt 代表栈顶指针，初始栈内无元素，tt 为 - 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 入栈 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    s<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 出栈</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> top_element <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>tt<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 入栈操作示意</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//  0  1  2  3  4  5  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//                tt</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 出栈后示意</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//  0  1  2  3  4 </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//              tt</span></pre></td></tr></table></figure><h2 id=\"queue\"><a class=\"markdownIt-Anchor\" href=\"#queue\">#</a> queue</h2>\n<p>队列是一种先进先出的数据结构。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 定义初始化</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"方法函数-4\"><a class=\"markdownIt-Anchor\" href=\"#方法函数-4\">#</a> 方法函数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>q.front()</code></td>\n<td style=\"text-align:left\">返回队首元素 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.back()</code></td>\n<td style=\"text-align:left\">返回队尾元素 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.push(element)</code></td>\n<td style=\"text-align:left\">尾部添加一个元素 <code>element</code>  进队 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.pop()</code></td>\n<td style=\"text-align:left\">删除第一个元素 出队 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.size()</code></td>\n<td style=\"text-align:left\">返回队列中元素个数，返回值类型 <code>unsigned int</code>  O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.empty()</code></td>\n<td style=\"text-align:left\">判断是否为空，队列为空，返回 <code>true</code>  O(1)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"队列模拟\"><a class=\"markdownIt-Anchor\" href=\"#队列模拟\">#</a> 队列模拟</h3>\n<p>使用 <code>q[]</code>  数组模拟队列<br>\n <code>hh</code>  表示队首元素的下标，初始值为 <code>0</code> <br>\n <code>tt</code>  表示队尾元素的下标，初始值为 <code>-1</code> ，表示刚<strong>开始队列为空</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> q<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> hh <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>tt <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//    入队 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    q<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    q<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//    将所有元素出队 </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>hh <span class=\"token operator\">&lt;=</span> tt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> q<span class=\"token punctuation\">[</span>hh<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"priority_queue\"><a class=\"markdownIt-Anchor\" href=\"#priority_queue\">#</a> priority_queue</h3>\n<p>优先队列是在正常队列的基础上加了优先级，保证每次的队首元素都是优先级最大的。</p>\n<p>可以实现每次从优先队列中取出的元素都是队列中<strong>优先级最大</strong>的一个。</p>\n<p>它的底层是通过<strong>堆</strong>来实现的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"函数方法\"><a class=\"markdownIt-Anchor\" href=\"#函数方法\">#</a> 函数方法</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>q.top()</code></td>\n<td style=\"text-align:left\">访问队首元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.push()</code></td>\n<td style=\"text-align:left\">入队</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.pop()</code></td>\n<td style=\"text-align:left\">堆顶（队首）元素出队</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.size()</code></td>\n<td style=\"text-align:left\">队列元素个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.empty()</code></td>\n<td style=\"text-align:left\">是否为空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>注意</strong>没有 <code>clear()</code> ！</td>\n<td style=\"text-align:left\">不提供该方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">优先队列只能通过 <code>top()</code>  访问队首元素（优先级最高的元素）</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"设置优先级\"><a class=\"markdownIt-Anchor\" href=\"#设置优先级\">#</a> 设置优先级</h4>\n<ul>\n<li><strong>基本数据类型的优先级</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> pq<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认大根堆，即每次取出的元素是队列中的最大值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小根堆，每次取出的元素是队列中的最小值</span></pre></td></tr></table></figure><p><strong>参数解释：</strong></p>\n<ul>\n<li><strong>第二个参数：</strong><br>\n <code>vector&lt; int &gt;</code>  是用来承载底层数据结构堆的容器，若优先队列中存放的是 <code>double</code>  型数据，就要填 <code>vector&lt; double &gt;</code> <br>\n<strong> 总之存的是什么类型的数据，就相应的填写对应类型。同时也要改动第三个参数里面的对应类型。</strong></li>\n<li><strong>第三个参数：</strong><br>\n <code>less&lt; int &gt;</code>  表示数字大的优先级大，堆顶为最大的数字<br>\n <code>greater&lt; int &gt;</code>  表示数字小的优先级大，堆顶为最小的数字<br>\n<strong> int 代表的是数据类型，也要填优先队列中存储的数据类型</strong></li>\n</ul>\n<p>下面介绍基础数据类型优先级设置的写法。</p>\n<p><strong>1. 基础写法（非常常用）</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认大根堆，即每次取出的元素是队列中的最大值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> less<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> q2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 大根堆，每次取出的元素是队列中的最大值，同第一行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> q3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小根堆，每次取出的元素是队列中的最小值</span></pre></td></tr></table></figure><p><strong>2. 自定义排序（不常见，主要是写着麻烦）</strong></p>\n<p>下面的代码比较长，基础类型优先级写着太麻烦，用第一种即可。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">cmp1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> x <span class=\"token operator\">></span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">cmp2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> x <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> cmp1<span class=\"token operator\">></span> q1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小根堆</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> cmp2<span class=\"token operator\">></span> q2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 大根堆</span></pre></td></tr></table></figure><ul>\n<li><strong>结构体优先级设置</strong></li>\n</ul>\n<blockquote>\n<p>即优先队列中存储结构体类型，必须要设置优先级，即结构体的比较运算（因为优先队列的堆中要比较大小，才能将对应最大或者最小元素移到堆顶）。</p>\n</blockquote>\n<p>优先级设置可以定义在<strong>结构体内</strong>进行小于号重载，也可以定义在<strong>结构体外</strong>。</p>\n<ul>\n<li><strong>存储特殊类型的优先级</strong></li>\n</ul>\n<h2 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\">#</a> set</h2>\n<ul>\n<li>\n<p>set 容器中的元素不会重复，其中所包含的元素是唯一的，set 容器里的元素按一定的顺序排列。元素插入过程是按排序规则插入，所以不能指定插入位置。</p>\n<p>即：set 里面的元素<strong>不重复 且有序</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>set 采用红黑树变体的数据结构实现，红黑树属于平衡二叉树。在插入和删除操作上比 vector 快。</p>\n</li>\n<li>\n<p>set 不可以直接存取元素。（不可以使用 <code>at(pos)</code>  和 <code>[ ]操作符</code> ）</p>\n</li>\n<li>\n<p><code>set</code>  支持唯一键值，每个元素值只能出现一次</p>\n</li>\n<li>\n<p><code>multiset</code>  中同一值可以出现多次</p>\n</li>\n<li>\n<p>不可以直接修改 set 中的元素值，因为该类容器是自动排序的。如果希望修改一个元素值，必须先删除原有的元素，再插入新的元素。</p>\n</li>\n</ul>\n<h3 id=\"函数方法-2\"><a class=\"markdownIt-Anchor\" href=\"#函数方法-2\">#</a> 函数方法</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.begin()</code></td>\n<td style=\"text-align:left\">返回 set 容器的第一个元素的地址（迭代器）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.end()</code></td>\n<td style=\"text-align:left\">返回 set 容器的最后一个元素的下一个地址（迭代器）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.rbegin()</code></td>\n<td style=\"text-align:left\">返回逆序迭代器，指向容器元素最后一个位置 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.rend()</code></td>\n<td style=\"text-align:left\">返回逆序迭代器，指向容器第一个元素前面的位置 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.clear()</code></td>\n<td style=\"text-align:left\">删除 set 容器中的所有的元素，返回 unsigned int 类型 O (N)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.empty()</code></td>\n<td style=\"text-align:left\">判断 set 容器是否为空 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.insert()</code></td>\n<td style=\"text-align:left\">插入一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.size()</code></td>\n<td style=\"text-align:left\">返回当前 set 容器中的元素个数 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(iterator)</code></td>\n<td style=\"text-align:left\">删除定位器 iterator 指向的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(first,second）</code></td>\n<td style=\"text-align:left\">删除定位器 first 和 second 之间的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(key_value)</code></td>\n<td style=\"text-align:left\">删除键值 key_value 的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find(element)</code></td>\n<td style=\"text-align:left\">查找 set 中的某一元素，有则返回该元素对应的迭代器，无则返回结束迭代器 end ()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.count(element)</code></td>\n<td style=\"text-align:left\">查找 set 中的元素出现的个数，由于 set 中元素唯一，此函数相当于查询 element 是否出现</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.lower_bound(k)</code></td>\n<td style=\"text-align:left\">返回大于等于 k 的第一个元素的迭代器 O (logN)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.upper_bound(k)</code></td>\n<td style=\"text-align:left\">返回大于 k 的第一个元素的迭代器 O (logN)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"访问-2\"><a class=\"markdownIt-Anchor\" href=\"#访问-2\">#</a> 访问</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> setIntA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>setIntA<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>setIntA<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>setIntA<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>setIntA<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>setIntA<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">setIntB</span><span class=\"token punctuation\">(</span>setIntA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 1,3,5,7,9</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> setIntC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>setIntC <span class=\"token operator\">=</span> setIntA<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 1,3,5,7,9</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>setIntC<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>setIntC<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>setIntA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"函数对象仿函数\"><a class=\"markdownIt-Anchor\" href=\"#函数对象仿函数\">#</a> 函数对象 / 仿函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> less<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> setIntA<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 升序排列，默认 = set&lt;int> setIntA; </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> setIntB<span class=\"token punctuation\">;</span>\t\t\t <span class=\"token comment\">// 降序排列</span></pre></td></tr></table></figure><p>函数对象 functor：</p>\n<ul>\n<li>\n<p>尽管函数指针被广泛用于实现函数回调，但 C++ 还提供了一个重要的实现回调函数的方法，那就是函数对象 / 仿函数。</p>\n</li>\n<li>\n<p>functor，是重载了 () 操作符的普通类对象，从语法上讲，他与普通函数行为类似。</p>\n</li>\n<li>\n<p><code>greater&lt;&gt;</code>  和  <code>less&lt;&gt;</code>  就是函数对象</p>\n</li>\n<li>\n<p>简易实现原理</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">greater</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> iLeft<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> iRight<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>iLeft <span class=\"token operator\">></span> iRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//less 实现则为  return (iLeft &lt; iRight);  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>容器就是调用函数对象的 operator () 方法去比较两个值的大小。</p>\n</li>\n</ul>\n<h2 id=\"pair\"><a class=\"markdownIt-Anchor\" href=\"#pair\">#</a> pair</h2>\n<p>pair 只含有两个元素，可以看作是只有两个元素的结构体。</p>\n<p><strong>应用：</strong></p>\n<ul>\n<li>代替二元结构体</li>\n<li>作为 map 键值对进行插入（代码如下）</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mp<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">pair</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xingmaqi\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;utility></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//1. 初始化定义</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wangyaqi\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 带初始值的</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">;</span><span class=\"token comment\">// 不带初始值的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//2. 赋值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>访问</p>\n<ul>\n<li><code>pair.first</code></li>\n<li><code>pair.second</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义结构体数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> map</h2>\n<p>映射类似于函数的对应关系，每个 <code>x</code>  对应一个 <code>y</code> ，而 map 是每个键 <code>key</code>  对应一个值 <code>value</code> 。和 python 的字典非常类似。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>node<span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span><span class=\"token comment\">//node 是结构体类型</span></pre></td></tr></table></figure><blockquote>\n<p>map 特性：map 会按照键的顺序从小到大自动排序，键的类型必须可以比较大小</p>\n</blockquote>\n<h3 id=\"函数方法-3\"><a class=\"markdownIt-Anchor\" href=\"#函数方法-3\">#</a> 函数方法</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>mp.find(key)</code></td>\n<td style=\"text-align:left\">返回键为 key 的映射的迭代器 O (logN) 注意：用 find 函数来定位数据出现位置，它返回一个迭代器。当数据存在时，返回数据所在位置的迭代器，数据不存在时，返回 mp.end ()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.erase(it)</code></td>\n<td style=\"text-align:left\">删除迭代器对应的键和值 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.erase(key)</code></td>\n<td style=\"text-align:left\">根据映射的键删除键和值 O (logN)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.erase(first,last)</code></td>\n<td style=\"text-align:left\">删除左闭右开区间迭代器对应的键和值 O (last−first)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.size()</code></td>\n<td style=\"text-align:left\">返回映射的对数 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.clear()</code></td>\n<td style=\"text-align:left\">清空 map 中的所有元素 O (N)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.insert()</code></td>\n<td style=\"text-align:left\">插入元素，插入时要构造键值对</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.empty()</code></td>\n<td style=\"text-align:left\">如果 map 为空，返回 true，否则返回 false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.begin()</code></td>\n<td style=\"text-align:left\">返回指向 map 第一个元素的迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.end()</code></td>\n<td style=\"text-align:left\">返回指向 map 尾部的迭代器（最后一个元素的<strong>下一个</strong>地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.rbegin()</code></td>\n<td style=\"text-align:left\">返回指向 map 最后一个元素的迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.rend()</code></td>\n<td style=\"text-align:left\">返回指向 map 第一个元素前面 (上一个）的逆向迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.count(key)</code></td>\n<td style=\"text-align:left\">查看元素是否存在，因为 map 中键是唯一的，所以存在返回 1，不存在返回 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.lower_bound()</code></td>\n<td style=\"text-align:left\">返回一个迭代器，指向键值 &gt;= <strong>key</strong> 的第一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.upper_bound()</code></td>\n<td style=\"text-align:left\">返回一个迭代器，指向键值 &gt; key 的第一个元素</td>\n</tr>\n</tbody>\n</table>\n<p><strong>下面说明部分函数方法的注意点</strong></p>\n<blockquote>\n<p>注意：<br>\n查找元素是否存在时，可以使用<br>\n① <code>mp.find()</code>  ②  <code>mp.count()</code>  ③  <code>mp[key]</code> <br>\n 但是第三种情况，如果不存在对应的 <code>key</code>  时，会自动创建一个键值对（产生一个额外的键值对空间）<br>\n所以为了不增加额外的空间负担，最好使用前两种方法</p>\n</blockquote>\n<hr>\n<p><strong>使用迭代器进行正反向遍历：</strong></p>\n<p><code>mp.begin()</code>  和 <code>mp.end()</code>  用法：<strong>用于正向遍历 map</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    it <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/* 输出</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>1 2</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>2 3</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>3 4</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr></table></figure><p><code>mp.rbegin()</code>  和 <code>mp.rend()</code> <strong> 用于逆向遍历 map</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    it <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/* 输出</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>3 4</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>2 3</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>1 2</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>二分查找 <code>lower_bound() upper_bound()</code></p>\n<blockquote>\n<p>map 的二分查找以第一个元素（即键为准），对<strong>键</strong>进行二分查找<br>\n返回值为 map 迭代器类型</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> m<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 有序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it1 <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it1<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//it1->first=2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it2 <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it2<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//it2->first=6</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"添加元素\"><a class=\"markdownIt-Anchor\" href=\"#添加元素\">#</a> 添加元素</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 先声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 方式一 (查找键 + 赋值，性能问题)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token string\">\"学习\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"看书\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token string\">\"玩耍\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"打游戏\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 方式二：插入元素构造键值对</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>mp<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vegetable\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"蔬菜\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 方式三</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>mp<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">pair</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fruit\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"水果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 方式四</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>mp<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hahaha\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"wawawa\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"访问元素\"><a class=\"markdownIt-Anchor\" href=\"#访问元素\">#</a> 访问元素</h3>\n<p>** 下标访问：** 大部分情况用于访问单个元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token string\">\"菜哇菜\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"强哇强\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> mp<span class=\"token punctuation\">[</span><span class=\"token string\">\"菜哇菜\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 只是简写的一个例子，程序并不完整</span></pre></td></tr></table></figure><p><strong>使用 find () 函数</strong>：成功返回对应的迭代器，失败返回 end () 的返回值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> maps<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>使用 at () 函数</strong>：如果键值对不存在会抛出 <code>out_of_range</code>  异常</p>\n<p><strong>遍历访问：</strong></p>\n<p><strong>方式一：迭代器访问</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//      键                 值 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//it 是结构体指针访问所以要用 -> 访问</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//*it 是结构体变量 访问要用。访问</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//cout&lt;&lt;(*it).first&lt;&lt;\" \"&lt;&lt;(*it).second;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>方式二：智能指针访问</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> mp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 键，值</span></pre></td></tr></table></figure><p><strong>方式三：对指定单个元素访问</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> it <span class=\"token operator\">-></span> first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span>  it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>方式四：c++17 特性</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> mp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//x,y 对应键和值</span></pre></td></tr></table></figure><h3 id=\"与unordered_map的比较\"><a class=\"markdownIt-Anchor\" href=\"#与unordered_map的比较\">#</a> 与 unordered_map 的比较</h3>\n<h4 id=\"内部实现原理\"><a class=\"markdownIt-Anchor\" href=\"#内部实现原理\">#</a> 内部实现原理</h4>\n<ul>\n<li><strong>map</strong>：内部用<strong>红黑树</strong>实现，具有<strong>自动排序</strong>（按键从小到大）功能。</li>\n<li><strong>unordered_map</strong>：内部用<strong>哈希表</strong>实现，内部元素无序杂乱。</li>\n</ul>\n<h4 id=\"效率比较\"><a class=\"markdownIt-Anchor\" href=\"#效率比较\">#</a> 效率比较</h4>\n<ul>\n<li><strong>map</strong>：\n<ul>\n<li>优点：内部用红黑树实现，内部元素具有有序性，查询删除等操作复杂度为 O (logN)</li>\n<li>缺点：占用空间，红黑树里每个节点需要保存父子节点和红黑性质等信息，空间占用较大</li>\n</ul>\n</li>\n<li><strong>unordered_map</strong>：\n<ul>\n<li>优点：内部用哈希表实现，查找速度非常快（适用于大量的查询操作）。</li>\n<li>缺点：建立哈希表比较耗时。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>两者方法函数基本一样，差别不大。</p>\n<p>注意：</p>\n<ul>\n<li>\n<p>随着内部元素越来越多，两种容器的插入删除查询操作的时间都会逐渐变大，效率逐渐变低。</p>\n</li>\n<li>\n<p>使用 <code>[]</code>  查找元素时，如果元素不存在，两种容器<strong>都是</strong>创建一个空的元素；如果存在，会正常索引对应的值。所以如果查询过多的不存在的元素值，容器内部会创建大量的空的键值对，后续查询创建删除效率会<strong>大大降低</strong>。</p>\n</li>\n<li>\n<p>查询容器内部元素的最优方法是：先判断存在与否，再索引对应值（适用于这两种容器）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 以 map 为例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">999999999</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 此处判断是否存在 x 这个键</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> mp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 只有存在才会索引对应的值，避免不存在 x 时多余空元素的创建</span></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<p>还有一种映射：</p>\n<p>multimap 键可以重复，即一个键对应多个值</p>\n<h2 id=\"string\"><a class=\"markdownIt-Anchor\" href=\"#string\">#</a> string</h2>\n<p>string 是一个字符串类，和 <code>char</code>  型字符串类似。</p>\n<p>可以把 string 理解为一个字符串类型，像 int 一样可以定义</p>\n<h3 id=\"初始化及定义\"><a class=\"markdownIt-Anchor\" href=\"#初始化及定义\">#</a> 初始化及定义</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//1.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>string str1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成空字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//2.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>string <span class=\"token function\">str2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456789\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成 \"1234456789\" 的复制品 </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//3.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>string <span class=\"token function\">str3</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果为 \"123\" ，从 0 位置开始，长度为 3</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//4.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>string <span class=\"token function\">str4</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 \"12345\" ，长度为 5</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//5.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>string <span class=\"token function\">str5</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 \"22222\" , 构造 5 个字符 '2' 连接而成的字符串</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//6.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>string <span class=\"token function\">str6</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 \"3456789\"，截取第三个元素（2 对应第三位）到最后</span></pre></td></tr></table></figure><p><strong>简单使用</strong></p>\n<ul>\n<li>\n<p>访问单个字符：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"xing ma qi!!!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li>\n<p>string 数组使用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    string s<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"loading...  \"</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">9</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"string-特性\"><a class=\"markdownIt-Anchor\" href=\"#string-特性\">#</a> string 特性</h3>\n<ul>\n<li>\n<p>支持<strong>比较</strong>运算符<br>\n string 字符串支持常见的比较操作符 <code>（&gt;,&gt;=,&lt;,&lt;=,==,!=）</code> ，支持 <code>string</code>  与 <code>C-string</code>  的比较（如  <code>str &lt; &quot;hello&quot;</code> ）。<br>\n在使用 <code>&gt;,&gt;=,&lt;,&lt;=</code>  这些操作符的时候是根据 “当前字符特性” 将字符按  <code>字典顺序</code>  进行逐一得 比较。字典排序靠前的字符小， 比较的顺序是从前向后比较，遇到不相等的字符就按这个位置上的两个字符的比较结果确定两个字符串的大小（前面减后面）。</p>\n<p>同时，`string (“aaaa”) 。</p>\n<ul>\n<li>\n<p>支持 <code>+</code> <strong> 运算</strong>符，代表拼接字符串<br>\n string 字符串可以拼接，通过”+” 运算符进行拼接。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"456\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>string s <span class=\"token operator\">=</span> s1 <span class=\"token operator\">+</span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//123456</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"读入详解\"><a class=\"markdownIt-Anchor\" href=\"#读入详解\">#</a> 读入详解</h3>\n<p><strong>读入字符串，遇空格，回车结束</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>读入一行字符串（包括空格），遇回车结束</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意:  <code>getline(cin, s)</code>  会获取前一个输入的换行符，需要在前面添加读取换行符的语句。如： <code>getchar()</code>  或 <code>cin.get()</code></p>\n<p>错误读取：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此时读取相当于读取了前一个回车字符</span></pre></td></tr></table></figure><p>正确读取：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//cin.get()</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 可正确读入下一行的输入</span></pre></td></tr></table></figure><blockquote>\n<p><code>cin</code>  与 <code>cin.getline()</code>  混用</p>\n<p>cin 输入完后，回车，cin 遇到回车结束输入，但回车还在输入流中，cin 并不会清除，导致 <code>getline()</code>  读取回车，结束。<br>\n需要在 cin 后面加 <code>cin.ignore()</code> ；主动删除输入流中的换行符。（不常用）</p>\n</blockquote>\n<p><strong>cin 和 cout 解锁</strong></p>\n<p>代码（写在 main 函数开头）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>为什么要进行 <code>cin</code>  和 <code>cout</code>  的解锁，原因是：</p>\n<p>在一些题目中，读入的<strong>数据量很大</strong>，往往超过了 1e5（10<sup>5</sup>）的数据量，而 <code>cin</code>  和 <code>cout</code>  的读入输出的速度<strong>很慢</strong>（是因为 <code>cin</code>  和 <code>cout</code>  为了兼容 C 语言的读入输出在性能上做了妥协），远不如 <code>scanf</code>  和 <code>printf</code>  的速度，具体原因可以搜索相关的博客进行了解。</p>\n<p><strong>所以</strong>对 <code>cin</code>  和 <code>cout</code>  进行解锁使 <code>cin</code>  和 <code>cout</code>  的速度几乎接近 <code>scanf</code>  和 <code>printf</code> ，避免输入输出超时。</p>\n</blockquote>\n<p><strong>注意</strong>： <code>cin cout</code>  解锁使用时，不能与  <code>scanf,getchar, printf,cin.getline()</code>  混用，一定要注意，会出错。</p>\n<blockquote>\n<p><strong>string 与 C 语言字符串（C-string）的区别</strong></p>\n<ul>\n<li>string<br>\n 是 C++ 的一个类，专门实现字符串的相关操作。具有丰富的操作方法，数据类型为 <code>string</code> ，字符串结尾没有 <code>\\0</code>  字符</li>\n<li>C-string<br>\nC 语言中的字符串，用 char 数组实现，类型为 <code>const char *</code> , 字符串结尾以 <code>\\0</code>  结尾</li>\n</ul>\n</blockquote>\n<p>一般来说 string 向 char 数组转换会出现一些问题，所以为了能够实现转换，string 有一个方法 <code>c_str()</code>  实现 string 向 char 数组的转换。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s <span class=\"token operator\">=</span> <span class=\"token string\">\"xing ma qi\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> s2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"函数方法-4\"><a class=\"markdownIt-Anchor\" href=\"#函数方法-4\">#</a> 函数方法</h3>\n<ul>\n<li><strong>获取字符串长度</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.size()</code>  和 <code>s.length()</code></td>\n<td style=\"text-align:left\">返回 string 对象的字符个数，他们执行效果相同。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.max_size()</code></td>\n<td style=\"text-align:left\">返回 string 对象最多包含的字符数，超出会抛出 length_error 异常</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.capacity()</code></td>\n<td style=\"text-align:left\">重新分配内存之前，string 对象能包含的最大字符数</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>插入</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.push_back()</code></td>\n<td style=\"text-align:left\">在末尾插入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">例： <code>s.push_back('a')</code></td>\n<td style=\"text-align:left\">末尾插入一个字符 a</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.insert(pos,element)</code></td>\n<td style=\"text-align:left\">在 pos 位置插入 element</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">例： <code>s.insert(s.begin(),'1')</code></td>\n<td style=\"text-align:left\">在第一个位置插入 1 字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.append(str)</code></td>\n<td style=\"text-align:left\">在 s 字符串结尾添加 str 字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">例： <code>s.append(&quot;abc&quot;)</code></td>\n<td style=\"text-align:left\">在 s 字符串末尾添加字符串 “abc”</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>删除</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>erase(iterator p)</code></td>\n<td style=\"text-align:left\">删除字符串中 p 所指的字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(iterator first, iterator last)</code></td>\n<td style=\"text-align:left\">删除字符串中迭代器区间 <code>[first,last)</code>  上所有字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(pos, len)</code></td>\n<td style=\"text-align:left\">删除字符串中从索引位置 pos 开始的 len 个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>clear()</code></td>\n<td style=\"text-align:left\">删除字符串中所有字符</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>字符替换</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.replace(pos,n,str)</code></td>\n<td style=\"text-align:left\">把当前字符串从索引 pos 开始的 n 个字符替换为 str</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.replace(pos,n,n1,c)</code></td>\n<td style=\"text-align:left\">把当前字符串从索引 pos 开始的 n 个字符替换为 n1 个字符 c</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.replace(it1,it2,str)</code></td>\n<td style=\"text-align:left\">把当前字符串 <code>[it1,it2)</code>  区间替换为 str <strong>it1 ,it2 为迭代器哦</strong></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>大小写转换</strong></li>\n</ul>\n<p>法一：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>tolower(s[i])</code></td>\n<td style=\"text-align:left\">转换为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>toupper(s[i])</code></td>\n<td style=\"text-align:left\">转换为大写</td>\n</tr>\n</tbody>\n</table>\n<p>法二：</p>\n<p>通过 stl 的 transform 算法配合 tolower 和 toupper 实现。<br>\n有 4 个参数，前 2 个指定要转换的容器的起止范围，第 3 个参数是结果存放容器的起始位置，第 4 个参数是一元运算。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token double-colon punctuation\">::</span>tolower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 转换小写</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token double-colon punctuation\">::</span>toupper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 转换大写</span></pre></td></tr></table></figure><ul>\n<li><strong>分割</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.substr(pos,n)</code></td>\n<td style=\"text-align:left\">截取从 pos 索引开始的 n 个字符</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>查找</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.find (str, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置（默认为 0）开始，查找子串 str，返回找到的位置索引，-1 表示查找不到子串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find (c, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置（默认为 0）开始，查找字符 c，返回找到的位置索引，-1 表示查找不到字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.rfind (str, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置开始，反向查找子串 s，返回找到的位置索引，-1 表示查找不到子串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.rfind (c,pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置开始，反向查找字符 c，返回找到的位置索引，-1 表示查找不到字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find_first_of (str, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置（默认为 0）开始，查找子串 s 的字符，返回找到的位置索引，-1 表示查找不到字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find_first_not_of (str,pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置（默认为 0）开始，查找第一个不位于子串 s 的字符，返回找到的位置索引，-1 表示查找不到字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find_last_of(str, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置开始，查找最后一个位于子串 s 的字符，返回找到的位置索引，-1 表示查找不到字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find_last_not_of ( str, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置开始，查找最后一个不位于子串 s 的字符，返回找到的位置索引，-1 表示查找不到子串</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog bird chicken bird cat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 字符串查找 ----- 找到后返回首字母在字符串中的下标</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 1. 查找一个字符串</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chicken\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：9</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 2. 从下标为 6 开始找字符 'i'，返回找到的第一个 i 的下标</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token char\">'i'</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：11</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 3. 从字符串的末尾开始查找字符串，返回的还是首字母在字符串中的下标</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">rfind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chicken\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：9</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 4. 从字符串的末尾开始查找字符</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">rfind</span><span class=\"token punctuation\">(</span><span class=\"token char\">'i'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：18 因为是从末尾开始查找，所以返回第一次找到的字符</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 5. 在该字符串中查找第一个属于字符串 s 的字符</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find_first_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"13br98\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：4---b</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 6. 在该字符串中查找第一个不属于字符串 s 的字符 ------ 先匹配 dog，然后 bird 匹配不到，所以打印 4</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find_first_not_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello dog 2006\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果是：4</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find_first_not_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog bird 2006\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 结果是：9</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 7. 在该字符串最后中查找第一个属于字符串 s 的字符</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find_last_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"13r98\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：19</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 8. 在该字符串最后中查找第一个不属于字符串 s 的字符 ------ 先匹配 t--a---c，然后空格匹配不到，所以打印 21</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find_last_not_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"teac\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：21</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><strong>排序</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 按 ASCII 码排序</span></pre></td></tr></table></figure><h2 id=\"bitset\"><a class=\"markdownIt-Anchor\" href=\"#bitset\">#</a> bitset</h2>\n<p>bitset 在 bitset 头文件中，它类似数组，并且每一个元素只能是０或１，每个元素只用１bit 空间</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bitset></span></span></pre></td></tr></table></figure><h3 id=\"初始化定义\"><a class=\"markdownIt-Anchor\" href=\"#初始化定义\">#</a> 初始化定义</h3>\n<p>初始化方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>bitset &lt; n &gt;a</code></td>\n<td style=\"text-align:left\">a 有 n 位，每位都为 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bitset &lt; n &gt;a(b)</code></td>\n<td style=\"text-align:left\">a 是 unsigned long 型 u 的一个副本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bitset &lt; n &gt;a(s)</code></td>\n<td style=\"text-align:left\">a 是 string 对象 s 中含有的位串的副本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bitset &lt; n &gt;a(s,pos,n)</code></td>\n<td style=\"text-align:left\">a 是 s 中从位置 pos 开始的 n 个位的副本</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意： <code>n</code>  必须为常量表达式</p>\n</blockquote>\n<p>演示代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token operator\">></span> bitset1<span class=\"token punctuation\">;</span>　　  <span class=\"token comment\">// 无参构造，长度为４，默认每一位为０</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">9</span><span class=\"token operator\">></span> <span class=\"token function\">bitset2</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　<span class=\"token comment\">// 长度为 9，二进制保存，前面用０补充</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"100101\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token operator\">></span> <span class=\"token function\">bitset3</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 长度为 10，前面用０补充</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">char</span> s2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"10101\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">13</span><span class=\"token operator\">></span> <span class=\"token function\">bitset4</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 长度为 13，前面用０补充</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> bitset1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//0000</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> bitset2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//000001100</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> bitset3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//0000100101</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> bitset4 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　<span class=\"token comment\">//0000000010101</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"特性\"><a class=\"markdownIt-Anchor\" href=\"#特性\">#</a> 特性</h3>\n<p><code>bitset</code>  可以进行<strong>位操作</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token operator\">></span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token operator\">></span> <span class=\"token function\">bar</span> <span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0011\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">^=</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 1010 (foo 对 bar 按位异或后赋值给 foo)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">&amp;=</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0010 (按位与后赋值给 foo)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">|=</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0011 (按位或后赋值给 foo)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 1100 (左移２位，低位补０，有自身赋值)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0110 (右移１位，高位补０，有自身赋值)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 1100 (按位取反)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>bar <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0110 (左移，不赋值)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>bar <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0001 (右移，不赋值)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">==</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//false (0110==0011 为 false)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">!=</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//true  (0110!=0011 为 true)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">&amp;</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0010 (按位与，不赋值)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">|</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0111 (按位或，不赋值)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">^</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0101 (按位异或，不赋值)</span></pre></td></tr></table></figure><p><strong>访问</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 可以通过 [] 访问元素 (类似数组)，注意最低位下标为０，如下：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token operator\">></span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"1011\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//0</span></pre></td></tr></table></figure><h3 id=\"方法函数-5\"><a class=\"markdownIt-Anchor\" href=\"#方法函数-5\">#</a> 方法函数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>b.any()</code></td>\n<td style=\"text-align:left\">b 中是否存在置为 1 的二进制位，有 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.none()</code></td>\n<td style=\"text-align:left\">b 中是否没有 1，没有 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.count()</code></td>\n<td style=\"text-align:left\">b 中为 1 的个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.size()</code></td>\n<td style=\"text-align:left\">b 中二进制位的个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.test(pos)</code></td>\n<td style=\"text-align:left\">测试 b 在 pos 位置是否为 1，是 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b[pos]</code></td>\n<td style=\"text-align:left\">返回 b 在 pos 处的二进制位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.set()</code></td>\n<td style=\"text-align:left\">把 b 中所有位都置为 1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.set(pos)</code></td>\n<td style=\"text-align:left\">把 b 中 pos 位置置为 1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.reset()</code></td>\n<td style=\"text-align:left\">把 b 中所有位都置为 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.reset(pos)</code></td>\n<td style=\"text-align:left\">把 b 中 pos 位置置为 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.flip()</code></td>\n<td style=\"text-align:left\">把 b 中所有二进制位取反</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.flip(pos)</code></td>\n<td style=\"text-align:left\">把 b 中 pos 位置取反</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.to_ulong()</code></td>\n<td style=\"text-align:left\">用 b 中同样的二进制位返回一个 unsigned long 值</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"array\"><a class=\"markdownIt-Anchor\" href=\"#array\">#</a> array</h2>\n<p>头文件</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;array></span></span></pre></td></tr></table></figure><p><code>array</code>  是 C++11 新增的容器，效率与普通数据相差无几，比 <code>vector</code>  效率要高，自身添加了一些成员函数。</p>\n<p>和其它容器不同，array 容器的大小是<strong>固定</strong>的，无法动态的扩展或收缩，<strong>只允许访问或者替换存储的元素。</strong></p>\n<p><strong>注意：</strong></p>\n<p><code>array</code>  的使用要在 <code>std</code>  命名空间里</p>\n<h3 id=\"声明与初始化\"><a class=\"markdownIt-Anchor\" href=\"#声明与初始化\">#</a> 声明与初始化</h3>\n<p><strong>基础数据类型</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明一个大小为 100 的 `int` 型数组，元素的值不确定</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 声明一个大小为 100 的 int 型数组，初始值均为 0 初始值与默认元素类型等效</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 声明一个大小为 100 的 int 型数组，初始化部分值，其余全部为 0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 或者可以用等号</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>高级数据类型</strong></p>\n<p>不同于数组的是对元素类型不做要求，可以套结构体</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"ha\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"haha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token operator\">&lt;</span>node<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"存取元素\"><a class=\"markdownIt-Anchor\" href=\"#存取元素\">#</a> 存取元素</h3>\n<ul>\n<li>\n<p>修改元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>访问元素</p>\n<p>下标访问</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \\n\"</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>利用 <code>auto</code>  访问</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>迭代器访问</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>at()</code>  函数访问</p>\n<p>下标为 <code>1</code>  的元素加上下标为 <code>2</code>  的元素，答案为 <code>5</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>get</code>  方法访问</p>\n<p>将 <code>a</code>  数组下标为 <code>1</code>  位置处的值改为 <code>x</code></p>\n<p>注意：获取的下标只能写数字，不能填变量</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"成员函数\"><a class=\"markdownIt-Anchor\" href=\"#成员函数\">#</a> 成员函数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">成员函数</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>begin()</code></td>\n<td style=\"text-align:left\">返回容器中第一个元素的访问迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>end()</code></td>\n<td style=\"text-align:left\">返回容器最后一个元素之后一个位置的访问迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>rbegin()</code></td>\n<td style=\"text-align:left\">返回最后一个元素的访问迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>rend()</code></td>\n<td style=\"text-align:left\">返回第一个元素之前一个位置的访问迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>size()</code></td>\n<td style=\"text-align:left\">返回容器中元素的数量，其值等于初始化 array 类的第二个模板参数 <code>N</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>max_size()</code></td>\n<td style=\"text-align:left\">返回容器可容纳元素的最大数量，其值始终等于初始化 array 类的第二个模板参数 N</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>empty()</code></td>\n<td style=\"text-align:left\">判断容器是否为空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>at(n)</code></td>\n<td style=\"text-align:left\">返回容器中 n 位置处元素的引用，函数会自动检查 n 是否在有效的范围内，如果不是则抛出 out_of_range 异常</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>front()</code></td>\n<td style=\"text-align:left\">返回容器中第一个元素的直接引用，函数不适用于空的 array 容器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>back()</code></td>\n<td style=\"text-align:left\">返回容器中最后一个元素的直接引用，函数不适用于空的 array 容器。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>data()</code></td>\n<td style=\"text-align:left\">返回一个指向容器首个元素的指针。利用该指针，可实现复制容器中所有元素等类似功能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>fill(x)</code></td>\n<td style=\"text-align:left\">将  <code>x</code>  这个值赋值给容器中的每个元素，相当于初始化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>array1.swap(array2)</code></td>\n<td style=\"text-align:left\">交换 array1 和 array2 容器中的所有元素，但前提是它们具有相同的长度和类型</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"部分用法示例\"><a class=\"markdownIt-Anchor\" href=\"#部分用法示例\">#</a> 部分用法示例</h3>\n<p><code>data()</code></p>\n<p>指向底层元素存储的指针。对于非空容器，返回的指针与首元素地址比较相等。</p>\n<p><code>at()</code></p>\n<p>下标为 <code>1</code>  的元素加上下标为 <code>2</code>  的元素，答案为 <code>5</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>fill()</code></p>\n<p>array 的 <code>fill()</code>  函数，将 <code>a</code>  数组全部元素值变为 <code>x</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>另外还有其它的 <code>fill()</code>  函数：将 <code>a</code>  数组 [begin,end) 全部值变为 <code>x</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>get 方法获取元素值</strong></p>\n<p>将 <code>a</code>  数组下标为 <code>1</code>  位置处的值改为 <code>x</code></p>\n<p>注意：获取的下标只能写数字，不能填变量</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>排序</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"tuple\"><a class=\"markdownIt-Anchor\" href=\"#tuple\">#</a> tuple</h2>\n<p>tuple 模板是 pair 的泛化，可以封装不同类型任意数量的对象。</p>\n<p>可以把 tuple 理解为 pair 的扩展，tuple 可以声明二元组，也可以声明三元组。</p>\n<p>tuple 可以等价为<strong>结构体</strong>使用</p>\n<p><strong>头文件</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;tuple></span></span></pre></td></tr></table></figure><h3 id=\"声明初始化\"><a class=\"markdownIt-Anchor\" href=\"#声明初始化\">#</a> 声明初始化</h3>\n<p>声明一个空的 <code>tuple</code>  三元组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> t1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>赋值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t1 <span class=\"token operator\">=</span> <span class=\"token function\">make_tuple</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hahaha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建的同时初始化</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以使用 pair 对象构造 tuple 对象，但 tuple 对象必须是两个元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> t3 <span class=\"token punctuation\">&#123;</span>p<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 pair 对象赋给 tuple 对象</span></pre></td></tr></table></figure><h3 id=\"元素操作\"><a class=\"markdownIt-Anchor\" href=\"#元素操作\">#</a> 元素操作</h3>\n<p>获取 tuple 对象 <code>t</code>  的第一个元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>修改 tuple 对象 <code>t</code>  的第一个元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"函数操作\"><a class=\"markdownIt-Anchor\" href=\"#函数操作\">#</a> 函数操作</h3>\n<p>获取元素个数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> tuple_size<span class=\"token operator\">&lt;</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><p>获取对应元素的值</p>\n<p>通过 <code>get(obj)</code>  方法获取， <code>n</code>  必须为数字不能是变量</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><p>通过 <code>tie</code>  解包 获取元素值</p>\n<p><code>tie</code>  可以让 tuple 变量中的三个值依次赋到 tie 中的三个变量中</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> one<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string two<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hahaha\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> one <span class=\"token operator\">&lt;&lt;</span> two <span class=\"token operator\">&lt;&lt;</span> three <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1hahaha3</span></pre></td></tr></table></figure><h1 id=\"stl函数\"><a class=\"markdownIt-Anchor\" href=\"#stl函数\">#</a> STL 函数</h1>\n<h2 id=\"accumulate\"><a class=\"markdownIt-Anchor\" href=\"#accumulate\">#</a> accumulate</h2>\n<ul>\n<li>\n<p><code> accumulate(beg, end, init)</code></p>\n</li>\n<li>\n<p>** 复杂度：**O (N)</p>\n</li>\n<li>\n<p>作用：对一个序列的元素求和</p>\n</li>\n<li>\n<p><code>init</code>  为对序列元素求和的<strong>初始值</strong></p>\n</li>\n<li>\n<p>返回值类型：与 <code>init</code>  一致</p>\n</li>\n<li>\n<p><strong>基础累加求和：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 对 [0,2] 区间求和，初始值为 0，结果为 0+1+3+5=9</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> res1 <span class=\"token operator\">=</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 对 [0,3] 区间求和，初始值为 5，结果为 5+1+3+5+9=23</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> res2 <span class=\"token operator\">=</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>** 自定义二元对象求和：** 使用 lambda 表达式</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ll num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>st<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">10000000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 返回值类型与 init 一致，同时注意参数类型（a）也要一样</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 初始值为 1，累加 1+10000000001+10000000002+10000000003=30000000007</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ll res <span class=\"token operator\">=</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>st <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> st <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1ll</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>ll a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"atoi\"><a class=\"markdownIt-Anchor\" href=\"#atoi\">#</a> atoi</h2>\n<ul>\n<li>\n<p><code>atoi(const char *)</code></p>\n</li>\n<li>\n<p>将字符串转换为 <code>int</code>  类型</p>\n</li>\n<li>\n<p>注意参数为 <code>char</code>  型数组，如果需要将 string 类型转换为 int 类型，可以使用 <code>stoi</code>  函数（参考下文），或者将 <code>string</code>  类型转换为 <code>const char *</code>  类型。</p>\n</li>\n<li>\n<p>关于输出数字的范围：<br>\n <code>atoi</code> <strong> 不做</strong>范围检查，如果超出上界，输出上界，超出下界，输出下界。<br>\n <code>stoi</code> <strong> 会做</strong>范围检查，默认必须在 <code>int</code>  范围内，如果超出范围，会出现 RE（Runtime Error）错误。</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s <span class=\"token operator\">=</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1234</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"stoi\"><a class=\"markdownIt-Anchor\" href=\"#stoi\">#</a> stoi</h2>\n<ul>\n<li>\n<p><code>stoi(const string*)</code></p>\n</li>\n<li>\n<p>将对应 string 类型字符串转换为数字</p>\n</li>\n<li>\n<p>注意参数为 <code>string</code>  字符串类型。</p>\n<p>关于输出数字的范围：<br>\n <code>stoi</code> <strong> 会做</strong>范围检查，默认必须在 <code>int</code>  范围内，如果超出范围，会出现 RE（Runtime Error）错误。<br>\n <code>atoi</code> <strong> 不做</strong>范围检查，如果超出上界，输出上界，超出下界，输出下界。</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s <span class=\"token operator\">=</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1234</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"iota\"><a class=\"markdownIt-Anchor\" href=\"#iota\">#</a> iota</h2>\n<ul>\n<li>\n<p><code>iota(beg, end)</code></p>\n</li>\n<li>\n<p>让序列递增赋值</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">iota</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 0 1 2 3 4 5 6 7 8 9</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"to_string\"><a class=\"markdownIt-Anchor\" href=\"#to_string\">#</a> to_string</h2>\n<ul>\n<li>\n<p>将数字转化为字符串，支持小数（double）</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"fill\"><a class=\"markdownIt-Anchor\" href=\"#fill\">#</a> fill</h2>\n<ul>\n<li>\n<p><code>fill(beg,end,num)</code></p>\n</li>\n<li>\n<p>对一个序列进行初始化赋值</p>\n</li>\n<li>\n<p><strong>复杂度：</strong> O(N)</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对 a 数组的所有元素赋 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//1 1 1 1 1</span></pre></td></tr></table></figure></li>\n<li>\n<p>注意区分 memset：</p>\n<p><code>memset()</code>  是按<strong>字节</strong>进行赋值，对于初始化赋 <code>0</code>  或 <code>-1</code>  有比较好的效果.</p>\n<p>如果赋某个特定的数会<strong>出错</strong>，赋值特定的数建议使用 <code>fill()</code></p>\n</li>\n</ul>\n<h2 id=\"reverse\"><a class=\"markdownIt-Anchor\" href=\"#reverse\">#</a> reverse</h2>\n<ul>\n<li>\n<p><code>reverse(beg,end)</code></p>\n</li>\n<li>\n<p>对序列进行翻转</p>\n</li>\n<li>\n<p><strong>复杂度：</strong> O(N)</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcde\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对 s 进行翻转</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//edcba</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 对 a 数组进行翻转</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4321</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"sort\"><a class=\"markdownIt-Anchor\" href=\"#sort\">#</a> sort</h2>\n<ul>\n<li>\n<p><code>sort(beg, end)</code></p>\n</li>\n<li>\n<p><code>sort(beg, end, cmp)</code></p>\n<p>再定义一个比较函数，通常对条件筛选进行排序，一般与结构体连用。</p>\n</li>\n<li>\n<p>对一个序列进行排序</p>\n</li>\n<li>\n<p><strong>复杂度：</strong> O(NlogN)</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对 a 数组的 [1,n] 位置进行从小到大排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 对 a 数组的 [0,n-1] 位置从大到小排序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">greater</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 对 a 数组的 [0,n-1] 位置从小到大排序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">less</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 自定义排序，定义比较函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>node a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 按结构体里面的 x 值降序排列</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> node <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 只能接受 以函数为形式的自定义排序规则，无法接受以结构体为形式的自定义排序规则</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"stable_sort\"><a class=\"markdownIt-Anchor\" href=\"#stable_sort\">#</a> stable_sort</h2>\n<h2 id=\"is_sorted\"><a class=\"markdownIt-Anchor\" href=\"#is_sorted\">#</a> is_sorted</h2>\n<h2 id=\"unique\"><a class=\"markdownIt-Anchor\" href=\"#unique\">#</a> unique</h2>\n<h2 id=\"transform\"><a class=\"markdownIt-Anchor\" href=\"#transform\">#</a> transform</h2>\n<h2 id=\"lower_bound-upper_bound\"><a class=\"markdownIt-Anchor\" href=\"#lower_bound-upper_bound\">#</a> lower_bound + upper_bound</h2>\n<ul>\n<li>\n<p>二分查找</p>\n</li>\n<li>\n<p><strong>复杂度：</strong> O(logN)</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 a 数组中查找第一个大于等于 x 的元素，返回该元素的地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 在 a 数组中查找第一个大于 x 的元素，返回该元素的地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 如果未找到，返回尾地址的下一个位置的地址</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"max_elementmin_element\"><a class=\"markdownIt-Anchor\" href=\"#max_elementmin_element\">#</a> max_element+min_element</h2>\n<h2 id=\"maxmin\"><a class=\"markdownIt-Anchor\" href=\"#maxmin\">#</a> max+min</h2>\n<h2 id=\"minmax\"><a class=\"markdownIt-Anchor\" href=\"#minmax\">#</a> minmax</h2>\n<h2 id=\"minmax_element\"><a class=\"markdownIt-Anchor\" href=\"#minmax_element\">#</a> minmax_element</h2>\n<h2 id=\"nth_element\"><a class=\"markdownIt-Anchor\" href=\"#nth_element\">#</a> nth_element</h2>\n<h2 id=\"next_permutation\"><a class=\"markdownIt-Anchor\" href=\"#next_permutation\">#</a> next_permutation</h2>\n<h2 id=\"partial_sort\"><a class=\"markdownIt-Anchor\" href=\"#partial_sort\">#</a> partial_sort</h2>\n<h2 id=\"random_shuffle\"><a class=\"markdownIt-Anchor\" href=\"#random_shuffle\">#</a> random_shuffle</h2>\n<h2 id=\"__gcd\"><a class=\"markdownIt-Anchor\" href=\"#__gcd\">#</a> __gcd</h2>\n<h2 id=\"__lg\"><a class=\"markdownIt-Anchor\" href=\"#__lg\">#</a> __lg</h2>\n<h2 id=\"_builtin-内置位运算函数\"><a class=\"markdownIt-Anchor\" href=\"#_builtin-内置位运算函数\">#</a> _<em>builtin</em> 内置位运算函数</h2>\n<h3 id=\"__builtin_ffs\"><a class=\"markdownIt-Anchor\" href=\"#__builtin_ffs\">#</a> __builtin_ffs</h3>\n<h3 id=\"__builtin_popcount\"><a class=\"markdownIt-Anchor\" href=\"#__builtin_popcount\">#</a> __builtin_popcount</h3>\n<h3 id=\"__builtin_ctz\"><a class=\"markdownIt-Anchor\" href=\"#__builtin_ctz\">#</a> __builtin_ctz</h3>\n<h3 id=\"__builtin_clz\"><a class=\"markdownIt-Anchor\" href=\"#__builtin_clz\">#</a> __builtin_clz</h3>\n<h3 id=\"__builtin_parity\"><a class=\"markdownIt-Anchor\" href=\"#__builtin_parity\">#</a> __builtin_parity</h3>\n<p>一．</p>\n<p>二 vector 扩容原理<br>\n 1 新增元素：Vector 通过一个连续的数组存放元素，如果集合已满，在新增数据的时候，就会分配一块更大的内存，将原来的数据复制过来，释放之前的内存，在插入新增的元素。注意不是在原来空间后直接增加空间<br>\n 2 对 vector 的任何操作，一旦引起空间重新配置，指向原 vector 的所有迭代器就都失效了。<br>\n3 不同的编译器实现的扩容方式不一样，VS2015 中以 1.5 倍扩容，GCC 以 2 倍扩容。</p>\n<p>三 vector 扩容为什么以 2 倍增长<br>\n 1 时间和空间的权衡，简单来说， 空间分配的多，平摊时间复杂度低，但浪费空间也多。<br>\n2 均摊添加每个元素的开销最小。</p>\n<p>四 vector 扩容为什么以 1.5 倍增长<br>\n理想分配方案是是在第 N 次分配的时候能重用之前 N-1 次释放的内存，如果按照 1.5 分配，1，1.5，3，4.5…… 当你需要分配 4.5 时，前面已分配 5.5，你可以直接利用，把旧数据 move 过去。但选择两倍的增长比如像这样：1，2，4，8，16，32，… 每次需要申请的空间都大于用到前面释放的内存 (4&gt;2+1)，无法重用。</p>\n<p>五 vector 常用接口：<br>\n・清空 vector 可以使用成员函数 c.clear ()<br>\n・判断 vector 是否为空，可以使用成员函数 empty ()，如果为空返回 true，否则返回 false<br>\n・vector 输出最后一个元素的引用可以用 back () 成员函数，如果容器为空，则行为未定义<br>\n・vector 输出第一个元素的引用可以用 front () 成员函数，如果容器为空，则行为未定义<br>\n・vector 支持用下标访问元素，类似数组一样 c [n] 其中 n 是一个无符号整数，如果 n 大于容器的长度，那么行为未定义<br>\n・vector 为了防止越界访问，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1jLWtxNmEwOGhxcGc4Z2J3M2E0bWZuc2QuYXQ=\">其中有成员函数 c.at</span> (n)，返回下标为 n 的元素的引用。如果下标越界，那么抛出 out_of_range 的异常<br>\n・pop_back () 成员函数用来删除 vector 中的最后一个元素，如果容器为空会出现未定义行为。<br>\n・c.erase (it) 成员函数，删除迭代器 it 所指向的元素，返回一个指向被删除元素之后的迭代器，如果 it 指向最后一个元素，那么返回以为尾后迭代器（通常是 end ()）。若 it 就是 end ()，那么行为未定义。<br>\n・c.erase (beg,ed) 删除 [beg,ed) 范围的元素，同时返回最后一个元素的后面的迭代器，如果 ed 就是尾后迭代器，那么还返回一个尾后迭代器。<br>\n・vector 中 begin 和 end 函数返回的是什么？<br>\nbegin 返回的是第一个元素的迭代器，end 返回的是最后一个元素后面位置的迭代器。前闭后开区间【）<br>\n・vector 中的 reserve 和 resize 的区别<br>\n reserve 是直接扩充到已经确定的大小，可以减少多次开辟、释放空间的问题（优化 push_back），就可以 提高效率，其次还可以减少多次要拷贝数据的问题。reserve 只是保证 vector 中的空间大小（capacity）最少 达到参数所指定的大小 n。reserve () 只有一个参数。<br>\nresize () 可以改变有效空间的大小，也有改变默认值的功能。capacity 的大小也会随着改变。resize () 可以有 多个参数。<br>\n・vector 中的 size 和 capacity 的区别<br>\n size 表示当前 vector 中有多少个元素（finish - start）;<br>\ncapacity 函数则表示它已经分配的内存中可以容纳多少元素（end_of_storage - start）;<br>\n・vector 迭代器失效的情况<br>\n当插入一个元素到 vector 中，由于引起了内存重新分配，所以指向原内存的迭代器全部失效。 当删除容器中一个元素后，该迭代器所指向的元素已经被删除，那么也造成迭代器失效。erase 方法会返回下 一个有效的迭代器，所以当我们要删除某个元素时，需要 it=vec.erase (it)。<br>\n・正确释放 vector 的内存 (clear (), swap (), shrink_to_fit ())<br>\n vec.clear ()：清空内容，但是不释放内存。<br>\nvector ().swap (vec)：清空内容，且释放内存，想得到一个全新的 vector。 vec.shrink_to_fit ()：请求容器降低其 capacity 和 size 匹配。 vec.clear ();vec.shrink_to_fit ();：清空内容，且释放内存。<br>\n・vector 中 erase 方法与 algorithn 中的 remove 方法区别<br>\n vector 中 erase 方法真正删除了元素，迭代器不能访问了。<br>\nremove 只是简单地将元素移到了容器的最后面，迭代器还是可以访问到。因为 algorithm 通过迭代器进行操作，不知道容器的内部结构，所以无法进行真正的删除。</p>\n<p>六 List 原理</p>\n<p>list 是由双向链表实现的，因此内存空间是不连续的。<br>\nlist 的随机访问效率不好，需要遍历元素，时间复杂度为 o (n)。<br>\n3. 底层是双向链表，所以每个元素有两个指针的额外空间开销。<br>\n4. 在任何位置都能高效地插入和删除元素。只要改变元素的指针值，不需要拷贝元素。<br>\n七 vector、list、queue 选择原则：<br>\n1 需要对数据高效地随机访问 (存取)，而不在乎插入和删除的效率，采用 vector<br>\n2 需要大量插入、删除数据，而不关心随机访问数据，采用 list<br>\n3 需要随机访问数据，而且关心前后增删数据的能力，采用 deque<br>\n4 对数据中间的增删操作比较多：采用 list，建议在排序的基础上，批量进行增删可以对运行效率提供最大的保证</p>\n<p>八 map 的底层实现<br>\n容器的数据结构是采用红黑树进行管理，插入的元素健位不允许重复，所使用的节点元素的比较函数，只对元素的健值进行比较，元素的各项数据可通过健值检索出来。map 容器是一种关联容器。</p>\n<p>九 map 和 unordered_map 的实现机理：<br>\nmap: 是基于红黑树来实现的（红黑树是非常严格的平衡二叉搜索树），红黑树具有自动排序功能，红黑树的每一个节点都代表着 map 中的一个元素，因此对于 map 的查找，删除和插入操作都是对红黑树的操作。<br>\nunordered_map: 是基于哈希表来实现的，查找的时间复杂度是 O (1), 在海量数据处理中有着广泛的应用。</p>\n<p>十 map 和 unordered_map 的优缺点<br>\n map 的优点：（1）map 是有序的（2）基于红黑树实现，查找的时间复杂度是 O (n)<br>\n map 的缺点：空间占用率比较高，因为内部实现了红黑树，虽然提高了运行效率，但是每个节点都要保存父亲节点和孩子节点和红黑树的性质，使得每一个节点都占用大量的空间。<br>\n适用的情况：对于要有序的结构，适用 map<br>\nunordered_map 的优点：因为内部是哈希表来实现的，所以查找效率会非常高<br>\n unordered_map 的缺点：哈希表的建立比较费时<br>\n适用的情况：对于查找问题，适用 unordered_map 会更好一点。</p>\n<p>十一 Map 插入元素方法<br>\n map&lt;int, string&gt; mapStudent;<br>\n1 mapStudent.insert(pair&lt;int, string&gt;(1, “student_one”));<br>\n2 mapStudent.insert(map&lt;int, string&gt;::value_type (1, “student_one”));<br>\n3 mapStudent[1] = “student_one”;<br>\n 以上三种用法，虽然都可以实现数据的插入，但是它们是有区别的，当然了第一种和第二种在效果上是完成一样的，用 insert 函数插入数据，在数据的插入上涉及到集合的唯一性这个概念，即当 map 中有这个关键字时，insert 操作是插入数据不了的，但是用数组方式就不同了，它可以覆盖以前该关键字对应的值</p>\n<p>十二 为何 map 和 set 的插入删除效率比其他序列容器高<br>\n因为不需要内存拷贝和内存移动</p>\n<p>十三 当数据元素增多时（从 10000 到 20000），map 的 set 的查找速度会怎样 变化？<br>\nRB-TREE 用二分查找法，时间复杂度为 logn，所以从 10000 增到 20000 时，查找次数从 log10000=14 次到 log20000=15 次，多了 1 次而已。</p>\n<p>十四 map 、set、multiset、multimap 的特点<br>\n set 和 multiset 会根据特定的排序准则自动将元素排序，set 中元素不允许重复，multiset 可以重复。 map 和 multimap 将 key 和 value 组成的 pair 作为元素，根据 key 的排序准则自动将元素排序（因为红黑树也是 二叉搜索树，所以 map 默认是按 key 排序的），map 中元素的 key 不允许重复，multimap 可以重复。 map 和 set 的增删改查速度为都是 logn，是比较高效的。</p>\n<p>十五 为何 map 和 set 每次 insert 之后， 以前保存的 iterator 不会失效？<br>\n存储的是结点，不需要内存拷贝和内存移动。 插入操作只是结点指针换来换去，结点内存没有改变。而 iterator 就像指向结点的指针，内存没变，指向内 存的指针也不会变。 6</p>\n<p>十六 为何 map 和 set 不能像 vector 一样有个 reserve 函数来预分配数据？<br>\n 在 map 和 set 内部存储的已经不是元素本身了，而是包含元素的结点。也就是说 map 内部使用的 Alloc 并不是 map 声明的时候从参数中传入的 Alloc。</p>\n<p>十七 set 底层实现<br>\n底层是红黑树，set 会根据待定的排序准则，自动将元素排序。不允许元素重复。</p>\n<p>十八 set, multiset (map,multimap)<br>\n set 和 multiset 会根据特定的排序准则自动将元素排序，set 中元素不允许重复，multiset 可以重复。因为是排序的，所以 set 中的元素不能被修改，只能删除后再添加。</p>\n<p>十九 set 的底层实现实现为什么不用哈希表而使用红黑树？<br>\nset 中元素是经过排序的，红黑树也是有序的，哈希是无序的 如果只是单纯的查找元素的话，那么肯定要选哈希表了，因为哈希表在的最好查找时间复杂度为 O (1)，并且 如果用到 set 中那么查找时间复杂度的一直是 O（1），因为 set 中是不允许有元素重复的。而红黑树的查找时 间复杂度为 O (lgn)</p>\n<p>二十 hash 表<br>\n hash 表的实现，包括 STL 中的哈希桶长度常数。<br>\nhash 表的实现主要涉及两个问题：散列函数和碰撞处理。<br>\n1）hash function （散列函数）。最常见的散列函数：f (x) = x % TableSize .<br>\n2）碰撞问题（不同元素的散列值相同）。解决碰撞问题的方法有许多种，包括线性探测、二次探测、开链等做法。SGL 版本使用开链法，使用一个链表保持相同散列值的元素。</p>\n<p>二十一 你怎样理解迭代器？<br>\nIterator (迭代器) 用于提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示，相当于智能指针。</p>\n<p>二十二 迭代器失效问题<br>\n vector 迭代器<br>\n当插入一个元素后，插入点之前的迭代器如果未扩容则不受影响，插入点之后的迭代器失效；<br>\n当插入一个元素后，capacity 如果有变化，则容器需要重新分配内存，所有迭代器都会失效；<br>\n当进行删除操作后，指向删除点及之后元素的迭代器全部失效。<br>\ndeque 迭代器<br>\n在容器 begin/end 插入操作所有迭代器不受影响；<br>\n在容器非 begin/end 的位置插入和删除操作都会使指向该容器元素的所有迭代器失效。<br>\n在容器 begin/end 删除元素会使指向被删除元素的迭代器失效；<br>\nList/forward_list 迭代器<br>\n list insert 操作不会使 list 迭代器失效；<br>\nlist erase 操作会使当前指向被删除元素的迭代器失效，其它迭代器正常。<br>\nset 迭代器<br>\n set 的 insert 操作不会使 set 迭代器失效；<br>\nset erase 操作会使当前指向被删除元素的迭代器失效，其它迭代器正常。<br>\nmap 迭代器<br>\n map 的 insert 操作不会使 map 迭代器失效；<br>\nmap erase 删除操作会使当前指向被删除元素的迭代器失效</p>\n<p>二十三 vector 为何每次 insert 之后，以前保存的 iterator 不会失效？<br>\n 答:iterator 这里就相当于指向节点的指针，内存没有变，指向内存的指针怎么会失效呢 (当然被删除的那个元素本身已经失效了)。相对于 vector 来说，每一次删除和插入，指针都有可能失效，调用 push_back 在尾部插入也是如此。因为为了保证内部数据的连续存放，iterator 指向的那块内存在删除和插入过程中可能已经被其他内存覆盖或者内存已经被释放了。即使时 push_back 的时候，容器内部空间可能不够，需要一块新的更大的内存，只有把以前的内存释放，申请新的更大的内存，复制已有的数据元素到新的内存，最后把需要插入的元素放到最后，那么以前的内存指针自然就不可用了。特别时在和 find 等算法在一起使用的时候，牢记这个原则：不要使用过期的 iterator。</p>\n<p>二十四 vector、list、map、deque 用 erase（it）后，迭代器的变化。<br>\nvector 和 deque 是序列式容器，其内存分别是连续空间和分段连续空间，删除迭代器 it 后，其后面的迭代器都失效了，此时 it 及其后面的迭代器会自动加 1，使 it 指向被删除元素的下一个元素。<br>\nlist 删除迭代器 it 时，其后面的迭代器都不会失效，将前面和后面连接起来即可。<br>\nmap 也是只能使当前删除的迭代器失效，其后面的迭代器依然有效。</p>\n<p>二十五 不允许有遍历行为的容器有哪些（不提供迭代器）？<br>\n1）queue，除了头部外，没有其他方法存取 deque 的其他元素。<br>\n2）stack（底层以 deque 实现），除了最顶端外，没有任何其他方法可以存取 stack 的其他元素。<br>\n3）heap，所有元素都必须遵循特别的排序规则，不提供遍历功能。</p>\n<p>二十六 stl 中 alloc<br>\nSGI 版本 STL 的默认配置器 std::alloc。参见：《STL 源码剖析》<br>\n1）考虑到小型区块所可能造成的内存碎片问题，SGI 设计了双层配置器。第一级配置器直接使用 malloc () 和 free ()；第二级则视情况采取不同的策略：当配置区块超过 128bytes 时，视为 “足够大”，便调用第一级配置器；当配置区块小于 128bytes 时，视之为 “过小”，为了降低额外负担，便采用 memory pool（内存池）整理方式，而不在求助于第一级配置器。<br>\n2）内存池的核心：内存池和 16 个自由链表（各自管理 8,16，…，128bytes 的小额区块）。在分配一个小区块时，首先在所属自由链表中寻找，如果找到，直接抽出分配；若所属自由链表为空，则请求内存池为所属自由链表分配空间；默认情况下，为该自由链表分配 20 个区块，若内存池剩余容量不足，则分配可分配的最大容量；若内存池连一个区块都无法分配，则调用 chunk_alloc 为内存池分配一大块区块；若内存不足，则尝试调用 malloc 分配，否则返回 bad_alloc 异常。</p>\n<p>二十七 STL 线程不安全的情况<br>\n在对同一个容器进行多线程的读写、写操作时；<br>\n在每次调用容器的成员函数期间都要锁定该容器；<br>\n在每个容器返回的迭代器（例如通过调用 begin 或 end）的生存期之内都要锁定该容器； 在每个在容器上调用的算法执行期间锁定该容器。</p>\n<p>二十八 priority_queue 的底层原理<br>\n priority_queue：优先队列，其底层是用堆来实现的。在优先队列中，队首元素一定是当前队列中优先级最 高的那一个。</p>\n",
            "tags": [
                "C++",
                "STL"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/03/05/C++%E9%9D%A2%E7%BB%8F/",
            "url": "https://adventure-yx.github.io/2023/03/05/C++%E9%9D%A2%E7%BB%8F/",
            "title": "C++面经",
            "date_published": "2023-03-05T14:19:16.000Z",
            "content_html": "<h1 id=\"编译内存相关\"><a class=\"markdownIt-Anchor\" href=\"#编译内存相关\">#</a> 编译内存相关</h1>\n<h2 id=\"c-程序编译过程\"><a class=\"markdownIt-Anchor\" href=\"#c-程序编译过程\">#</a> C++ 程序编译过程</h2>\n<p>编译过程分为四个过程：编译（编译预处理、编译、优化），汇编，链接。</p>\n<p><strong>编译预处理</strong>：处理以 # 开头的指令，产生 .i 文件；<br>\n主要的处理操作如下：</p>\n<ul>\n<li>对全部的 #define 进行宏展开。</li>\n<li>处理全部的条件编译指令，比方 #if、#ifdef、#elif、#else、#endif;</li>\n<li>处理 #include 指令，这个过程是递归的，也就是说被包括的文件可能还包括其它文件；</li>\n<li>删除全部的注释 // 和 /**/</li>\n<li>加入行号和文件标识</li>\n<li>保留全部的 #pragma 编译器指令</li>\n</ul>\n<p>ps: 经过预处理后的 .i 文件不包括任何宏定义，由于全部的宏已经被展开。而且包括的文件也已经被插入到 .i 文件里。</p>\n<p><strong>编译、优化</strong>：将源码 .cpp 文件翻译成 .s 汇编代码；</p>\n<ul>\n<li>词法分析：将源代码的字符序列分割成一系列的记号。</li>\n<li>语法分析：对记号进行语法分析，产生语法树。</li>\n<li>语义分析：判断表达式是否有意义。</li>\n<li>代码优化：</li>\n<li>目标代码生成：生成汇编代码。</li>\n<li>目标代码优化：</li>\n</ul>\n<p>编译会将源代码由文本形式转换成机器语言，编译过程就是把预处理完的文件进行一系列词法分析、语法分析、语义分析以及优化后生成相应的汇编代码文件。编译后的.s 是 ASCII 码文件。</p>\n<p><strong>汇编</strong>：将汇编代码 .s 翻译成机器指令的 .o 或.obj 目标文件；</p>\n<ul>\n<li>\n<p>汇编过程调用汇编器 AS 来完成，是用于将汇编代码转换成机器可以执行的指令，每一个汇编语句几乎都对应一条机器指令。</p>\n</li>\n<li>\n<p>汇编后的.o 文件是纯二进制文件。</p>\n</li>\n</ul>\n<p><strong>链接</strong>：产生 .out 或 .exe 可运行文件</p>\n<ul>\n<li>汇编程序生成的目标文件，即 .o 文件，并不会立即执行，因为可能会出现：.cpp 文件中的函数引用了另一个 .cpp 文件中定义的符号或者调用了某个库文件中的函数。那链接的目的就是将这些文件对应的目标文件连接成一个整体，从而生成可执行的程序 .exe 文件。</li>\n</ul>\n<p>详细来说，链接是将所有的.o 文件和库（动态库、静态库）链接在一起，得到可以运行的可执行文件（Windows 的.exe 文件或 Linux 的.out 文件）等。它的工作就是把一些指令对其他符号地址的引用加以修正。链接过程主要包括了地址和空间分配、符号决议和重定向。</p>\n<p>* 最基本的链接叫做静态链接，就是将每个模块的源代码文件编译、汇编成目标文件（Linux：.o 文件；Windows：.obj 文件），然后将目标文件和库一起链接形成最后的可执行文件（.exe 或.out 等）。库其实就是一组目标文件的包，就是一些最常用的代码变异成目标文件后打包存放。最常见的库就是运行时库，它是支持程序运行的基本函数的集合。<br>\n<img data-src=\"b70048db13024888936d51524f0fde9d.png\" alt=\"b70048db13024888936d51524f0fde9d.png\" style=\"zoom:33%;\" /></p>\n<p>链接分为两种：</p>\n<p><strong>静态链接</strong>：代码从其所在的静态链接库中拷贝到最终的可执行程序中，在该程序被执行时，这些代码会被装入到该进程的虚拟地址空间中。</p>\n<p>把目标程序运行时需要调用的函数代码直接链接到了生成的可执行文件中，程序在运行的时候不需要其他额外的库文件，且就算你去静态库把程序执行需要的库删掉也不会影响程序的运行，因为所需要的所有东西已经被链接到了链接阶段生成的可执行文件中。</p>\n<p>Windows 下以.lib 为后缀，Linux 下以.a 为后缀。</p>\n<p><strong>动态链接</strong>：代码被放到动态链接库或共享对象的某个目标文件中，链接程序只是在最终的可执行程序中记录了共享对象的名字等一些信息。在程序执行时，动态链接库的全部内容会被映射到运行时相应进行的虚拟地址的空间。</p>\n<p>动态 “动” 在了程序在执行阶段需要去寻找相应的函数代码，即在程序运行时才会将程序安装模块链接在一起</p>\n<p>具体来说，动态链接就是把调⽤的函数所在⽂件模块（DLL）和调⽤函数在⽂件中的位置等信息链接进目标程序，程序运⾏的时候再从 DLL 中寻找相应函数代码，因此需要相应 DLL ⽂件的⽀持 。（Windows）</p>\n<p>包含函数重定位信息的文件，在 Windows 下以.dll 为后缀，Linux 下以.so 为后缀。</p>\n<p><strong>二者的区别</strong>：</p>\n<ul>\n<li>静态链接是将各个模块的 obj 和库链接成一个完整的可执行程序；</li>\n<li>动态链接是程序在运行的时候寻找动态库的函数符号（重定位），即 **DLL（Dynamic Link Library）** 不必被包含在最终的 exe 文件中；</li>\n<li><strong>链接使用工具不同</strong>:\n<ul>\n<li>静态链接由称为 “链接器” 的工具完成；</li>\n<li>动态链接由操作系统在程序运行时完成链接；</li>\n</ul>\n</li>\n<li><strong>库包含限制</strong>：\n<ul>\n<li>静态链接库中不能再包含其他的动态链接库或者静态库；</li>\n<li>动态链接库中还可以再包含其他的动态或静态链接库。</li>\n</ul>\n</li>\n<li><strong>运行速度</strong>：\n<ul>\n<li>静态链接运行速度快（因为执行过程中不用重定位），可独立运行</li>\n<li>动态链接运行速度慢、不可独立运行</li>\n</ul>\n</li>\n</ul>\n<p><strong>二者的优缺点</strong>：</p>\n<ul>\n<li>\n<p>静态链接：</p>\n<ul>\n<li>缺点：浪费空间，每个可执行程序都会有目标文件的一个副本，这样如果目标文件进行了更新操作，就需要重新进行编译链接生成可执行程序（更新困难）；</li>\n<li>优点：执行的时候运行速度快，因为可执行程序具备了程序运行的所有内容。</li>\n</ul>\n</li>\n<li>\n<p>动态链接：</p>\n<ul>\n<li>优点：节省内存、更新方便；</li>\n<li>缺点：但是动态链接是在程序运行时，每次执行都需要链接，相比静态链接会有一定的性能损失。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"c-内存管理\"><a class=\"markdownIt-Anchor\" href=\"#c-内存管理\">#</a> C++ 内存管理</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb2dlbndhbmdiYW9xaWFuZy9hcnRpY2xlL2RldGFpbHMvNzk3ODgzNjg=\">https://blog.csdn.net/caogenwangbaoqiang/article/details/79788368</span></p>\n<p>C++ 的内存分布模型：</p>\n<p><img data-src=\"d11da6f90fba4a9f9cd935ee80d62a8c.png\" alt=\"img\"></p>\n<p>从高地址到低地址，一个程序由内核空间、栈区、堆区、BSS 段、数据段（data）、代码区组成。</p>\n<p>（Block Started by Symbol 通常是指用来存放程序中未初始化的全局变量和静态变量的一块内存区域。特点是：可读写的，在程序执行之前 BSS 段会自动清 0，所以，未初始的全局变量在程序执行之前已经成 0 了。）</p>\n<p><strong>常说的 C++ 内存分区：栈、堆、全局 / 静态存储区、常量存储区、代码区。</strong></p>\n<p>可执行程序在运行时会多出两个区域：</p>\n<ul>\n<li>栈：存放函数的局部变量、函数参数、返回地址等，由编译器自动分配和释放。栈从高地址向低地址增长。是一块连续的空间。栈一般分配几 M 大小的内存。</li>\n<li>堆：动态申请的内存空间，就是由 malloc 分配的内存块，由程序员控制它的分配和释放，如果程序执行结束还没有释放，操作系统会自动回收。堆从低地址向高地址增长。一般可以分配几个 G 大小的内存。</li>\n<li>在堆栈之间有一个 共享区（文件映射区）。</li>\n<li>全局区 / 静态存储区（.BSS 段和 .data 段）：存放全局变量和静态变量，程序运行结束操作系统自动释放，在 C 语言中，程序中未初始化的全局变量和静态变量存放在.BSS 段中，已初始化的全局变量和静态变量存放在 .data 段中，C++ 中不再区分了。</li>\n<li>常量存储区（.data 段）：存放的是常量，不允许修改，程序运行结束自动释放。</li>\n<li>代码区（.text 段）：存放程序执行代码的一块内存区域。只读，不允许修改，但可以执行。编译后的二进制文件存放在这里。代码段的头部还会包含一些只读的常量，如字符串常量字面值（注意：const 变量虽然属于常量，但是本质还是变量，不存储于代码段）</li>\n</ul>\n<p>在 linux 下 size 命令可以查看一个可执行二进制文件基本情况：<br>\n<img data-src=\"8292ae6c07774a2293dda6e7ff301107.png\" alt=\"img\"></p>\n<h2 id=\"栈和堆的区别\"><a class=\"markdownIt-Anchor\" href=\"#栈和堆的区别\">#</a> 栈和堆的区别</h2>\n<ul>\n<li>\n<p>申请方式：栈是系统自动分配，堆是程序员主动申请。</p>\n</li>\n<li>\n<p>申请后系统响应：分配栈空间，如果剩余空间大于申请空间则分配成功，否则分配失败栈溢出；申请堆空间，堆在内存中呈现的方式类似于链表（记录空闲地址空间的链表），在链表上寻找第一个大于申请空间的节点分配给程序，将该节点从链表中删除，大多数系统中该块空间的首地址存放的是本次分配空间的大小，便于释放，将该块空间上的剩余空间再次连接在空闲链表上。</p>\n</li>\n<li>\n<p>栈在内存中是连续的一块空间（向低地址扩展）最大容量是系统预定好的，堆在内存中的空间（向高地址扩展）是不连续的。</p>\n</li>\n<li>\n<p>申请效率：栈是有系统自动分配，申请效率高，但程序员无法控制；堆是由程序员主动申请，效率低，使用起来方便但是容易产生碎片。</p>\n</li>\n<li>\n<p>存放的内容：栈中存放的是局部变量，函数的参数；堆中存放的内容由程序员控制。</p>\n</li>\n</ul>\n<p>此题总结：</p>\n<ol>\n<li>申请方式的不同。 栈由系统自动分配，而堆是人为申请开辟；</li>\n<li>申请大小的不同。 栈获得的空间较小，而堆获得的空间较大；</li>\n<li>申请效率的不同。 栈由系统自动分配，速度较快，而堆一般速度比较慢；</li>\n<li>存储的内容不同。栈在函数调用时，第一个进栈的是主函数中后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，在大多数的 C 编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的。 当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。堆：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排。</li>\n</ol>\n<h2 id=\"变量的区别\"><a class=\"markdownIt-Anchor\" href=\"#变量的区别\">#</a> 变量的区别</h2>\n<p><strong>全局变量</strong>、<strong>局部变量</strong>、<strong>静态全局变量</strong>、<strong>静态局部变量</strong>的区别：</p>\n<ul>\n<li>全局变量就是定义在函数外的变量。</li>\n<li>局部变量就是函数内定义的变量。</li>\n<li>静态变量就是加了 static 的变量。 例如：static int value = 1</li>\n</ul>\n<p><strong>各自存储的位置</strong>：</p>\n<ul>\n<li>\n<p>全局变量，存储在常量区（静态存储区）。</p>\n</li>\n<li>\n<p>局部变量，存储在栈区。</p>\n</li>\n<li>\n<p>静态变量，存储在常量区（静态存储区）。</p>\n<p>因为静态变量都在静态存储区（常量区），所以下次调用函数的时候还是能取到原来的值。</p>\n</li>\n</ul>\n<p><strong>各自初始化的值</strong>：</p>\n<ul>\n<li>局部变量，存储在栈区。局部变量一般是不初始化的。</li>\n<li>全局变量和静态变量，都是初始化为 0 的，有一个初始值。</li>\n<li>如果是类变量，会调用默认构造函数初始化。</li>\n</ul>\n<p><strong>从作用域看</strong>：</p>\n<p>C++ 变量根据定义的位置的不同的生命周期，具有不同的作用域，作用域可分为 6 种：</p>\n<p><strong>全局作用域，局部作用域，语句作用域，类作用域，命名空间作用域和文件作用域。</strong></p>\n<ul>\n<li>\n<p>全局变量：具有全局作用域。全局变量只需在一个源文件中定义，就可以作用于所有的源文件。当然，其他不包含全局变量定义的源文件需要用 extern 关键字再次声明这个全局变量。会一直存在到程序结束。</p>\n</li>\n<li>\n<p>静态全局变量：全局作用域 + 文件作用域，所以无法在其他文件中使用。它与全局变量的区别在于如果程序包含多个文件的话，它作用于定义它的文件里，不能作用到其它文件里，即被 static 关键字修饰过的变量具有文件作用域。这样即使两个不同的源文件都定义了相同名字的静态全局变量，它们也是不同的变量。</p>\n</li>\n<li>\n<p>局部变量：具有局部作用域。比如函数的参数，函数内的局部变量等等；它是自动对象（auto），在程序运行期间不是一直存在，而是只在函数执行期间存在，函数的一次调用执行结束后，变量被销毁，其所占用的内存也被收回。<br>\n静态局部变量：具有局部作用域。它只被初始化一次， 直到程序结束。自从第一次被初始化直到程序运行结束都一直存在，它和全局变量的区别在于全局变量对所有的函数都是可见的，而静态局部变量只对定义自己的函数体始终可见。</p>\n</li>\n</ul>\n<p><strong>从分配内存空间看</strong>：</p>\n<ul>\n<li><strong>静态存储区</strong>：全局变量，静态局部变量，静态全局变量。</li>\n<li><strong>栈</strong>：局部变量。</li>\n</ul>\n<p><strong>各自的应用场景</strong>：</p>\n<ul>\n<li>局部变量就是我们经常用的，进入函数，逐个构造，最后统一销毁。</li>\n<li>全局变量主要是用来给不同的文件之间进行通信。</li>\n<li>静态变量：只在本文件中使用，局部静态变量在函数内起作用，可以作为一个计数器。</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     count <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>说说静态变量在代码执行的什么阶段进行初始化？</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> value  <span class=\"token comment\">// 静态变量初始化语句</span></pre></td></tr></table></figure><p>对于 C 语言： 静态变量和全局变量均在编译期进行初始化，即初始化发生在任何代码执行之前。<br>\n对于 C++： 静态变量和全局变量仅当首次被使用的时候才进行初始化。</p>\n<p>助记： 如果你使用过 C/C<ins> 你会发现，C 语言要求在程序的最开头声明全部的变量，而 C</ins> 则可以随时使用随时声明；这个规律是不是和答案类似呢？</p>\n<h2 id=\"全局变量定义在头文件中有什么问题\"><a class=\"markdownIt-Anchor\" href=\"#全局变量定义在头文件中有什么问题\">#</a> 全局变量定义在头文件中有什么问题？</h2>\n<p>如果在头文件中定义全局变量，当该头文件被多个文件 include 时，该头文件中的全局变量就会被定义多次，导致重复定义，因此不能再头文件中定义全局变量。</p>\n<h2 id=\"内存对齐\"><a class=\"markdownIt-Anchor\" href=\"#内存对齐\">#</a> 内存对齐</h2>\n<p>什么是内存对齐？内存对齐的原则？为什么要进行内存对齐，有什么优点？</p>\n<p><strong>内存对齐</strong>：编译器将程序中的每个 “数据单元” 安排在字的整数倍的地址指向的内存之中</p>\n<p><strong>内存对齐的原则</strong>：</p>\n<ul>\n<li>\n<p>结构体变量的首地址能够被其最宽基本类型成员大小与对齐基数中的较小者所整除；</p>\n</li>\n<li>\n<p>结构体每个成员相对于结构体首地址的偏移量 （offset）都是该成员大小与对齐基数中的较小者的整数倍，如有需要编译器会在成员之间加上填充字节 （internal padding）；</p>\n</li>\n<li>\n<p>结构体的总大小为结构体最宽基本类型成员大小与对齐基数中的较小者的整数倍，如有需要编译器会在最末一个成员之后加上填充字节（trailing padding）。</p>\n</li>\n</ul>\n<p><strong>进行内存对齐的原因</strong>：（主要是硬件设备方面的问题）</p>\n<ul>\n<li>某些硬件设备只能存取对齐数据，存取非对齐的数据可能会引发异常；</li>\n<li>某些硬件设备不能保证在存取非对齐数据的时候的操作是原子操作；</li>\n<li>相比于存取对齐的数据，存取非对齐的数据需要花费更多的时间；</li>\n<li>某些处理器虽然支持非对齐数据的访问，但会引发对齐陷阱（alignmenttrap）；</li>\n<li>某些硬件设备只支持简单数据指令非对齐存取，不支持复杂数据指令的非对齐存取。</li>\n</ul>\n<p><strong>内存对齐的优点</strong>：</p>\n<ul>\n<li>便于在不同的平台之间进行移植，因为有些硬件平台不能够支持任意地址的数据访问，只能在某些地址处取某些特定的数据，否则会抛出异常；</li>\n<li>提高内存的访问效率，因为 CPU 在读取内存时，是一块一块的读取。</li>\n</ul>\n<h2 id=\"什么是内存泄露\"><a class=\"markdownIt-Anchor\" href=\"#什么是内存泄露\">#</a> 什么是内存泄露</h2>\n<p><strong>内存泄漏</strong>：由于疏忽或错误导致的程序未能释放已经不再使用的内存。</p>\n<p>进一步解释：</p>\n<ul>\n<li>并非指内存从物理上消失，而是指程序在运行过程中，由于疏忽或错误而失去了对该内存的控制，从而造成了内存的浪费。</li>\n<li>常指堆内存泄漏，因为堆是动态分配的，而且是用户来控制的，如果使用不当，会产生内存泄漏。</li>\n<li>使用 malloc、calloc、realloc、new 等分配内存时，使用完后要调用相应的 free 或 delete 释放内存，否则这块内存就会造成内存泄漏。</li>\n<li>指针重新赋值</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p <span class=\"token operator\">=</span> np<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>开始时，指针 p 和 p1 分别指向一块内存空间，但指针 p 被重新赋值，导致 p 初始时指向的那块内存空间无法找到，从而发生了内存泄漏。</p>\n<h2 id=\"怎么防止内存泄漏内存泄漏检测工具的原理\"><a class=\"markdownIt-Anchor\" href=\"#怎么防止内存泄漏内存泄漏检测工具的原理\">#</a> 怎么防止内存泄漏？内存泄漏检测工具的原理？</h2>\n<p><strong>防止内存泄漏的方法</strong>：</p>\n<ul>\n<li>内部封装：将内存的分配和释放封装到类中，在构造的时候申请内存，析构的时候释放内存。（说明：但这样做并不是最佳的做法，在类的对象复制时，程序会出现同一块内存空间释放两次的情况）</li>\n<li>智能指针：智能指针是 C++ 中已经对内存泄漏封装好了一个工具，可以直接拿来使用，将在下一个问题中对智能指针进行详细的解释。</li>\n</ul>\n<p><strong>VS 下内存泄漏的检测方法（CRT）</strong>：</p>\n<p>在 debug 模式下以 F5 运行：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CRTDBG_MAP_ALLOC</span>  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span>  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;crtdbg.h></span>  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 在入口函数中包含 _CrtDumpMemoryLeaks ();  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 即可检测到内存泄露</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 以如下测试函数为例：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pChars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">_CrtDumpMemoryLeaks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"智能指针有哪几种智能指针的实现原理\"><a class=\"markdownIt-Anchor\" href=\"#智能指针有哪几种智能指针的实现原理\">#</a> 智能指针有哪几种？智能指针的实现原理？</h2>\n<p>智能指针是<strong>为了解决动态内存分配时忘记释放内存导致的内存泄漏以及多次释放同一块内存空间而提出的</strong>。C++11 中封装在了  <code>#include &lt; memory &gt;</code>  头文件中。</p>\n<p>C++11 引入了 3 个智能指针类型：</p>\n<ul>\n<li>\n<p>std::unique_ptr ：独占资源所有权的指针。</p>\n</li>\n<li>\n<p>std::shared_ptr ：共享资源所有权的指针。</p>\n</li>\n<li>\n<p>std::weak_ptr ：共享资源的观察者，需要和 std::shared_ptr 一起使用，不影响资源的生命周期。</p>\n<p>注：std::auto_ptr 已被废弃。</p>\n</li>\n</ul>\n<p><strong>共享指针（shared_ptr）</strong>：资源可以被多个指针共享，使用计数机制表明资源被几个指针共享。通过 use_count () 查看资源的所有者的个数，可以通过 unique_ptr、weak_ptr 来构造，调用 release () 释放资源的所有权，计数减一，当计数减为 0 时，会自动释放内存空间，从而避免了内存泄漏。</p>\n<p><strong>独占指针（unique_ptr）</strong>：独享所有权的智能指针，资源只能被一个指针占有，该指针不能拷贝构造和赋值。但可以进行移动构造和移动赋值构造（调用 move () 函数），即一个 unique_ptr 对象赋值给另一个 unique_ptr 对象，可以通过该方法进行赋值。</p>\n<p><strong>弱指针（weak_ptr）</strong>：指向 shared_ptr 指向的对象，能够解决由 shared_ptr 带来的循环引用问题。</p>\n<p><strong>智能指针的实现原理： 计数原理。</strong></p>\n<h2 id=\"智能指针应用举例\"><a class=\"markdownIt-Anchor\" href=\"#智能指针应用举例\">#</a> 智能指针应用举例</h2>\n<p><strong>unique_ptr</strong><br>\nunique_ptr 的使用比较简单，也是用得比较多的智能指针。当我们独占资源的所有权的时候，可以使用 unique_ptr 对资源进行管理 —— 离开 unique_ptr 对象的作用域时，会自动释放资源。这是很基本的 RAII 思想。（<strong>R</strong>esource <strong>A</strong>cquisition <strong>I</strong>s <strong>I</strong>nitialization）是由 c++ 之父 Bjarne Stroustrup 提出的，中文翻译为资源获取即初始化，他说：使用局部对象来管理资源的技术称为资源获取即初始化；这里的资源主要是指操作系统中有限的东西如内存、网络套接字等等，局部对象是指存储在栈的对象，它的生命周期是由操作系统来管理的，无需人工介入。</p>\n<ul>\n<li>\n<p>自动管理内存<br>\n使用裸指针时，要记得释放内存。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 要记得释放内存</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 unique_ptr 自动管理内存。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> uptr <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 离开 uptr 的作用域的时候自动释放内存</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>unique_ptr 是 move-only 的，也是实现将一个 unique_ptr 对象赋值给另一个 unique_ptr 对象的方法</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> uptr <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> uptr1 <span class=\"token operator\">=</span> uptr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 编译错误，std::unique_ptr&lt;T> 是 move-only 的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> uptr2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>uptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>uptr <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>unique_ptr 可以指向一个数组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> uptr <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        uptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> uptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//0 1 4 9 ...81</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>也可以用向量：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">p</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//n = 5, value = 6</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//6</span></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>shared_ptr</strong></p>\n<ul>\n<li>\n<p>shared_ptr 其实就是对资源做引用计数 —— 当引用计数 sptr.use_count () 为 0<br>\n 的时候，自动释放资源。其中， <code>assert(p);</code>  用于判断指针内容是否非空，空指针 nullptr 与什么未指向的野指针过不了 assert</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> sptr <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sptr<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 此时引用计数为 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> sptr1 <span class=\"token operator\">=</span> sptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sptr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> sptr1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sptr<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//sptr 和 sptr1 共享资源，引用计数为 2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sptr<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//sptr1 已经释放</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//use_count 为 0 时自动释放内存</span></pre></td></tr></table></figure></li>\n<li>\n<p>和 unique_ptr 一样，shared_ptr 也可以指向数组和自定义 deleter。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// C++20 才支持 std::make_shared&lt;int []></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// std::shared_ptr&lt;int[]> sptr = std::make_shared&lt;int[]>(100);</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token function\">sptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        sptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> sptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>附：<br>\n一个 shared_ptr 对象的内存开销要比裸指针和无自定义 deleter 的 unique_ptr 对象略大。<br>\n无自定义 deleter 的 unique_ptr 只需要将裸指针用 RAII 的手法封装好就行，无需保存其它信息，所以它的开销和裸指针是一样的。如果有自定义 deleter，还需要保存 deleter 的信息。</p>\n<p>shared_ptr 需要维护的信息有两部分：</p>\n<ul>\n<li>\n<p>指向共享资源的指针。</p>\n</li>\n<li>\n<p>引用计数等共享资源的控制信息 —— 实现上是维护一个指向控制信息的指针。</p>\n</li>\n</ul>\n<p>所以，shared_ptr 对象需要保存两个指针。shared_ptr 的 的 deleter 是保存在控制信息中，所以，是否有自定义 deleter 不影响 shared_ptr 对象的大小。</p>\n<p>当我们创建一个 shared_ptr 时，其实现一般如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">sptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>最好使用make_shared实现：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> p1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"4a8a5987e39d49b2ace73524e49bdf6b.png\" alt=\"img\"></p>\n<p>复制一个 shared_ptr ：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> sptr2 <span class=\"token operator\">=</span> sptr1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"2c2e397fb83245edab1853ea6c9b7028.png\" alt=\"img\"></p>\n<p>为什么控制信息和每个 shared_ptr 对象都需要保存指向共享资源的指针？可不可以去掉 shared_ptr 对象中指向共享资源的指针，以节省内存开销？</p>\n<p>答案是：不能。 因为 shared_ptr 对象中的指针指向的对象不一定和控制块中的指针指向的对象一样。</p>\n<p>来看一个例子。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> juice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Vegetable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> fiber<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Tomato</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vegetable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> sauce<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// 由于继承的存在，shared_ptr 可能指向基类对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Tomato<span class=\"token operator\">></span> tomato <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Tomato<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Fruit<span class=\"token operator\">></span> fruit <span class=\"token operator\">=</span> tomato<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Vegetable<span class=\"token operator\">></span> vegetable <span class=\"token operator\">=</span> tomato<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"4a8c3bbf5a07429b933d25c1d64fa359.png\" alt=\"img\"></p>\n<p>此外，在使用 shared_ptr 时，会涉及两次内存分配：一次分配共享资源对象；一次分配控制块。C++ 标准库提供了 make_shared 函数来创建一个 shared_ptr 对象，只需要一次内存分配，所以推荐用 make_shared 函数来创建对象。</p>\n<p><strong>weak_ptr</strong></p>\n<p>weak_ptr 要与 shared_ptr 一起使用。 一个 weak_ptr 对象看做是 shared_ptr 对象管理的资源的观察者，它不影响共享资源的生命周期：</p>\n<ul>\n<li>如果需要使用 weak_ptr 正在观察的资源，可以将 weak_ptr 提升为 shared_ptr。</li>\n<li>当 shared_ptr 管理的资源被释放时，weak_ptr 会自动变成 nullptr。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Observe</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> sptr <span class=\"token operator\">=</span> wptr<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"value: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>sptr <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wptr lock fail\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">auto</span> sptr <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    wptr <span class=\"token operator\">=</span> sptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Observe</span><span class=\"token punctuation\">(</span>wptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//sptr 指向的资源没被释放，wptr 可以成功提升为 shared_ptr</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">Observe</span><span class=\"token punctuation\">(</span>wptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//sptr 指向的资源已被释放，wptr 无法提升为 shared_ptr</span></pre></td></tr></table></figure><p><img data-src=\"eb6895f7c1454d98915dd3d0bc25607e.png\" alt=\"img\"></p>\n<p>当 shared_ptr 析构并释放共享资源的时候，只要 weak_ptr 对象还存在，控制块就会保留，weak_ptr 可以通过控制块观察到对象是否存活。</p>\n<p><img data-src=\"f2abf0cc6f8241e0bd373f109c2d1eea.png\" alt=\"img\"></p>\n<h2 id=\"一个-unique_ptr-怎么赋值给另一个-unique_ptr-对象\"><a class=\"markdownIt-Anchor\" href=\"#一个-unique_ptr-怎么赋值给另一个-unique_ptr-对象\">#</a> 一个 unique_ptr 怎么赋值给另一个 unique_ptr 对象？</h2>\n<p>借助 <strong>std::move()</strong> 可以实现将一个 unique_ptr 对象赋值给另一个 unique_ptr 对象，其目的是实现所有权的转移。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// A 作为一个类 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>A<span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>A<span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"使用智能指针会出现什么问题怎么解决\"><a class=\"markdownIt-Anchor\" href=\"#使用智能指针会出现什么问题怎么解决\">#</a> 使用智能指针会出现什么问题？怎么解决？</h2>\n<p>智能指针可能出现的问题：循环引用</p>\n<p>比如定义了两个类 Parent、Child，在两个类中分别定义另一个类的对象的共享指针，由于在程序结束后，两个指针相互指向对方的内存空间，导致内存无法释放。</p>\n<p>循环引用的解决方法： weak_ptr</p>\n<p>循环引用：该被调用的析构函数没有被调用，从而出现了内存泄漏。</p>\n<p>weak_ptr 对被 shared_ptr 管理的对象存在非拥有性（弱）引用，在访问所引用的对象前必须先转化为 shared_ptr；<br>\nweak_ptr 用来打断 shared_ptr 所管理对象的循环引用问题，若这种环被孤立（没有指向环中的外部共享指针），shared_ptr 引用计数无法抵达 0，内存被泄露；令环中的指针之一为弱指针可以避免该情况；<br>\nweak_ptr 用来表达临时所有权的概念，当某个对象只有存在时才需要被访问，而且随时可能被他人删除，可以用 weak_ptr 跟踪该对象；需要获得所有权时将其转化为 shared_ptr，此时如果原来的 shared_ptr 被销毁，则该对象的生命期被延长至这个临时的 shared_ptr 同样被销毁。</p>\n<h2 id=\"vs检测内存泄漏定位泄漏代码位置方法\"><a class=\"markdownIt-Anchor\" href=\"#vs检测内存泄漏定位泄漏代码位置方法\">#</a> VS 检测内存泄漏，定位泄漏代码位置方法</h2>\n<p>检查方法：<br>\n在 main 函数最后面一行，加上一句_CrtDumpMemoryLeaks ()。调试程序，自然关闭程序让其退出（不要定制调试），查看输出：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Detected memory leaks<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Dumping objects <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">453</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x02432CA8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">868</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">404303374</span>       <span class=\"token operator\">></span> <span class=\"token number\">34</span> <span class=\"token number\">30</span> <span class=\"token number\">34</span> <span class=\"token number\">33</span> <span class=\"token number\">30</span> <span class=\"token number\">33</span> <span class=\"token number\">33</span> <span class=\"token number\">37</span> <span class=\"token number\">34</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">447</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x024328B0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">868</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">404303374</span>       <span class=\"token operator\">></span> <span class=\"token number\">34</span> <span class=\"token number\">30</span> <span class=\"token number\">34</span> <span class=\"token number\">33</span> <span class=\"token number\">30</span> <span class=\"token number\">33</span> <span class=\"token number\">33</span> <span class=\"token number\">37</span> <span class=\"token number\">34</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">441</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x024324B8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">868</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">404303374</span>       <span class=\"token operator\">></span> <span class=\"token number\">34</span> <span class=\"token number\">30</span> <span class=\"token number\">34</span> <span class=\"token number\">33</span> <span class=\"token number\">30</span> <span class=\"token number\">33</span> <span class=\"token number\">33</span> <span class=\"token number\">37</span> <span class=\"token number\">34</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">435</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x024320C0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">868</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">404303374</span>       <span class=\"token operator\">></span> <span class=\"token number\">34</span> <span class=\"token number\">30</span> <span class=\"token number\">34</span> <span class=\"token number\">33</span> <span class=\"token number\">30</span> <span class=\"token number\">33</span> <span class=\"token number\">33</span> <span class=\"token number\">37</span> <span class=\"token number\">34</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">429</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x02431CC8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">868</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">404303374</span>       <span class=\"token operator\">></span> <span class=\"token number\">34</span> <span class=\"token number\">30</span> <span class=\"token number\">34</span> <span class=\"token number\">33</span> <span class=\"token number\">30</span> <span class=\"token number\">33</span> <span class=\"token number\">33</span> <span class=\"token number\">37</span> <span class=\"token number\">34</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">212</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x01E1BF30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>`               <span class=\"token operator\">></span> <span class=\"token number\">60</span> B3 E1 <span class=\"token number\">01</span> CD CD CD CD CD CD CD CD CD CD CD CD </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">204</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x01E1B2C8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>                <span class=\"token operator\">></span> C8 B2 E1 <span class=\"token number\">01</span> C8 B2 E1 <span class=\"token number\">01</span> C8 B2 E1 <span class=\"token number\">01</span> CD CD CD CD </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">138</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x01E15680</span><span class=\"token punctuation\">,</span> <span class=\"token number\">332</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>                <span class=\"token operator\">></span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">137</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x01E15628</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token function\">V</span>  <span class=\"token punctuation\">(</span><span class=\"token function\">V</span>  <span class=\"token punctuation\">(</span>V      <span class=\"token operator\">></span> <span class=\"token number\">28</span> <span class=\"token number\">56</span> E1 <span class=\"token number\">01</span> <span class=\"token number\">28</span> <span class=\"token number\">56</span> E1 <span class=\"token number\">01</span> <span class=\"token number\">28</span> <span class=\"token number\">56</span> E1 <span class=\"token number\">01</span> CD CD CD CD </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Object dump complete<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>取其中一条详细说明：{453} normal block at 0x02432CA8, 868 bytes long.<br>\n 被 {} 包围的 453 就是我们需要的内存泄漏定位值，868 bytes long 就是说这个地方有 868 比特内存没有释放。<br>\n在 main 函数第一行加上：_CrtSetBreakAlloc (453); 意思就是在申请 453 这块内存的位置中断。然后调试程序，…… 程序中断了。查看调用堆栈<br>\n<img data-src=\"cb907778bec34cf48495f99bf0dda252.png\" alt=\"img\"></p>\n<p>双击我们的代码调用的最后一个函数，这里是 CDbQuery::UpdateDatas ()，就定位到了申请内存的代码：</p>\n<p><img data-src=\"f5ca922027ff4e3e882321fe5b8f2728.png\" alt=\"img\"></p>\n<p>好了，我们总算知道是哪里出问题了，这块内存没有释放啊。改代码，修复好这个。然后继续…………，直到调试输出中没有 normal block ，程序没有内存泄漏了。</p>\n<p>记得加上头文件：#include &lt;crtdbg.h&gt;</p>\n<p>最后要注意一点的，并不是所有 normal block 一定就有内存泄漏，当你的程序中有全局变量的时候，全局变量的释放示在 main 函数退出后，所以在 main 函数最后_CrtDumpMemoryLeaks（）会认为全局申请的内存没有释放，造成内存泄漏的假象。如何规避呢？我通常是把全局变量声明成指针在 main 函数中 new 在 main 函数中 delete，然后再调用_CrtDumpMemoryLeaks（），这样就不会误判了。</p>\n<p>请自行查阅 Linux 检测内存泄漏，定位泄漏代码位置方法</p>\n<h2 id=\"深拷贝与浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝与浅拷贝\">#</a> 深拷贝与浅拷贝</h2>\n<ul>\n<li>\n<p><strong>c++ 默认的拷贝构造函数是浅拷贝</strong></p>\n<p>浅拷贝就是对象的数据成员之间的简单赋值，如你设计了一个类而没有提供它的复制构造函数，当用该类的一个对象去给另一个对象赋值时所执行的过程就是浅拷贝。当数据成员中没有指针时，浅拷贝是可行的；但当<strong>数据成员中有指针时，如果采用简单的浅拷贝</strong>，则两类中的两个指针将指向同一个地址，当对象快结束时，会调用两次析构函数，而导致指针悬挂现象，所以，此时，必须采用深拷贝。</p>\n</li>\n<li>\n<p>深拷贝与浅拷贝的区别就在于深拷贝会在<strong>堆内存中另外申请空间来储存数据，而不是一个简单的赋值过程</strong>，从而也就解决了指针悬挂的问题。</p>\n</li>\n</ul>\n<h2 id=\"虚拟内存\"><a class=\"markdownIt-Anchor\" href=\"#虚拟内存\">#</a> 虚拟内存</h2>\n<ul>\n<li>\n<p><strong>物理内存：</strong></p>\n<p>物理内存实际上是 CPU 中能直接寻址的地址线条数。由于物理内存是有限的，例如 32 位平台下，寻址的大小是 4G，并且是固定的。内存很快就会被分配完，于是没有得到分配资源的进程就只能等待。当一个进程执行完了以后，再将等待的进程装入内存。这种频繁的装入内存的操作是很没效率的。</p>\n</li>\n<li>\n<p><strong>虚拟内存：</strong></p>\n<p>在进程创建的时候，系统都会给每个进程分配 4G 的内存空间，这其实是虚拟内存空间。进程得到的这 4G 虚拟内存，进程自身以为是一段连续的空间，而实际上，通常被分隔成多个物理内存碎片，还有一部分存储在外部磁盘存储器上，需要的时候进行数据交换。<br>\n关于虚拟内存与物理内存的联系，下面这张图可以帮助我们巩固。</p>\n</li>\n</ul>\n<p><img data-src=\"05e4f27d295a43009d864995a3cc5e75.png\" alt=\"img\"></p>\n<p><img data-src=\"dc1766dd314f4861964db2236daa92b2.png\" alt=\"img\"></p>\n<p><strong>虚拟内存机理及优点：</strong></p>\n<ul>\n<li>\n<p><strong>虚拟内存是如何工作的？</strong></p>\n<ul>\n<li>当每个进程创建的时候，内核会为进程分配 4G 的虚拟内存，当进程还没有开始运行时，这只是一个内存布局。实际上并不立即就把虚拟内存对应位置的程序数据和代码（比如.text .data 段）拷贝到物理内存中，只是建立好虚拟内存和磁盘文件之间的映射就好（叫做存储器映射）。这个时候数据和代码还是在磁盘上的。当运行到对应的程序时，进程去寻找页表，发现页表中地址没有存放在物理内存上，而是在磁盘上，于是发生缺页异常，于是将磁盘上的数据拷贝到物理内存中。</li>\n<li>另外在进程运行过程中，要通过 malloc 来动态分配内存时，也只是分配了虚拟内存，即为这块虚拟内存对应的页表项做相应设置，当进程真正访问到此数据时，才引发缺页异常。</li>\n<li>可以认为虚拟空间都被映射到了磁盘空间中（事实上也是按需要映射到磁盘空间上，通过 mmap，mmap 是用来建立虚拟空间和磁盘空间的映射关系的）</li>\n</ul>\n</li>\n<li>\n<p><strong>利用虚拟内存机制的优点 ？</strong></p>\n<ul>\n<li>既然每个进程的内存空间都是一致而且固定的（32 位平台下都是 4G），所以链接器在链接可执行文件时，可以设定内存地址，而不用去管这些数据最终实际内存地址，这交给内核来完成映射关系</li>\n<li>当不同的进程使用同一段代码时，比如库文件的代码，在物理内存中可以只存储一份这样的代码，不同进程只要将自己的虚拟内存映射过去就好了，这样可以节省物理内存</li>\n<li>在程序需要分配连续空间的时候，只需要在虚拟内存分配连续空间，而不需要物理内存时连续的，实际上，往往物理内存都是断断续续的内存碎片。这样就可以有效地利用我们的物理内存</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"语言对比\"><a class=\"markdownIt-Anchor\" href=\"#语言对比\">#</a> 语言对比</h1>\n<h2 id=\"c-11-新特性\"><a class=\"markdownIt-Anchor\" href=\"#c-11-新特性\">#</a> C++ 11 新特性</h2>\n<ol>\n<li>\n<p><strong>auto 类型推导</strong></p>\n<p>auto 关键字：自动类型推导，编译器会在 编译期间 通过初始值推导出变量的类型，通过 auto 定义的变量必须有初始值。</p>\n</li>\n<li>\n<p><strong>decltype 类型推导</strong></p>\n<p>decltype 关键字：decltype 是 “declare type” 的缩写，译为 “声明类型”。和 auto 的功能一样，都用来在编译时期进行自动类型推导。如果希望从表达式中推断出要定义的变量的类型，但是不想用该表达式的值初始化变量，这时就不能再用 auto。decltype 作用是选择并返回操作数的数据类型。</p>\n<p>区别：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> var <span class=\"token operator\">=</span> val1 <span class=\"token operator\">+</span> val2<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>val1 <span class=\"token operator\">+</span> val2<span class=\"token punctuation\">)</span> var1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>auto 根据 = 右边的初始值 val1 + val2 推导出变量的类型，并将该初始值赋值给变量 var；decltype 根据 val1 + val2 表达式推导出变量的类型，变量的初始值和与表达式的值无关。</li>\n<li>auto 要求变量必须初始化，因为它是根据初始化的值推导出变量的类型，而 decltype 不要求，定义变量的时候可初始化也可以不初始化。</li>\n</ul>\n</li>\n<li>\n<p><strong>lambda 表达式</strong></p>\n<p>lambda 表达式，又被称为 lambda 函数或者 lambda 匿名函数。</p>\n<p>lambda 匿名函数的定义:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>parameter list<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">return</span> type</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   function body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中：</p>\n<ul>\n<li>capture list：捕获列表，指 lambda 所在函数中定义的局部变量的列表，通常为空。</li>\n<li>return type、parameter list、function body：分别表示返回值类型、参数列表、函数体，和普通函数一样。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 对 a 数组中的元素进行升序排序</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> arr<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>范围 for 语句</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>declaration <span class=\"token operator\">:</span> expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    statement</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>参数的含义：</p>\n<ul>\n<li>expression：必须是一个序列，例如用花括号括起来的初始值列表、数组、vector ，string 等，这些类型的共同特点是拥有能返回迭代器的 beign、end 成员。</li>\n<li>declaration：此处定义一个变量，序列中的每一个元素都能转化成该变量的类型，常用 auto 类型说明符。</li>\n</ul>\n</li>\n<li>\n<p>左值和右值，左值引用和右值引用</p>\n<p><strong>左值和右值</strong></p>\n<ul>\n<li>\n<p>** 左值：指表达式结束后依然存在的持久对象，可以取地址，具名变量或对象。** 左值符号 &amp;</p>\n<p>通俗理解：左值是指具有对应的可由用户访问的存储单元，并且能由用户改变其值的量。如一个变量就是一个左值，因为它对应着一个存储单元，并可由编程者通过变量名访问和改变其值。<br>\n左值 (Lvalue) →→ Location<br>\n 表示内存中可以寻址，可以给它赋值 (const 类型的变量例外)</p>\n</li>\n<li>\n<p><strong>右值：表达式结束后就不再存在的临时对象，不可以取地址，没有名字。</strong> 右值符号 &amp;&amp;</p>\n<p>右值 (Rvalue) →→ Read<br>\n 表示可以知道它的值（例如常数）</p>\n</li>\n</ul>\n<p>通俗的讲，左值就是能够出现在赋值符号左面的东西，而右值就是那些可以出现在赋值符号右面的东西， 比如  <code>int a = b + c;</code> ，a 就是一个左值，可以对 a 取地址，而 b+c 就是一个右值，对表达式 b+c 取地址会报错。<br>\n一个典型的例子</p>\n<p><strong>a++</strong> ： 先使用 a 的值，再给 a 加 1，作为<strong>右值</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//a++ 的实现</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>++a</strong> ： 先加再用，作为<strong>左值</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 C++ 中，临时对象不能作为左值，但是可以作为常量引用，const &amp;。</p>\n<p>C++ 11 中的 std::move 可将左值引用转化成右值引用。</p>\n<p>C++11 中右值又由两个概念组成：将亡值和纯右值。</p>\n<p><strong>纯右值和将亡值</strong></p>\n<p>在 C<ins>98 中，右值是纯右值，纯右值指的是临时变量值、不跟对象关联的字面量值。包括非引用的函数返回值、表达式等，比如 2、‘ch’、int func () 等。将亡值是 C</ins>11 新增的、与右值引用相关的表达式。</p>\n<ul>\n<li>纯右值：非引用返回的临时变量 (int func (void))、运算表达式产生的临时变量 (b+c)、原始字面量 (2)、lambda 表达式等。</li>\n<li>将亡值：将要被移动的对象、T&amp;&amp; 函数返回值、std::move 返回值和转换为 T&amp;&amp; 的类型的转换函数的返回值。</li>\n</ul>\n<p>将亡值可以理解为通过 “盗取” 其他变量内存空间的方式获取到的值。在确保其他变量不再被使用、或即将被销毁时，通过 “盗取” 的方式可以避免内存空间的释放和分配，能够延长变量值的生命期。</p>\n<p><strong>右值引用和左值引用</strong></p>\n<ul>\n<li>右值引用：绑定到右值的引用，用 &amp;&amp; 来获得右值引用，右值引用只能绑定到要销毁的对象。是对一个右值进行引用的类型，标记为 T&amp;&amp;。因为右值不具名，是以引用的形式找到它，用引用来表示，右值引用也是引用的引用（我目前是这么想的）。</li>\n<li>左值引用：对一个左值进行引用的类型。常规的引用一般都是左值引用</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> var <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>l_var <span class=\"token operator\">=</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>r_var <span class=\"token operator\">=</span> var<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误：不能将右值引用绑定到左值上</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>r_var2 <span class=\"token operator\">=</span> var <span class=\"token operator\">+</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确：将 r_var2 绑定到求和结果上</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>引用本身不拥有所绑定对象的内存，只是该对象的一个别名，左值引用就是有名变量的别名，右值引用是不具名变量的别名。因此无论左值引用还是右值引用都必须立即进行初始化。</p>\n<p>通过右值引用，这个将亡的右值又 “重获新生”，它的生命周期与右值引用类型变量的生命周期一样，只要这个右值引用类型的变量还活着，那么这个右值临时量就会一直活着，这是一重要特性，可利用这一点会一些性能优化，避免临时对象的拷贝构造和析构。</p>\n<p>左值引用包括常量左值引用和非常量左值引用。非常量左值引用只能接受左值，不能接受右值；常量左值引用是一个 “万能” 的引用类型，可以接受左值（常量左值、非常量左值）、右值。不过常量左值所引用的右值在它的 “余生” 中只能是只读的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 非常量左值引用 绑定到 右值，编译失败</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//b 是非常量左值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>c <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 常量左值引用 绑定到 非常量左值，编译通过</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//d 是常量左值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>e <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 常量左值引用 绑定到 常量左值，编译通过</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>f <span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 常量左值引用 绑定到 右值，编译通过</span></pre></td></tr></table></figure><p>右值引用通常不能绑定到任何的左值，要想绑定一个左值到右值引用，通常需要 std::move () 将左值强制转换为右值。比如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>r1 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 编译失败</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>r2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 编译通过</span></pre></td></tr></table></figure><p>简单总结：</p>\n<ul>\n<li><strong>左值引用，即 &amp; i</strong>, 是一种对象类型的引用；<strong>右值引用，即 &amp;&amp;i</strong>, 是一种对象值的引用；</li>\n<li><strong>move () 函数</strong>可以把左值引用，转换为右值引用；</li>\n<li>左值引用是固定的引用，右值引用是易变的引用，只能引用字面值 (literals) 或临时对象 (temporary object);</li>\n<li>右值引用主要应用在移动构造器 (move constructor) 和移动 - 赋值操作符 (move-assignment operator) 上面；</li>\n</ul>\n<p>代码如下</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span>  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;utility></span>  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>lr <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>rr <span class=\"token operator\">=</span> i<span class=\"token operator\">*</span><span class=\"token number\">42</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>lr1 <span class=\"token operator\">=</span> i<span class=\"token operator\">*</span><span class=\"token number\">42</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>rr1 <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>rr2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>lr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"lr = \"</span> <span class=\"token operator\">&lt;&lt;</span> lr <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"rr = \"</span> <span class=\"token operator\">&lt;&lt;</span> rr <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"lr1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> lr1  <span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"rr1  = \"</span> <span class=\"token operator\">&lt;&lt;</span> rr1  <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"rr2  = \"</span> <span class=\"token operator\">&lt;&lt;</span> rr2  <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>标准库 move () 函数</p>\n<p>move () 函数：通过该函数可获得绑定到左值上的右值引用，该函数包括在 utility 头文件中。该知识点会在后续的章节中做详细的说明。</p>\n</li>\n<li>\n<p>智能指针</p>\n</li>\n<li>\n<p>delete 函数和 default 函数</p>\n<ul>\n<li>delete 函数：= delete 表示该函数不能被调用。</li>\n<li>default 函数：= default 表示编译器生成默认的函数，例如：生成默认的构造函数。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示使用默认的构造函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 表示使用默认的析构函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示类的对象禁止拷贝构造</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tA <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示类的对象禁止拷贝赋值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tA ex1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tA ex2 <span class=\"token operator\">=</span> ex1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: use of deleted function 'A::A(const A&amp;)'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tA ex3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tex3 <span class=\"token operator\">=</span> ex1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: use of deleted function 'A&amp; A::operator=(const A&amp;)'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"c-和-c-的区别\"><a class=\"markdownIt-Anchor\" href=\"#c-和-c-的区别\">#</a> C 和 C++ 的区别</h2>\n<p>首先说一下面向对象和面向过程：</p>\n<ul>\n<li><strong>面向过程的思路</strong>：面向过程编程就是分析出解决问题的步骤，然后把这些步骤一步一步的实现，使用的时候一个一个的依次调用就可以了。</li>\n<li><strong>面向对象的思路</strong>：面向对象编程就是把问题分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描述某个事物在整个解决问题的步骤中的行为。</li>\n<li>举个例子：（玩五子棋）<br>\n（1）用面向过程的思想来考虑就是：开始游戏，白子先走，绘制画面，判断输赢，轮到黑子，绘制画面，判断输赢，重复前面的过程，输出最终结果。<br>\n（2）用面向对象的思想来考虑就是：黑白双方（两者的行为是一样的）、棋盘系统（负责绘制画面）、规定系统（规定输赢、犯规等）、输出系统（输出赢家）。<br>\n<strong>面向对象就是高度实物抽象化（功能划分）、面向过程就是自顶向下的编程（步骤划分）</strong></li>\n</ul>\n<p><strong>区别和联系：</strong></p>\n<ul>\n<li>C 和 C<ins> 一个典型的区别就在动态内存管理上了，C 语言通过 malloc 和 free 来进行堆内存的分配和释放，而 C</ins> 是通过 new 和 delete 来管理堆内存的；</li>\n<li>强制类型转换上也不一样，C 的强制类型转换使用 () 小括号里面加类型进行类型强转的，而 C++ 有四种自己的类型强转方式，分别是 const_cast，static_cast，reinterpret_cast 和 dynamic_cast；</li>\n<li>C 和 C<ins> 的输入输出方式也不一样，printf/scanf，和 C</ins> 的 cout/cin 的对别，前面一组是 C 的库函数，后面是 ostream 和 istream 类型的对象。</li>\n<li>C++ 还支持 namespace 名字空间，可以让用户自己定义新的名字空间作用域出来，避免全局的名字冲突问题。</li>\n<li>应用领域：C 语言主要用于嵌入式领域，驱动开发等与硬件直接打交道的领域，C++ 可以用于应用层开发，用户界面开发等与操作系统打交道的领域。</li>\n<li>C++ 既继承了 C 强大的底层操作特性，又被赋予了面向对象机制。它特性繁多，面向对象语言的多继承，对值传递与引用传递的区分以及 const 关键字，等等。</li>\n<li>C++ 对 C 的 “增强”，表现在以下几个方面：类型检查更为严格。增加了面向对象的机制、泛型编程的机制（Template）、异常处理、运算符重载、标准模板库（STL）、命名空间（避免全局命名冲突）。</li>\n</ul>\n<p><strong>面向过程的语言：</strong></p>\n<p><strong>优点</strong>：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源；比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发，性能是最重要的因素。<br>\n<strong>缺点</strong>：没有面向对象易维护、易复用、易扩展</p>\n<p><strong>面向对象语言：</strong></p>\n<p><strong>优点</strong>：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护<br>\n<strong>缺点</strong>：性能比面向过程低</p>\n<h2 id=\"python-和-c-的区别\"><a class=\"markdownIt-Anchor\" href=\"#python-和-c-的区别\">#</a> Python 和 C++ 的区别</h2>\n<ul>\n<li>语言自身：Python 为脚本语言，解释执行，不需要经过编译；C++ 是一种需要编译后才能运行的语言，在特定的机器上编译后运行。</li>\n<li>运行效率：C++ 运行效率高，安全稳定。原因：Python 代码和 C++ 最终都会变成 CPU 指令来跑，但一般情况下，比如反转和合并两个字符串，Python 最终转换出来的 CPU 指令会比 C++ 多很多。首先，Python 中涉及的内容比 C++ 多，经过了更多层，Python 中甚至连数字都是 object ；其次，Python 是解释执行的，和物理机 CPU 之间多了解释器这层，而 C++ 是编译执行的，直接就是机器码，编译的时候编译器又可以进行一些优化。</li>\n<li>开发效率：Python 开发效率高。原因：Python 一两句代码就能实现的功能，C++ 往往需要更多的代码才能实现。</li>\n<li>书写格式和语法不同：Python 的语法格式不同于其 C++ 定义声明才能使用，而且极其灵活，完全面向更上层的开发者。</li>\n</ul>\n<h1 id=\"面向对象\"><a class=\"markdownIt-Anchor\" href=\"#面向对象\">#</a> 面向对象</h1>\n<h2 id=\"什么是面向对象面向对象的三大特性\"><a class=\"markdownIt-Anchor\" href=\"#什么是面向对象面向对象的三大特性\">#</a> 什么是面向对象？面向对象的三大特性</h2>\n<p><strong>面向对象：对象是指具体的某一个事物，这些事物的抽象就是类，类中包含数据（成员变量）和动作（成员方法）。</strong></p>\n<p>面向对象的三大特性：</p>\n<ul>\n<li>封装：将具体的实现过程和数据封装成一个函数，只能通过接口进行访问，降低耦合性。</li>\n<li>继承：子类继承父类的特征和行为，子类有父类的非 private 方法或成员变量，子类可以对父类的方法进行重写，增强了类之间的耦合性，但是当父类中的成员变量、成员函数或者类本身被 final 关键字修饰时，修饰的类不能继承，修饰的成员不能重写或修改。</li>\n<li>多态：多态就是不同继承类的对象，对同一消息做出不同的响应，基类的指针指向或绑定到派生类的对象，使得基类指针呈现不同的表现方式。</li>\n</ul>\n<h2 id=\"重载-重写-隐藏的区别\"><a class=\"markdownIt-Anchor\" href=\"#重载-重写-隐藏的区别\">#</a> 重载、重写、隐藏的区别</h2>\n<p><strong>重载</strong>：是指同一可访问区内被声明几个具有不同参数列（参数的类型、个数、顺序）的同名函数，根据参数列表确定调用哪个函数，重载不关心函数返回类型。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 重载 参数类型不同（相对于上一个函数）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tmp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重载 参数个数不同（相对于上一个函数）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> tmp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重载 参数顺序不同（相对于上一个函数）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \t<span class=\"token keyword\">int</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">//error: 'int A::fun (int)' cannot be overloaded 错误：注意重载不关心函数返回类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>隐藏 (重定义)</strong>：是指派生类的函数屏蔽了与其同名的基类函数，主要只要同名函数，不管参数列表是否相同，基类函数都会被隐藏。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tmp1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::fun(int tmp, float tmp1)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derive</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::fun(int tmp)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 隐藏基类中的同名函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Derive ex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    ex<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// Derive::fun(int tmp)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    ex<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: candidate expects 1 argument, 2 provided</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>说明：上述代码中 ex.fun (1, 0.01); 出现错误，说明派生类中将基类的同名函数隐藏了。若是想调用基类中的同名函数，可以加上类型名指明 ex.Base::fun (1, 0.01);，这样就可以调用基类中的同名函数。</p>\n<p><strong>重写 (覆盖)</strong>：是指派生类中存在重新定义的函数。函数名、参数列表、返回值类型都必须同基类中被重写的函数一致，只有函数体不同。派生类调用时会调用派生类的重写函数，不会调用被重写函数。重写的基类中被重写的函数必须有 virtual 修饰。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::fun(int tmp) : \"</span> <span class=\"token operator\">&lt;&lt;</span> tmp <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derived::fun(int tmp) : \"</span> <span class=\"token operator\">&lt;&lt;</span> tmp <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 重写基类中的 fun 函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    Base <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p<span class=\"token operator\">-></span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Derived::fun(int) : 3</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>重写和重载的区别：</strong></p>\n<ul>\n<li>范围区别：对于类中函数的重载或者重写而言，重载发生在同一个类的内部，重写发生在不同的类之间（子类和父类之间）。</li>\n<li>参数区别：重载的函数需要与原函数有相同的函数名、不同的参数列表，不关注函数的返回值类型；重写的函数的函数名、参数列表和返回值类型都需要和原函数相同，父类中被重写的函数需要有 virtual 修饰。</li>\n<li>virtual 关键字：重写的函数基类中必须有 virtual 关键字的修饰，重载的函数可以有 virtual 关键字的修饰也可以没有。</li>\n</ul>\n<p><strong>隐藏和重写，重载的区别：</strong></p>\n<ul>\n<li>范围区别：隐藏与重载范围不同，隐藏发生在不同类中。</li>\n<li>参数区别：隐藏函数和被隐藏函数参数列表可以相同，也可以不同，但函数名一定相同；当参数不同时，无论基类中的函数是否被 virtual 修饰，基类函数都是被隐藏，而不是重写。</li>\n</ul>\n<h2 id=\"如何理解-c-是面向对象编程\"><a class=\"markdownIt-Anchor\" href=\"#如何理解-c-是面向对象编程\">#</a> 如何理解 C++ 是面向对象编程</h2>\n<p>说明：该问题最好结合自己的项目经历进行展开解释，或举一些恰当的例子，同时对比下面向过程编程。</p>\n<ul>\n<li><strong>面向过程编程</strong>：一种以执行程序操作的过程或函数为中心编写软件的方法。程序的数据通常存储在变量中，与这些过程是分开的。所以必须将变量传递给需要使用它们的函数。缺点：随着程序变得越来越复杂，程序数据与运行代码的分离可能会导致问题。例如，程序的规范经常会发生变化，从而需要更改数据的格式或数据结构的设计。当数据结构发生变化时，对数据进行操作的代码也必须更改为接受新的格式。查找需要更改的所有代码会为程序员带来额外的工作，并增加了使代码出现错误的机会。</li>\n<li><strong>面向对象编程（Object-Oriented Programming, OOP）</strong>：以创建和使用对象为中心。一个对象（Object）就是一个软件实体，它将数据和程序在一个单元中组合起来。对象的数据项，也称为其属性，存储在成员变量中。对象执行的过程被称为其成员函数。将对象的数据和过程绑定在一起则被称为封装。</li>\n</ul>\n<p>面向对象编程进一步说明：</p>\n<p>面向对象编程将数据成员和成员函数封装到一个类中，并声明数据成员和成员函数的访问级别（public、private、protected），以便控制类对象对数据成员和函数的访问，对数据成员起到一定的保护作用。而且在类的对象调用成员函数时，只需知道成员函数的名、参数列表以及返回值类型即可，无需了解其函数的实现原理。当类内部的数据成员或者成员函数发生改变时，不影响类外部的代码。</p>\n<h2 id=\"什么是多态多态如何实现\"><a class=\"markdownIt-Anchor\" href=\"#什么是多态多态如何实现\">#</a> 什么是多态？多态如何实现？</h2>\n<p>** 多态：多态就是不同继承类的对象，对同一消息做出不同的响应，基类的指针指向或绑定到派生类的对象，使得基类指针呈现不同的表现方式。** 在基类的函数前加上 virtual 关键字，在派生类中重写该函数，运行时将会根据对象的实际类型来调用相应的函数。如果对象类型是派生类，就调用派生类的函数；如果对象类型是基类，就调用基类的函数。</p>\n<p><strong>实现方法：<strong>多态是通过</strong>虚函数</strong>实现的，虚函数的地址保存在虚函数表中，虚函数表的地址保存在含有虚函数的类的实例对象的内存空间中。</p>\n<p><strong>实现过程：</strong></p>\n<ul>\n<li>在类中用 virtual 关键字声明的函数叫做虚函数；</li>\n<li>存在虚函数的类都有一个虚函数表，当创建一个该类的对象时，该对象有一个指向虚函数表的虚表指针（虚函数表和类对应的，虚表指针是和对象对应）；</li>\n<li>当基类指针指向派生类对象，基类指针调用虚函数时，基类指针指向派生类的虚表指针，由于该虚表指针指向派生类虚函数表，通过遍历虚表，寻找相应的虚函数。</li>\n</ul>\n<p><strong>静态多态与动态多态：</strong></p>\n<ul>\n<li><strong>静态多态</strong>：也称为<strong>编译期间的多态</strong>，编译器在编译期间完成的，编译器根据函数实参的类型 (可能会进行隐式类型转换)，可推断出要调用那个函数，如果有对应的函数就调用该函数，否则出现编译错误。</li>\n<li><strong>动态多态（动态绑定）</strong>：即<strong>运行时的多态</strong>，在程序执行期间 (非编译期) 判断所引用对象的实际类型，根据其实际类型调用相应的方法。：\n<ul>\n<li>基类中必须包含虚函数，并且派生类中一定要对基类中的虚函数进行重写。</li>\n<li>通过基类对象的指针或者引用调用虚函数。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::fun()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::fun1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::fun2()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derive</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::fun()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">D_fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::D_fun1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">D_fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::D_fun2()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tBase <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Derive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tp<span class=\"token operator\">-></span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Derive::fun () 调用派生类中的虚函数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>简单解释：当基类的指针指向派生类的对象时，通过派生类的对象的虚表指针找到虚函数表（派生类的对象虚函数表），进而找到相应的虚函数 Derive::f () 进行调用。</p>\n<h1 id=\"类相关\"><a class=\"markdownIt-Anchor\" href=\"#类相关\">#</a> 类相关</h1>\n<h2 id=\"什么是虚函数什么是纯虚函数\"><a class=\"markdownIt-Anchor\" href=\"#什么是虚函数什么是纯虚函数\">#</a> 什么是虚函数？什么是纯虚函数？</h2>\n<p>** 虚函数：** 被 virtual 关键字修饰的成员函数，就是虚函数。</p>\n<p><strong>纯虚函数：</strong></p>\n<ul>\n<li>纯虚函数在类中声明时，加上 =0；</li>\n<li>含有纯虚函数的类称为抽象类（只要含有纯虚函数这个类就是抽象类），类中只有接口，没有具体的实现方法；</li>\n<li>继承纯虚函数的派生类，如果没有完全实现基类纯虚函数，依然是抽象类，不能实例化对象。</li>\n</ul>\n<p><strong>说明：</strong></p>\n<ul>\n<li>抽象类对象不能作为函数的参数，不能创建对象，不能作为函数返回类型；</li>\n<li>可以声明抽象类指针，可以声明抽象类的引用；</li>\n<li>子类必须继承父类的纯虚函数，并全部实现后，才能创建子类的对象。</li>\n</ul>\n<h2 id=\"虚函数和纯虚函数的区别\"><a class=\"markdownIt-Anchor\" href=\"#虚函数和纯虚函数的区别\">#</a> 虚函数和纯虚函数的区别？</h2>\n<ul>\n<li>虚函数和纯虚函数可以出现在同一个类中，该类称为抽象基类。（含有纯虚函数的类称为抽象基类）</li>\n<li>使用方式不同：虚函数可以直接使用，纯虚函数必须在派生类中实现后才能使用；</li>\n<li>定义形式不同：虚函数在定义时在普通函数的基础上加上 virtual 关键字，纯虚函数定义时除了加上 virtual 关键字还需要加上 =0;</li>\n<li>虚函数必须实现，否则编译器会报错；</li>\n<li>对于实现纯虚函数的派生类，该纯虚函数在派生类中被称为虚函数，虚函数和纯虚函数都可以在派生类中重写；</li>\n<li>析构函数最好定义为虚函数，特别是对于含有继承关系的类；析构函数可以定义为纯虚函数，此时，其所在的类为抽象基类，不能创建实例化对象。</li>\n</ul>\n<h2 id=\"虚函数的实现机制\"><a class=\"markdownIt-Anchor\" href=\"#虚函数的实现机制\">#</a> 虚函数的实现机制</h2>\n<p>** 实现机制：** 虚函数通过虚函数表来实现。虚函数的地址保存在虚函数表中，在类的对象所在的内存空间中，保存了指向虚函数表的指针（称为 “虚表指针”），通过虚表指针可以找到类对应的虚函数表。虚函数表解决了基类和派生类的继承问题和类中成员函数的覆盖问题，当用基类的指针来操作一个派生类的时候，这张虚函数表就指明了实际应该调用的函数</p>\n<p>虚函数表相关知识点：</p>\n<ul>\n<li>虚函数表存放的内容：类的虚函数的地址。</li>\n<li>虚函数表建立的时间：编译阶段，即程序的编译过程中会将虚函数的地址放在虚函数表中。</li>\n<li>虚表指针保存的位置：虚表指针存放在对象的内存空间中最前面的位置，这是为了保证正确取到虚函数的偏移量。</li>\n</ul>\n<p>注：虚函数表和类绑定，虚表指针和对象绑定。即类的不同的对象的虚函数表是一样的，但是每个对象都有自己的虚表指针，来指向类的虚函数表。</p>\n<p>实例：<br>\n无虚函数覆盖的情况：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">B_fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::B_fun1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">B_fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::B_fun2()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">B_fun3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::B_fun3()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derive</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">D_fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::D_fun1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">D_fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::D_fun2()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">D_fun3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::D_fun3()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Base <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Derive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    p<span class=\"token operator\">-></span><span class=\"token function\">B_fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Base::B_fun1()</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主函数中基类的指针 p 指向了派生类的对象，当调用函数 B_fun1 () 时，通过派生类的虚函数表找到该函数的地址，从而完成调用。</p>\n<h2 id=\"单继承和多继承的虚函数表结构\"><a class=\"markdownIt-Anchor\" href=\"#单继承和多继承的虚函数表结构\">#</a> 单继承和多继承的虚函数表结构</h2>\n<p>编译器处理虚函数表：</p>\n<ul>\n<li>编译器将虚函数表的指针放在类的实例对象的内存空间中，该对象调用该类的虚函数时，通过指针找到虚函数表，根据虚函数表中存放的虚函数的地址找到对应的虚函数。</li>\n<li>如果派生类没有重新定义基类的虚函数 A，则派生类的虚函数表中保存的是基类的虚函数 A 的地址，也就是说基类和派生类的虚函数 A 的地址是一样的。</li>\n<li>如果派生类重写了基类的某个虚函数 B，则派生的虚函数表中保存的是重写后的虚函数 B 的地址，也就是说虚函数 B 有两个版本，分别存放在基类和派生类的虚函数表中。</li>\n<li>如果派生类重新定义了新的虚函数 C，派生类的虚函数表保存新的虚函数 C 的地址。</li>\n</ul>\n<h2 id=\"为什么构造函数不能为虚函数\"><a class=\"markdownIt-Anchor\" href=\"#为什么构造函数不能为虚函数\">#</a> 为什么构造函数不能为虚函数？</h2>\n<p>虚函数的调用需要虚函数表指针，而该指针存放在对象的内存空间中；若构造函数声明为虚函数，那么由于对象还未创建，还没有内存空间，更没有虚函数表地址用来调用虚函数 —— 构造函数了。</p>\n<h2 id=\"为什么析构函数可以为虚函数如果不设为虚函数可能会存在什么问题\"><a class=\"markdownIt-Anchor\" href=\"#为什么析构函数可以为虚函数如果不设为虚函数可能会存在什么问题\">#</a> 为什么析构函数可以为虚函数，如果不设为虚函数可能会存在什么问题？</h2>\n<p><strong>防止内存泄露</strong>，delete p（基类）的时候，它很机智的先执行了派生类的析构函数，然后执行了基类的析构函数。</p>\n<p>如果基类的析构函数不是虚函数，在 delete p（基类）时，调用析构函数时，只会看指针的数据类型，而不会去看赋值的对象，这样就会造成内存泄露。</p>\n<p>举例说明：<br>\n子类 B 继承自基类 A； <code>A *p = new B; delete p;</code> <br>\n1） 此时，如果类 A 的析构函数不是虚函数，那么 <code>delete p；</code> 将会仅仅调用 A 的析构函数，只释放了 B 对象中的 A 部分，而派生出的新的部分未释放掉。<br>\n2） 如果类 A 的析构函数是虚函数， <code>delete p;</code>  将会先调用 B 的析构函数，再调用 A 的析构函数，释放 B 对象的所有空间。<br>\n补充：  <code>B *p = new B; delete p;</code>  时也是先调用 B 的析构函数，再调用 A 的析构函数。</p>\n<h2 id=\"不能声明为虚函数的有哪些\"><a class=\"markdownIt-Anchor\" href=\"#不能声明为虚函数的有哪些\">#</a> 不能声明为虚函数的有哪些</h2>\n<ol>\n<li><strong>静态成员函数；</strong></li>\n<li><strong>类外的普通函数；</strong></li>\n<li><strong>构造函数；</strong></li>\n<li><strong>友元函数</strong></li>\n</ol>\n<p>虚函数是为了实现多态特性的。虚函数的调用只有在程序运行的时候才能知道到底调用的是哪个函数，其是有有如下几点需要注意：</p>\n<ul>\n<li>类的<strong>构造函数</strong>不能是虚函数<br>\n构造函数是为了构造对象的，所以在调用构造函数时候必然知道是哪个对象调用了构造函数，所以构造函数不能为虚函数。</li>\n<li>类的<strong>静态成员函数</strong>不能是虚函数<br>\n类的静态成员函数是该类共用的，与该类的对象无关，静态函数里没有 this 指针，所以不能为虚函数。</li>\n<li><strong>内联函数</strong><br>\n内联函数的目的是为了减少函数调用时间。它是把内联函数的函数体在编译器预处理的时候替换到函数调用处，这样代码运行到这里时候就不需要花时间去调用函数。inline 是在编译器将函数类容替换到函数调用处，是静态编译的。而虚函数是动态调用的，在编译器并不知道需要调用的是父类还是子类的虚函数，所以不能够 inline 声明展开，所以编译器会忽略。</li>\n<li><strong>友元函数</strong><br>\n友元函数与该类无关，没有 this 指针，所以不能为虚函数。</li>\n</ul>\n<h1 id=\"关键字库函数\"><a class=\"markdownIt-Anchor\" href=\"#关键字库函数\">#</a> 关键字库函数</h1>\n<h2 id=\"sizeof-和-strlen-的区别\"><a class=\"markdownIt-Anchor\" href=\"#sizeof-和-strlen-的区别\">#</a> sizeof 和 strlen 的区别</h2>\n<ul>\n<li>\n<p><strong>strlen 是头文件中的函数，sizeof 是 C++ 中的运算符。</strong></p>\n</li>\n<li>\n<p><strong>strlen 测量的是字符串的实际长度（其源代码如下），以 \\0 结束。而 sizeof 测量的是字符数组的分配大小。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>strlen 源代码<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>size_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    size_t length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">++</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>若字符数组 arr 作为函数的形参，sizeof (arr) 中 arr 被当作字符指针来处理，strlen (arr) 中 arr<br>\n 依然是字符数组，从下述程序的运行结果中就可以看出。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">size_of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// warning: 'sizeof' on array function parameter 'arr' will return size of 'char*' .</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">size_of</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>输出结果：</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>8</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>5</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>*/</span></pre></td></tr></table></figure></li>\n<li>\n<p>strlen 本身是库函数，因此在程序运行过程中，计算长度；而 sizeof 在编译时，计算长度；</p>\n</li>\n<li>\n<p>sizeof 的参数可以是类型，也可以是变量；strlen 的参数必须是 char* 类型的变量。</p>\n</li>\n</ul>\n<h2 id=\"inline和宏之间的区别\"><a class=\"markdownIt-Anchor\" href=\"#inline和宏之间的区别\">#</a> inline 和宏之间的区别</h2>\n<p>1、内联函数在编译时展开，而宏在预编译时展开</p>\n<p>2、在编译的时候，内联函数直接被嵌入到目标代码中去，而宏只是一个简单的文本替换。</p>\n<p>3、内联函数可以进行诸如类型安全检查、语句是否正确等编译功能，宏不具有这样的功能。</p>\n<p>4、宏不是函数，而 inline 是函数</p>\n<p>5、宏在定义时要小心处理宏参数，一般用括号括起来，否则容易出现二义性。而内联函数不会出现二义性。</p>\n<p>6、inline 可以不展开，宏一定要展开。因为 inline 指示对编译器来说，只是一个建议，编译器可以选择忽略该建议，不对该函数进行展开。</p>\n<p>7、宏定义在形式上类似于一个函数，但在使用它时，仅仅只是做预处理器符号表中的简单替换，因此它不能进行<strong>参数有效性的检测</strong>，也就不能享受 C++ 编译器严<strong>格类型检查</strong>的好处，另外它的<strong>返回值也不能被强制转换</strong>为可转换的合适的类型，这样，它的使用就存在着一系列的隐患和局限性。</p>\n<h2 id=\"lambda-表达式匿名函数的具体应用和使用场景\"><a class=\"markdownIt-Anchor\" href=\"#lambda-表达式匿名函数的具体应用和使用场景\">#</a> lambda 表达式（匿名函数）的具体应用和使用场景</h2>\n<p>lambda 表达式的定义形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>parameter list<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> reurn type</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   function body</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中：</p>\n<ul>\n<li>capture list：捕获列表，指 lambda 表达式所在函数中定义的局部变量的列表，通常为空，但如果函数体中用到了 lambda 表达式所在函数的局部变量，必须捕获该变量，即将此变量写在捕获列表中。捕获方式分为：引用捕获方式 [&amp;]、值捕获方式 [=]。</li>\n<li>return type、parameter list、function body：分别表示返回值类型、参数列表、函数体，和普通函数一样。</li>\n</ul>\n<p>常见使用场景：排序算法</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> testdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    testdata<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>testdata<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> data <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 排序算法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>testdata<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> testdata<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 升序</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 使用 lambda 表达式</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>testdata<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> testdata<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"explicit-的作用如何避免编译器进行隐式类型转换\"><a class=\"markdownIt-Anchor\" href=\"#explicit-的作用如何避免编译器进行隐式类型转换\">#</a> explicit 的作用（如何避免编译器进行隐式类型转换）</h2>\n<p>作用：用来声明类构造函数是显示调用的，而非隐式调用，可以阻止调用构造函数时进行隐式转换。只可用于修饰单参构造函数，因为无参构造函数和多参构造函数本身就是显示调用的，再加上 explicit 关键字也没有什么意义。</p>\n<p>隐式转换：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        var <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    A ex <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发生了隐式转换</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述代码中， <code>A ex = 10;</code>  在编译时，进行了隐式转换，将 10 转换成 A 类型的对象，然后将该对象赋值给 ex，等同于如下操作：</p>\n<p>为了避免隐式转换，可用 explicit 关键字进行声明：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        var <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> var <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    A <span class=\"token function\">ex</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    A ex1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: conversion from 'int' to non-scalar type 'A' requested</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"c-和-c-static-的区别\"><a class=\"markdownIt-Anchor\" href=\"#c-和-c-static-的区别\">#</a> C 和 C++ static 的区别</h2>\n<ul>\n<li>在 C 语言中，使用 static 可以定义局部静态变量、外部静态变量、静态函数</li>\n<li>在 C++ 中，使用 static 可以定义局部静态变量、外部静态变量、静态函数、静态成员变量和静态成员函数。因为 C++ 中有类的概念，静态成员变量、静态成员函数都是与类有关的概念。</li>\n</ul>\n<h2 id=\"static-的作用\"><a class=\"markdownIt-Anchor\" href=\"#static-的作用\">#</a> static 的作用</h2>\n<p>作用：static 定义静态变量，静态函数。</p>\n<ul>\n<li>保持变量内容持久：static 作用于局部变量，改变了局部变量的生存周期，使得该变量存在于定义后直到程序运行结束的这段时间。</li>\n<li>隐藏：static 作用于全局变量和函数，改变了全局变量和函数的作用域，使得全局变量和函数<strong>只能在定义它的文件中使用</strong>，在源文件中不具有全局可见性。（注：普通全局变量和函数具有全局可见性，即其他的源文件也可以使用。）</li>\n<li>static 作用于类的成员变量和类的成员函数，使得类变量或者类成员函数和类有关，也就是说<strong>可以不定义类的对象就可以通过类访问这些静态成员</strong>。注意：类的静态成员函数中只能访问静态成员变量或者静态成员函数，不能将静态成员函数定义成虚函数。</li>\n</ul>\n<h2 id=\"static-在类中使用的注意事项定义-初始化和使用\"><a class=\"markdownIt-Anchor\" href=\"#static-在类中使用的注意事项定义-初始化和使用\">#</a> static 在类中使用的注意事项（定义、初始化和使用）</h2>\n<p>static 静态成员变量：</p>\n<ul>\n<li>\n<p>静态成员变量是在类内进行声明，在类外进行定义和初始化，在类外进行定义和初始化的时候不要出现 static 关键字和 private、public、protected 访问规则。</p>\n</li>\n<li>\n<p>静态成员变量相当于类域中的全局变量，被类的所有对象所共享，包括派生类的对象。</p>\n</li>\n<li>\n<p>静态成员变量可以作为成员函数的参数，而普通成员变量不可以。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> s_var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> s_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，静态成员变量可以作为成员函数的参数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//  error: invalid use of non-static data member 'A::var'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>静态数据成员的类型可以是所属类的类型，而普通数据成员的类型只能是该类类型的指针或引用。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">static</span> A s_var<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，静态数据成员</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    A var<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// error: field 'var' has incomplete type 'A'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    A <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 正确，指针</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    A <span class=\"token operator\">&amp;</span>var1<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 正确，引用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>static 静态成员函数：</p>\n<ul>\n<li>静态成员函数不能调用非静态成员变量或者非静态成员函数，因为静态成员函数没有 this 指针。静态成员函数做为类作用域的全局函数。</li>\n<li>静态成员函数不能声明成虚函数（virtual）、const 函数和 volatile 函数。</li>\n</ul>\n<h2 id=\"static-全局变量和普通全局变量的异同\"><a class=\"markdownIt-Anchor\" href=\"#static-全局变量和普通全局变量的异同\">#</a> static 全局变量和普通全局变量的异同</h2>\n<p>相同点：</p>\n<ul>\n<li>存储方式：普通全局变量和 static 全局变量都是静态存储方式。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>作用域：普通全局变量的作用域是整个源程序，当一个源程序由多个源文件组成时，普通全局变量在各个源文件中都是有效的；静态全局变量则限制了其作用域，即只在定义该变量的源文件内有效，在同一源程序的其它源文件中不能使用它。由于静态全局变量的作用域限于一个源文件内，只能为该源文件内的函数公用，因此可以避免在其他源文件中引起错误。</li>\n<li>初始化：静态全局变量只初始化一次，防止在其他文件中使用。</li>\n</ul>\n<h2 id=\"const-作用及用法\"><a class=\"markdownIt-Anchor\" href=\"#const-作用及用法\">#</a> const 作用及用法</h2>\n<p>作用：</p>\n<ul>\n<li>const 修饰成员变量，定义成 const 常量，相较于宏常量，可进行类型检查，节省内存空间，提高了效率。</li>\n<li>const 修饰函数参数，使得传递过来的函数参数的值不能改变。</li>\n<li>const 修饰成员函数，使得成员函数不能修改任何类型的成员变量（mutable 修饰的变量除外），也不能调用非 const 成员函数，因为非 const 成员函数可能会修改成员变量。</li>\n</ul>\n<p>在类中的用法：</p>\n<p>const 成员变量：</p>\n<ul>\n<li>const 成员变量只能在类内声明、定义，在构造函数初始化列表中初始化。</li>\n<li>const 成员变量只在某个对象的生存周期内是常量，对于整个类而言却是可变的，因为类可以创建多个对象，不同类的 const 成员变量的值是不同的。因此不能在类的声明中初始化 const 成员变量，类的对象还没有创建，编译器不知道他的值。</li>\n</ul>\n<p>const 成员函数：</p>\n<ul>\n<li>不能修改成员变量的值，除非有 mutable 修饰；只能访问成员变量。</li>\n<li>不能调用非常量成员函数，以防修改成员变量的值。</li>\n</ul>\n<h2 id=\"define-和-const-的区别\"><a class=\"markdownIt-Anchor\" href=\"#define-和-const-的区别\">#</a> define 和 const 的区别</h2>\n<p>区别：</p>\n<ul>\n<li>编译阶段：define 是在编译预处理阶段进行替换，const 是在编译阶段确定其值。</li>\n<li>安全性：define 定义的宏常量没有数据类型，只是进行简单的替换，不会进行类型安全的检查；const 定义的常量是有类型的，是要进行判断的，可以避免一些低级的错误。</li>\n<li>内存占用：define 定义的宏常量，在程序中使用多少次就会进行多少次替换，内存中有多个备份，占用的是代码段的空间；const 定义的常量占用静态存储区的空间，程序运行过程中只有一份。</li>\n<li>调试：define 定义的宏常量不能调试，因为在预编译阶段就已经进行替换了；cons 定义的常量可以进行调试。</li>\n</ul>\n<p>const 的优点：</p>\n<ul>\n<li>有数据类型，在定义式可进行安全性检查。<br>\n可调式。</li>\n<li>占用较少的空间。</li>\n</ul>\n<h2 id=\"define-和-typedef-的区别\"><a class=\"markdownIt-Anchor\" href=\"#define-和-typedef-的区别\">#</a> define 和 typedef 的区别</h2>\n<ul>\n<li>原理：#define 作为预处理指令，在编译预处理时进行替换操作，不作正确性检查，只有在编译已被展开的源程序时才会发现可能的错误并报错。typedef 是关键字，在编译时处理，有类型检查功能，用来给一个已经存在的类型一个别名，但不能在一个函数定义里面使用 typedef 。</li>\n<li>功能：typedef 用来定义类型的别名，方便使用。#define 不仅可以为类型取别名，还可以定义常量、变量、编译开关等。</li>\n<li>作用域：#define 没有作用域的限制，只要是之前预定义过的宏，在以后的程序中都可以使用，而 typedef 有自己的作用域。</li>\n<li>指针的操作：typedef 和 #define 在处理指针时不完全一样</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INTPTR1</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> INTPTR2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    INTPTR1 p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// p1: int *; p2: int</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    INTPTR2 p3<span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// p3: int *; p4: int *</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> var <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> INTPTR1 p5 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>var<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相当于 const int * p5; 常量指针，即不可以通过 p5 去修改 p5 指向的内容，但是 p5 可以指向其他内容。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">const</span> INTPTR2 p6 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>var<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相当于 int * const p6; 指针常量，不可使 p6 再指向其他内容。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"数据库部分\"><a class=\"markdownIt-Anchor\" href=\"#数据库部分\">#</a> 数据库部分</h1>\n<h2 id=\"简述三层模式-两级映射分别有什么作用\"><a class=\"markdownIt-Anchor\" href=\"#简述三层模式-两级映射分别有什么作用\">#</a> 简述三层模式、两级映射，分别有什么作用？</h2>\n<p>模式（逻辑模式）：是数据库中全体数据的逻辑结构和特征的描述，是数据库系统模式结构的中间层，即不涉及数据的物理存储细节，也与具体应用程序开发工具语言无关。</p>\n<p>外模式（用户模式）：是用户能看见和使用的局部数据的逻辑结构和特征描述，是与某一应用有关的数据的逻辑表示，是模式的子集，一个数据库可以有多个外模式。</p>\n<p>内模式（存储模式）：数据物理结构和存储方式的描述，是数据在数据库内部的表示方式，如存储方式是按照某个属性升序存储，什么索引等。</p>\n<p>外模式模式映像：当模式发生改变，数据库管理员对外模式模式映像作相应改变，可使外模式不变，从而应用程序不用修改。保证数据与程序的逻辑独立性。</p>\n<p>模式内模式映像：当数据库的存储结构改变了，由数据库管理员对模式内模式映像作相应改变，可以保持模式不变，从而应用程序也不必改变，保证了数据与程序的物理独立性。</p>\n<p>三级模式使用户能逻辑地抽象地处理数据而不关心数据在计算机内具体表示方式与存储方式，两级映像保证了数据库系统中的数据有较高的逻辑独立性和物理独立性。</p>\n<h2 id=\"说出至少三种数据库类型层次网状关系并简要解释了一下\"><a class=\"markdownIt-Anchor\" href=\"#说出至少三种数据库类型层次网状关系并简要解释了一下\">#</a> 说出至少三种数据库类型（层次，网状，关系）并简要解释了一下</h2>\n<p>层次模型：用树形结构来表示各类实体以及实体间的联系，有且只有一个节点没有双亲节点（根节点），其他的都有且只有一个双亲节点。只能直接表示的是一对多联系。<br>\n优点：效率高结构清晰，性能优于关系数据库，不低于网状。<br>\n缺点：现实世界很多联系都不是层次的，如节点间多对多联系，还有一个节点具有多个双亲的情况都不好表示。</p>\n<p>网状模型：对于非层次关系的联系，用层次表示非树形结构是很不直接的，网状模型可以很好的表示，它允许有一个以上的节点没有双亲，一个节点也可以有多个双亲，可以更直接地描述现实世界。<br>\n优点：更直接描述现实世界，性能也较好，存取效率也较高。<br>\n缺点：结构比较复杂不利于掌握，用户编程还得了解系统结构细节，加重了编程的负担。</p>\n<p>关系模型：通常来看关系就是一张规范二维表，实体还是实体间的联系都用关系来表示，对数据的检索和更新结果也是关系。<br>\n优点：概念单一，用户易懂易用，而且存取路径是对用户透明的，从而有更高的数据独立性和安全性，也简化程序员的工作。<br>\n缺点：查询效率往往不如格式化数据模型，为了提高性能，增加开发 DBMS 难度。</p>\n<h2 id=\"简述关系与关系模式的区别\"><a class=\"markdownIt-Anchor\" href=\"#简述关系与关系模式的区别\">#</a> 简述关系与关系模式的区别。</h2>\n<p>关系实质是一张二维表，关系模式是对关系的描述，关系是关系模式在某一时刻的状态或内容。</p>\n<p>关系模式是静态的、稳定的，而关系是动态的，随时间不断变化的，因为关系操作不断更新数据库中的数据。<br>\n通俗的说：关系是一张二维表，关系模式是表格的描述（表头），关系名是表名，元组是一行，属性是列，分量是一条记录中的一个列值。</p>\n<h2 id=\"什么是关系数据库关系和二维表有什么区别\"><a class=\"markdownIt-Anchor\" href=\"#什么是关系数据库关系和二维表有什么区别\">#</a> 什么是关系数据库？关系和二维表有什么区别？</h2>\n<p>关系数据库，是建立在关系数据库模型基础上的数据库，借助于集合代数等概念和方法来处理数据库中的数据。</p>\n<p>在关系模型中，数据结构表示为一个二维表，一个关系就是一个二维表（但不是任意一个二维表都能表示一个关系。表中的第一行通常称为属性名，表中的每一个元组和属性都是不可再分的，且元组的次序是无关紧要的。</p>\n<h2 id=\"关系的完整性实体完整性-参照完整性-用户自定义和数据库主键的约束性\"><a class=\"markdownIt-Anchor\" href=\"#关系的完整性实体完整性-参照完整性-用户自定义和数据库主键的约束性\">#</a> 关系的完整性（实体完整性、参照完整性、用户自定义）和数据库主键的约束性</h2>\n<p>实体完整性：关系的主码不能取空值，如果主码由若干属性组成都不能为空。实体以主码作为唯一性标识。</p>\n<p>参照完整性：一个关系中的外码，或者取空值（若属性组全为空），或者等于它参照的那个关系的主码值。</p>\n<p>用户自定义完整性：针对具体关系数据库的约束。</p>\n<h2 id=\"什么是ddl-dml-dcl数据库语言有哪几种\"><a class=\"markdownIt-Anchor\" href=\"#什么是ddl-dml-dcl数据库语言有哪几种\">#</a> 什么是 DDL、DML、DCL？（数据库语言有哪几种？）</h2>\n<p>数据定义语言（DDL）：Create、Drop、Alter<br>\n 数据操纵语言（DML）：Insert、Update、Delete<br>\n 数据控制语言（DCL）：Grant、Revoke<br>\n 数据查询语言：Select</p>\n<h2 id=\"什么是视图有什么作用在数据库哪层\"><a class=\"markdownIt-Anchor\" href=\"#什么是视图有什么作用在数据库哪层\">#</a> 什么是视图，有什么作用？在数据库哪层？</h2>\n<p>视图：是从一个或几个基本表导出的表，是一个虚表，数据库只存放视图的定义，不存放视图对应的数据，数据仍放在原来的基本表，基本表数据改变，通过视图查询也改变了，</p>\n<h2 id=\"简述数据库设计的几个阶段\"><a class=\"markdownIt-Anchor\" href=\"#简述数据库设计的几个阶段\">#</a> 简述数据库设计的几个阶段</h2>\n<ul>\n<li>需求分析：详细调查现实世界要处理的对象，充分了解各种需求，在此基础确定新系统的功能。</li>\n<li>概念结构设计：经常采用自顶向下需求分析，自底向上概念结构设计。对需求分析收集到的数据进行分类组织形成实体、实体的属性，确定实体之间联系，设计分 E-R 图。逐一设计分 E-R 图，最后将所有分 E-R 图综合成一个系统的 E-R 图。</li>\n<li>逻辑结构设计：一般来讲把 E-R 图向关系模型转换，一个实体型转换为一个关系模式。一个一对一联系可以独立也可以和任意一端合并，一个一对多联系可以独立也可以和 N 端对应的关系模式合并，一个多对多联系独立转换为一个关系模式。对数据模型规范化，还根据具体需求设计相应的视图。</li>\n<li>数据库物理设计：关系模式存取方法的选择，比如索引、聚簇、哈希等存储方式。还应该确定数据库的存取结构，目前许多计算机有多个磁盘或磁盘阵列，因此可以将表和索引放在不同的磁盘上，在查询时磁盘驱动器并行工作，可以提高物理 IO 读写效率，也可以将比较大的表放在两个磁盘上，以加快存取速度。</li>\n<li>数据库的实施与维护：比如备份与恢复等待。</li>\n</ul>\n<h2 id=\"什么是e-r图\"><a class=\"markdownIt-Anchor\" href=\"#什么是e-r图\">#</a> 什么是 E-R 图</h2>\n<p>E-R 图：实体 - 联系图，在概念结构设计中，对需求分析收集到的数据进行分类组织，形成实体的属性，确定实体之间联系，设计 E-R 图。</p>\n<h2 id=\"分别解释1nf-2nf-3nf-bcnf-4nf\"><a class=\"markdownIt-Anchor\" href=\"#分别解释1nf-2nf-3nf-bcnf-4nf\">#</a> 分别解释 1NF、2NF、3NF、BCNF、4NF</h2>\n<ul>\n<li>范式：关系数据库中的关系是要满足一定要求的，满足不同程度的要求的为不同范式。</li>\n<li>规范化：一个低一级范式关系模式通过模式分解可以转化为若干个高一级范式的关系模式的集合。</li>\n<li>1NF：满足最低要求的叫第一范式，每一个分量必须是一个不可分的数据项。</li>\n<li>2NF：消除关系中的部分函数依赖就称为第二范式，部分函数依赖就是非主属性不完全依赖于码。</li>\n<li>3NF：每一个非主属性既不部分依赖于码，也不传递依赖于码。</li>\n<li>BCND：所有非主属性对每一个码都是完全函数依赖，没有任何属性完全依赖于非码的任何属性，就是除了码外一定不能有决定因素。</li>\n</ul>\n<h2 id=\"数据库并发控制\"><a class=\"markdownIt-Anchor\" href=\"#数据库并发控制\">#</a> 数据库并发控制</h2>\n<h2 id=\"什么是事务并发控制是保证事物的\"><a class=\"markdownIt-Anchor\" href=\"#什么是事务并发控制是保证事物的\">#</a> 什么是事务，并发控制是保证事物的？</h2>\n<p>事务：是一系列的数据操作，这些操作要么全不做，要么全做，不可分割。运行过程中发生某种故障不能继续执行，全部回滚到开始状态。<br>\n并发控制中多个用户存取数据库时候可能会产生多个事物同时存取同一个数据的情况，不加控制就会破坏事物的一致性，为了保证事物的一致性所以进行并发控制。</p>\n<h2 id=\"acid事务的四个性质\"><a class=\"markdownIt-Anchor\" href=\"#acid事务的四个性质\">#</a> ACID（事务的四个性质）</h2>\n<ul>\n<li>A 原子性：要么都做，要么都不做。</li>\n<li>C 一致性：如果运行中发生故障，必须回滚。不能让数据不一致。比如两人转钱，一半坏了，不一致俩人都没有钱。</li>\n<li>I 隔离性：一个事务不能被其他事物干扰。</li>\n<li>D 持续性：事务一旦提交，他对数据库的改变就应该是永久的。接下来的操作和故障不应该对刚才结果有任何影响。</li>\n</ul>\n<h2 id=\"数据库中锁有什么作用什么是只读锁-什么是只写锁\"><a class=\"markdownIt-Anchor\" href=\"#数据库中锁有什么作用什么是只读锁-什么是只写锁\">#</a> 数据库中锁有什么作用？什么是只读锁、什么是只写锁？</h2>\n<p>一个事物对数据加锁可以保证事物的四个特性，加锁后其他事物不能更新此数据对象，不会产生数据不一致性。<br>\n写锁（排他锁 / X 锁）：加写锁其他事物不能在对这个数据加任何类型锁，释放之前不能读取和修改。<br>\n读锁（共享锁 / S 锁）：事物对数据加读锁，其他事物可以读但不可以修改，可以加读锁不能加写锁。</p>\n<h2 id=\"什么是触发器有什么作用\"><a class=\"markdownIt-Anchor\" href=\"#什么是触发器有什么作用\">#</a> 什么是触发器，有什么作用？</h2>\n<p>用户定义在关系表上的一类由事件驱动的特殊过程，一旦定义了，用户对表的增、删、改操作均有数据库系统自动激活相应触发器<br>\n触发器可以分为语句触发器和行级触发器，触发器动作体是一个匿名 PL/SQL 过程块，语句级触发器可以在语句执行前或后执行，而行级触发在触发器所影响的每一行触发一次。行触发器用户可以用 new 和 old 引用数据，语句级不能。</p>\n<h2 id=\"什么是脏读幻读不可重复读\"><a class=\"markdownIt-Anchor\" href=\"#什么是脏读幻读不可重复读\">#</a> 什么是脏读？幻读？不可重复读？</h2>\n<p>1、脏读：事务 A 读取了事务 B 更新的数据，然后 B 回滚操作，那么 A 读取到的数据是脏数据<br>\n 2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务 A 多次读取的过程中，对数据作了更新并提交，导致事务 A 多次读取同一数据时，结果 不一致。<br>\n3、幻读：系统管理员 A 将数据库中所有学生的成绩从具体分数改为 ABCDE 等级，但是系统管理员 B 就在这个时候插入了一条具体分数的记录，当系统管理员 A 改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。<br>\n不可重复读侧重于修改，幻读侧重于新增或删除（多了或少量行），脏读是一个事务回滚影响另外一个事务。</p>\n<h2 id=\"什么是活锁和死锁解决办法是什么\"><a class=\"markdownIt-Anchor\" href=\"#什么是活锁和死锁解决办法是什么\">#</a> 什么是活锁和死锁？解决办法是什么？</h2>\n<p>1、 活锁：由于系统调度原因，某些事务的加锁请求得不到响应而永远等待下去，称为<br>\n活锁。<br>\n解决办法：采用合理的调度方法，如先来先服务策略。<br>\n2、死锁：两个或多个事务都已封锁了一些数据对象，然后又都请求对方被封锁的数据对象，两个事务永远不能结束，形成死锁。<br>\n预防：一次封锁法：要求每个事务必须一次将所有要使用的事务加锁，否则不能继续执行。<br>\n顺序封锁法：预先对数据对象规定一个封锁顺序，所有事务都按这个顺序实行封锁。<br>\n诊断与解除：超时法：如果一个事务的等待时间超过了规定的时限，就认为发生了死锁。<br>\n等待图法：等待图是一个有向图，正运行的事务表示节点，事务等待的情况表示边，如果图中存在回路，则表示系统中存在回路。</p>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/02/24/C++Study/",
            "url": "https://adventure-yx.github.io/2023/02/24/C++Study/",
            "title": "C++ Study",
            "date_published": "2023-02-24T15:59:16.000Z",
            "content_html": "<h1 id=\"welcome-to-c\"><a class=\"markdownIt-Anchor\" href=\"#welcome-to-c\">#</a> Welcome to C++</h1>\n<p>C++ 融合了 3 种不同的编程方式：</p>\n<ul>\n<li>C 语言代表的过程性语言（procedural）</li>\n<li>C++ 在 C 语言基础上添加的类代表的面向对象语言（OOP，Object Oriented Programming）</li>\n<li>C++ 模板支持的泛型编程（generic programming）</li>\n</ul>\n<p><strong>IDE</strong> : Visual Studio</p>\n<p><strong>解决方案 /solution</strong> : 一个包含多个相关 project 的集合，这些 projects 可以是不同类型的（dll,exe,lib 等）。solution 就是一个工作台，而每个项目就是文件的集合，然后被编译成某种目标二进制文件，无论是库 (library) 还是可执行文件 (excutable)</p>\n<p>使用 <code>C++</code>  的最大原因在于直接控制硬件。用 <code>C++</code>  写的代码，这些代码被送去编译器去编译，这些编译器将代码输出为目标平台的机器码。机器码是你的设备在 CPU 上实际执行的指令。使用 C++ 我们完全可以控制 CPU 执行的每一条指令。</p>\n<p><code>C#</code> 和 <code>JAVA</code>  与 <code>C++</code>  不同，是因为它们运行在虚拟机上，这意味着代码首先被编译成一种中间语言，当在目标平台运行应用程序时，虚拟机在程序运行时再转换成机器码。</p>\n<p><code>C++</code>  是本地语言（native language）。比如 x64 编译器将输出 x64 机器代码，从而（也只能）在 64 位的 CPU 上运行。 <code>C++</code>  编译器为目标平台和架构生成机器码，编译后已经变成了平台上的机器语言，你只需要把机器代码指令放入 CPU，CPU 就会执行这些指令。</p>\n<p>仅仅因为代码是本地的，并不意味着它会很快，垃圾代码甚至可能比虚拟机语言更慢比如 C# 或 JAVA，因为它们倾向于运行时做系统优化。</p>\n<h2 id=\"how-c-works\"><a class=\"markdownIt-Anchor\" href=\"#how-c-works\">#</a> How C++ Works</h2>\n<ol>\n<li>\n<p>预处理：展开头文件、宏替换、去掉注释。</p>\n<p>需要文件：.cpp 文件</p>\n<p>生成产物：预处理文件 (以.i 结尾)</p>\n</li>\n<li>\n<p>编译：检查语法，生成汇编代码。</p>\n<p>需要文件：.i 文件</p>\n<p>生成产物：汇编文件 (以.s 结尾)</p>\n</li>\n<li>\n<p>汇编：把汇编代码转换为二进制的机器码。</p>\n<p>需要文件：.s 文件</p>\n<p>生成产物：机器码 (或称为 “目标代码”，以.obj 结尾)</p>\n</li>\n<li>\n<p>链接：合成可执行的程序，并对声明，在其他目标文件找到对应的定义 (把编译过程中生成的所有对象文件链接起来，还会导入可能使用的其他库。)</p>\n<p>需要文件：.obj 文件及各种动态库 (.so .dll) 或静态库 (.a .lib)</p>\n<p>生成产物：可执行程序 (.exe)</p>\n</li>\n</ol>\n<ul>\n<li>Compile（编译）：通常意味着对当前打开的文件中的代码进行编译。</li>\n<li>Build/Make（建立 / 生成）：通常意味着编译项目中所有源代码文件的代码。一个项目中只有一个文件被修改则只重新编译该文件。</li>\n<li>Build All：通常意味着重新编译所有的源代码文件。</li>\n<li>Link（链接）：将编译后的源代码和所需的库代码组合起来。</li>\n<li>Execute/Run：运行程序，如果没有执行前面的步骤，则会先执行前面的步骤。</li>\n<li>Debug：以步进方式执行程序。</li>\n<li>编译器可能让选择调试版或者发布版，调试版包含额外的代码，提供详细的调试信息。</li>\n</ul>\n<p>声明：这个符号、这个函数是存在的。</p>\n<p>定义：这个函数到底是什么。</p>\n<h2 id=\"how-to-debug-c-in-visual-studio\"><a class=\"markdownIt-Anchor\" href=\"#how-to-debug-c-in-visual-studio\">#</a> How to DEBUG C++ in Visual Studio</h2>\n<p><strong>berakpoints</strong> and <strong>reading memory</strong></p>\n<p>We can pause our program and just take a look at what is going on in its memory.Remember,the memory of a running program is pretty much all it’s got. It’s what every variable is set to. It’s what function will be called next.</p>\n<p><img data-src=\"image-20220123003457216.png\" alt=\"image-20220123003457216\"></p>\n<ul>\n<li>step into (逐语句)  会跳转进相应函数内</li>\n<li>step over (逐过程)  不会跳转</li>\n<li>step out (跳出)</li>\n</ul>\n<h2 id=\"头文件\"><a class=\"markdownIt-Anchor\" href=\"#头文件\">#</a> 头文件</h2>\n<ul>\n<li>\n<p><code>C</code>  标准库和 <code>C++</code>  标准库的区别：有.h 后缀的是 <code>C</code>  标准库， <code>C++</code>  标准库没有</p>\n</li>\n<li>\n<p>头文件（Header Files）通常只包含声明，他们不定义如何实现的东西</p>\n</li>\n<li>\n<p>header guard 文件保护符（防止头文件被包含多次）</p>\n<ul>\n<li>\n<p><code>#pragma once</code>   （常用）</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 头文件语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><code>#include&quot; &quot;</code>  和  <code>#include&lt; &gt;</code></p>\n<ul>\n<li>\n<p>一般来说， <code>#include &lt;&gt;</code>  的查找位置是标准库头文件所在目录，先去系统目录中找头文件，如果没有在到当前目录下找。</p>\n<p><code>#include&lt;iostream&gt;</code></p>\n</li>\n<li>\n<p>一般来说， <code>#include &quot; &quot;</code>  的查找位置是当前源文件所在目录，用于 include 自定义的头文件，让系统优先使用当前目录中定义的。</p>\n<p><code>#include&quot;log.h&quot;</code></p>\n<p>可以用 …/ 返回上一级目录（相对地址）</p>\n<p><code>#include&quot;../log.h&quot;</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"处理数据\"><a class=\"markdownIt-Anchor\" href=\"#处理数据\">#</a> 处理数据</h1>\n<p>存储数据时的 3 种基本属性：</p>\n<ul>\n<li>信息存储在何处</li>\n<li>存储的值是多少</li>\n<li>存储的信息是什么类型的</li>\n</ul>\n<h2 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h2>\n<p>变量允许我们命名我们存储在内存中的数据（data），继续使用它。当创建一个变量时它将被存储在内存中 —— 两个地方：堆和栈。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS93M2Nub3RlL2NwcC1rZXl3b3JkLWludHJvLmh0bWw=\">C++ 的关键字（保留字）完整介绍 | 菜鸟教程 (runoob.com)</span></p>\n<p>在 <code>C++</code>  中不同变量类型之间的唯一区别就是大小 size（这个变量会占用多少内存）。这实际上是这些原始数据类型之间的唯一区别。</p>\n<p>数据类型的实际大小取决于编译器 —— 不同的编译器会有不同。由编译器确定类型的大小。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>位</th>\n<th>范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td>1 byte</td>\n<td>-128 到 127 或者 0 到 255</td>\n</tr>\n<tr>\n<td>short (int)</td>\n<td>2 byte</td>\n<td>-32768 到 32767</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4 byte</td>\n<td>-2147483648 到 2147483647</td>\n</tr>\n<tr>\n<td>long (int)</td>\n<td>4 byte</td>\n<td>-2147483648 到 2147483647</td>\n</tr>\n<tr>\n<td>long long (int)</td>\n<td>8 byte</td>\n<td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4 byte</td>\n<td>精度型占 4 个字节（32 位）内存空间，+/- 3.4e +/- 38 (~7 个数字)</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8 byte</td>\n<td>双精度型占 8 个字节（64 位）内存空间，+/- 1.7e +/- 308 (~15 个数字)</td>\n</tr>\n<tr>\n<td>long double</td>\n<td>16 byte</td>\n<td>长双精度型 16 个字节（128 位）内存空间，可提供 18-19 位有效数字。</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>1 byte</td>\n<td>实际只占用 1bit（可以将 8 个 bools 存在一个 byte 里面，比如 bitset）</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>一些基本类型可以使用一个或多个类型修饰符进行修饰：</p>\n<ul>\n<li>signed</li>\n<li>unsigned（可以将 unsigned 添加到上述常用 5 个类型的任何一个，它会移除符号位，可以设置一个更大的数字。）</li>\n<li>short</li>\n<li>long</li>\n</ul>\n</li>\n<li>\n<p>float 和 double 定义：</p>\n<p>有一个 f 在后面才声明这是一个浮点数：</p>\n</li>\n</ul>\n<p><img data-src=\"image-20220120000333571.png\" alt=\"image-20220120000333571\"></p>\n<p><img data-src=\"image-20220120000357730.png\" alt=\"image-20220120000357730\"></p>\n<ul>\n<li>操作符 sizeof，输出类型占用字节数，sizeof (bool) 就会打印出 1，表示 bool 占用一个字节。</li>\n<li>C++ 也允许定义各种其他类型的变量，比如<strong>枚举、指针、数组、引用、数据结构、类</strong>等等</li>\n</ul>\n<h2 id=\"常量\"><a class=\"markdownIt-Anchor\" href=\"#常量\">#</a> 常量</h2>\n<p>常量是固定值，在程序执行期间不会改变。这些固定的值，又叫做<strong>字面量</strong>。</p>\n<p>常量可以是任何的基本数据类型，可分为整型数字、浮点数字、字符、字符串和布尔值。</p>\n<p>常量就像是常规的变量，只不过常量的值在定义后不能进行修改。</p>\n<ul>\n<li>\n<p>整数常量</p>\n<p>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。</p>\n<p>整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意。</p>\n</li>\n<li>\n<p>浮点常量</p>\n</li>\n<li>\n<p>布尔常量</p>\n<p>布尔常量共有两个，它们都是标准的 C++ 关键字：</p>\n<ul>\n<li><strong>true</strong> 值代表真。</li>\n<li><strong>false</strong> 值代表假。</li>\n</ul>\n</li>\n<li>\n<p>字符常量</p>\n<p>字符常量是括在单引号中。如果常量以 L（仅当大写时）开头，则表示它是一个宽字符常量（例如 L’x’），此时它必须存储在 <strong>wchar_t</strong> 类型的变量中。否则，它就是一个窄字符常量（例如 ‘x’），此时它可以存储在 <strong>char</strong> 类型的简单变量中。</p>\n<p>字符常量可以是一个普通的字符（例如 ‘x’）、一个转义序列（例如 ‘\\t’），或一个通用的字符（例如 ‘\\u02C0’）。</p>\n<p>在 C++ 中，有一些特定的字符，当它们前面有反斜杠时，它们就具有特殊的含义，被用来表示如换行符（\\n）或制表符（\\t）等。下表列出了一些这样的转义序列码：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">转义序列</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">\\\\</td>\n<td style=\"text-align:left\">\\ 字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\’</td>\n<td style=\"text-align:left\">’ 字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\&quot;</td>\n<td style=\"text-align:left\">&quot; 字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">? 字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\a</td>\n<td style=\"text-align:left\">警报铃声</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">退格键</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td style=\"text-align:left\">换页符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">换行符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:left\">回车</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:left\">水平制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td style=\"text-align:left\">垂直制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\ooo</td>\n<td style=\"text-align:left\">一到三位的八进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\xhh . . .</td>\n<td style=\"text-align:left\">一个或多个数字的十六进制数</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>字符串常量</p>\n<p>字符串字面值或常量是括在双引号 <strong>“”</strong> 中的。一个字符串包含类似于字符常量的字符：普通的字符、转义序列和通用的字符。</p>\n<p>您可以使用 *<em>*</em> 做分隔符，把一个很长的字符串常量进行分行。</p>\n</li>\n</ul>\n<p><strong>定义常量</strong></p>\n<p>在 C++ 中，有两种简单的定义常量的方式：</p>\n<ul>\n<li>使用 <strong>#define</strong> 预处理器。</li>\n<li>使用 <strong>const</strong> 关键字。</li>\n</ul>\n<h2 id=\"左值和右值\"><a class=\"markdownIt-Anchor\" href=\"#左值和右值\">#</a> 左值和右值</h2>\n<p>C++ 中有两种类型的表达式：</p>\n<ul>\n<li>** 左值（lvalue）：** 指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li>\n<li>** 右值（rvalue）：** 术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li>\n</ul>\n<p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。下面是一个有效的语句：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> g <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是下面这个就不是一个有效的语句，会生成编译时错误：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"类型限定符\"><a class=\"markdownIt-Anchor\" href=\"#类型限定符\">#</a> 类型限定符</h2>\n<p>类型限定符提供了变量的额外信息，用于在定义变量或函数时改变它们的默认行为的关键字。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">限定符</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">const</td>\n<td style=\"text-align:left\"><strong>const</strong> 定义常量，表示该变量的值不能被修改。。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">volatile</td>\n<td style=\"text-align:left\">修饰符 <strong>volatile</strong> 告诉该变量的值可能会被程序以外的因素改变，如硬件或其他线程。。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">restrict</td>\n<td style=\"text-align:left\">由 <strong>restrict</strong> 修饰的指针是唯一一种访问它所指向的对象的方式。只有 C99 增加了新的类型限定符 restrict。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mutable</td>\n<td style=\"text-align:left\">表示类中的成员变量可以在 const 成员函数中被修改。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">static</td>\n<td style=\"text-align:left\">用于定义静态变量，表示该变量的作用域仅限于当前文件或当前函数内，不会被其他文件或函数访问。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">register</td>\n<td style=\"text-align:left\">用于定义寄存器变量，表示该变量被频繁使用，可以存储在 CPU 的寄存器中，以提高程序的运行效率。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"存储类\"><a class=\"markdownIt-Anchor\" href=\"#存储类\">#</a> 存储类</h2>\n<p>存储类定义 C++ 程序中变量 / 函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C++ 程序中可用的存储类：</p>\n<ul>\n<li>auto</li>\n<li>register</li>\n<li>static</li>\n<li>extern</li>\n<li>mutable</li>\n<li>thread_local (C++11)</li>\n</ul>\n<p>从 C++ 17 开始，auto 关键字不再是 C++ 存储类说明符，且 register 关键字被弃用。</p>\n<p><strong>auto 存储类</strong></p>\n<p>自  <code>C++ 11</code>  以来，<strong>auto</strong> 关键字用于两种情况：声明变量时根据初始化表达式自动推断该变量的类型、声明函数时函数返回值的占位符。</p>\n<p><code>C++ 98</code>  标准中 auto 关键字用于自动变量的声明，但由于使用极少且多余，在  <code>C++ 17</code>  中已删除这一用法。</p>\n<p>根据初始化表达式自动推断被声明的变量的类型，如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> f<span class=\"token operator\">=</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//double </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//const char* </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> z <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">auto</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// int* </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">auto</span> x1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> x2 <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span> x3<span class=\"token operator\">=</span><span class=\"token char\">'r'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 错误，必须是初始化为同一类型</span></pre></td></tr></table></figure><p><strong>register 存储类</strong></p>\n<p><strong>register</strong> 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span>  miles<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 ‘register’ 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p>\n<p><strong>static 存储类</strong></p>\n<p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p>\n<p>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p>\n<p>在 C++ 中，当 static 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 函数声明 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 全局变量 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 函数定义</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 局部静态变量</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"变量 i 为 \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" , 变量 count 为 \"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>变量 i 为 <span class=\"token number\">6</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>变量 i 为 <span class=\"token number\">7</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>变量 i 为 <span class=\"token number\">8</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>变量 i 为 <span class=\"token number\">9</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>变量 i 为 <span class=\"token number\">10</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>变量 i 为 <span class=\"token number\">11</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>变量 i 为 <span class=\"token number\">12</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>变量 i 为 <span class=\"token number\">13</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>变量 i 为 <span class=\"token number\">14</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>变量 i 为 <span class=\"token number\">15</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">0</span></pre></td></tr></table></figure><p><strong>extern 存储类</strong></p>\n<p><strong>extern</strong> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 ‘extern’ 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p>\n<p>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。</p>\n<p>extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，如下所示：</p>\n<p>第一个文件：main.cpp</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> count <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write_extern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   count <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token function\">write_extern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第二个文件：support.cpp</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">write_extern</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Count is \"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在这里，第二个文件中的 <em>extern</em> 关键字用于声明已经在第一个文件 main.cpp 中定义的 count。现在 ，编译这两个文件，如下所示：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ g++ main.cpp support.cpp <span class=\"token parameter variable\">-o</span> <span class=\"token function\">write</span></pre></td></tr></table></figure><p>这会产生 <strong>write</strong> 可执行程序，尝试执行 <strong>write</strong>，它会产生下列结果：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ./write</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Count is <span class=\"token number\">5</span></pre></td></tr></table></figure><p><strong>mutable 存储类</strong></p>\n<p><strong>mutable</strong> 说明符仅适用于类的对象，这将在本教程的最后进行讲解。它允许对象的成员替代常量。也就是说，mutable 成员可以通过 const 成员函数修改。</p>\n<p><strong>thread_local 存储类</strong></p>\n<p>使用 thread_local 说明符声明的变量仅可在它在其上创建的线程上访问。 变量在创建线程时创建，并在销毁线程时销毁。 每个线程都有其自己的变量副本。</p>\n<p>thread_local 说明符可以与 static 或 extern 合并。</p>\n<p>可以将 thread_local 仅应用于数据声明和定义，thread_local 不能用于函数声明或定义。</p>\n<p>以下演示了可以被声明为 thread_local 的变量：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">thread_local</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 命名空间下的全局变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">thread_local</span> std<span class=\"token double-colon punctuation\">::</span>string s<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类的 static 成员变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">thread_local</span> std<span class=\"token double-colon punctuation\">::</span>string X<span class=\"token double-colon punctuation\">::</span>s<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// X::s 是需要定义的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">thread_local</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 本地变量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"复合类型\"><a class=\"markdownIt-Anchor\" href=\"#复合类型\">#</a> 复合类型</h1>\n<h2 id=\"数组array\"><a class=\"markdownIt-Anchor\" href=\"#数组array\">#</a> 数组（array）</h2>\n<p>存储一个固定大小的相同类型元素的顺序集合。</p>\n<h2 id=\"字符串string\"><a class=\"markdownIt-Anchor\" href=\"#字符串string\">#</a> 字符串（string）</h2>\n<p>字符串实际上是使用  <code>null</code>  字符  <code>\\0</code>  终止的一维字符数组。</p>\n<p>C++ 提供了以下两种类型的字符串表示形式：</p>\n<ul>\n<li>C-style 字符串  <code> #include &lt;cstring&gt;</code></li>\n<li>C++ 引入的 string 类类型  <code> #include &lt;string&gt;</code></li>\n</ul>\n<h2 id=\"结构体struct\"><a class=\"markdownIt-Anchor\" href=\"#结构体struct\">#</a> 结构体（struct）</h2>\n<p>存储不同的数据类型。（int, float 和 double）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">inflatable</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">float</span> volume<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"共用体union\"><a class=\"markdownIt-Anchor\" href=\"#共用体union\">#</a> 共用体（union）</h2>\n<p>存储不同的数据类型，但只能同时存储一种。（int 或 float 或 double）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> one4all</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> int_val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">long</span> long_val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">double</span> double_val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"枚举enum\"><a class=\"markdownIt-Anchor\" href=\"#枚举enum\">#</a> 枚举（enum）</h2>\n<p>枚举类型 (enumeration) 是 C++ 中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。</p>\n<p>如果一个变量只有几种可能的值，可以定义为枚举 (enumeration) 类型。所谓 &quot;枚举&quot; 是指将变量的值一一列举出来，变量的值只能在列举出来的值的范围内。</p>\n<p>创建枚举，需要使用关键字 <strong>enum</strong>。枚举类型的一般形式为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> 枚举名<span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     标识符<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span>整型常数<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     标识符<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span>整型常数<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     标识符<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span>整型常数<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> 枚举变量<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果枚举没有初始化，即省掉 &quot;= 整型常数&quot; 时，则从第一个标识符开始。</p>\n<p>例如，下面的代码定义了一个颜色枚举，变量 c 的类型为 color。最后，c 被赋值为 “blue”。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color</span> <span class=\"token punctuation\">&#123;</span> red<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">,</span> blue <span class=\"token punctuation\">&#125;</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>c <span class=\"token operator\">=</span> blue<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>默认情况下，第一个名称的值为 0，第二个名称的值为 1，第三个名称的值为 2，以此类推。但是，您也可以给名称赋予一个特殊的值，只需要添加一个初始值即可。例如，在下面的枚举中，<strong>green</strong> 的值为 5。</p>\n<pre><code>enum color &#123; red, green=5, blue &#125;;\n</code></pre>\n<p>在这里，<strong>blue</strong> 的值为 6，因为默认情况下，每个名称都会比它前面一个名称大 1，但 red 的值依然为 0。</p>\n<h2 id=\"指针\"><a class=\"markdownIt-Anchor\" href=\"#指针\">#</a> 指针</h2>\n<p>指针（Pointers）对管理和操作内存至关重要，因为我们在代码中做的每件事，都是从内存中读取或者写入内存。</p>\n<ul>\n<li><code>&amp;</code>  地址运算符：作用于变量，获得变量地址。</li>\n<li><code> *</code>  解除引用运算符 / 间接值运算符：作用于指针，获取该地址处存储的值。</li>\n</ul>\n<p>指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，必须在使用指针存储其他变量地址之前，对其进行声明。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">int</span>  var <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 实际变量的声明</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">int</span>  <span class=\"token operator\">*</span>ip<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 指针变量的声明</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   ip <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>var<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 在指针变量中存储 var 的地址</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of var variable: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> var <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// 输出在指针变量中存储的地址</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Address stored in ip variable: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> ip <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\">// 访问指针中地址的值，通过使用一元运算符 * 来返回位于操作数所指定地址的变量的值。</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of *ip variable: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>ip <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 输出:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Value of var variable<span class=\"token operator\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Address stored in ip variable<span class=\"token operator\">:</span> <span class=\"token number\">0xbfc601ac</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Value of <span class=\"token operator\">*</span>ip variable<span class=\"token operator\">:</span> <span class=\"token number\">20</span></pre></td></tr></table></figure><h3 id=\"new\"><a class=\"markdownIt-Anchor\" href=\"#new\">#</a> new</h3>\n<p><code>int *pn = new int;</code>  运算符 <code>new</code>  根据类型来确定需要多少字节的内存，然后找到这样的内存并返回其地址。然后将地址赋给 <code>pn</code> ， <code>pn</code>  是被声明为指向 <code>int</code>  的指针。</p>\n<p>常规变量声明分配在栈（stack）的内存区域中；而 new 分配在堆（heap）或自由存储区（free store）</p>\n<h3 id=\"delete\"><a class=\"markdownIt-Anchor\" href=\"#delete\">#</a> delete</h3>\n<p>一定要配对的使用 <code>new</code>  和 <code>delete</code> ，否则将发生内存泄漏（memory leak）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//allocate memory with new</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\t\t\t\t <span class=\"token comment\">//use the memory</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span>\t\t  <span class=\"token comment\">//free memory with delete when done</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 使用 new 创建动态数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//get a block of 10 ints</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ps<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//free a ddynamic array</span></pre></td></tr></table></figure><h3 id=\"指针与数组\"><a class=\"markdownIt-Anchor\" href=\"#指针与数组\">#</a> 指针与数组</h3>\n<p>C++ 将数组名解释为数组第一个元素的地址</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> wages<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1000.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000.0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> wages<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//wages = &amp;wages[0] = address of first element of array</span></pre></td></tr></table></figure><h2 id=\"引用\"><a class=\"markdownIt-Anchor\" href=\"#引用\">#</a> 引用</h2>\n<p>引用（References）和指针的不同：</p>\n<ul>\n<li>不存在空引用。引用必须连接到一块合法的内存。</li>\n<li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li>\n<li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li>\n</ul>\n<p>引用只是其他变量的一个别名（alias）</p>\n<p>引用只在定义时绑定，如果在定义后将变量赋值给引用，则不会重新绑定，而只是赋值。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 声明简单的变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">int</span>    i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">double</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 声明引用变量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span>    r <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> s <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of i : \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of i reference : \"</span> <span class=\"token operator\">&lt;&lt;</span> r  <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   d <span class=\"token operator\">=</span> <span class=\"token number\">11.7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of d : \"</span> <span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of d reference : \"</span> <span class=\"token operator\">&lt;&lt;</span> s  <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Value of i <span class=\"token operator\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Value of i reference <span class=\"token operator\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Value of d <span class=\"token operator\">:</span> <span class=\"token number\">11.7</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Value of d reference <span class=\"token operator\">:</span> <span class=\"token number\">11.7</span></pre></td></tr></table></figure><p>用指针来实现引用调用函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>用引用来实现引用调用函数。通过使用引用来替代指针，会使  <code>C++</code>  程序更容易阅读和维护。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>把引用作为返回值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">double</span> vals<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50.0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> <span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> ref <span class=\"token operator\">=</span> vals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">return</span> ref<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 返回第 i 个元素的引用，ref 是一个引用变量，ref 引用 vals [i]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 要调用上面定义函数的主函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"改变前的值\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"vals[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] = \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       cout <span class=\"token operator\">&lt;&lt;</span> vals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">20.23</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 改变第 2 个元素</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">70.8</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 改变第 4 个元素</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"改变后的值\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"vals[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] = \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       cout <span class=\"token operator\">&lt;&lt;</span> vals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"循环语句\"><a class=\"markdownIt-Anchor\" href=\"#循环语句\">#</a> 循环语句</h1>\n<p>Loops in C++</p>\n<ul>\n<li>\n<p>whlie 循环</p>\n<p>当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>for 循环</p>\n<p>for 循环允许编写一个执行特定次数的循环的重复控制结构。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> init<span class=\"token punctuation\">;</span> condition<span class=\"token punctuation\">;</span> increment <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>do…while… 循环</p>\n<p>除了它是在循环主体结尾测试条件外，其他与 while 语句类似，但是 do…while 循环会确保至少执行一次循环。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> condition <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"判断语句\"><a class=\"markdownIt-Anchor\" href=\"#判断语句\">#</a> 判断语句</h1>\n<p>Conditions and Branches in C++</p>\n<ul>\n<li>\n<p>if…else…</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>boolean_expression<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 如果布尔表达式为真将执行的语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">// 如果布尔表达式为假将执行的语句</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>switch</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">case</span> constant<span class=\"token operator\">-</span>expression  <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可选的</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">case</span> constant<span class=\"token operator\">-</span>expression  <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可选的</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 可以有任意数量的 case 语句</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token operator\">:</span> <span class=\"token comment\">// 可选的</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>条件运算符？:</p>\n<p>可以用来替代 <strong>if…else</strong> 语句</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   var <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   var <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 条件运算符形式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>var <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">30</span> <span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>控制流 (Control Flow in C++)</p>\n<ul>\n<li>\n<p>break</p>\n<p>当 break 语句出现在一个循环内时，循环会立即终止，且程序流将继续执行<strong>紧接着循环的下一条语句</strong>。如果您使用的是嵌套循环（即一个循环内嵌套另一个循环），break 语句会停止执行最内层的循环，然后开始执行该块之后的下一行代码。它也可用于终止 switch 语句中的一个 case。</p>\n</li>\n<li>\n<p>continue</p>\n<p>continue 会跳过当前循环中的代码，强迫开始下一次循环。</p>\n<p>对于 for 循环，continue 语句会导致执行条件测试和循环增量部分。对于 while 和 do…while 循环，continue 语句会导致程序控制回到条件测试上。</p>\n</li>\n<li>\n<p>return</p>\n<p>没必要在循环内使用，可在代码内任何位置使用，return 之后的语句都不会执行。</p>\n</li>\n</ul>\n<h1 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h1>\n<p>函数（Functions）是一组一起执行一个任务的语句。每个 C++ 程序都至少有一个函数，即主函数 <strong>main()</strong></p>\n<p>应当需要一点经验来意识到<strong>什么时候需要一个函数</strong>，如果正在多次做一个常见的任务，那么为他创建一个函数。</p>\n<p>函数的主要目的是<strong>防止代码重复</strong>，我们不希望只是到处复制和粘贴代码。</p>\n<p>函数就是我们写的代码块，被设计为用来执行特定的任务。在 class 中这些代码块则被称为方法 method。这里所说函数单独指类外的。</p>\n<p>每次调用函数，编译器生成一个 call 指令（类外的，因此没有什么动态绑定，也暂时不考虑内联）。这基本上意义着，在一个运行的程序中，为了调用一个函数，我们需要创建一个堆栈结构，这意味着我们必须把像参数这样的东西推进堆栈。我们还需要一个叫做返回地址的东西压入堆栈。然后我们要做的是跳到二进制执行文件的不同部分，以便开始执行我们的函数指令。</p>\n<p>为了将 push 进去的结果返回，然后我们得回去到最初调用函数之前。跳跃和执行这些都需要时间，所以它会减慢我们的程序。</p>\n<p>而对于 main 函数，返回值是 int，并且只有 main 函数可以不 return—— 它会自动假设返回 0.（这是现代 C 和 C++ 的一个特性）</p>\n<p><strong>定义函数</strong></p>\n<p>C++ 中的函数定义的一般形式如下：</p>\n<p body=\"\" of=\"\" the=\"\" function=\"\">return_type function_name( parameter list )</p>\n<p>在 C++ 中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p>\n<ul>\n<li>返回类型：一个函数可以返回一个值。<strong>return_type</strong> 是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type 是关键字 <strong>void</strong>。</li>\n<li>函数名称：这是函数的实际名称。函数名和参数列表一起构成了函数签名。</li>\n<li>参数：参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数。</li>\n<li>函数主体：函数主体包含一组定义函数执行任务的语句。</li>\n</ul>\n<p><strong>函数参数</strong></p>\n<p>如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的<strong>形式参数</strong>。</p>\n<p>形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。</p>\n<p>当调用函数时，有三种向函数传递参数的方式：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">调用类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">传值调用</td>\n<td style=\"text-align:left\">该方法把参数的实际值赋值给函数的形式参数。在这种情况下，修改函数内的形式参数对实际参数没有影响。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">指针调用</td>\n<td style=\"text-align:left\">该方法把参数的地址赋值给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">引用调用</td>\n<td style=\"text-align:left\">该方法把参数的引用赋值给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>\n</tr>\n</tbody>\n</table>\n<p>默认情况下，C++ 使用<strong>传值调用</strong>来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的参数。</p>\n<p><strong>Lambda 函数与表达式</strong></p>\n<hr>\n<h1 id=\"类对象\"><a class=\"markdownIt-Anchor\" href=\"#类对象\">#</a> 类 &amp; 对象</h1>\n<p>类用于指定对象的形式，它包含了数据表示法和用于处理数据的方法。</p>\n<p>C++ 类定义</p>\n<p><img data-src=\"cpp-classes-objects-2020-12-10-11.png\" alt=\"img\"></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">double</span> length<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 长度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">double</span> breadth<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 宽度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">double</span> height<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 高度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// 成员函数声明</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">double</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> bre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> hei <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 成员函数定义</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token class-name\">Box</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> length <span class=\"token operator\">*</span> breadth <span class=\"token operator\">*</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Box</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> bre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> hei<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    length <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    breadth <span class=\"token operator\">=</span> bre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    height <span class=\"token operator\">=</span> hei<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   Box Box1<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 声明 Box1，类型为 Box</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   Box Box2<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 声明 Box2，类型为 Box</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   Box Box3<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 声明 Box3，类型为 Box</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">double</span> volume <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 用于存储体积</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token comment\">//box 1 详述</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   Box1<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   Box1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">6.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   Box1<span class=\"token punctuation\">.</span>breadth <span class=\"token operator\">=</span> <span class=\"token number\">7.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token comment\">//box 2 详述</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   Box2<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   Box2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">12.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   Box2<span class=\"token punctuation\">.</span>breadth <span class=\"token operator\">=</span> <span class=\"token number\">13.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token comment\">//box 1 的体积</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   volume <span class=\"token operator\">=</span> Box1<span class=\"token punctuation\">.</span>height <span class=\"token operator\">*</span> Box1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> Box1<span class=\"token punctuation\">.</span>breadth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Box1 的体积：\"</span> <span class=\"token operator\">&lt;&lt;</span> volume <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   <span class=\"token comment\">//box 2 的体积</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   volume <span class=\"token operator\">=</span> Box2<span class=\"token punctuation\">.</span>height <span class=\"token operator\">*</span> Box2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> Box2<span class=\"token punctuation\">.</span>breadth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Box2 的体积：\"</span> <span class=\"token operator\">&lt;&lt;</span> volume <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre> </pre></td></tr><tr><td data-num=\"52\"></td><td><pre> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   <span class=\"token comment\">//box 3 详述</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   Box3<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">16.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   volume <span class=\"token operator\">=</span> Box3<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Box3 的体积：\"</span> <span class=\"token operator\">&lt;&lt;</span> volume <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>类成员函数</th>\n<th>类的成员函数是指那些把定义和原型写在类定义内部的函数，就像类定义中的其他变量一样。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类访问修饰符</td>\n<td>类成员可以被定义为 public、private 或 protected。默认情况下是定义为 private。</td>\n</tr>\n<tr>\n<td>构造函数 &amp; 析构函数</td>\n<td>类的构造函数是一种特殊的函数，在创建一个新的对象时调用。类的析构函数也是一种特殊的函数，在删除所创建的对象时调用。</td>\n</tr>\n<tr>\n<td>C++ 拷贝构造函数</td>\n<td>拷贝构造函数，是一种特殊的构造函数，它在创建对象时，是使用同一类中之前创建的对象来初始化新创建的对象。</td>\n</tr>\n<tr>\n<td>C++ 友元函数</td>\n<td><strong>友元函数</strong>可以访问类的 private 和 protected 成员。</td>\n</tr>\n<tr>\n<td>C++ 内联函数</td>\n<td>通过内联函数，编译器试图在调用函数的地方扩展函数体中的代码。</td>\n</tr>\n<tr>\n<td>C++ 中的 this 指针</td>\n<td>每个对象都有一个特殊的指针 <strong>this</strong>，它指向对象本身。</td>\n</tr>\n<tr>\n<td>C++ 中指向类的指针</td>\n<td>指向类的指针方式如同指向结构的指针。实际上，类可以看成是一个带有函数的结构。</td>\n</tr>\n<tr>\n<td>C++ 类的静态成员</td>\n<td>类的数据成员和函数成员都可以被声明为静态的。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\">#</a> 继承</h1>\n<p>继承允许我们依据另一个类来定义一个类，这使得创建和维护一个应用程序变得更容易。这样做，也达到了重用代码功能和提高执行效率的效果。</p>\n<p>当创建一个类时，您不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为<strong>基类</strong>，新建的类称为<strong>派生类</strong>。</p>\n<p><img data-src=\"cpp-inheritance-2020-12-15-1.png\" alt=\"img\"></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 基类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//eat () 函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//sleep () 函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 派生类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//bark () 函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一个类可以派生自多个类，这意味着，它可以从多个基类继承数据和函数。定义一个派生类，我们使用一个类派生列表来指定基类。类派生列表以一个或多个基类命名，形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">derived</span><span class=\"token operator\">-</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> access<span class=\"token operator\">-</span>specifier base<span class=\"token operator\">-</span><span class=\"token keyword\">class</span></pre></td></tr></table></figure><p>其中，访问修饰符 access-specifier 是 <strong>public、protected</strong> 或 <strong>private</strong> 其中的一个，base-class 是之前定义过的某个类的名称。如果未使用访问修饰符 access-specifier，则默认为 private。</p>\n<p>举例</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 基类</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         width <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         height <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 派生类</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Shape</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">int</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   Rectangle Rect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   Rect<span class=\"token punctuation\">.</span><span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   Rect<span class=\"token punctuation\">.</span><span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token comment\">// 输出对象的面积</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Total area: \"</span> <span class=\"token operator\">&lt;&lt;</span> Rect<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">//Total area: 35</span></pre></td></tr></table></figure><h2 id=\"访问控制和继承\"><a class=\"markdownIt-Anchor\" href=\"#访问控制和继承\">#</a> 访问控制和继承</h2>\n<p>派生类可以访问基类中所有的非私有成员。因此基类成员如果不想被派生类的成员函数访问，则应在基类中声明为 private。</p>\n<p>我们可以根据访问权限总结出不同的访问类型，如下所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">访问</th>\n<th style=\"text-align:left\">public</th>\n<th style=\"text-align:left\">protected</th>\n<th style=\"text-align:left\">private</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">同一个类</td>\n<td style=\"text-align:left\">yes</td>\n<td style=\"text-align:left\">yes</td>\n<td style=\"text-align:left\">yes</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">派生类</td>\n<td style=\"text-align:left\">yes</td>\n<td style=\"text-align:left\">yes</td>\n<td style=\"text-align:left\">no</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">外部的类</td>\n<td style=\"text-align:left\">yes</td>\n<td style=\"text-align:left\">no</td>\n<td style=\"text-align:left\">no</td>\n</tr>\n</tbody>\n</table>\n<p>一个派生类继承了所有的基类方法，但下列情况除外：</p>\n<ul>\n<li>基类的构造函数、析构函数和拷贝构造函数。</li>\n<li>基类的重载运算符。</li>\n<li>基类的友元函数。</li>\n</ul>\n<p><strong>继承类型</strong></p>\n<p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p>\n<p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p>\n<ul>\n<li><strong>公有继承（public）：<strong>当一个类派生自</strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，<strong>基类的私有成员不能直接被派生类访问，但是可以通过调用基类的公有和保护成员来访问</strong>。</li>\n<li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li>\n<li><strong>私有继承（private）：<strong>当一个类派生自</strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li>\n</ul>\n<h2 id=\"多继承\"><a class=\"markdownIt-Anchor\" href=\"#多继承\">#</a> 多继承</h2>\n<p>多继承即一个子类可以有多个父类，它继承了多个父类的特性。</p>\n<p>C++ 类可以从多个类继承成员，语法如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>派生类名<span class=\"token operator\">></span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span>继承方式<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>基类名<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span>继承方式<span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>基类名<span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>…</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>派生类类体<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>实例</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 基类 Shape</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         width <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         height <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 基类 PaintCost</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PaintCost</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">int</span> <span class=\"token function\">getCost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> area<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         <span class=\"token keyword\">return</span> area <span class=\"token operator\">*</span> <span class=\"token number\">70</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 派生类</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">PaintCost</span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">int</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   Rectangle Rect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   <span class=\"token keyword\">int</span> area<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre> </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   Rect<span class=\"token punctuation\">.</span><span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   Rect<span class=\"token punctuation\">.</span><span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   area <span class=\"token operator\">=</span> Rect<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   <span class=\"token comment\">// 输出对象的面积</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Total area: \"</span> <span class=\"token operator\">&lt;&lt;</span> Rect<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   <span class=\"token comment\">// 输出总花费</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Total paint cost: $\"</span> <span class=\"token operator\">&lt;&lt;</span> Rect<span class=\"token punctuation\">.</span><span class=\"token function\">getCost</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre> </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">//Total area: 35</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">//Total paint cost: $2450</span></pre></td></tr></table></figure><h1 id=\"重载\"><a class=\"markdownIt-Anchor\" href=\"#重载\">#</a> 重载</h1>\n<p>C++ 允许在同一作用域中的某个<strong>函数</strong>和<strong>运算符</strong>指定多个定义，分别称为<strong>函数重载</strong>和<strong>运算符重载</strong>。</p>\n<p>重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有<strong>相同名称的声明</strong>，但是它们的<strong>参数列表和定义（实现）不相同</strong>。</p>\n<p>当您调用一个<strong>重载函数</strong>或<strong>重载运算符</strong>时，编译器通过把您所使用的参数类型与定义中的参数类型进行比较，决定选用最合适的定义。</p>\n<h2 id=\"c-中的函数重载\"><a class=\"markdownIt-Anchor\" href=\"#c-中的函数重载\">#</a> C++ 中的函数重载</h2>\n<p>在同一个作用域内，可以声明几个功能类似的<strong>同名函数</strong>，但是这些<strong>同名函数的形式参数</strong>（指参数的个数、类型或者顺序）<strong>必须不同</strong>。您不能仅通过返回类型的不同来重载函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">printData</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"整数为: \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span>  f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"浮点数为: \"</span> <span class=\"token operator\">&lt;&lt;</span> f <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"字符串为: \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   printData pd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token comment\">// 输出整数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   pd<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token comment\">// 输出浮点数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   pd<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">500.263</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token comment\">// 输出字符串</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello C++\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   pd<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 整数为: 5</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 浮点数为: 500.263</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 字符串为: Hello C++</span></pre></td></tr></table></figure><h2 id=\"c-中的运算符重载\"><a class=\"markdownIt-Anchor\" href=\"#c-中的运算符重载\">#</a> C++ 中的运算符重载</h2>\n<p>重载的运算符是<strong>带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的</strong>。与其他函数一样，重载运算符有一个返回类型和一个参数列表。</p>\n<p>声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Box <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Box<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 类的成员函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Box <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Box<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Box<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 普通非成员函数</span></pre></td></tr></table></figure><p>实例</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">double</span> <span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token keyword\">return</span> length <span class=\"token operator\">*</span> breadth <span class=\"token operator\">*</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">setLength</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> len <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          length <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">setBreadth</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> bre <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          breadth <span class=\"token operator\">=</span> bre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> hei <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          height <span class=\"token operator\">=</span> hei<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\">// 重载 + 运算符，用于把两个 Box 对象相加</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      Box <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Box<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         Box box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         box<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>length <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         box<span class=\"token punctuation\">.</span>breadth <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>breadth <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>breadth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         box<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>height <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         <span class=\"token keyword\">return</span> box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">double</span> length<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 长度</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">double</span> breadth<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 宽度</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">double</span> height<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 高度</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 程序的主函数</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   Box Box1<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 声明 Box1，类型为 Box</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   Box Box2<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 声明 Box2，类型为 Box</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   Box Box3<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 声明 Box3，类型为 Box</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   <span class=\"token keyword\">double</span> volume <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 把体积存储在该变量中</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   <span class=\"token comment\">// Box1 详述</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   Box1<span class=\"token punctuation\">.</span><span class=\"token function\">setLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   Box1<span class=\"token punctuation\">.</span><span class=\"token function\">setBreadth</span><span class=\"token punctuation\">(</span><span class=\"token number\">7.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   Box1<span class=\"token punctuation\">.</span><span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   <span class=\"token comment\">// Box2 详述</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   Box2<span class=\"token punctuation\">.</span><span class=\"token function\">setLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">12.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   Box2<span class=\"token punctuation\">.</span><span class=\"token function\">setBreadth</span><span class=\"token punctuation\">(</span><span class=\"token number\">13.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   Box2<span class=\"token punctuation\">.</span><span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre> </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   <span class=\"token comment\">// Box1 的体积</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   volume <span class=\"token operator\">=</span> Box1<span class=\"token punctuation\">.</span><span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Volume of Box1 : \"</span> <span class=\"token operator\">&lt;&lt;</span> volume <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre> </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   <span class=\"token comment\">// Box2 的体积</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   volume <span class=\"token operator\">=</span> Box2<span class=\"token punctuation\">.</span><span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Volume of Box2 : \"</span> <span class=\"token operator\">&lt;&lt;</span> volume <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre> </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   <span class=\"token comment\">// 把两个对象相加，得到 Box3</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   Box3 <span class=\"token operator\">=</span> Box1 <span class=\"token operator\">+</span> Box2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre> </pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   <span class=\"token comment\">// Box3 的体积</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   volume <span class=\"token operator\">=</span> Box3<span class=\"token punctuation\">.</span><span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Volume of Box3 : \"</span> <span class=\"token operator\">&lt;&lt;</span> volume <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre> </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">//Volume of Box1 : 210</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">//Volume of Box2 : 1560</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">//Volume of Box3 : 5400</span></pre></td></tr></table></figure><h2 id=\"可重载运算符不可重载运算符\"><a class=\"markdownIt-Anchor\" href=\"#可重载运算符不可重载运算符\">#</a> 可重载运算符 / 不可重载运算符</h2>\n<p>下面是可重载的运算符列表：</p>\n<table>\n<thead>\n<tr>\n<th>双目算术运算符</th>\n<th>+ (加)，-(减)，*(乘)，/(除)，% (取模)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>关系运算符</td>\n<td>==(等于)，!= (不等于)，&lt; (小于)，&gt; (大于)，&lt;=(小于等于)，&gt;=(大于等于)</td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td>||(逻辑或)，&amp;&amp;(逻辑与)，!(逻辑非)</td>\n</tr>\n<tr>\n<td>单目运算符</td>\n<td>+ (正)，-(负)，*(指针)，&amp;(取地址)</td>\n</tr>\n<tr>\n<td>自增自减运算符</td>\n<td>++(自增)，–(自减)</td>\n</tr>\n<tr>\n<td>位运算符</td>\n<td>| (按位或)，&amp; (按位与)，~(按位取反)，^(按位异或),，&lt;&lt; (左移)，&gt;&gt;(右移)</td>\n</tr>\n<tr>\n<td>赋值运算符</td>\n<td>=, +=, -=, *=, /= , % = , &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;=</td>\n</tr>\n<tr>\n<td>空间申请与释放</td>\n<td>new, delete, new[ ] , delete[]</td>\n</tr>\n<tr>\n<td>其他运算符</td>\n<td><strong>()</strong>(函数调用)，<strong>-&gt;</strong>(成员访问)，<strong>,</strong>(逗号)，<strong>[]</strong>(下标)</td>\n</tr>\n</tbody>\n</table>\n<p>下面是不可重载的运算符列表：</p>\n<ul>\n<li><strong>.</strong>：成员访问运算符</li>\n<li><strong>.*</strong>, <strong>-&gt;*</strong>：成员指针访问运算符</li>\n<li><strong>::</strong>：域运算符</li>\n<li><strong>sizeof</strong>：长度运算符</li>\n<li><strong>?:</strong>：条件运算符</li>\n<li><strong>#</strong>： 预处理符号</li>\n</ul>\n<h1 id=\"c-多态\"><a class=\"markdownIt-Anchor\" href=\"#c-多态\">#</a> C++ 多态</h1>\n<p><strong>多态</strong>按字面的意思就是多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。</p>\n<p>C++ 多态意味着<strong>调用成员函数时，会根据调用函数的对象的类型来执行不同的函数</strong>。</p>\n<p>实例</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            width <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            height <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Parent class area :\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Shape</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">area</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Retangle class area:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Triangle</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Shape</span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">Triangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Triangle class area: \"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">*</span> height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    Shape <span class=\"token operator\">*</span>shape<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    Rectangle <span class=\"token function\">rec</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    Triangle <span class=\"token function\">tri</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 存储矩形的地址</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    shape <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>rec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 调用矩形的求面积函数 area</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    shape <span class=\"token operator\">-></span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    shape <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>tri<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    shape<span class=\"token operator\">-></span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Parent <span class=\"token keyword\">class</span> <span class=\"token class-name\">area</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Parent <span class=\"token keyword\">class</span> <span class=\"token class-name\">area</span> <span class=\"token operator\">:</span></pre></td></tr></table></figure><p>导致错误输出的原因是，调用函数 area () 被编译器设置为基类中的版本，这就是所谓的<strong>静态多态</strong>，或<strong>静态链接</strong>。函数调用在程序执行前就准备好了。有时候这也被称为<strong>早绑定</strong>，因为 area () 函数在程序编译期间就已经设置好了。</p>\n<p>但现在，让我们对程序稍作修改，在 Shape 类中，area () 的声明前放置关键字 <strong>virtual</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         width <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         height <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Parent class area :\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Rectangle <span class=\"token keyword\">class</span> <span class=\"token class-name\">area</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Triangle <span class=\"token keyword\">class</span> <span class=\"token class-name\">area</span> <span class=\"token operator\">:</span></pre></td></tr></table></figure><p>此时，<strong>编译器看的是指针的内容，而不是它的类型</strong>。因此，由于 tri 和 rec 类的对象的地址存储在 *shape 中，所以会调用各自的 area () 函数。</p>\n<p>正如您所看到的，每个子类都有一个函数 area () 的独立实现。这就是<strong>多态</strong>的一般使用方式。有了多态，您可以有多个不同的类，都带有同一个名称但具有不同实现的函数，函数的参数甚至可以是相同的。</p>\n<h2 id=\"虚函数\"><a class=\"markdownIt-Anchor\" href=\"#虚函数\">#</a> 虚函数</h2>\n<p><strong>虚函数</strong> 是在基类中使用关键字 <strong>virtual</strong> 声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。</p>\n<p>我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为<strong>动态链接</strong>，或<strong>后期绑定</strong>。</p>\n<h2 id=\"纯虚函数\"><a class=\"markdownIt-Anchor\" href=\"#纯虚函数\">#</a> 纯虚函数</h2>\n<p>您可能想要在基类中定义虚函数，以便在派生类中重新定义该函数更好地适用于对象，但是您在基类中又不能对虚函数给出有意义的实现，这个时候就会用到纯虚函数。</p>\n<p>我们可以把基类中的虚函数 area () 改写如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         width <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         height <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// pure virtual function</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>= 0 告诉编译器，函数没有主体，上面的虚函数是<strong>纯虚函数</strong>。</p>\n",
            "tags": [
                "C++"
            ]
        }
    ]
}