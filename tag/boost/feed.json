{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"boost\" tag",
    "description": "",
    "home_page_url": "https://adventure-yx.github.io",
    "items": [
        {
            "id": "https://adventure-yx.github.io/2023/06/06/C++Boost%E5%BA%93%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "url": "https://adventure-yx.github.io/2023/06/06/C++Boost%E5%BA%93%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "title": "C++Boost库 内存管理",
            "date_published": "2023-06-06T02:10:08.000Z",
            "content_html": "<h1 id=\"smart_ptr库概述\"><a class=\"markdownIt-Anchor\" href=\"#smart_ptr库概述\">#</a> smart_ptr 库概述</h1>\n<p>计算机系统中资源有很多种，内存是我们最常用到的，此外还有文件描述符、socket、操作系统 handle、数据库连接等，程序中申请这些资源后必须及时归还系统，否则就会产生难以预料的后果。</p>\n<h2 id=\"raii机制\"><a class=\"markdownIt-Anchor\" href=\"#raii机制\">#</a> RAII 机制</h2>\n<p>为了管理内存等资源，通常采用 RAII 机制（资源获取即初始化，Resource Acquisition Is Initialization），在使用资源的类的构造函数中申请资源，然后使用，最终在析构函数中释放资源</p>\n<p>如果对象是<strong>用声明的方式在栈上创建</strong>的（一个局部对象），那么 RAII 机制会正常工作，当离开作用域时对象会自动销毁从而调用析构函数释放资源。</p>\n<p>但如果对象是<strong>用 new 操作符在堆上创建</strong>的，那么他的析构函数就不会自动调用，必须明确地用对应的 delete 操作符销毁它才能释放资源。</p>\n<blockquote>\n<p>new 和 delete 以及指针的不恰当应用时造成资源获取 / 释放问题的根源。</p>\n</blockquote>\n<h2 id=\"智能指针\"><a class=\"markdownIt-Anchor\" href=\"#智能指针\">#</a> 智能指针</h2>\n<p>智能指针可以在退出作用域时（不管是正常流程离开或是因异常离开），总调用 delete 来析构在堆上动态分配的对象。</p>\n<p>存在多种智能指针，其中最著名的时 C++98 标准中的 <code> std::auto_ptr</code> ，它部分地解决了获取资源自动释放的问题，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    auto_ptr<span class=\"token operator\">&lt;</span>class_need_resource<span class=\"token operator\">></span> \t<span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> class_need_resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    auto_ptr<span class=\"token operator\">&lt;</span>demo_class<span class=\"token operator\">></span>\t\t\t<span class=\"token function\">p2</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>\t<span class=\"token comment\">// 离开作用域时，p1，p2 自动析构从而释放内存等资源</span></pre></td></tr></table></figure><p>auto_ptr 的构造函数接受 new 操作符或者对象工厂创建出的对象指针作为参数，从而代理了原始指针。虽然他是一个对象，但因为重载了 <code>operator*</code>  和 <code>operator-&gt;</code> ，其行为非常类似指针，可以把它用在大多数普通指针可用的地方。当推出作用域时（离开 main 函数或者发生异常），C++ 语言会确保 auto_ptr 对象销毁，调用 auto_ptr 的析构函数，进而使用 delete 操作符删除原始指针释放资源。</p>\n<p>auto_ptr 很好用，被包含在 C<ins>98 标准库中令他在世界范围内被广泛使用，使智能指针的思想、用法深入人心。但它也存在一些缺陷，所以在 C</ins>11/14 标准提供了更完善的 <code>unique_ptr</code> 、 <code>shared_ptr</code> 、 <code>weak_ptr</code> ，而这些正是基于 <code>boost.smart_ptr</code>  库</p>\n<p>boost.smart_ptr 库提供了六种智能指针，包括 <code>scoped_ptr</code> 、 <code>scoped_array</code> 、 <code>shared_ptr</code> 、 <code>shared_array</code> 、 <code>weak_ptr</code>  和 <code>intrusive_ptr</code> 。他们是轻量级的对象，速度与原始指针相差无几，都是异常安全的（exception safe），而且对于所指向的类型 T 也仅要求：类型 T 的析构函数不能抛出异常。</p>\n<h1 id=\"scoped_ptr\"><a class=\"markdownIt-Anchor\" href=\"#scoped_ptr\">#</a> scoped_ptr</h1>\n<p>scoped_ptr 是一个类似 auto_ptr/unique_ptr 的智能指针，他包装了 new 操作符在堆上分配的动态对象，能够保证动态创建的对象在任何时候都可以被正确地删除。但 scoped_ptr 地所有权更加严格，不能转让，一旦 scoped_ptr 获取了对象的管理权，我们就无法再从他那里取回来。scoped_ptr 地名字也明确了：这个智能指针只能在本作用域内使用，不希望被转让。</p>\n<h2 id=\"类摘要\"><a class=\"markdownIt-Anchor\" href=\"#类摘要\">#</a> 类摘要</h2>\n<p>scoped_ptr 地类摘要如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">scoped_ptr</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// noncopyable</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    T <span class=\"token operator\">*</span>px<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 原始指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">scoped_ptr</span><span class=\"token punctuation\">(</span>scoped_ptr <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 拷贝构造函数私有化</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    scoped_ptr <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>scoped_ptr <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 赋值操作私有化</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>scoped_ptr <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 相等操作私有化</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>scoped_ptr <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 不等操作私有化</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">scoped_ptr</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 显式构造函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">scoped_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 重置智能指针</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    T <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 操作符重载</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    T <span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 操作符重载</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    T <span class=\"token operator\">*</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 获得原始指针</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 显式 bool 值转型</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>scoped_ptr <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 交换指针</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span>\t\t\t\t\t<span class=\"token comment\">// 与空指针比较</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>scoped_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>detail<span class=\"token double-colon punctuation\">::</span>sp_nullptr_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"操作函数\"><a class=\"markdownIt-Anchor\" href=\"#操作函数\">#</a> 操作函数</h2>\n<ul>\n<li>\n<p>scoped_ptr 的构造函数接受一个类型为 T * 的指针 p，创建出一个 scoped_ptr 对象，并在内部保存指针参数 p，p 必须是一个 new 表达式动态分配的结果，或者是个空指针（nullptr）。当 scoped_ptr 对象的生命周期结束时～scoped_ptr () 会使用 delete 操作符自动销毁所保存的指针对象，从而正确地回收资源。</p>\n<blockquote>\n<p>实际上调用的是 <code>boost::check_delete()</code>  函数</p>\n</blockquote>\n</li>\n<li>\n<p>scoped_ptr 同时把拷贝构造函数和赋值操作符都声明为私有的，禁止对智能指针的拷贝操作（原理参考 noncopyable），保证了被他管理的指针不能被转让所有权。</p>\n</li>\n<li>\n<p>成员函数 reset () 的功能是重置 scoped_ptr：它删除原来保存的指针，再保存新的指针值 p。如果 p 是空指针，那么 scoped_ptr 将不持有任何指针。一般情况下 reset () 不应该被调用，因为他违背了 scoped_ptr 的本意 —— 资源应该一直由 scoped_ptr 自己自动管理。</p>\n</li>\n<li>\n<p>scoped_ptr 用 <code>operator*()</code>  和 <code>operator-&gt;()</code>  重载了解引用操作符 <code>*</code>  和箭头操作符 <code>-&gt;</code> ，以模仿被代理的原始指针的行为，因此可以把 scoped_ptr 对象如同指针一样使用。如果 scoped_ptr 保存的是空指针，那么这两个操作的行为未定义。（debug 模式下，scoped_ptr 内部使用了 BOOST_ASSERT 来断言指针非空）</p>\n</li>\n<li>\n<p>scoped_ptr 提供了一个可以在 bool 语境中自动转换成 bool 值（如 if 的条件表达式）的功能，用来测试 scoped_ptr 是否持有一个有效的非空指针。它可以代替和空指针比较的操作，而且写法更简单。</p>\n</li>\n<li>\n<p>成员函数 swap () 可以交换两个 scoped_ptr 保存的原始指针。它是高效的操作，被用于实现 reset () 函数，也可以被 boost::swap 所利用。</p>\n</li>\n<li>\n<p>成员函数 get () 返回 scoped_ptr 内部保存的原始指针，可以用在某些要求必须是原始指针的场景（如底层的 C 接口）。但使用时要小心，这将使原始指针脱离 scoped_ptr 的控制。不能对这个指针做 delete 操作，否则 scoped_ptr 析构时会对已经删除的指针再进行删除操作，发生未定义行为（通常是程序崩溃）</p>\n</li>\n</ul>\n<p>scoped_ptr 支持有限的比较操作，不能在两个 scoped_ptr 之间进行相等或者不能测试，默认仅支持与 C++11 的 nullptr 进行比较（也可以是 NULL 或者 0，因为这两者可以隐式转换为 nullptr）</p>\n<h2 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\">#</a> 用法</h2>\n<p>scoped_ptr 的用法很简单：在原本使用指针变量接受 new 表达式结果的地方改用 scoped_ptr 对象，然后去掉那些多余的 try/catch 和 delete 操作就可以了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scoped_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 构造一个 scoped_ptr 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 使用显式 bool 转型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 空指针比较</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>sp <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//operator * 取字符串内容</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> sp<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//operator-> 取字符串长度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 错误，scoped_ptr 未定义递增操作符</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">prev</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 错误，scoped_ptr 未定义递减操作符</span></pre></td></tr></table></figure><blockquote>\n<p>不再需要 delete 操作，scoped_ptr 会自动释放资源。如果对 scoped_ptr 执行 delete 会得到一个编译错误：因为 scoped_ptr 是一个行为类似指针的对象，而不是指针，对一个对象应用 delete 是不允许的。</p>\n</blockquote>\n<p>scoped_ptr 把拷贝构造函数和赋值函数都声明为私有的，不允许拷贝或赋值，拒绝了指针所有权的转让，只能在 scoped_ptr 被声明的作用域内使用（除了 scoped_ptr 自己，其他任何人都无权访问被管理的指针，从而保证了指针的绝对安全）由此引出一个另一个结论：如果一个类拥有 scoped_ptr 的成员变量，那么它也会是不可拷贝和赋值的。</p>\n<p>使用 scoped_ptr 的两个好处：</p>\n<ul>\n<li>代码变得清晰简单，简单意味着更少的错误。</li>\n<li>它并没有增加多余的操作，安全的同时保证了效率，可以获得与原始指针同样的速度。</li>\n</ul>\n<p>用法示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/smart_ptr.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> boost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">posix_file</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">posix_file</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 构造函数打开文件夹</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"open file:\"</span> <span class=\"token operator\">&lt;&lt;</span> file_name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">posix_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"close file\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 文件类的 scoped_ptr，将在离开作用域时自动析构，从而关闭文件释放资源</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    scoped_ptr<span class=\"token operator\">&lt;</span>posix_file<span class=\"token operator\">></span> <span class=\"token function\">fp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">posix_file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tmp/a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    scoped_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 一个 int 指针的 scoped_ptr</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 可以像普通指针一样使用解引用操作符 *</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 置空 scoped_ptr</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 与 0 比较，p 不持有任何指针</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 测试 bool 语境可以使用！</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"scoped_ptr == nullptr\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span>\t\t<span class=\"token comment\">// 发生析构，p 和 fp 管理的指针自动被删除</span></pre></td></tr></table></figure><p>运行结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>open file<span class=\"token operator\">:</span><span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>a<span class=\"token punctuation\">.</span>txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>scoped_ptr <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>close file</pre></td></tr></table></figure><h2 id=\"对比unique_ptr\"><a class=\"markdownIt-Anchor\" href=\"#对比unique_ptr\">#</a> 对比 unique_ptr</h2>\n<p><code>std::unique_ptr</code>  是在 <code>C++11</code>  标准中定义的新的智能指针，用来取代 C++98 中的 auto_ptr</p>\n<p>根据 C++11 标准，unique_ptr 不仅能够代理 new 创建的单个对象，也能代理 new [] 创建的数组对象，也就是说它结合了 scoped_ptr 和 scoped_array 两者的能力。</p>\n<p>C++11 标准中对 unique_ptr 的定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token operator\">=</span> default_delete<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span>\t\t\t\t<span class=\"token comment\">// 使用删除器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">unique_ptr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">typedef</span> some_define pointer<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 内部类型定义</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">typedef</span> T \t\t\telement_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span>pointer p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    unique_ptr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>unique_ptr<span class=\"token operator\">&amp;&amp;</span> u<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 转移语义赋值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    element_type<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    pointer <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    pointer <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 获得原始指针</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//bool 值转型</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    pointer <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 释放指针的管理权</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>pointer p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 重置智能指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>unique_ptr<span class=\"token operator\">&amp;</span> u<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 交换指针</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> unique_ptr<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 使用 delete 禁用拷贝</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    unique_ptr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> unique_ptr<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> unique_ptr<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> unique_ptr<span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>unique_ptr 的基本能力与 scoped_ptr 相同，同样可以在作用域内管理指针，也不允许拷贝构造和拷贝赋值，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 声明一个 unique_ptr，管理 int 指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">//bool 语境测试指针是否有效</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span>up <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 使用 operator * 操作指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>up <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>up<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 释放指针</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 此时不管理任何指针</span></pre></td></tr></table></figure><p>但 unique_ptr 要比 scoped_ptr 有更多的功能：可以像原始指针一样进行比较，可以像 shared_ptr 一样定制删除器，也可以安全的放入标准容器。</p>\n<h2 id=\"make_unique\"><a class=\"markdownIt-Anchor\" href=\"#make_unique\">#</a> make_unique</h2>\n<p><code>C++11</code>  标准定义了 <code>unique_ptr</code> ，但却 “遗忘” 了对应的工厂函数 <code>make_unique()</code> （C++14 标准中补上了这个漏洞）</p>\n<p>在 boost.smart_ptr 库中有实现 <code>make_unique()</code>  函数，包含在头文件 &lt;boost/smart_ptr/make_unique.hpp&gt; 里</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>Args<span class=\"token operator\">></span>\t\t\t\t\t\t<span class=\"token comment\">// 使用可变参数模板</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">boost</span><span class=\"token double-colon punctuation\">::</span>detail<span class=\"token double-colon punctuation\">::</span>up_if_not_array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>type</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make_unique</span><span class=\"token punctuation\">(</span>Args<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">unique_ptr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//C++11 的完美转发</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<ul>\n<li>它不包含在头文件 &lt;boost/smart_ptr.hpp&gt; 中，必须单独包含；</li>\n<li>它位于命名空间 boost 下</li>\n</ul>\n</blockquote>\n<p>boost::make_unique () 用法与 C++14 标准是一样的，示例如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 使用 auto 创建 unique_ptr&lt;int > 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 访问指针内容</span></pre></td></tr></table></figure><h1 id=\"scoped_array\"><a class=\"markdownIt-Anchor\" href=\"#scoped_array\">#</a> scoped_array</h1>\n<p>scoped_array 很像 scoped_ptr，它包装了 new [] 操作符（而不是单纯的 new）在堆上分配的动态数组，为动态数组提供了一个代理，保证可以正确地释放内存。</p>\n<p>scoped_array 相当于 C++11 标准中管理数组对象用法地 unique_ptr。</p>\n<h2 id=\"类摘要-2\"><a class=\"markdownIt-Anchor\" href=\"#类摘要-2\">#</a> 类摘要</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">scoped_array</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">//noncopyable</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">scoped_array</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">scoped_array</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 重置智能指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    T<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ptrdiff_t i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 重载 operator []</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    T<span class=\"token operator\">*</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 获得原始指针</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 显示 bool 值转型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>scoped_array<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 交换指针</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>构造函数接受的指针 p 必须是 new [] 的结果，而不能是 new 表达式的结果；</li>\n<li>没有 *、-&gt; 操作符重载因为 scoped_array 持有的不是一个普通指针；</li>\n<li>析构函数使用 delete [] 释放资源，而不是 delete；</li>\n<li>提供 operator [] 操作符重载，可以像普通数组一样用下标访问元素；</li>\n<li>没有 begin ()、end () 等类似容器的迭代器操作函数。</li>\n</ul>\n<h2 id=\"用法-2\"><a class=\"markdownIt-Anchor\" href=\"#用法-2\">#</a> 用法</h2>\n<p>scoped_array 与 scoped_ptr 源于相同的设计思想，故而用法非常相似：它只能在被声明的作用域内使用，不能拷贝、赋值。唯一不同的是，scoped_array 包装的是 new [] 产生的指针，并在析构时调用 delete []—— 因为它管理的是动态数组，而不是单个动态对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 scoped_array</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>scoped_array<span class=\"token punctuation\">[</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 包装动态数组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//scoped_array 重载了 operator []，因此它用起来就像是一个普通的数组，但因为他不提供指针运算，所以不能用数组首地址 + N 的方式访问数组元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sa<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>sa <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//error</span></pre></td></tr></table></figure><p>在使用重载 operator [] 时应注意，scoped_array 不提供数组索引的范文检查，如果使用了超过动态数组大小的索引或者是负数索引，将因为未定义行为。</p>\n<p>用法示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/smart_ptr.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> boost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    scoped_array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sa</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 一个 scoped_array 对象代理原始数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">fill_n</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sa<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 可以使用标准库算法赋值数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    sa<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sa<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sa<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 像普通数组使用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//scoped_array 被自动析构释放动态数组资源</span></pre></td></tr></table></figure><h2 id=\"对比unique_ptr-2\"><a class=\"markdownIt-Anchor\" href=\"#对比unique_ptr-2\">#</a> 对比 unique_ptr</h2>\n<p>C++11 标准中 unique_ptr 使用模板提供了对数组对象的支持，类代码摘要如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">unique_ptr</span><span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> D<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">typedef</span> some_define\tpointer<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 内部类型定义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">typedef</span> T\t\t\telement_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span>pointer p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    T<span class=\"token operator\">&amp;</span>\t\t<span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 重载 operator</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    pointer <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 获得原始指针</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 显式 bool 值转型</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    pointer <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 释放指针的管理权</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>pointer p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 重置智能指针</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>unique_ptr<span class=\"token operator\">&amp;</span> u<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 交换指针</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> unique_ptr<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用 delete 禁用拷贝</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    unique_ptr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> unique_ptr<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>unique_ptr 的数组对象用法和 scoped_array 基本相同，但模板参数中需要声明为数组类型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 注意模板参数和 new []</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 支持 bool 转换</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>up<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> up<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>up<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 释放 new 出的内存空间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 此时不管理任何指针</span></pre></td></tr></table></figure><p>因为 unique_ptr 的数组用法仅是模板特化，所以它同样具有 unique_ptr 的其他功能，如比较运算，定制删除器等，功能要比 scoped_array 更多。</p>\n<p>同样头文件 &lt;boost/smart_ptr/make_unique.hpp&gt; 里提供了创建数组对象 unique_ptr 的工厂函数 make_unique ():</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> a <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 5 个元素的动态数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 数组越界，未定义行为</span></pre></td></tr></table></figure><h2 id=\"使用建议\"><a class=\"markdownIt-Anchor\" href=\"#使用建议\">#</a> 使用建议</h2>\n<blockquote>\n<p>scoped_array 没有给程序增加额外的负担，用起来很方便轻巧。它的速度与原始数组同样快，很适合习惯于用 new 操作符在堆上分配内存的程序员。但 scoped_array 的功能很有限，不能动态增长，没有边界检查，也没有迭代器支持，不能搭配 STL 算法，仅有一个纯粹的裸数组接口。而且，应当避免使用 new [] 操作符，编译器很难区分出 new [] 和 new 分配的空间，除非对性能有非常苛刻的要求，或者编译器不支持标准库，否则都不推荐使用 scoped_array，它是为了与老式 C 风格代码兼容而使用的类。</p>\n</blockquote>\n<p>在需要使用动态数组的情况下，我们应该使用 std::vector，它比 scoped_array 提供了更多的灵活性，而只付出了很小的代价。由于 vector 有丰富的成员函数来操纵数据，能够使代码更加简单明了，易于维护。</p>\n<h1 id=\"shared_ptr\"><a class=\"markdownIt-Anchor\" href=\"#shared_ptr\">#</a> shared_ptr</h1>\n<p>shared_ptr 是一个最像指针的智能指针，是 boost.shared_ptr 库中最有价值、最重要的组成部分，也是最有用的，Boost 库的许多组件 —— 甚至还包括一些其他领域的智能指针都使用了 shared_ptr，所以它被毫无悬念地收入了 C++11 标准。</p>\n<p>shared_ptr 与 scoped_ptr 一样包装了 new 操作符在堆上分配的动态对象，但它实现的是引用计数型的智能指针，可以被自由的拷贝和赋值，在任意的地方共享它，当没有代码使用（引用计数为 0）时，才删除被包装的动态分配的对象。</p>\n<p>shared_ptr 也可以安全地放到标准容器中，是在 STL 容器中存储指针的最标准解法。</p>\n<h2 id=\"类摘要-3\"><a class=\"markdownIt-Anchor\" href=\"#类摘要-3\">#</a> 类摘要</h2>\n<p><code>shared_ptr</code>  要比 <code>scoped_ptr</code>  复杂许多，类摘要如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">shared_ptr</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pubilc<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 内部类型定义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">typedef</span> T element_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">shared_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token operator\">></span> <span class=\"token keyword\">explicit</span> <span class=\"token function\">shared_ptr</span><span class=\"token punctuation\">(</span>Y <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">></span> <span class=\"token function\">shared_ptr</span><span class=\"token punctuation\">(</span>Y <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> D d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">shared_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 拷贝构造</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">shared_ptr</span><span class=\"token punctuation\">(</span>shared_ptr <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 赋值操作</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    shared_ptr <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>shared_ptr <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token operator\">></span> shared_ptr <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>shared_ptr<span class=\"token operator\">&lt;</span>Y<span class=\"token operator\">></span> <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 重置智能指针</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>Y <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>Y <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> D d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 操作符重载</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    T <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    T <span class=\"token operator\">*</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 获取原始指针</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    T <span class=\"token operator\">*</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 是否唯一</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 引用计数</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 显式 bool 转型</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 交换指针</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>shared_ptr <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"操作函数-2\"><a class=\"markdownIt-Anchor\" href=\"#操作函数-2\">#</a> 操作函数</h2>\n<p><code>shared_ptr</code>  和 <code>scoped_ptr</code>  同样是用于管理 <code>new</code>  动态分配对象的智能指针，因此功能上有很多相似之处：他们都重载了 <code>*</code>  和 <code>-&gt;</code>  操作符以模仿原始指针的行为，提供 <code>显式bool类型转换</code> 以判断指针的有效性， <code>get()</code>  可以得到原始指针，并且没有提供指针算术运算操作，也不能管理 <code>new[]</code>  产生的动态数组指针。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">spi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>spi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span>spi <span class=\"token operator\">=</span> <span class=\"token number\">253</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">sps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"smart\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sps<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">dont_do_this</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>shared_ptr</code>  是可以被安全共享的，有着正常的拷贝、复制语义，也可以进行 shared_ptr 间的比较，是最智能的智能指针。</p>\n<p><code>shared_ptr</code>  有多种形式的构造函数，应用于各种可能的情形：</p>\n<ul>\n<li>无参的 <code>shared_ptr()</code>  构造函数，创建一个持有空指针的 <code>shared_ptr</code> ;</li>\n<li><code>shared_ptr(Y *p)</code>  获取指向类型 T 的指针 p 的管理权，同时引用计数置为 1。该构造函数要求 <code>Y类型</code> 必须能够转换为 <code>T类型</code> ；</li>\n<li><code>shared_ptr(shared_ptr const &amp;r)</code>  从另外一个 <code>shared_ptr</code>  获得指针的管理权，同时引用计数加 1，结果是两个 <code>shared_ptr</code>  共享一个指针的管理权；</li>\n<li><code>operator=</code>  赋值操作符可以从另外一个 <code>shared_ptr</code>  获得指针的管理权，其行为同构造函数；</li>\n<li><code>shared_ptr(Y *p, D d)</code>  行为类似 <code>shared_ptr(Y *p)</code> ，但使用 <code>参数d</code>  指定了析构时的定制删除器，而不是简单的 delete。</li>\n</ul>\n<p><code>shared_ptr</code>  的 <code>reset()</code>  函数的行为，与 <code>scoped_ptr</code>  也不尽相同，它的作用是将引用计数减 1，停止对指针的共享，除非引用计数为 0，否则不会发生删除操作。带参数的 <code>reset()</code>  则类似相同形式的构造函数，原指针引用计数减 1 的同时改为管理另一个指针。</p>\n<p><code>shared_ptr</code>  有两个专门的函数来检查引用计数。 <code>unique()</code>  在 <code>shared_ptr</code>  是指针的唯一所有者时，返回 true（这时 shared_ptr 的行为类似 scoped_ptr 或 unique_ptr）， <code>use_count()</code>  返回当前指针的引用计数。要小心， <code>use_count()</code>  应该仅仅用于测试或者调试，他不提供高效率的操作，而且在极少情况下是不可用的。而 <code>unique()</code>  则是可靠的，任何时候都可用，而且比 <code>use_count() == 1</code>  速度更快。</p>\n<p><code>shared_ptr</code>  还支持比较运算，可以测试两个 <code>shared_ptr</code>  的相等或不相等，比较基于内部保存的指针，相当于 <code>a.get() == b.get()</code> 。 <code>shared_ptr</code>  还可以使用 <code>operator&lt;</code>  比较大小，同样基于内部保存的指针，但不提供 <code>operator&lt;</code>  以外的比较操作符，这使得 <code>shared_ptr</code>  可以被用于标准关联容器（set 和 map）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//shared_ptr 类型定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> shared_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> sp_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 标准映射容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token operator\">&lt;</span>sp_t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 一个 shared_ptr 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sp_t <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 关联数组用法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>m<span class=\"token punctuation\">[</span>sp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">111</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此外， <code>shared_ptr</code>  还支持流输出操作符 <code>operator&lt;&lt;</code> ，输出内部的指针值，方便调试</p>\n<h2 id=\"用法-3\"><a class=\"markdownIt-Anchor\" href=\"#用法-3\">#</a> 用法</h2>\n<p>shared_ptr 的高智能使其行为最接近原始指针，因此他比 scoped_ptr 的应用范围更广。几乎 100% 可以在任何 new 出现的地方接受 new 的动态分配结果，然后被任意使用，从而完全消灭 delete 的使用和内存泄漏，而他的用法同样简单。</p>\n<p>shared_ptr 也提供基本的线程安全保证，一个 shared_ptr 可以被多个线程安全读取，但其他的访问形式结果都是未定义的。</p>\n<p>一个简单用法示例如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 一个指向整数的 shared_ptr</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">.</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 现在 shared_ptr 是指针的唯一持有者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> sp2 <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 第二个 shared_ptr，拷贝构造函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sp <span class=\"token operator\">==</span> sp2 <span class=\"token operator\">&amp;&amp;</span> sp<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 两个 shared_ptr 相等指向同一个对象，引用计数为 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">*</span>sp2 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 使用解引用操作符修改被指向的对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sp <span class=\"token operator\">==</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 另一个 shared_ptr 也同时被修改</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>sp<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 停止 shared_ptr 的使用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//sp 不再持有任何指针</span></pre></td></tr></table></figure><p>一个复杂用法示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 一个拥有 shared_ptr 的类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">shared</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 构造函数初始化 shared_ptr</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">shared</span><span class=\"token punctuation\">(</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span>p_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 输出 shared_ptr 的引用计数和所指向的值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"count:\"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" v=\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 使用 shared_ptr 作为函数参数同样输出引用计数和指向的值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print_func</span><span class=\"token punctuation\">(</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"count:\"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" v=\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    shared <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 构造两个自定义类</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    s1<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    s2<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 修改 shared_ptr 所指的值</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">print_func</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    s1<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 运行结果：</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>count<span class=\"token operator\">:</span><span class=\"token number\">3</span> v<span class=\"token operator\">=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>count<span class=\"token operator\">:</span><span class=\"token number\">3</span> v<span class=\"token operator\">=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>count<span class=\"token operator\">:</span><span class=\"token number\">4</span> v<span class=\"token operator\">=</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>count<span class=\"token operator\">:</span><span class=\"token number\">3</span> v<span class=\"token operator\">=</span><span class=\"token number\">20</span></pre></td></tr></table></figure><p>示例代码定义了一个类和一个函数，两者都接受 shared_ptr 对象作为参数，特别注意的是没有使用引用的方式传递参数，而是直接拷贝，就像是在使用一个原始指针 ——shared_ptr 支持这样的用法。</p>\n<p>在声明了 shared_ptr 和两个 shared 类实例后，指针被它们所共享，因此引用计数为 3。<strong>print_func () 函数内部拷贝了一个 shared_ptr 对象，因此引用计数再增加 1，但当退出函数时拷贝自动析构，引用计数又恢复为 3</strong>。</p>\n<h2 id=\"工厂函数\"><a class=\"markdownIt-Anchor\" href=\"#工厂函数\">#</a> 工厂函数</h2>\n<p><code>shared_ptr</code>  很好地消除了显式的 <code>delete</code>  调用，但这还不够，因为 <code>shared_ptr</code>  的构造还需要 <code>new</code>  调用，这导致了代码中的某种不对称性。虽然 <code>shared_ptr</code>  很好地包装了 <code>new</code>  表达式，但<strong>过多的显式 new 操作符也可以由使用工厂模式解决</strong>。</p>\n<p>因此， <code>smart_ptr</code>  库提供了一个工厂函数（位于 boost 命名空间） <code>make_shared()</code>  来消除显式地 new 调用，声明如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span>\t<span class=\"token comment\">//C++11 可变参数模板</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typename</span> <span class=\"token class-name\">boost</span><span class=\"token double-colon punctuation\">::</span>detail<span class=\"token double-colon punctuation\">::</span>sp_if_not_array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>type\t<span class=\"token comment\">// 模板元计算类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make_shared</span><span class=\"token punctuation\">(</span>Args <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//C++11 右值引用用法</span></pre></td></tr></table></figure><p><code>make_shared()</code>  函数可以接受若干个参数，然后把它们传递给类型 T 地构造函数，创建一个 <code>shared_ptr&lt;T&gt;</code>  的对象并返回。通常 <code>make_shared()</code>  函数要比直接创建 <code>shared_ptr</code>  对象的方式快且高效，因为它内部仅分配一次内存，消除了 <code>shared_ptr</code>  构造时的开销。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">auto</span> sp <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"make_shared\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 创建 string 的共享指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">auto</span> spv <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 创建 vector 的共享指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>spv<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>如果 C++ 编译器支持 <code>C++11</code>  的可变参数模板特性，那么 make_shared () 的参数数量没有限制，能够以任意多数量的参数构造对象，否则它只能接受最多 10 个参数，一般情况下这不会成为问题，实际上，很少有如此多参数的函数接口，即使有，那也会是一个设计的不够好的接口，应该被重构。</p>\n<p>除了 <code>make_shared()</code> ，smart_ptr 库还提供一个 <code>allocate_shared()</code> ，它比 <code>make_shared()</code>  多接受一个定制的内存分配器类型参数，其他方面都相同。</p>\n</blockquote>\n<h2 id=\"应用于标准容器\"><a class=\"markdownIt-Anchor\" href=\"#应用于标准容器\">#</a> 应用于标准容器</h2>\n<p>有两种方式可以将 <code>shared_ptr</code>  应用于标准容器（或者容器适配器等其他容器）。</p>\n<ul>\n<li>\n<p>将容器作为 <code>shared_ptr</code>  管理的对象，如 <code>shared_ptr&lt;list&lt;T&gt;&gt;</code> ，使容器可以被安全共享，用法与普通 <code>shared_ptr</code>  没有区别</p>\n</li>\n<li>\n<p>将 <code>shared_ptr</code>  作为容器的元素，如 <code> vector&lt;shared_ptr&lt;T&gt;&gt;</code> ，因为 shared_ptr 支持拷贝语义和比较操作，符合标准容器对元素的要求，所以可以在容器中安全的容纳元素的指针而不是拷贝。</p>\n<p>标准容器不能容纳 <code>scoped_ptr</code> ，因为 <code>scoped_ptr</code>  不能拷贝和赋值。标准容器可以容纳原始指针，但这就丧失了容器的很多好处，因为标准容器无法自动管理类型为指针的元素，必须编写额外的大量代码来保证指针最终被正确删除，这通常很麻烦而且容易出错。</p>\n<p>存储 <code>shared_ptr</code>  的容器与存储原始指针的容器功能几乎一样，但 <code>shared_ptr</code>  做了指针的管理工作，可以任意使用 <code>shared_ptr</code>  而不用担心资源泄露。</p>\n</li>\n</ul>\n<p>将 <code>shared_ptr</code>  应用于标准容器的用法：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">typedef</span> vector<span class=\"token operator\">&lt;</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> vs<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 一个持有 shared_ptr 的标准容器类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    vs <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 声明一个持有 10 个元素的容器，元素被初始化为空指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> pos <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> pos <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pos<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 使用工厂函数赋值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pos<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>需要注意的是迭代器和 operator [ ] 的用法，因为容器内存储的是 <code>shared_ptr</code> ，我们必须对迭代器 pos 使用一次解引用操作符 <code> *</code>  以获得 <code> shared_ptr</code> ，然后再对 <code> shared_ptr</code>  使用解引用操作符 <code> *</code>  才能操作真正的值。 <code> *(*pos)</code>  也可以写成 <code> **pos</code></p>\n<p>vector 的 operator [ ] 用法与迭代器类似，也需要使用 <code>*</code>  来获取真正的值</p>\n<p>使用 <code>boost.foreach</code>  库或者 <code>C++11</code>  里的 <code>for</code>  可以避免迭代器到 <code>shared_ptr</code>  的两次解引用，直接取出容器里的 <code>shared_ptr</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>ptr <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// C++11 的 for 循环，引用形式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ptr <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 使用工厂函数赋值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"应用于工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#应用于工厂模式\">#</a> 应用于工厂模式</h2>\n<p>工厂模式是一种创建型设计模式，这个模式包装了 new 操作符的使用，使对象的创建工作集中在工厂类或工厂函数中，从而更容易适应变化， <code>make_shared()</code>  就是工厂模式的一个很好的例子。</p>\n<p>在程序中编写自己的工厂类或者工厂函数时通常需要在堆上使用 new 动态分布，然后返回对象的指针，而是返回一个被 shared_ptr 包装的智能指针，这样可以很好的保护系统资源，而且会更好的控制对接口的使用。</p>\n<p>shared_ptr 应用于工厂模式的用法，首先实现一个纯抽象基类，也就是接口类：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">abstract</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">abstract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>abstract 的析构函数，被定义为 protected，意味着除了它自己和它的子类，其他任何对象都无权调用 delete 来删除它。</p>\n</blockquote>\n<p>再定义 abstract 的实现子类：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">impl</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">abstract</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">impl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">impl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Class impl f\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Class impl g\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>随后的工厂函数返回基类的 shared_ptr:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span>abstract<span class=\"token operator\">></span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>impl<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样就完成了全部工厂模式的实现，现在可以把这些组合起来：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 工厂函数创建对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    p<span class=\"token operator\">-></span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    p<span class=\"token operator\">-></span><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>由于基类 <code>abstract</code>  的析构函数是 <code>protected</code> ，所以用户不能做出任何对指针的破坏行为，即使是用 <code>get()</code>  获得了原始指针：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>abstract <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 正确</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">delete</span> q<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 错误，无法访问 abstract 的保护析构函数</span></pre></td></tr></table></figure><p>但这不是绝对的，用一些方法也可以再 <code>shared_ptr</code>  外删除对象，因为 <code>impl()</code>  的析构函数是公开的，所以：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>impl <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>impl<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 强制转型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">delete</span> q<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样就可以任意操作原本处于 <code>shared_ptr</code>  控制之下的原始指针了，但永远也不要这样做，因为这会使 <code>shared_ptr</code>  在析构时删除可能已经不存在的指针， 引发未定义行为。</p>\n<h2 id=\"定制删除器\"><a class=\"markdownIt-Anchor\" href=\"#定制删除器\">#</a> 定制删除器</h2>\n<p>当使用 <code>shared_ptr</code>  的另一种形式的构造函数 <code>shared_ptr(Y* p, D d)</code> ，它涉及 <code>shared_ptr</code>  另一个重要概念 —— 删除器。</p>\n<h2 id=\"对比stdshared_ptr\"><a class=\"markdownIt-Anchor\" href=\"#对比stdshared_ptr\">#</a> 对比 std::shared_ptr</h2>\n<p><code>C++11</code>  标准中定义了 <code>std::shared_ptr</code>  功能与 <code>boost::shared_ptr</code>  基本相同，可以完全等价互换。</p>\n<h2 id=\"显式bool转型\"><a class=\"markdownIt-Anchor\" href=\"#显式bool转型\">#</a> 显式 bool 转型</h2>\n<p>早期 boost 中的 <code>shared_ptr</code>  的 bool 转型是隐式转换，但在 <code>C++11</code>  标准发布后为了与标准一致添加了 <code>explicit</code>  修饰，变成了显式转换。</p>\n<p>处于兼容性的考虑， <code>C++11</code>  标准规定在 if/assert/for 等逻辑判断语境下， <code>shared_ptr</code>  还是可以隐式转换的，但其他情形 —— 如函数参数或者返回值 —— 则必须显示转换，可以使用 <code>static_cast&lt;bool&gt;(p)</code> 、 <code>p != nullptr</code>  或者 <code>!!p</code>  等形式。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">bool_test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">776</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 创建一个 shared_ptr</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//assert 可以隐式转换</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">//if 判断可以隐式转换</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"explicit cast\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 返回值必须显式转换</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "Boost"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/05/C++Boost%E5%BA%93%20%E5%87%BD%E6%95%B0%E4%B8%8E%E5%9B%9E%E8%B0%83/",
            "url": "https://adventure-yx.github.io/2023/06/05/C++Boost%E5%BA%93%20%E5%87%BD%E6%95%B0%E4%B8%8E%E5%9B%9E%E8%B0%83/",
            "title": "C++Boost库 函数与回调",
            "date_published": "2023-06-05T02:10:08.000Z",
            "content_html": "<h1 id=\"函数与回调\"><a class=\"markdownIt-Anchor\" href=\"#函数与回调\">#</a> 函数与回调</h1>\n<p>围绕函数与函数对象，共有 4 个 Boost 库，应用了 <code>C++</code>  中高级的语言特性和技巧，功能很强大，相应的用法也比较复杂灵活。其中前三个 ref、bind、function 已经被收入 <code>C++11</code>  标准。</p>\n<ul>\n<li>\n<p><strong>ref 工具类</strong></p>\n<p>是本章其他库的基础，可以包装对象的引用，在传递参数时，消除对象拷贝的代价，或者将不可拷贝的对象变为可以拷贝。</p>\n</li>\n<li>\n<p><strong>bind</strong></p>\n<p>是 <code>C++标准库</code> 中函数适配器的增强，可以适配任意的可调用对象 —— 包括函数指针，函数引用和函数对象，把它们变成一个新的函数对象，是迈向 C++ 函数式编程的第一步。</p>\n</li>\n<li>\n<p><strong>function</strong></p>\n<p>是对 <code>C/C++</code>  中函数指针类型的增强，能够容纳任意的可调用对象，可以配合 bind 使用。</p>\n</li>\n<li>\n<p><strong>signals2</strong></p>\n<p>实现了威力强大的观察者模式。参考 <code>Java</code>  中的 <code>Observable/Observer</code>  或者 <code>C#</code> 中的 <code>event/delegate</code></p>\n</li>\n</ul>\n<h1 id=\"ref\"><a class=\"markdownIt-Anchor\" href=\"#ref\">#</a> ref</h1>\n<p><code>C++标准库</code> 和 <code>Boost</code>  中的算法大量使用了函数对象作为判断式或谓词参数，而这些参数都是传值语义，算法或函数在内部保留函数对象的拷贝并使用，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 函数对象，计算整数的平方</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">square</span>\t\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 返回结果的类型定义</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> result_type<span class=\"token punctuation\">;</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>\tx <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一般情况下，传值语义都是可行的，但也有很多特殊情况：作为参数的函数对象拷贝代价过高（具有复杂的内部状态），不希望拷贝对象（内部状态不应该被改变），甚至拷贝是不可行的（noncopyable、singleton）。</p>\n<p><code> boost.ref</code>  应用代理模式，引入对象引用的包装器概念解决了这个问题。它位于命名空间 boost，为了使用 ref 组件，需要包含头文件 <code> include &lt;boost/ref.hpp&gt;</code></p>\n<h2 id=\"类摘要\"><a class=\"markdownIt-Anchor\" href=\"#类摘要\">#</a> 类摘要</h2>\n<p>ref 库定义了一个很小很简单的引用类型的包装器，名字叫 reference_wrapper</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">reference_wrapper</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">reference_wrapper</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">t_</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 隐式转换</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">operator</span> T<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>t_<span class=\"token punctuation\">;</span>\t<span class=\"token punctuation\">&#125;</span>\t\t\t\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 访问被包装的对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    T<span class=\"token operator\">&amp;</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>t_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    T<span class=\"token operator\">*</span> <span class=\"token function\">get_pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> t_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 保存对象指针</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    T<span class=\"token operator\">*</span> t_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>reference_wrapper 的构造函数接受类型 T 的引用类型，内部使用指针存储指向 t 的引用，构造出一个 reference_wrapper 对象，从而包装了引用。</p>\n<p>get () 和 get_pointer () 这两个函数分别返回存储的引用和指针，相当于解开对 t 的包装。</p>\n<blockquote>\n<p>reference_wrapper 的构造函数被声明为 explicit，因此必须在创建对象时就赋值初始化，就像是使用一个引用类型的变量。</p>\n</blockquote>\n<p>reference_wrapper 还支持隐式类型转换，可以在需要的语境下返回存储的引用，因此它很像引用类型，能够在任何需要 T 出现的地方使用 reference_wrapper。</p>\n<h2 id=\"基本用法\"><a class=\"markdownIt-Anchor\" href=\"#基本用法\">#</a> 基本用法</h2>\n<h1 id=\"bind\"><a class=\"markdownIt-Anchor\" href=\"#bind\">#</a> bind</h1>\n<p>bind 是对 C++98 标准中函数适配器 bind1st/bind2nd 的泛化和增强，可以适配任意的可调用对象，包括函数指针、函数引用、成员函数指针和函数对象。</p>\n<p>bind 远远地超越了 STL 中的函数绑定器 bind1st/bind2nd，可以绑定最多 9 个函数参数，而且对被绑定对象的要求很低，可以在没有 result_type 内部类型定义的情况下完成对函数对象的绑定。</p>\n<p>bind 位于命名空间 boost，为了使用 bind 组件，需要包含头文件 <code> &lt;boost/bind.hpp&gt;</code> ，即</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/bind.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> boost<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code> bind</code>  库用于将函数对象与参数进行绑定，从而创建一个新的函数对象。这对于在代码中<strong>实现参数传递和延迟求值</strong>非常有用。</p>\n<p><code> bind</code>  库通过使用 <code> _1</code> 、 <code> _2</code>  等占位符来指定函数对象中的参数位置，从而实现参数的绑定。绑定后的函数对象可以像普通函数一样使用。</p>\n</blockquote>\n<h2 id=\"工作原理\"><a class=\"markdownIt-Anchor\" href=\"#工作原理\">#</a> 工作原理</h2>\n<p>bind 并不是一个单独的类或函数，而是非常庞大的家族，依据绑定的参数个数和要绑定的调用对象类型，总数有数十个不同的重载形式，但他们的名字都叫 bind，编译器会根据具体的绑定代码自动确定要使用的正确形式。</p>\n<p>bind 的基本形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token operator\">></span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A1</span><span class=\"token operator\">></span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>F f<span class=\"token punctuation\">,</span> A1 a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>arg<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span> _1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>arg<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">></span> _2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>arg<span class=\"token operator\">&lt;</span><span class=\"token number\">9</span><span class=\"token operator\">></span> _9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>bind 接受的第一个参数必须是一个可调用对象 f，可以是函数、函数指针、函数对象和成员函数指针，之后 bind 接受最多 9 个参数，参数数量必须与 f 的参数数量相等。</p>\n<p>绑定完成后，bind 会返回一个函数对象，它内部保存了 f 的拷贝，具有 operator ()，返回值类型被自动推导为 f 的返回值类型被自动推导为 f 的返回值类型。在发生调用时，这个函数对象把之前存储的参数转发给 f 完成调用。</p>\n<blockquote>\n<p>例如一个函数 <code> func(a1, a2)</code> ，它等价于一个具有无参 operator () 的 bind 函数对象调用 <code> bind(func, a1, a2)</code></p>\n</blockquote>\n<p>这是 bind 最简单的形式。bind 表达式存储了 func 和 a1、a2 的拷贝，产生了一个临时函数对象。因为 func 接受两个参数，而 a1 和 a2 都是实参，因此临时函数对象将具有一个无参的 operator ()。当 operator () 调用发生时函数对象把 a1、a2 的拷贝传递给 func，完成真正的函数调用。</p>\n<p>bind 的真正威力在于它的占位符，他们分别被定义为_1、_2、_3 一直到_9，位于一个匿名命名空间。占位符可以取代 bind 中参数的位置，<strong>在发生函数调用时才接受真正的参数</strong>。</p>\n<p>占位符的名字表示他在调用式中的顺序，而在绑定表达式中没有顺序的要求，_1 不一定要第一个出现，也不一定只出现一次。</p>\n<blockquote>\n<p>例如 <code> bind(func, _2, _1)(a1, a2)</code>  等价于 <code> func(a2, a1)</code></p>\n</blockquote>\n<h2 id=\"绑定普通函数\"><a class=\"markdownIt-Anchor\" href=\"#绑定普通函数\">#</a> 绑定普通函数</h2>\n<p>bind 可以绑定普通函数，可以使用函数名或函数指针。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/bind.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">auto</span> test1 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// f(1, 2)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">auto</span> test2 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// g(1, 2, 3)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">auto</span> test3 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// f(x, 9) </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">auto</span> test4 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// f(x, y)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">auto</span> test5 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// f(y, x)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">auto</span> test6 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//f (x, x), y 参数被忽略</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">auto</span> test7 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// g(x, 8, y)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">auto</span> test8 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> _3<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//g (z, y, y), x 参数被忽略</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> test8 <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>必须绑定表达式中提供函数要求的所有参数，无论是真是参数还是占位符</p>\n</blockquote>\n<p>bind 也可以绑定函数指针</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span> f_type<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 函数指针定义</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g<span class=\"token punctuation\">)</span> g_type<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 函数指针定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    f_type pf <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    g_type pg <span class=\"token operator\">=</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> z <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// (*pf)(x, 9)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>pg<span class=\"token punctuation\">,</span> _3<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// (*pg)(z, y, y)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"绑定类的成员函数\"><a class=\"markdownIt-Anchor\" href=\"#绑定类的成员函数\">#</a> 绑定类的成员函数</h2>\n<p><strong>类的成员函数不同于普通函数，因为成员函数指针不能直接调用 operator ()，它必须被绑定到一个对象或指针，然后才能得到 this 指针进而调用成员函数。因此 bind 需要 “牺牲” 一个占位符的位置，要求用户提供一个类的实例、引用或者指针，通过对象作为第一个参数来调用成员函数。</strong></p>\n<blockquote>\n<p>实际上成员函数的第一个（隐含的）参数就是对象指针。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>X<span class=\"token double-colon punctuation\">::</span>fun<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这意味着使用成员函数时只能最多绑定 8 个参数。</p>\n<p>例如，有一个 demo 类：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    demo a<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 类的实例 a</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    demo <span class=\"token operator\">&amp;</span>ra <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 类的实例 a 的引用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    demo <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 类的实例 a 的指针</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo<span class=\"token double-colon punctuation\">::</span>f<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo<span class=\"token double-colon punctuation\">::</span>f<span class=\"token punctuation\">,</span> ra<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo<span class=\"token double-colon punctuation\">::</span>f<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>必须在成员函数前加上取地址操作符 &amp;，表明这是一个成员函数指针，否则会无法通过编译，这是与绑定普通函数的一个小小的不同。</p>\n</blockquote>\n<blockquote>\n<p>bind 可以绑定成员函数，也可以使用专门用来绑定成员函数的 <code> boost::mem_fn</code> ，它同样被收录进 C++11</p>\n</blockquote>\n<p>示例：使用 bind 搭配标准算法 for_each 用来调用容器中所有对象的 print () 函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/bind.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> boost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">point</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>point<span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>point<span class=\"token double-colon punctuation\">::</span>print<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>bind 同样支持绑定虚拟成员函数，用法与非虚函数相同，虚函数的行为由实际调用发生时的实例来将决定。</p>\n</blockquote>\n<h2 id=\"绑定类的成员变量\"><a class=\"markdownIt-Anchor\" href=\"#绑定类的成员变量\">#</a> 绑定类的成员变量</h2>\n<p>bind 的另一个对类的操作是他可以绑定 public 成员变量，就像是一个选择器，用法和绑定成员函数类似，只需要把成员变量名像一个成员函数一样去使用。</p>\n<p>如上例 point 类，假设我们已经在 vector 中存储了大量的 point 对象，而我们想要得到他们的 x 坐标值：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>point<span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>point<span class=\"token double-colon punctuation\">::</span>x<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code> bind(&amp;point::x, _1)</code>  取出 point 对象的成员变量 x。</li>\n<li><code> transform</code>  算法调用 bind 表达式操作容器 v，这个把成员变量填入到 v2 中。</li>\n</ul>\n<p>使用 bind 也可以实现直接选择出 pair 对的 first 和 second 成员，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> string<span class=\"token operator\">></span> pair_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pair_t <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pair_t<span class=\"token double-colon punctuation\">::</span>first <span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pair_t<span class=\"token double-colon punctuation\">::</span>second<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// string</span></pre></td></tr></table></figure><h2 id=\"绑定函数对象\"><a class=\"markdownIt-Anchor\" href=\"#绑定函数对象\">#</a> 绑定函数对象</h2>\n<p>bind 可以绑定任意的函数对象，包括标准库中的所有与定义的函数对象。</p>\n<h2 id=\"对比c11标准\"><a class=\"markdownIt-Anchor\" href=\"#对比c11标准\">#</a> 对比 C++11 标准</h2>\n<p>C++11 标准使用可变参数模板和完美转发简化了 bind 的定义，支持绑定任意数量的参数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> BoundArgs<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>unspecified <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>F<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">,</span> BoundArgs<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//bind 函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> std<span class=\"token double-colon punctuation\">::</span>placeholders <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">extern</span> unspecified _1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">extern</span> unspecified _2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>std::bind</code>  的用法与 <code>boost::bind</code>  完全相同。但是为了避免冲突，标准占位符位于 <code>std::placeholder</code>  命名空间</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>placeholder<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>另外</p>\n<p>C++11 标准还提供了语言级别的 lambda 表达式，它可以就地声明匿名函数对象，用法非常灵活。lambda 表达式某种程度上也可以代替 bind。捕获列表 [] 相当于绑定的变量，函数参数列表 () 则相当于 bind 的占位符：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> lf <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t<span class=\"token comment\">//lambda 表达式，捕获所有外部变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 调用函数 f, x 占位，绑定一个参数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">lf</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 等价于 bind 表达式</span></pre></td></tr></table></figure><p>相比较，lambda 表达式更类似函数的形式更利于理解。</p>\n<h1 id=\"function\"><a class=\"markdownIt-Anchor\" href=\"#function\">#</a> function</h1>\n<p>function 是一个函数对象的” 容器 “，概念上像是 C/C++ 中函数指针类型的泛化，是一种” 智能函数指针 “。它<strong>以对象的形式封装了原始的函数指针或函数对象</strong>，能够容纳任意符合函数签名的可调用对象。因此它<strong>可以被用于回调机制，暂时保管函数或函数对象，在之后需要的时机再调用，使回调机制拥有更多的弹性</strong>。</p>\n<p>function 可以配合 bind/lambda 使用，存储 bind/lambda 表达式的结果，使 bind/lambda 可以被多次调用。</p>\n<h2 id=\"类摘要-2\"><a class=\"markdownIt-Anchor\" href=\"#类摘要-2\">#</a> 类摘要</h2>\n<p>同 bind 一样，function 也不是一个单独的类，function 可以容纳 0 到 10 个参数的函数，因此多达 11 个类，命名分别为 function0 到 function10。但通常使用一个更通用的 function 类：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">Signature</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">function</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">functionN</span> <span class=\"token operator\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TN</span><span class=\"token operator\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pubilc<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">typedef</span> R \tresult_type<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 内部类型定义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">typedef</span> TN \targN_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> arity <span class=\"token operator\">=</span> N<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 参数个数常量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">F</span><span class=\"token operator\">></span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> function<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 基本操作</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">safe_bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//bool 转型</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Functor</span><span class=\"token operator\">></span> Functor<span class=\"token operator\">*</span> <span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 访问内部元素</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Functor</span><span class=\"token operator\">></span> <span class=\"token keyword\">bool</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Functor<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>type_info<span class=\"token operator\">&amp;</span> <span class=\"token function\">target_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    result_type <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arg1_type<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 调用操作符</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"function的声明\"><a class=\"markdownIt-Anchor\" href=\"#function的声明\">#</a> function 的声明</h2>\n<p>function 只需要一个模板参数，这个参数就是将要容纳的函数类型，例如：</p>\n<p><code> function&lt;int ()&gt; func;</code></p>\n<p>将声明一个可以容纳返回值为 int、无参函数的 function 对象。尖括号中的类型声明就是一个没有函数名的函数原型。它也具有很好的可读性，可以读作 function of int ()，表明这是一个容纳 int () 的 function 对象。</p>\n<p>function 的函数类型声明也可以像真的函数那样带有参数名，例如</p>\n<p><code> function&lt;int (int a, int b, int c)&gt; func2;</code>  与 <code> function&lt;int (int , int , int)&gt; func2;</code>  是完全等价的。</p>\n<blockquote>\n<p>如果我们已经知道将要容纳的函数，那么也可以用 C++11 关键字 decltype 来直接获取函数类型。例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 使用 decltype 推导函数类型</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"操作函数\"><a class=\"markdownIt-Anchor\" href=\"#操作函数\">#</a> 操作函数</h2>\n<p>function 的构造函数可以接受任意符合模板中声明的函数类型的可调用对象，如函数指针和函数对象，或是另一个 function 对象的引用，之后在内部存储一份它的拷贝。</p>\n<h2 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\">#</a> 用法</h2>\n<p>function 就像是一个函数的容器，也可以把 function 想象成一个泛化的函数指针，只要符合它声明中的函数类型，任何普通函数、成员函数、函数对象都可以存储在 function 对象中，然后在任何需要的时候被调用。</p>\n<p>这种能够容纳任意可调用对象的能力是非常重要的，在编写泛型代码的时候尤其有用，他使我们可以接受任意的函数或者函数对象，增加程序的灵活性。与原始的函数指针相比，function 对象的体积更大（3 个指针大小），速度稍慢（10% 左右的性能差异）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/function.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> boost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 无参构造一个 function 对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 此时 function 不持有任何对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    func <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//func 存储函数 f</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 验证已存储函数 f</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 调用 function 的 operator ()</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    func <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//function 清空，相当于 clear ()</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只要函数签名式一致，function 也可以存储成员函数和函数对象，或者是 bind/lambda 表达式。假设有一个类 demo_class，它既有普通成员函数，又重载了 operator ()：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">demo_class</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t<span class=\"token comment\">// 加法操作</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 重载 operator ()</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>demo_class<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>func1 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo_class<span class=\"token double-colon punctuation\">::</span>add<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>demo_class sc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>存储成员函数时可以<strong>直接在 function 声明的函数签名式中指定类的类型，然后用 bind 绑定成员函数</strong>：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>demo_class<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>func1 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo_class<span class=\"token double-colon punctuation\">::</span>add<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>demo_class sc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>也可以在函数类型中<strong>仅写出成员函数的签名，在 bind 时直接绑定类的实例</strong>：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>func <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo_class<span class=\"token double-colon punctuation\">::</span>add<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"使用ref库\"><a class=\"markdownIt-Anchor\" href=\"#使用ref库\">#</a> 使用 ref 库</h2>\n<p>function 使用拷贝语义保存参数，当参数很大时拷贝的代价往往很高，或者有时不能拷贝参数。</p>\n<p>这时可以使用 ref 库，它允许以引用的方式传递参数，能够降低 function 拷贝的代价。</p>\n<p>function 并不要求 ref 库提供 operator ()，因为它能够自动识别包装类 reference_wrapper，并调用 get () 方法获得被包装的对象：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>demo_class sc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>func <span class=\"token operator\">=</span> <span class=\"token function\">cref</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 使用 cref () 函数包装常对象的引用，cref () 是一个常引用包装只能调用 const 成员对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 调用被引用的对象</span></pre></td></tr></table></figure><h2 id=\"用于回调\"><a class=\"markdownIt-Anchor\" href=\"#用于回调\">#</a> 用于回调</h2>\n<p>function 可以容纳任意符合函数签名式的可调用物，因此它非常适合代替函数指针，存储用于回调的函数。</p>\n<p>作为示例，定义一个 demo 类，它使用 function 代替函数指针作为内部类型保存回调函数，存储形式为 void (int) 的可调用物：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">demo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func_t<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//function 类型定义</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    func_t func<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">//function 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 内部成员变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">n</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">CallBack</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>CallBack f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        func <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 存储回调函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//demo 类定义结束</span></pre></td></tr></table></figure><ul>\n<li>demo 类使用模板函数 accept () 接受回调函数。之所以使用模板函数，是因为这种形式更加灵活，用户可以在不知道也不关心内部存储形式的情况下传递任何可调用对象，包括函数指针和函数对象</li>\n<li>demo 类的成员函数 run () 用于调用回调函数</li>\n</ul>\n<p>接下来定义一个用于回调的函数，他将输入翻倍：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">call_back_func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"call_back_func:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>demo 的回调可以这样使用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    demo <span class=\"token function\">dc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>call_back_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 接受回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 调用回调函数，输出 “call_back_func:20”</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<p>使用普通函数进行回调并不能体现 function 的好处，</p>\n<hr>\n<p>function 还可以搭配 bind 库，把 bind 表达式作为回调函数，可以<strong>接受类成员函数</strong>，或者把不符合函数签名式的函数 bind 转为可接受的形式。</p>\n<p>示例如下，定义一个回调函数工厂类，他有两个回调函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">call_back_factory</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">call_back_func1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"call_back_factory1:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">call_back_func2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"call_back_factory2:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">*</span> j <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    demo <span class=\"token function\">dc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    call_back_factory cbf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>call_back_factory<span class=\"token double-colon punctuation\">::</span>call_bcak_func1<span class=\"token punctuation\">,</span> cbf<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 输出：call_back_factory1:20</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>call_back_factory<span class=\"token double-colon punctuation\">::</span>call_bcak_func2<span class=\"token punctuation\">,</span> cbf<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 输出：call_back_factory2:100</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>通过以上示例可以看到 function 用于回调的好处，它无需改变回调的接口就可以解耦客户代码，使客户代码不必绑死在一种回调形式上，进而可以持续演化，而 function 始终能够保持与客户代码争取沟通。</p>\n</blockquote>\n<h2 id=\"对比c11的auto\"><a class=\"markdownIt-Anchor\" href=\"#对比c11的auto\">#</a> 对比 C++11 的 auto</h2>\n<p>一些情况下，C++11 的新关键字 auto 可以近似地取代 function，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> func <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 存储一个普通函数指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>demo sc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span> func2 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo<span class=\"token double-colon punctuation\">::</span>add<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 存储一个 bind 表达式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>但他们的实现大不相同。</strong></p>\n<ul>\n<li>function 类似一个容器，可以容纳任意有 operator () 的类型（函数指针、函数对象、lambda 表达式），它是运行时的，可以任意拷贝、赋值、存储其他可调用物。</li>\n<li>auto 仅是编译器推导出的一个静态类型变量，他很难再赋以其他值，也无法容纳其他类型，不能用于泛型编程。</li>\n</ul>\n<p>当需要存储一个可调用物用于回调时，最好使用 function，它具有更多的灵活性，特别是把回调作为类的一个成员的时候我们只能使用 function。</p>\n<p>auto 的优点在于，它的类型是在编译器推导的，没有运行时开销，效率上要比 function 略高一点，但他声明的变量不能存储其他类型的可调用物，不具有灵活性，只能用于有限范围的延后回调。</p>\n<h2 id=\"对比c11的stdfunction\"><a class=\"markdownIt-Anchor\" href=\"#对比c11的stdfunction\">#</a> 对比 C++11 的 std::function</h2>\n<p>C++11 标准定义了 <code> std::function</code> ，声明摘要如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> ArgTypes<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">function</span><span class=\"token operator\">&lt;</span><span class=\"token function\">R</span><span class=\"token punctuation\">(</span>ArgTypes<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token operator\">></span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>function<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 交换函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>F<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> A<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 显式 bool 转型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    R <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ArgTypes<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// operator()</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>type_info<span class=\"token operator\">&amp;</span> <span class=\"token function\">target_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> T<span class=\"token operator\">*</span> <span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>std::function</code>  与 <code>boost::function</code>  基本相同，只有少量区别：</p>\n<ul>\n<li>\n<p>没有 <code>clear()</code>  和 <code>empty()</code>  成员函数；</p>\n</li>\n<li>\n<p>提供 <code>assign()</code>  成员函数；</p>\n</li>\n<li>\n<p><code>explicit()</code>  显式 bool 转型。</p>\n<p>因此，同 shared_ptr 一样，在函数返回值或者函数参数等语境里转型 bool 需要使用 <code>static_cast&lt;bool&gt;(f)</code>  或者 <code>!!f</code>  的形式。</p>\n</li>\n</ul>\n",
            "tags": [
                "C++",
                "Boost"
            ]
        }
    ]
}