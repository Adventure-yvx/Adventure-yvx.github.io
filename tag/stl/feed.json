{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"stl\" tag",
    "description": "",
    "home_page_url": "https://adventure-yx.github.io",
    "items": [
        {
            "id": "https://adventure-yx.github.io/2023/03/12/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/",
            "url": "https://adventure-yx.github.io/2023/03/12/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/",
            "title": "算法进阶",
            "date_published": "2023-03-12T12:42:19.000Z",
            "content_html": "<h1 id=\"排序算法总结\"><a class=\"markdownIt-Anchor\" href=\"#排序算法总结\">#</a> 排序算法总结</h1>\n<table>\n<thead>\n<tr>\n<th>排序算法</th>\n<th>英文名称</th>\n<th>时间复杂度</th>\n<th>最佳情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>排序方式</th>\n<th>稳定性</th>\n<th>排序类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>Bubble Sort</td>\n<td>O(n²)</td>\n<td>O(n)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n<td>In-place</td>\n<td>稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>Insertion Sort</td>\n<td>O(n²)</td>\n<td>O(n)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n<td>In-place</td>\n<td>稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>Selection Sort</td>\n<td>O(n²)</td>\n<td>O(n²)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n<td>In-place</td>\n<td>不稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>Shell Sort</td>\n<td>O(n^3/2)</td>\n<td>O(nlog²n)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n<td>In-place</td>\n<td>不稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>Quick Sort</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(n²)</td>\n<td>O(logn)</td>\n<td>In-place</td>\n<td>不稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>Heap Sort</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(1)</td>\n<td>In-place</td>\n<td>不稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>Merge Sort</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(n)</td>\n<td>Out-place</td>\n<td>稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>Bucket Sort</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>Out-place</td>\n<td>稳定</td>\n<td>非比较</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>Radix Sort</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>Out-place</td>\n<td>稳定</td>\n<td>非比较</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>Counting Sort</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>Out-place</td>\n<td>稳定</td>\n<td>非比较</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>稳定：如果原本序列中 a 在 b 前面且 a=b，排序后 a 仍在 b 前面，顺序不变；</li>\n<li>不稳定：如果原本序列中 a 在 b 前面且 a=b，排序后 a 可能在 b 后面，顺序可能发生改变；</li>\n<li>内排序：所有排序操作均在内存中完成；</li>\n<li>外排序：由于数据量太大，将其放入磁盘中，排序过程中需要磁盘与内存之间的数据传输；</li>\n<li>时间复杂度：一个排序算法在执行过程中所耗费的时间量级的度量；</li>\n<li>空间复杂度：一个排序算法在运行过程中临时占用存储空间大小的度量；</li>\n</ul>\n<h2 id=\"冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h2>\n<p>遍历所有的数据，每次对相邻元素进行两两比较，如果顺序和预先规定的顺序不一致，则进行位置交换；这样一次遍历会将最大或最小的数据上浮至顶端，之后再重复同样的操作，直到所有的数据有序。数据反序时，耗时最长 O (n²)；数据正序时，耗时最短 O (n)。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 冒泡排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span>T data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                flag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                T t<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"快速排序\"><a class=\"markdownIt-Anchor\" href=\"#快速排序\">#</a> 快速排序</h2>\n<p>快速排序采用分治法。首先从数列中挑出一个元素作为中间值。依次遍历数据，所有比中间值小的元素放在左边，所有比中间值大的元素放在右边。然后按此方法对左右两个子序列分别进行递归操作，直到所有数据有序。最理想的情况是，每次划分所选择的中间数恰好将当前序列几乎等分（均匀排布），整个算法的时间复杂度为 O (n logn)。 最坏的情况是，每次所选的中间数是当前序列中的最大或最小元素（正序和逆序都是最坏），整个排序算法的时间复杂度为 O (n²)。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 快速排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Partition</span><span class=\"token punctuation\">(</span>T data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    T pivot<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token operator\">&amp;&amp;</span>data<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>pivot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        data<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token operator\">&amp;&amp;</span>data<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>pivot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        data<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    data<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>pivot<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>T data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span><span class=\"token function\">Partition</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"算法性能分析\"><a class=\"markdownIt-Anchor\" href=\"#算法性能分析\">#</a> 算法性能分析</h1>\n<h2 id=\"时间复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#时间复杂度分析\">#</a> 时间复杂度分析</h2>\n<h3 id=\"什么是时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#什么是时间复杂度\">#</a> 什么是时间复杂度</h3>\n<p><strong>时间复杂度是一个函数，它定性描述该算法的运行时间</strong>。</p>\n<p>我们在软件开发中，时间复杂度就是用来方便开发者估算出程序运行的答题时间。</p>\n<p>那么该如何估计程序运行时间呢，通常会估算算法的操作单元数量来代表程序消耗的时间，这里默认 CPU 的每个单元运行消耗的时间都是相同的。</p>\n<p>假设算法的问题规模为 n，那么操作单元数量便用函数 f (n) 来表示，随着数据规模 n 的增大，算法执行时间的增长率和 f (n) 的增长率相同，这称作为算法的渐近时间复杂度，简称时间复杂度，记为 O (f (n))。</p>\n<h3 id=\"什么是大o\"><a class=\"markdownIt-Anchor\" href=\"#什么是大o\">#</a> 什么是大 O</h3>\n<p>算法导论给出的解释：<strong>大 O 用来表示上界的</strong>，当用它作为算法的最坏情况运行时间的上界，就是对任意数据输入的运行时间的上界。</p>\n<p>同样算法导论给出了例子：拿插入排序来说，插入排序的时间复杂度我们都说是 O (n^2) 。</p>\n<p>输入数据的形式对程序运算时间是有很大影响的，在数据本来有序的情况下时间复杂度是 O (n)，但如果数据是逆序的话，插入排序的时间复杂度就是 O (n<sup>2)，也就对于所有输入情况来说，最坏是 O (n</sup>2) 的时间复杂度，所以称插入排序的时间复杂度为 O (n^2)。</p>\n<p>同样的同理再看一下快速排序，都知道快速排序是 O (nlogn)，但是当数据已经有序情况下，快速排序的时间复杂度是 O (n^2) 的，<strong>所以严格从大 O 的定义来讲，快速排序的时间复杂度应该是 O (n^2)</strong>。</p>\n<p><strong>但是我们依然说快速排序是 O (nlogn) 的时间复杂度，这个就是业内的一个默认规定，这里说的 O 代表的就是一般情况，而不是严格的上界</strong>。</p>\n<p>我们主要关心的还是一般情况下的数据形式。</p>\n<p><strong>面试中说道算法的时间复杂度是多少指的都是一般情况</strong>。但是如果面试官和我们深入探讨一个算法的实现以及性能的时候，就要时刻想着数据用例的不一样，时间复杂度也是不同的，这一点是一定要注意的。</p>\n<h3 id=\"不同数据规模的差异\"><a class=\"markdownIt-Anchor\" href=\"#不同数据规模的差异\">#</a> 不同数据规模的差异</h3>\n<p><img data-src=\"20230310124015324.png\" alt=\"时间复杂度，不同数据规模的差异\"></p>\n<p>如图中可以看出不同算法的时间复杂度在不同数据输入规模下的差异。</p>\n<p>在决定使用哪些算法的时候，不是时间复杂越低的越好（因为简化后的时间复杂度忽略了常数项等等），要考虑数据规模，如果数据规模很小甚至可以用 O (n^2) 的算法比 O (n) 的更合适（在有常数项的时候）。</p>\n<p>就像上图中 O (5n^2) 和 O (100n) 在 n 为 20 之前 很明显 O (5n^2) 是更优的，所花费的时间也是最少的。</p>\n<p>那为什么在计算时间复杂度的时候要忽略常数项系数呢，也就说 O (100n) 就是 O (n) 的时间复杂度，O (5n^2) 就是 O (n^2) 的时间复杂度，而且要默认 O (n) 优于 O (n^2) 呢 ？</p>\n<p>这里就又涉及到大 O 的定义，<strong>因为大 O 就是数据量级突破一个点且数据量级非常大的情况下所表现出的时间复杂度，这个数据量也就是常数项系数已经不起决定性作用的数据量</strong>。</p>\n<p>例如上图中 20 就是那个点，n 只要大于 20 常数项系数已经不起决定性作用了。</p>\n<p><strong>所以我们说的时间复杂度都是省略常数项系数的，是因为一般情况下都是默认数据规模足够的大，基于这样的事实，给出的算法时间复杂的的一个排行如下所示</strong>：</p>\n<p>O (1) 常数阶 &lt; O (logn) 对数阶 &lt; O (n) 线性阶 &lt; O (nlogn) 线性对数阶 &lt; O (n^2) 平方阶 &lt; O (n^3) 立方阶 &lt; O (2^n) 指数阶</p>\n<p>但是也要注意大常数，如果这个常数非常大，例如 10^7 ，10^9 ，那么常数就是不得不考虑的因素了。</p>\n<h1 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h1>\n<p>** 数组是存放在连续内存空间上的相同类型数据的集合。** 数组可以方便的通过下标索引的方式获取到下标下对应的数据。</p>\n<ul>\n<li><strong>数组下标都是从 0 开始的。</strong></li>\n<li><strong>数组内存空间的地址是连续的</strong></li>\n</ul>\n<p>正是<strong>因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。</strong></p>\n<p>使用 C++ 的话，要注意 vector 和 array 的区别，vector 的底层实现是 array，严格来讲 vector 是容器，不是数组。</p>\n<p><strong>数组的元素是不能删的，只能覆盖。</strong></p>\n<h2 id=\"二分查找\"><a class=\"markdownIt-Anchor\" href=\"#二分查找\">#</a> 二分查找</h2>\n<h3 id=\"二分查找-leetcode704\"><a class=\"markdownIt-Anchor\" href=\"#二分查找-leetcode704\">#</a> 二分查找 - LeetCode704</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9iaW5hcnktc2VhcmNoLw==\">704. 二分查找 - 力扣（LeetCode）</span></p>\n<blockquote>\n<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n<p>示例 1:</p>\n<p>输入: nums = [-1,0,3,5,9,12], target = 9<br>\n 输出: 4<br>\n 解释: 9 出现在 nums 中并且下标为 4</p>\n<p>示例 2:</p>\n<p>输入: nums = [-1,0,3,5,9,12], target = 2<br>\n 输出: -1<br>\n 解释: 2 不存在 nums 中因此返回 -1</p>\n<p>提示：你可以假设 nums 中的所有元素是不重复的。<br>\nn 将在 [1, 10000] 之间。<br>\nnums 的每个元素都将在 [-9999, 9999] 之间。</p>\n</blockquote>\n<p><strong>这道题目的前提是数组为有序数组</strong>，同时题目还强调<strong>数组中无重复元素</strong>，因为一旦有重复元素，使用二分查找法返回的元素下标可能不是唯一的，这些都是使用二分法的前提条件。</p>\n<p>二分查找涉及的很多的边界条件，逻辑比较简单，但就是写不好。例如到底是  <code>while(left &lt; right)</code>  还是  <code>while(left &lt;= right)</code> ，到底是 <code>right = middle</code>  呢，还是要 <code>right = middle - 1</code>  呢？</p>\n<p>大家写二分法经常写乱，主要是因为<strong>对区间的定义没有想清楚，区间的定义就是不变量</strong>。要在二分查找的过程中，保持不变量，就是在 while 寻找中每一次边界的处理都要坚持根据区间的定义来操作，这就是<strong>循环不变量</strong>规则。</p>\n<p>写二分法，区间的定义一般为两种，左闭右闭即 [left, right]，或者左闭右开即 [left, right)。</p>\n<h3 id=\"二分法第一种写法\"><a class=\"markdownIt-Anchor\" href=\"#二分法第一种写法\">#</a> 二分法第一种写法</h3>\n<p>第一种写法，我们定义 target 是在一个在左闭右闭的区间里，<strong>也就是 [left, right] （这个很重要非常重要）</strong>。</p>\n<p>区间的定义这就决定了二分法的代码应该如何写，<strong>因为定义 target 在 [left, right] 区间，所以有如下两点：</strong></p>\n<ul>\n<li>while (left &lt;= right) 要使用 &lt;= ，因为 left == right 是有意义的，所以使用 &lt;=</li>\n<li>if (nums [middle] &gt; target) right 要赋值为 middle - 1，因为当前这个 nums [middle] 一定不是 target，那么接下来要查找的左区间结束下标位置就是 middle - 1</li>\n</ul>\n<p>例如在数组：1,2,3,4,7,9,10 中查找元素 2，如图所示：</p>\n<p><img data-src=\"20210311153055723.jpg\" alt=\"704.二分查找\"></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义 target 在左闭右闭的区间里，[left, right]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 当 left==right，区间 [left, right] 依然有效，所以用 &lt;=</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">int</span> middle <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 防止溢出 等同于 (left + right)/2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                right <span class=\"token operator\">=</span> middle <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//target 在左区间，所以 [left, middle - 1]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                left <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//target 在右区间，所以 [middle + 1, right]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// nums[middle] == target</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">return</span> middle<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组中找到目标值，直接返回下标</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 未找到目标值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>时间复杂度：O (log n)</li>\n<li>空间复杂度：O (1)</li>\n</ul>\n<h3 id=\"二分法第二种写法\"><a class=\"markdownIt-Anchor\" href=\"#二分法第二种写法\">#</a> 二分法第二种写法</h3>\n<p>如果说定义 target 是在一个在左闭右开的区间里，也就是 [left, right) ，那么二分法的边界处理方式则截然不同。</p>\n<p>有如下两点：</p>\n<ul>\n<li>while (left &lt; right)，这里使用 &lt; , 因为 left == right 在区间 [left, right) 是没有意义的</li>\n<li>if (nums [middle] &gt; target) right 更新为 middle，因为当前 nums [middle] 不等于 target，去左区间继续寻找，而寻找区间是左闭右开区间，所以 right 更新为 middle，即：下一个查询区间不会去比较 nums [middle]</li>\n</ul>\n<p>在数组：1,2,3,4,7,9,10 中查找元素 2，如图所示：（<strong>注意和方法一的区别</strong>）</p>\n<p><img data-src=\"20210311153123632.jpg\" alt=\"704.二分查找1\"></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义 target 在左闭右开的区间里，即：[left, right)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 因为 left == right 的时候，在 [left, right) 是无效的空间，所以使用 &lt;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">int</span> middle <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                right <span class=\"token operator\">=</span> middle<span class=\"token punctuation\">;</span> <span class=\"token comment\">//target 在左区间，在 [left, middle) 中</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                left <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//target 在右区间，在 [middle + 1, right) 中</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// nums[middle] == target</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">return</span> middle<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组中找到目标值，直接返回下标</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 未找到目标值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>时间复杂度：O (log n)</li>\n<li>空间复杂度：O (1)</li>\n</ul>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>二分法是非常重要的基础算法，为什么会对二分法一看就会，一写就废？其实主要就是对区间的定义没有理解清楚，在循环中没有始终坚持根据查找区间的定义来做边界处理。</p>\n<p>区间的定义就是不变量，那么在循环中坚持根据查找区间的定义来做边界处理，就是循环不变量规则。</p>\n<h3 id=\"相关题目\"><a class=\"markdownIt-Anchor\" href=\"#相关题目\">#</a> = 相关题目 =</h3>\n<h3 id=\"搜索插入位置-leetcode35\"><a class=\"markdownIt-Anchor\" href=\"#搜索插入位置-leetcode35\">#</a> 搜索插入位置 - LeetCode35</h3>\n<h3 id=\"在排序数组中查找元素的第一个和最后一个位置-leetcode34\"><a class=\"markdownIt-Anchor\" href=\"#在排序数组中查找元素的第一个和最后一个位置-leetcode34\">#</a> 在排序数组中查找元素的第一个和最后一个位置 - LeetCode34</h3>\n<h3 id=\"x的平方根-leetcode69\"><a class=\"markdownIt-Anchor\" href=\"#x的平方根-leetcode69\">#</a> x 的平方根 - LeetCode69</h3>\n<h3 id=\"有效的完全平方数-leetcode367\"><a class=\"markdownIt-Anchor\" href=\"#有效的完全平方数-leetcode367\">#</a> 有效的完全平方数 - LeetCode367</h3>\n<h2 id=\"移除元素\"><a class=\"markdownIt-Anchor\" href=\"#移除元素\">#</a> 移除元素</h2>\n<h3 id=\"移除元素-leetcode27\"><a class=\"markdownIt-Anchor\" href=\"#移除元素-leetcode27\">#</a> 移除元素 - LeetCode27</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZW1vdmUtZWxlbWVudC8=\">27. 移除元素 - 力扣（LeetCode）</span>)</p>\n<p>给你一个数组  <code>nums</code>  和一个值  <code>val</code> ，你需要 <strong>原地</strong> 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须仅使用 O (1) 额外空间并 <strong>原地</strong> 修改输入数组。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p>说明:</p>\n<p>为什么返回数值是整数，但输出的答案是数组呢？</p>\n<p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>\n<p>你可以想象内部操作如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//nums 是以 “引用” 方式传递的。也就是说，不对实参作任何拷贝</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 在函数里修改输入数组对于调用者是可见的。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 根据你的函数返回的长度，它会打印出数组中 该长度范围内 的所有元素。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>示例 1：</p>\n<p><strong>输入</strong>：nums = [3,2,2,3], val = 3<br>\n<strong> 输出</strong>：2, nums = [2,2]<br>\n<strong> 解释</strong>：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</p>\n</blockquote>\n<blockquote>\n<p>示例 2：</p>\n<p><strong>输入</strong>：nums = [0,1,2,2,3,0,4,2], val = 2<br>\n<strong> 输出</strong>：5, nums = [0,1,4,0,3]<br>\n<strong> 解释</strong>：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p>\n</blockquote>\n<p>提示：</p>\n<ul>\n<li>0 &lt;= nums.length &lt;= 100</li>\n<li>0 &lt;= nums[i] &lt;= 50</li>\n<li>0 &lt;= val &lt;= 100</li>\n</ul>\n<p><strong>注意：数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，只能覆盖。</strong></p>\n<h3 id=\"暴力解法\"><a class=\"markdownIt-Anchor\" href=\"#暴力解法\">#</a> 暴力解法</h3>\n<p>两层 for 循环，一个 for 循环<strong>遍历数组元素</strong> ，第二个 for 循环<strong>更新数组</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度 O (n^2)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 发现需要移除的元素，就将数组集体向前移动一位</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 因为下标 i 以后的数值都向前移动了一位，所以 i 也向前移动一位</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此时数组的大小 - 1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"双指针法\"><a class=\"markdownIt-Anchor\" href=\"#双指针法\">#</a> 双指针法</h3>\n<p>双指针法（快慢指针法）： <strong>通过一个快指针和慢指针在一个 for 循环下完成两个 for 循环的工作。</strong></p>\n<p>定义快慢指针</p>\n<ul>\n<li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li>\n<li>慢指针：指向更新 新数组下标的位置</li>\n</ul>\n<p><strong>双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组、链表、字符串等操作的面试题，都使用双指针法。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度：O (n)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> slowIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fastIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> fastIndex <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> fastIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>fastIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                nums<span class=\"token punctuation\">[</span>slowIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>fastIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> slowIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 相向双指针方法，基于元素顺序可以改变的题目描述改变了元素相对位置，确保了移动最少元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* 时间复杂度：O (n)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* 空间复杂度：O (1)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> leftIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> rightIndex <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>leftIndex <span class=\"token operator\">&lt;=</span> rightIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 找左边等于 val 的元素</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>leftIndex <span class=\"token operator\">&lt;=</span> rightIndex <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>leftIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token operator\">++</span>leftIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 找右边不等于 val 的元素</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>leftIndex <span class=\"token operator\">&lt;=</span> rightIndex <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>rightIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token operator\">--</span> rightIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 将右边不等于 val 的元素覆盖左边等于 val 的元素</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftIndex <span class=\"token operator\">&lt;</span> rightIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                nums<span class=\"token punctuation\">[</span>leftIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>rightIndex<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> leftIndex<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//leftIndex 一定指向了最终数组末尾的下一个元素</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"相关题目-2\"><a class=\"markdownIt-Anchor\" href=\"#相关题目-2\">#</a> = 相关题目 =</h3>\n<h3 id=\"删除排序数组中的重复项-leetcode26\"><a class=\"markdownIt-Anchor\" href=\"#删除排序数组中的重复项-leetcode26\">#</a> 删除排序数组中的重复项 - LeetCode26</h3>\n<h3 id=\"移动零-leetcode283\"><a class=\"markdownIt-Anchor\" href=\"#移动零-leetcode283\">#</a> 移动零 - LeetCode283</h3>\n<h3 id=\"比较含退格的字符串-leetcode844\"><a class=\"markdownIt-Anchor\" href=\"#比较含退格的字符串-leetcode844\">#</a> 比较含退格的字符串 - LeetCode844</h3>\n<h3 id=\"有序数组的平方-leetcode977\"><a class=\"markdownIt-Anchor\" href=\"#有序数组的平方-leetcode977\">#</a> 有序数组的平方 - LeetCode977</h3>\n<h1 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\">#</a> 链表</h1>\n<h2 id=\"链表理论基础\"><a class=\"markdownIt-Anchor\" href=\"#链表理论基础\">#</a> 链表理论基础</h2>\n<h3 id=\"单链表\"><a class=\"markdownIt-Anchor\" href=\"#单链表\">#</a> 单链表</h3>\n<p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域（存放指向下一个节点的指针），最后一个节点的指针域指向 null。链表的入口节点称为链表的头结点也就是 head。</p>\n<p>如图所示：</p>\n<p><img data-src=\"20200806194529815.png\" alt=\"链表1\"></p>\n<h3 id=\"双链表\"><a class=\"markdownIt-Anchor\" href=\"#双链表\">#</a> 双链表</h3>\n<p>单链表中的指针域只能指向节点的下一个节点。</p>\n<p>双链表：每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点。</p>\n<p>双链表 既可以向前查询也可以向后查询。</p>\n<p>如图所示：</p>\n<p><img data-src=\"20200806194559317.png\" alt=\"链表2\"></p>\n<h3 id=\"循环链表\"><a class=\"markdownIt-Anchor\" href=\"#循环链表\">#</a> 循环链表</h3>\n<p>顾名思义，就是链表首尾相连。循环链表可以用来解决约瑟夫环问题。</p>\n<h3 id=\"链表的存储方式\"><a class=\"markdownIt-Anchor\" href=\"#链表的存储方式\">#</a> 链表的存储方式</h3>\n<p>数组是在内存中是连续分布的，但是链表在内存中不是连续分布的。链表是通过指针域的指针链接在内存中各个节点。所以链表中的节点在内存中不是连续分布的 ，而是散乱分布在内存中的某地址上，<strong>分配机制取决于操作系统的内存管理</strong>。</p>\n<h3 id=\"链表的定义\"><a class=\"markdownIt-Anchor\" href=\"#链表的定义\">#</a> 链表的定义</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单链表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 节点上存储的元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ListNode <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向下一个节点的指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// 节点的构造函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>不定义构造函数行不行？</p>\n<p>答案是可以的，C++ 默认生成一个构造函数。但是这个构造函数不会初始化任何成员变量，下面举两个例子：</p>\n<p>通过自己定义构造函数初始化节点：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ListNode<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用默认构造函数初始化节点：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ListNode<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>head<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>所以如果不定义构造函数使用默认构造函数的话，在初始化的时候就不能直接给变量赋值。</p>\n<h2 id=\"移除链表元素-leetcode203\"><a class=\"markdownIt-Anchor\" href=\"#移除链表元素-leetcode203\">#</a> 移除链表元素 - LeetCode203</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZW1vdmUtbGlua2VkLWxpc3QtZWxlbWVudHMv\">203. 移除链表元素 - 力扣（LeetCode）</span></p>\n<blockquote>\n<p>给你一个链表的头节点  <code>head</code>  和一个整数  <code>val</code>  ，请你删除链表中所有满足  <code>Node.val == val</code>  的节点，并返回 <strong>新的头节点</strong></p>\n<p>示例 1： 输入：head = [1,2,6,3,4,5,6], val = 6 输出：[1,2,3,4,5]</p>\n<p>示例 2： 输入：head = [], val = 1 输出：[]</p>\n<p>示例 3： 输入：head = [7,7,7,7], val = 7 输出：[]</p>\n<p><strong>提示：</strong></p>\n<ul>\n<li>列表中的节点数目在范围  <code>[0, 104]</code>  内</li>\n<li><code>1 &lt;= Node.val &lt;= 50</code></li>\n<li><code>0 &lt;= val &lt;= 50</code></li>\n</ul>\n</blockquote>\n<ul>\n<li><strong>直接使用原来的链表来进行删除操作。</strong></li>\n</ul>\n<p><img data-src=\"D:%5CBlog%5Csource_posts%5C%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6%5C2021031609544922.png\" alt=\"203_链表删除元素3\"></p>\n<p>移除头结点和移除其他节点的操作是不一样的，因为链表的其他节点都是通过前一个节点来移除当前节点，而头结点没有前一个节点。</p>\n<p>所以头结点如何移除呢，其实只要将头结点向后移动一位就可以，这样就从链表中移除了一个头结点，然后将原头结点从内存中删掉。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">removeElements</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 删除头结点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> head<span class=\"token operator\">-></span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 注意这里不是 if</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            ListNode<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">delete</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 删除非头结点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                ListNode<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">delete</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>设置一个虚拟头结点在进行删除操作。</strong></li>\n</ul>\n<p>可以以一种统一的逻辑来移除链表的节点。<strong>设置一个虚拟头结点</strong>，这样原链表的所有节点就都可以按照统一的方式进行移除了。</p>\n<p><img data-src=\"20210316095619221.png\" alt=\"203_链表删除元素6\"></p>\n<p>这里来给链表添加一个虚拟头结点为新的头结点，此时要移除这个旧头结点元素 1。</p>\n<p>最后在题目中，return 头结点的时候，别忘了  <code>return dummyNode-&gt;next;</code> ， 这才是新的头结点</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">removeElements</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> dummyHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置一个虚拟头结点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        dummyHead<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将虚拟头结点指向 head，这样方面后面做删除操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                ListNode<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">delete</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        head <span class=\"token operator\">=</span> dummyHead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">delete</span> dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"设计链表-leetcode707\"><a class=\"markdownIt-Anchor\" href=\"#设计链表-leetcode707\">#</a> 设计链表 - LeetCode707</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZXNpZ24tbGlua2VkLWxpc3Qv\">707. 设计链表 - 力扣（LeetCode）</span></p>\n<blockquote>\n<p>在链表类中实现这些功能：</p>\n<ul>\n<li>get (index)：获取链表中第 index 个节点的值。如果索引无效，则返回 - 1。</li>\n<li>addAtHead (val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</li>\n<li>addAtTail (val)：将值为 val 的节点追加到链表的最后一个元素。</li>\n<li>addAtIndex (index,val)：在链表中的第 index 个节点之前添加值为 val 的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果 index 小于 0，则在头部插入节点。</li>\n<li>deleteAtIndex (index)：如果索引 index 有效，则删除链表中的第 index 个节点。</li>\n</ul>\n<p>示例：</p>\n<p>输入<br>\n [“MyLinkedList”, “addAtHead”, “addAtTail”, “addAtIndex”, “get”, “deleteAtIndex”, “get”]<br>\n[[], [1], [3], [1, 2], [1], [1], [1]]<br>\n 输出<br>\n [null, null, null, null, 2, null, 3]</p>\n<p>解释<br>\n MyLinkedList myLinkedList = new MyLinkedList ();<br>\nmyLinkedList.addAtHead(1);<br>\nmyLinkedList.addAtTail(3);<br>\nmyLinkedList.addAtIndex (1, 2);    // 链表变为 1-&gt;2-&gt;3<br>\nmyLinkedList.get (1);              // 返回 2<br>\nmyLinkedList.deleteAtIndex (1);    // 现在，链表变为 1-&gt;3<br>\nmyLinkedList.get (1);              // 返回 3</p>\n<p>提示：</p>\n<p>0 &lt;= index, val &lt;= 1000<br>\n 请不要使用内置的 LinkedList 库。<br>\n调用 get、addAtHead、addAtTail、addAtIndex 和 deleteAtIndex 的次数不超过 2000 。</p>\n</blockquote>\n<p>这道题目设计链表的五个接口：</p>\n<ul>\n<li>获取链表第 index 个节点的数值</li>\n<li>在链表的最前面插入一个节点</li>\n<li>在链表的最后面插入一个节点</li>\n<li>在链表第 index 个节点前面插入一个节点</li>\n<li>删除链表的第 index 个节点</li>\n</ul>\n<p>这五个接口，已经覆盖了链表的常见操作</p>\n<p><strong>链表操作的两种方式：</strong></p>\n<ol>\n<li>直接使用原来的链表来进行操作。</li>\n<li>设置一个虚拟头结点在进行操作。</li>\n</ol>\n<p>下面采用的设置一个虚拟头结点（这样更方便一些，看代码就会感受出来）。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyLinkedList</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义链表节点结构体</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 初始化链表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">MyLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        _dummyHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里定义的头结点 是一个虚拟头结点，而不是真正的链表头结点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        _size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 获取到第 index 个节点数值，如果 index 是非法数值直接返回 - 1， 注意 index 是从 0 开始的，第 0 个节点就是头结点</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>_size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果 --index 就会陷入死循环</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> cur<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 在链表最前面插入一个节点，插入完成后，新插入的节点为链表的新的头结点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addAtHead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        newNode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> _dummyHead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        _dummyHead<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        _size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 在链表最后面添加一个节点</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addAtTail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        _size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 在第 index 个节点之前插入一个新节点，例如 index 为 0，那么新插入的节点为链表的新头节点。</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// 如果 index 等于链表的长度，则说明是新插入的节点为链表的尾结点</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 如果 index 大于链表的长度，则返回空</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 如果 index 小于 0，则在头部插入节点</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> _size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        newNode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        _size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 删除第 index 个节点，如果 index 大于等于链表的长度，直接 return，注意 index 是从 0 开始的</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> _size <span class=\"token operator\">||</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur <span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">delete</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        _size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 打印链表</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">printLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">int</span> _size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    LinkedNode<span class=\"token operator\">*</span> _dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"翻转链表-leetcode206\"><a class=\"markdownIt-Anchor\" href=\"#翻转链表-leetcode206\">#</a> 翻转链表 - LeetCode206</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZXZlcnNlLWxpbmtlZC1saXN0Lw==\">206. 反转链表 - 力扣（LeetCode）</span></p>\n<p>给你单链表的头节点  <code>head</code>  ，请你反转链表，并返回反转后的链表。</p>\n<p>示例：输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL 输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p>\n<p><strong>提示：</strong></p>\n<ul>\n<li>链表中节点的数目范围是  <code>[0, 5000]</code></li>\n<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>\n</ul>\n<p>** 进阶：** 链表可以选用迭代或递归方式完成反转。</p>\n<h1 id=\"哈希表\"><a class=\"markdownIt-Anchor\" href=\"#哈希表\">#</a> 哈希表</h1>\n<h2 id=\"哈希表理论基础\"><a class=\"markdownIt-Anchor\" href=\"#哈希表理论基础\">#</a> 哈希表理论基础</h2>\n<h3 id=\"哈希表-2\"><a class=\"markdownIt-Anchor\" href=\"#哈希表-2\">#</a> 哈希表</h3>\n<p>Hash table，译为哈希表或散列表</p>\n<blockquote>\n<p>哈希表是根据关键码的值而直接进行访问的数据结构。</p>\n</blockquote>\n<p>实际数组就是一张哈希表。哈希表中关键码就是数组的索引下标，然后通过下标直接访问数组中的元素，如下图所示：</p>\n<p><img data-src=\"20210104234805168.png\" alt=\"哈希表1\"></p>\n<p>哈希表能解决什么问题？</p>\n<ul>\n<li><strong>一般哈希表都是用来快速判断一个元素是否出现集合里。</strong></li>\n</ul>\n<p>例如要查询一个名字是否在这所学校里。</p>\n<p>要枚举的话时间复杂度是 O (n)，但如果使用哈希表的话， 只需要 O (1) 就可以做到。</p>\n<p>我们只需要初始化把这所学校里学生的名字都存在哈希表里，在查询的时候通过索引直接就可以知道这位同学在不在这所学校里了。</p>\n<p>将学生姓名映射到哈希表上就涉及到了<strong> hash function ，也就是哈希函数</strong>。</p>\n<h3 id=\"哈希函数\"><a class=\"markdownIt-Anchor\" href=\"#哈希函数\">#</a> 哈希函数</h3>\n<p>哈希函数，把学生的姓名直接映射为哈希表上的索引，然后就可以通过查询索引下标快速知道这位同学是否在这所学校里了。</p>\n<p>哈希函数如下图所示，通过 hashCode 把名字转化为数值，一般 hashcode 是通过特定编码方式，可以将其他数据格式转化为不同的数值，这样就把学生名字映射为哈希表上的索引数字了。</p>\n<p><img data-src=\"D:%5CBlog%5Csource_posts%5C%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6%5C2021010423484818.png\" alt=\"哈希表2\"></p>\n<p>如果 hashCode 得到的数值大于哈希表的大小了，也就是大于 tableSize 了，怎么办？</p>\n<p>此时为了保证映射出来的索引数值都落在哈希表上，我们会在再次对数值做一个<strong>取模</strong>的操作，这样我们就保证了学生姓名一定可以映射到哈希表上了。</p>\n<p>此时问题又来了，哈希表我们刚刚说过，就是一个数组。</p>\n<p>如果学生的数量大于哈希表的大小怎么办，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表 同一个索引下标的位置。</p>\n<p>接下来<strong>哈希碰撞</strong>登场</p>\n<p>如图所示，小李和小王都映射到了索引下标 1 的位置，<strong>这一现象叫做哈希碰撞</strong>。</p>\n<p><img data-src=\"2021010423494884.png\" alt=\"哈希表3\"></p>\n<p>一般哈希碰撞有两种解决方法， <strong>拉链法</strong>和<strong>线性探测法</strong>。</p>\n<ul>\n<li>\n<p>拉链法</p>\n<p>刚刚小李和小王在索引 1 的位置发生了冲突，发生冲突的元素都被存储在链表中。 这样我们就可以通过索引找到小李和小王了</p>\n<p><img data-src=\"20210104235015226.png\" alt=\"哈希表4\"></p>\n<p>（数据规模是 dataSize， 哈希表的大小为 tableSize）</p>\n<p>其实拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。</p>\n</li>\n<li>\n<p>线性探测法</p>\n<p>使用线性探测法，一定要保证 tableSize 大于 dataSize。 我们需要依靠哈希表中的空位来解决碰撞问题。</p>\n<p>例如冲突的位置，放了小李，那么就向下找一个空位放置小王的信息。所以要求 tableSize 一定要大于 dataSize ，要不然哈希表上就没有空置的位置来存放 冲突的数据了。如图所示：</p>\n<p><img data-src=\"20210104235109950.png\" alt=\"哈希表5\"></p>\n</li>\n</ul>\n<h3 id=\"常见的三种哈希结构\"><a class=\"markdownIt-Anchor\" href=\"#常见的三种哈希结构\">#</a> 常见的三种哈希结构</h3>\n<p>当我们想使用哈希法来解决问题的时候，我们一般会选择如下三种数据结构。</p>\n<ul>\n<li>array（数组）</li>\n<li>set（集合）</li>\n<li>map（映射）</li>\n</ul>\n<p>在 C++ 中，set 和 map 分别提供以下三种数据结构，其底层实现以及优劣如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>集合</th>\n<th>底层实现</th>\n<th>是否有序</th>\n<th>数值是否可以重复</th>\n<th>能否更改数值</th>\n<th>查询效率</th>\n<th>增删效率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>std::set</td>\n<td>红黑树</td>\n<td>有序</td>\n<td>否</td>\n<td>否</td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n</tr>\n<tr>\n<td>std::multiset</td>\n<td>红黑树</td>\n<td>有序</td>\n<td>是</td>\n<td>否</td>\n<td>O(logn)</td>\n<td>O(logn)</td>\n</tr>\n<tr>\n<td>std::unordered_set</td>\n<td>哈希表</td>\n<td>无序</td>\n<td>否</td>\n<td>否</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n<p>std::unordered_set 底层实现为哈希表，std::set 和 std::multiset 的底层实现是红黑树，红黑树是一种平衡二叉搜索树，所以 key 值是有序的，但 key 不可以修改，改动 key 值会导致整棵树的错乱，所以只能删除和增加。</p>\n<table>\n<thead>\n<tr>\n<th>映射</th>\n<th>底层实现</th>\n<th>是否有序</th>\n<th>数值是否可以重复</th>\n<th>能否更改数值</th>\n<th>查询效率</th>\n<th>增删效率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>std::map</td>\n<td>红黑树</td>\n<td>key 有序</td>\n<td>key 不可重复</td>\n<td>key 不可修改</td>\n<td>O(logn)</td>\n<td>O(logn)</td>\n</tr>\n<tr>\n<td>std::multimap</td>\n<td>红黑树</td>\n<td>key 有序</td>\n<td>key 可重复</td>\n<td>key 不可修改</td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n</tr>\n<tr>\n<td>std::unordered_map</td>\n<td>哈希表</td>\n<td>key 无序</td>\n<td>key 不可重复</td>\n<td>key 不可修改</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n<p>std::unordered_map 底层实现为哈希表，std::map 和 std::multimap 的底层实现是红黑树。同理，std::map 和 std::multimap 的 key 也是有序的（这个问题也经常作为面试题，考察对语言容器底层的理解）。</p>\n<p>当我们要使用集合来解决哈希问题的时候，优先使用 unordered_set，因为它的查询和增删效率是最优的，如果需要集合是有序的，那么就用 set，如果要求不仅有序还要有重复数据的话，那么就用 multiset。</p>\n<p>那么再来看一下 map ，在 map 是一个 key value 的数据结构，map 中，对 key 是有限制，对 value 没有限制的，因为 key 的存储方式使用红黑树实现的。</p>\n<p>其他语言例如：java 里的 HashMap ，TreeMap 都是一样的原理。可以灵活贯通。</p>\n<p>虽然 std::set、std::multiset 的底层实现是红黑树，不是哈希表，std::set、std::multiset 使用红黑树来索引和存储，不过给我们的使用方式，还是哈希法的使用方式，即 key 和 value。所以使用这些数据结构来解决映射问题的方法，我们依然称之为哈希法。 map 也是一样的道理。</p>\n<h1 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h1>\n<h1 id=\"栈与队列\"><a class=\"markdownIt-Anchor\" href=\"#栈与队列\">#</a> 栈与队列</h1>\n<h1 id=\"二叉树\"><a class=\"markdownIt-Anchor\" href=\"#二叉树\">#</a> 二叉树</h1>\n<h2 id=\"二叉树理论基础\"><a class=\"markdownIt-Anchor\" href=\"#二叉树理论基础\">#</a> 二叉树理论基础</h2>\n<h3 id=\"二叉树的种类\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的种类\">#</a> 二叉树的种类</h3>\n<ul>\n<li>\n<p>满二叉树</p>\n<p>如果一棵二叉树只有度为 0 的结点和度为 2 的结点，并且度为 0 的结点在同一层上，则这棵二叉树为满二叉树。</p>\n<p><img data-src=\"20200806185805576.png\" alt=\"img\"></p>\n<p>如图，这棵二叉树为满二叉树，也可以说深度为 k，有 2^k-1 个节点的二叉树。</p>\n</li>\n<li>\n<p>完全二叉树</p>\n<p>在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2^(h-1) 个节点。</p>\n<p><img data-src=\"20200920221638903.png\" alt=\"img\"></p>\n<p><strong>优先级队列其实是一个堆，堆就是一棵完全二叉树，同时保证父子节点的顺序关系。</strong></p>\n</li>\n<li>\n<p>二叉搜索树</p>\n<p>前面介绍的树，都没有数值的，而二叉搜索树是有数值的了，<strong>二叉搜索树是一个有序树</strong>。</p>\n<ul>\n<li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li>\n<li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>\n<li>它的左、右子树也分别为二叉排序树</li>\n</ul>\n<p>下面这两棵树都是搜索树</p>\n<p><img data-src=\"20200806190304693.png\" alt=\"img\"></p>\n</li>\n<li>\n<p>平衡二叉搜索树</p>\n<p>又被称为 AVL（Adelson-Velsky and Landis）树，具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。</p>\n<p><img data-src=\"20200806190511967.png\" alt=\"img\"></p>\n<p>最后一棵 不是平衡二叉树，因为它的左右两个子树的高度差的绝对值超过了 1。</p>\n<p><strong>C++ 中 map、set、multimap，multiset 的底层实现都是平衡二叉搜索树</strong>，所以 map、set 的增删操作时间时间复杂度是 logn，注意 unordered_map、unordered_set，unordered_map、unordered_set 底层实现是哈希表。</p>\n<p><strong>一定要知道常用的容器底层都是如何实现的，最基本的就是 map、set 等</strong></p>\n</li>\n</ul>\n<h3 id=\"二叉树的存储方式\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的存储方式\">#</a> 二叉树的存储方式</h3>\n<p><strong>二叉树可以链式存储，也可以顺序存储。</strong></p>\n<p>那么链式存储方式就用指针， 顺序存储的方式就是用数组。</p>\n<p>顾名思义就是顺序存储的元素在内存是连续分布的，而链式存储则是通过指针把分布在各个地址的节点串联一起。</p>\n<p>链式存储如图：</p>\n<p><img data-src=\"2020092019554618.png\" alt=\"img\"></p>\n<p>顺序存储如图：</p>\n<p><img data-src=\"20200920200429452.png\" alt=\"img\"></p>\n<p>用数组来存储二叉树如何遍历的呢？</p>\n<p><strong>如果父节点的数组下标是 i，那么它的左孩子就是 i * 2 + 1，右孩子就是 i * 2 + 2。</strong></p>\n<p>但是用链式表示的二叉树，更有利于我们理解，所以一般我们都是用链式存储二叉树。</p>\n<h3 id=\"二叉树的遍历方式\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的遍历方式\">#</a> 二叉树的遍历方式</h3>\n<p>二叉树主要有两种遍历方式：</p>\n<ol>\n<li>深度优先遍历：先往深走，遇到叶子节点再往回走。</li>\n<li>广度优先遍历：一层一层的去遍历。</li>\n</ol>\n<p><strong>这两种遍历是图论中最基本的两种遍历方式</strong></p>\n<p>那么从深度优先遍历和广度优先遍历进一步拓展，才有如下遍历方式：</p>\n<ul>\n<li>深度优先遍历\n<ul>\n<li>前序遍历（递归法，迭代法）</li>\n<li>中序遍历（递归法，迭代法）</li>\n<li>后序遍历（递归法，迭代法）</li>\n</ul>\n</li>\n<li>广度优先遍历\n<ul>\n<li>层次遍历（迭代法）</li>\n</ul>\n</li>\n</ul>\n<p>在深度优先遍历中：有三个顺序，前中后序遍历</p>\n<p><strong>这里前中后，其实指的就是中间节点的遍历顺序</strong>，记住前中后序指的就是中间节点的位置就可以了。</p>\n<p>看如下中间节点的顺序，就可以发现，中间节点的顺序就是所谓的遍历方式</p>\n<ul>\n<li>前序遍历：中左右</li>\n<li>中序遍历：左中右</li>\n<li>后序遍历：左右中</li>\n</ul>\n<p><img data-src=\"20200806191109896.png\" alt=\"img\"></p>\n<p>最后再说一说二叉树中深度优先和广度优先遍历实现方式，我们做二叉树相关题目，经常会使用递归的方式来实现深度优先遍历，也就是实现前中后序遍历，使用递归是比较方便的。</p>\n<p><strong>之前我们讲栈与队列的时候，就说过栈其实就是递归的一种实现结构</strong>，也就说前中后序遍历的逻辑其实都是可以借助栈使用非递归的方式来实现的。</p>\n<p>而广度优先遍历的实现一般使用队列来实现，这也是队列先进先出的特点所决定的，因为需要先进先出的结构，才能一层一层的来遍历二叉树。</p>\n<h3 id=\"二叉树的定义\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的定义\">#</a> 二叉树的定义</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    TreeNode <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    TreeNode <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>二叉树的定义和链表是差不多的，相对于链表 ，二叉树的节点里多了一个指针， 有两个指针，指向左右孩子。</p>\n<h2 id=\"二叉树的递归遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的递归遍历\">#</a> 二叉树的递归遍历</h2>\n",
            "tags": [
                "C++",
                "STL",
                "算法"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/03/10/STL/",
            "url": "https://adventure-yx.github.io/2023/03/10/STL/",
            "title": "STL",
            "date_published": "2023-03-10T12:42:19.000Z",
            "content_html": "<h1 id=\"stl概述\"><a class=\"markdownIt-Anchor\" href=\"#stl概述\">#</a> STL 概述</h1>\n<p>C++ STL（标准模板库，Standard Template Library）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈。</p>\n<blockquote>\n<p>STL 从广义上讲分为三类: algorithm (算法) 、container (容器)、iterator (迭代器)。容器和算法可以通过迭代器进行无缝的连接。</p>\n</blockquote>\n<p>在 C++ 标准中，STL 被组织为下面 13 个头文件 <code> &lt;vector&gt;</code> 、 <code>&lt;list&gt;</code> 、 <code>&lt;map&gt;</code> 、 <code>&lt;set&gt;</code> 、 <code>&lt;queue&gt;</code> 、 <code>&lt;deque&gt;</code> 、 <code>&lt;stack&gt;</code> 、 <code>&lt;algorithm&gt;</code> 、 <code>&lt;iterator&gt;</code> 、 <code>&lt;functional&gt;</code> 、 <code>&lt;memory&gt;</code> 、 <code>&lt;numeric&gt;</code> 、 <code>&lt;utility&gt;</code></p>\n<p>STL 提供了六大组件，彼此组合套用协同工作。这六大组件分别是：</p>\n<ul>\n<li>容器（Containers）：各种数据结构，如 vector、list、deque、set、map 等。从实现的角度来看，<strong>容器是一种 class template</strong>。</li>\n<li>算法（Algorithms）：各种常用算法，提供了执行各种操作的方式，包括对容器内容执行初始化、排序、搜索和转换等操作，比如 sort、search、copy、erase。从实现的角度来看，<strong>STL 算法是一种 function template</strong>。</li>\n<li>迭代器（Iterators）：迭代器用于遍历对象集合的元素，扮演容器与算法之间的胶合剂，是所谓的 “泛型指针”，共有 5 种类型，以及其他衍生变化。从实现角度来看，<em><em>迭代器是一种将 operator</em>、operator-&gt;、operator++、operator-- 等指针操作予以重载的 class template</em>*。所有的 STL 容器附带有自己专属的迭代器，因为只有容器设计者才知道如何遍历自己的元素。</li>\n<li>仿函数（Functors）：也称为函数对象（Function object），行为类似函数，可作为算法的某种策略。从实现角度来看，<strong>仿函数是一种重载了 operator () 的 class 或者 class template</strong>。</li>\n<li>适配器（Adaptors）：一种用来修饰容器或者仿函数或迭代器接口的东西。例如 STL 提供的 queue 和 stack，就是一种空间配接器，因为它们的底部完全借助于 deque。</li>\n<li>分配器（Allocators）：也称为空间配置器，负责空间的配置与管理。从实现的角度来看，配置器是一个实现了动态配置空间、空间管理、空间释放的 class template。</li>\n</ul>\n<p>STL 六大组件的交互关系</p>\n<p><img data-src=\"picturestl1.png\" alt=\"img\"></p>\n<p>使用 STL 的好处：</p>\n<ul>\n<li>STL 是 C++ 的一部分，因此不用额外安装什么，它被内建在你的编译器之内。</li>\n<li>STL 的一个重要特点是<strong>数据结构和算法的分离</strong>。(内部使用的模板，或者说泛型编程)</li>\n<li>程序员可以不用思考 STL 具体的实现过程，只要能够熟练使用 STL，把精力用在开发上。</li>\n<li>STL 具有高可重用性、高性能、高移植性、跨平台等优点\n<ul>\n<li>高可重用性: STL 中几乎所有的代码的采用了模板类和模板函数的方式实现，这相当于传统的由函数和类组成的库来说提供了更好的代码重用机会。</li>\n<li>高性能：底层使用的数据结构和算法比较优秀，如 map 是使用红黑树的变体实现的。（红黑树是平衡二叉树的一种）</li>\n<li>高移植性：因为是内建在编译器之内，项目 A 中用 STL 编写的模块可以直接移植到项目 B 上。</li>\n<li>跨平台：windows 上写的可以在 Linux 上运行 (反之亦可)</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"stl迭代器\"><a class=\"markdownIt-Anchor\" href=\"#stl迭代器\">#</a> STL 迭代器</h1>\n<ul>\n<li>\n<p>什么是迭代器：</p>\n<p>迭代器是一种检查容器内元素并且遍历容器内元素的<strong>数据类型</strong>。</p>\n</li>\n<li>\n<p>迭代器的作用</p>\n<p>迭代器提供对一个容器中的对象的访问方法，并且定义了容器中对象的范围。</p>\n</li>\n<li>\n<p>为什么需要迭代器：</p>\n<ul>\n<li>STL 提供每种容器的实现原理各不相同，如果没有迭代器，我们需要记住每一种容器中对象的访问方法，这样会变得非常麻烦。</li>\n<li>每个容器中都实现了一个迭代器用于对容器中对象的访问，虽然每个容器中的迭代器的实现方式不一样，但是对于用户来说操作方法是一致的，也就是说<strong>通过迭代器统一了对所有容器的访问方式</strong>。</li>\n<li>无论哪个容器，访问当前元素的下一个元素我们都可以通过迭代器自增进行访问。</li>\n<li><strong>迭代器是为了提高编程效率而开发的</strong>。</li>\n</ul>\n</li>\n<li></li>\n<li></li>\n<li></li>\n</ul>\n<h1 id=\"stl容器\"><a class=\"markdownIt-Anchor\" href=\"#stl容器\">#</a> STL 容器</h1>\n<h2 id=\"容器的分类\"><a class=\"markdownIt-Anchor\" href=\"#容器的分类\">#</a> 容器的分类</h2>\n<ol>\n<li>序列式容器（Sequence containers）\n<ul>\n<li>每个元素都有固定的位置，取决于插入的时机和地点，和元素值无关。</li>\n<li>vector、deque、list、stack、queue</li>\n</ul>\n</li>\n<li>关联式容器（Associated containers）\n<ul>\n<li>元素位置取决于特定的排序准则，和插入顺序无关。</li>\n<li>set、multiset、map、multimap</li>\n</ul>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>数据结构</th>\n<th>描述</th>\n<th>实现头文件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>向量 (vector)</td>\n<td>连续存储的元素</td>\n<td><vector></td>\n</tr>\n<tr>\n<td>列表 (list)</td>\n<td>由节点组成的双向链表，每个结点包含着一个元素</td>\n<td><list></td>\n</tr>\n<tr>\n<td>栈 (stack)</td>\n<td>后进先出的值的排列</td>\n<td><stack></td>\n</tr>\n<tr>\n<td>队列 (queue)</td>\n<td>先进先出的值的排列</td>\n<td><queue></td>\n</tr>\n<tr>\n<td>优先队列 (priority_queue)</td>\n<td>元素的次序是由作用于所存储的值对上的某种谓词决定的一种队列</td>\n<td><queue></td>\n</tr>\n<tr>\n<td>双队列 (deque)</td>\n<td>连续存储的指向不同元素的指针所组成的数组</td>\n<td><deque></td>\n</tr>\n<tr>\n<td>集合 (set)</td>\n<td>由节点组成的红黑树，每个节点都包含着一个元素，节点之间以某种作用于元素对的谓词排列，没有两个不同的元素能够拥有相同的次序。</td>\n<td><set></td>\n</tr>\n<tr>\n<td>多重集合 (multiset)</td>\n<td>允许存在两个次序相等的元素的集合</td>\n<td><set></td>\n</tr>\n<tr>\n<td>映射 (map)</td>\n<td>由 {键，值} 对组成的集合，以某种作用于键上的谓词排列</td>\n<td><map></td>\n</tr>\n<tr>\n<td>多重映射 (multimap)</td>\n<td>允许键对有相等的次序的映射</td>\n<td><map></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"vector容器\"><a class=\"markdownIt-Anchor\" href=\"#vector容器\">#</a> vector 容器</h2>\n<ul>\n<li>vector 是将元素置于一个动态数组中加以管理的容器。</li>\n<li>vector 可以随机存取元素（支持索引值直接存取，用 [] 操作符或者 at () 方法）</li>\n<li>vector 尾部添加或移除元素非常快速。但是在中部或头部插入元素或移动元素比较费时。</li>\n<li>在局部函数中开 vector 数组，是在堆空间里面开的，与开全局变量比较类似，所以经常见到在局部函数中开大容量数组。</li>\n</ul>\n<h3 id=\"vector的构造方法\"><a class=\"markdownIt-Anchor\" href=\"#vector的构造方法\">#</a> vector 的构造方法</h3>\n<ul>\n<li>\n<p>vector 对象的默认构造</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> vecT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vecInt<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义了一个存 int 的 vector 容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> vecDouble<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义了一个存 double 的 vector 容器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> vecString<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义了一个存 String 的 vector 容器</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CA</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>CA<span class=\"token operator\">*</span><span class=\"token operator\">></span> vecpCA<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于存放 CA 对象指针的 vector 容器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>CA<span class=\"token operator\">></span> vecCA<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于存放 CA 对象的 vector 容器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 由于容器元素的存放是按值复制的方式进行的，所以此时 CA 必须提供 CA 的拷贝构造函数，以保证 CA 对象间拷贝正常</span></pre></td></tr></table></figure></li>\n<li>\n<p>vector 对象的带参构造</p>\n<ul>\n<li><code>vector(begin, end);  //构造函数将[begin,end)区间的元素拷贝给自身</code></li>\n<li><code>vector(n,elem);  //构造函数将n个elem拷贝给自身</code></li>\n<li><code>vector(const vector &amp;vec);  //拷贝构造函数</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> iArray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">vA</span><span class=\"token punctuation\">(</span>iArray<span class=\"token punctuation\">,</span> iArray<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义一个长度为 n 的数组，初始值默认为 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">vB</span><span class=\"token punctuation\">(</span>vA<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> vA<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">vB</span><span class=\"token punctuation\">(</span>vA<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> vA<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">vC</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 存放 3 个元素 9</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">vD</span><span class=\"token punctuation\">(</span>vA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>二维初始化</p>\n<p>定义第一维固定长度为 5，第二维可变化的二维数组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义可变长二维数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 注意：行不可变（只有 5 行）, 而列可变，可以在指定行添加元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 第一维固定长度为 5，第二维长度可以改变</span></pre></td></tr></table></figure><p>行列均可变</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始化二维均可变长数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>vectot<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> v<span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义一个行和列均可变的二维数组</span></pre></td></tr></table></figure><p>行列长度均固定 n + 1 行 m + 1 列初始值为 0</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>c++17</code>  或者 <code>c++20</code>  支持的形式（不常用）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"vector的赋值\"><a class=\"markdownIt-Anchor\" href=\"#vector的赋值\">#</a> vector 的赋值</h3>\n<ul>\n<li><code> vector.assign(begin, end);  //将[begin, end)区间中的数据拷贝赋值给本身</code></li>\n<li><code> vector.assign(n, elem);  //将n个elem拷贝赋值给本身</code></li>\n<li><code> vector&amp; operator = (const vector &amp;vec);  //重载等号操作符</code></li>\n<li><code> vector.swap(vec); //将vec和本身的元素互换</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vecIntA<span class=\"token punctuation\">,</span> vecIntB<span class=\"token punctuation\">,</span> vecIntC<span class=\"token punctuation\">,</span> vecIntD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> iArray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vecIntA<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>iArray<span class=\"token punctuation\">,</span> iArray<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vecIntB<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>vecIntA<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> vecIntA<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 用其他容器的迭代器作为参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>vecIntC<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>vecIntD <span class=\"token operator\">=</span> vecIntA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>vecIntA<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>vecIntD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"vector的迭代器\"><a class=\"markdownIt-Anchor\" href=\"#vector的迭代器\">#</a> vector 的迭代器</h3>\n<ul>\n<li><code>vector&lt;int&gt;::iterator iter; </code></li>\n<li>vector 容器的迭代器属于 “随机访问迭代器”：迭代器一次可以移动多个位置</li>\n</ul>\n<h3 id=\"方法函数\"><a class=\"markdownIt-Anchor\" href=\"#方法函数\">#</a> 方法函数</h3>\n<p>知道了如何定义初始化可变数组，下面就需要知道如何添加，删除，修改数据。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>front()</code></td>\n<td style=\"text-align:left\">返回第一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>pop_back()</code></td>\n<td style=\"text-align:left\">删除最后一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>push_back(element)</code></td>\n<td style=\"text-align:left\">在尾部加一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>size()</code></td>\n<td style=\"text-align:left\">返回实际数据个数（unsigned 类型）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>clear()</code></td>\n<td style=\"text-align:left\">清除元素个数 O (N)，N 为元素个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>resize(n, v)</code></td>\n<td style=\"text-align:left\">改变数组大小为 <code>n</code> ，新增空间数值赋为 <code>v</code> ，如果没有默认赋值为 <code>0</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>insert(it, x)</code></td>\n<td style=\"text-align:left\">向任意迭代器 <code>it</code>  插入一个元素 <code>x</code>  ，O(N)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">例： <code>insert(c.begin()+2,-1)</code></td>\n<td style=\"text-align:left\">将 <code>-1</code>  插入 <code>c[2]</code>  的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(first,last)</code></td>\n<td style=\"text-align:left\">删除 <code>[first,last)</code>  的所有元素，O (N)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>begin()</code></td>\n<td style=\"text-align:left\">返回首元素的迭代器（通俗来说就是地址）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>end()</code></td>\n<td style=\"text-align:left\">返回最后一个元素后一个位置的迭代器（地址）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>empty()</code></td>\n<td style=\"text-align:left\">判断是否为空，为空返回真，反之返回假 O (1)</td>\n</tr>\n</tbody>\n</table>\n<p>注意：  <code>end()</code>  返回的是最后一个元素的后一个位置的地址，不是最后一个元素的地址，<strong>所有 STL 容器均是如此</strong></p>\n<h3 id=\"访问\"><a class=\"markdownIt-Anchor\" href=\"#访问\">#</a> 访问</h3>\n<ol>\n<li>\n<p>下标访问</p>\n</li>\n<li>\n<p><code> at()</code>  访问</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vec<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回索引 idx 所指的数据，如果 idx 越界，运行直接报错。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vec<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回索引 idx 所指的数据，如果 idx 越界，抛出 out_of_range 异常。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 添加元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tvi<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 下标访问 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> vi<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 函数访问</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>迭代器访问</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 迭代器访问</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 相当于声明了一个迭代器类型的变量 it</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 通俗来说就是声明了一个指针变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 方式一：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 方式二：</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//vi.end () 指向尾元素地址的下一个地址</span></pre></td></tr></table></figure></li>\n<li>\n<p>C++11</p>\n<p><strong>只能遍历完整数组</strong>，如果要指定的内容进行遍历，需要另选方法。<br>\n<strong>auto</strong> 能够自动识别并获取类型。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">241</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> val <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12 241</span></pre></td></tr></table></figure></li>\n</ol>\n<p><code>vector</code>  注意：</p>\n<ul>\n<li><code>vi[i]</code>  和  <code>*(vi.begin() + i)</code>  等价</li>\n<li><code>vector</code>  和 <code>string</code>  的 <code>STL</code>  容器支持 <code>*(it + i)</code>  的元素访问，其它容器可能也可以支持这种方式访问，但用的不多。</li>\n</ul>\n<h3 id=\"vector原理\"><a class=\"markdownIt-Anchor\" href=\"#vector原理\">#</a> Vector 原理</h3>\n<ul>\n<li>vector 是动态数组，所以和数组一样拥有一段连续的内存空间，并且起始地址不变。</li>\n<li>因为 vector 地址空间是连续的，所以能高效的进行随机访问，时间复杂度为 o (1)。</li>\n<li>在 vector 中插入和删除元素，需要对现有元素进行复制、移动，时间复杂度为 o (n)。</li>\n<li>如果 vector 中存储的对象很大，或者构造函数复杂，那么插入等开销会很大。因为拷贝现有对象时需要调用拷贝构造函数。</li>\n<li>vector 扩容原理\n<ul>\n<li>新增元素：Vector 通过一个连续的数组存放元素，如果集合已满，在新增数据的时候，就会分配一块更大的内存，将原来的数据复制过来，释放之前的内存，在插入新增的元素。注意不是在原来空间后直接增加空间</li>\n<li>对 vector 的任何操作，一旦引起空间重新配置，指向原 vector 的所有迭代器就都失效了。</li>\n<li>不同的编译器实现的扩容方式不一样，VS2015 中以 1.5 倍扩容，GCC 以 2 倍扩容。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"deque容器\"><a class=\"markdownIt-Anchor\" href=\"#deque容器\">#</a> deque 容器</h2>\n<ul>\n<li>deque 是 “double-ended queue” 的缩写。</li>\n<li>deque 是双端数组而 vector 是单端的。</li>\n<li>deque 可以随机存取元素（支持索引存取，用 [] 操作符或 at () 方法）</li>\n<li>deque 头部尾部添加或移除元素都非常快 O (1)，在中部添加或移除元素比较费时。vector 只在尾部是 O (1)</li>\n<li><code>#include &lt;deque&gt;</code></li>\n<li>deque 和 vector 在操作上几乎一样，多 2 个函数。\n<ul>\n<li><code>push_front(x);  //把x插入队首 O(1)</code></li>\n<li><code>pop_front();  //删除队首元素 O(1)</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"list容器\"><a class=\"markdownIt-Anchor\" href=\"#list容器\">#</a> list 容器</h2>\n<ul>\n<li>list 是一个双向链表容器，可以高效地进行插入删除元素。</li>\n<li>list 不可以随机存取元素，所以不支持 [] 操作符和 at (pos) 函数</li>\n<li>支持迭代器自增 <code>it++;</code>  但不支持迭代器一次移动多个位置 <code>it+5;</code></li>\n</ul>\n<h3 id=\"list的构造方法\"><a class=\"markdownIt-Anchor\" href=\"#list的构造方法\">#</a> list 的构造方法</h3>\n<ul>\n<li>list 对象的默认构造： <code>list&lt;T&gt; lst;</code></li>\n<li>list 对象的带参数构造\n<ul>\n<li><code>list(n,elem); //构造函数将n个elem拷贝给自身</code></li>\n<li><code>list(beg,end); //构造函数将[beg,end)区间（迭代器）中的元素拷贝给自身</code></li>\n<li><code>list(const list &amp;lst); //拷贝构造函数</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"list的迭代器\"><a class=\"markdownIt-Anchor\" href=\"#list的迭代器\">#</a> list 的迭代器</h3>\n<p>list 容器的迭代器 是 “双向迭代器”：从两个方向读写容器。除了提供前向迭代器的全部操作外，双向迭代器还提供前置和后置的自减运算。</p>\n<ul>\n<li><code>list.begin(); //返回容器第一个元素的迭代器</code></li>\n<li><code>list.end(); //返回容器最后一个元素之后的迭代器</code></li>\n<li><code>list.rbegin(); //返回容器倒数第一个元素的迭代器</code></li>\n<li><code>list.rend(); //返回容器倒数第一个元素之后的迭代器</code></li>\n</ul>\n<p><img data-src=\"image-20230413101636171.png\" alt=\"image-20230413101636171\"></p>\n<h3 id=\"方法函数-2\"><a class=\"markdownIt-Anchor\" href=\"#方法函数-2\">#</a> 方法函数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>front()</code></td>\n<td style=\"text-align:left\">返回第一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>back()</code></td>\n<td style=\"text-align:left\">返回最后一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>push_back(element)</code></td>\n<td style=\"text-align:left\">在尾部加一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>push_front(element)</code></td>\n<td style=\"text-align:left\">在头部加一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>pop_back()</code></td>\n<td style=\"text-align:left\">删除最后一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>pop_front()</code></td>\n<td style=\"text-align:left\">删除第一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>size()</code></td>\n<td style=\"text-align:left\">返回实际数据个数（unsigned 类型）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>clear()</code></td>\n<td style=\"text-align:left\">清除元素个数 O (N)，N 为元素个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>resize(n, v)</code></td>\n<td style=\"text-align:left\">改变数组大小为 <code>n</code> ，新增空间数值赋为 <code>v</code> ，如果没有默认赋值为 <code>0</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>insert(it, x)</code></td>\n<td style=\"text-align:left\">向任意迭代器 <code>it</code>  插入一个元素 <code>x</code>  ，O(N)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">例： <code>insert(c.begin()+2,-1)</code></td>\n<td style=\"text-align:left\">将 <code>-1</code>  插入 <code>c[2]</code>  的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(first,last)</code></td>\n<td style=\"text-align:left\">删除 <code>[first,last)</code>  的所有元素，O (N)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>begin()</code></td>\n<td style=\"text-align:left\">返回首元素的迭代器（通俗来说就是地址）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>end()</code></td>\n<td style=\"text-align:left\">返回最后一个元素后一个位置的迭代器（地址）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>empty()</code></td>\n<td style=\"text-align:left\">判断是否为空，为空返回真，反之返回假 O (1)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"stack\"><a class=\"markdownIt-Anchor\" href=\"#stack\">#</a> stack</h2>\n<p>栈为数据结构的一种，是 STL 中实现的一个先进后出，后进先出的容器。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件需要添加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 声明</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>stack<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>stack<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//node 是结构体类型</span></pre></td></tr></table></figure><h3 id=\"方法函数-3\"><a class=\"markdownIt-Anchor\" href=\"#方法函数-3\">#</a> 方法函数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.push(ele)</code></td>\n<td style=\"text-align:left\">元素 <code>ele</code>  入栈，增加元素 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.pop()</code></td>\n<td style=\"text-align:left\">移除栈顶元素 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.top()</code></td>\n<td style=\"text-align:left\">取得栈顶元素（但不删除）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.empty()</code></td>\n<td style=\"text-align:left\">检测栈内是否为空，空为真 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.size()</code></td>\n<td style=\"text-align:left\">返回栈内元素的个数 O (1)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"栈遍历\"><a class=\"markdownIt-Anchor\" href=\"#栈遍历\">#</a> 栈遍历</h3>\n<p><strong>栈遍历</strong></p>\n<p>栈只能对栈顶元素进行操作，如果想要进行遍历，只能将栈中元素一个个取出来存在数组中</p>\n<p><strong>数组模拟栈进行遍历</strong></p>\n<p>通过一个<strong>数组</strong>对栈进行模拟，一个存放下标的变量 <code>top</code>  模拟指向栈顶的指针。</p>\n<p><strong>特点：</strong> 比 <code>STL</code>  的 <code>stack</code>  速度更快，遍历元素方便</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈 从左至右为栈底到栈顶</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> tt <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//tt 代表栈顶指针，初始栈内无元素，tt 为 - 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 入栈 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    s<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 出栈</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> top_element <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>tt<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 入栈操作示意</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//  0  1  2  3  4  5  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//                tt</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 出栈后示意</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//  0  1  2  3  4 </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//              tt</span></pre></td></tr></table></figure><h2 id=\"queue\"><a class=\"markdownIt-Anchor\" href=\"#queue\">#</a> queue</h2>\n<p>队列是一种先进先出的数据结构。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 定义初始化</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"方法函数-4\"><a class=\"markdownIt-Anchor\" href=\"#方法函数-4\">#</a> 方法函数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>q.front()</code></td>\n<td style=\"text-align:left\">返回队首元素 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.back()</code></td>\n<td style=\"text-align:left\">返回队尾元素 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.push(element)</code></td>\n<td style=\"text-align:left\">尾部添加一个元素 <code>element</code>  进队 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.pop()</code></td>\n<td style=\"text-align:left\">删除第一个元素 出队 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.size()</code></td>\n<td style=\"text-align:left\">返回队列中元素个数，返回值类型 <code>unsigned int</code>  O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.empty()</code></td>\n<td style=\"text-align:left\">判断是否为空，队列为空，返回 <code>true</code>  O(1)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"队列模拟\"><a class=\"markdownIt-Anchor\" href=\"#队列模拟\">#</a> 队列模拟</h3>\n<p>使用 <code>q[]</code>  数组模拟队列<br>\n <code>hh</code>  表示队首元素的下标，初始值为 <code>0</code> <br>\n <code>tt</code>  表示队尾元素的下标，初始值为 <code>-1</code> ，表示刚<strong>开始队列为空</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> q<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> hh <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>tt <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//    入队 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    q<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    q<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//    将所有元素出队 </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>hh <span class=\"token operator\">&lt;=</span> tt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> q<span class=\"token punctuation\">[</span>hh<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"priority_queue\"><a class=\"markdownIt-Anchor\" href=\"#priority_queue\">#</a> priority_queue</h2>\n<p>优先队列是在正常队列的基础上加了优先级，保证每次的队首元素都是优先级最大的。</p>\n<p>可以实现每次从优先队列中取出的元素都是队列中<strong>优先级最大</strong>的一个。</p>\n<p>它的底层是通过<strong>堆</strong>来实现的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"函数方法\"><a class=\"markdownIt-Anchor\" href=\"#函数方法\">#</a> 函数方法</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>q.top()</code></td>\n<td style=\"text-align:left\">访问队首元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.push()</code></td>\n<td style=\"text-align:left\">入队</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.pop()</code></td>\n<td style=\"text-align:left\">堆顶（队首）元素出队</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.size()</code></td>\n<td style=\"text-align:left\">队列元素个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.empty()</code></td>\n<td style=\"text-align:left\">是否为空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>注意</strong>没有 <code>clear()</code> ！</td>\n<td style=\"text-align:left\">不提供该方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">优先队列只能通过 <code>top()</code>  访问队首元素（优先级最高的元素）</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"设置优先级\"><a class=\"markdownIt-Anchor\" href=\"#设置优先级\">#</a> 设置优先级</h3>\n<h4 id=\"基本数据类型的优先级\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型的优先级\">#</a> 基本数据类型的优先级</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> pq<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认大根堆，即每次取出的元素是队列中的最大值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小根堆，每次取出的元素是队列中的最小值</span></pre></td></tr></table></figure><p><strong>参数解释：</strong></p>\n<ul>\n<li><strong>第二个参数：</strong><br>\n <code>vector&lt; int &gt;</code>  是用来承载底层数据结构堆的容器，若优先队列中存放的是 <code>double</code>  型数据，就要填 <code>vector&lt; double &gt;</code> <br>\n<strong> 总之存的是什么类型的数据，就相应的填写对应类型。同时也要改动第三个参数里面的对应类型。</strong></li>\n<li><strong>第三个参数：</strong><br>\n <code>less&lt; int &gt;</code>  表示数字大的优先级大，堆顶为最大的数字<br>\n <code>greater&lt; int &gt;</code>  表示数字小的优先级大，堆顶为最小的数字<br>\n<strong> int 代表的是数据类型，也要填优先队列中存储的数据类型</strong></li>\n</ul>\n<p>下面介绍基础数据类型优先级设置的写法。</p>\n<p><strong>1. 基础写法（非常常用）</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认大根堆，即每次取出的元素是队列中的最大值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> less<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> q2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 大根堆，每次取出的元素是队列中的最大值，同第一行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> q3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小根堆，每次取出的元素是队列中的最小值</span></pre></td></tr></table></figure><p><strong>2. 自定义排序（不常见，主要是写着麻烦）</strong></p>\n<p>下面的代码比较长，基础类型优先级写着太麻烦，用第一种即可。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">cmp1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> x <span class=\"token operator\">></span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">cmp2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> x <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> cmp1<span class=\"token operator\">></span> q1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小根堆</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> cmp2<span class=\"token operator\">></span> q2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 大根堆</span></pre></td></tr></table></figure><h4 id=\"结构体优先级设置\"><a class=\"markdownIt-Anchor\" href=\"#结构体优先级设置\">#</a> 结构体优先级设置</h4>\n<blockquote>\n<p>即优先队列中存储结构体类型，必须要设置优先级，即结构体的比较运算（因为优先队列的堆中要比较大小，才能将对应最大或者最小元素移到堆顶）。</p>\n</blockquote>\n<p>优先级设置可以定义在<strong>结构体内</strong>进行小于号重载，也可以定义在<strong>结构体外</strong>。</p>\n<h4 id=\"存储特殊类型的优先级\"><a class=\"markdownIt-Anchor\" href=\"#存储特殊类型的优先级\">#</a> 存储特殊类型的优先级</h4>\n<h2 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> map</h2>\n<p>映射类似于函数的对应关系，每个 <code>x</code>  对应一个 <code>y</code> ，而 <code>map</code>  是每个键对应一个值。会 python 的朋友学习后就会知道这和 python 的字典非常类似。</p>\n<blockquote>\n<p>比如说：学习 对应 看书，学习 是键，看书 是值。<br>\n学习 -&gt; 看书<br>\n玩耍 对应 打游戏，玩耍 是键，打游戏 是值。<br>\n玩耍 -&gt; 打游戏</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>node<span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span><span class=\"token comment\">//node 是结构体类型</span></pre></td></tr></table></figure><blockquote>\n<p>map 特性：map 会按照键的顺序从小到大自动排序，键的类型必须可以比较大小</p>\n</blockquote>\n<h3 id=\"函数方法-2\"><a class=\"markdownIt-Anchor\" href=\"#函数方法-2\">#</a> 函数方法</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>mp.find(key)</code></td>\n<td style=\"text-align:left\">返回键为 key 的映射的迭代器 O (logN) 注意：用 find 函数来定位数据出现位置，它返回一个迭代器。当数据存在时，返回数据所在位置的迭代器，数据不存在时，返回 mp.end ()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.erase(it)</code></td>\n<td style=\"text-align:left\">删除迭代器对应的键和值 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.erase(key)</code></td>\n<td style=\"text-align:left\">根据映射的键删除键和值 O (logN)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.erase(first,last)</code></td>\n<td style=\"text-align:left\">删除左闭右开区间迭代器对应的键和值 O (last−first)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.size()</code></td>\n<td style=\"text-align:left\">返回映射的对数 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.clear()</code></td>\n<td style=\"text-align:left\">清空 map 中的所有元素 O (N)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.insert()</code></td>\n<td style=\"text-align:left\">插入元素，插入时要构造键值对</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.empty()</code></td>\n<td style=\"text-align:left\">如果 map 为空，返回 true，否则返回 false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.begin()</code></td>\n<td style=\"text-align:left\">返回指向 map 第一个元素的迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.end()</code></td>\n<td style=\"text-align:left\">返回指向 map 尾部的迭代器（最后一个元素的<strong>下一个</strong>地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.rbegin()</code></td>\n<td style=\"text-align:left\">返回指向 map 最后一个元素的迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.rend()</code></td>\n<td style=\"text-align:left\">返回指向 map 第一个元素前面 (上一个）的逆向迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.count(key)</code></td>\n<td style=\"text-align:left\">查看元素是否存在，因为 map 中键是唯一的，所以存在返回 1，不存在返回 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.lower_bound()</code></td>\n<td style=\"text-align:left\">返回一个迭代器，指向键值 &gt;= <strong>key</strong> 的第一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.upper_bound()</code></td>\n<td style=\"text-align:left\">返回一个迭代器，指向键值 &gt; key 的第一个元素</td>\n</tr>\n</tbody>\n</table>\n<p><strong>下面说明部分函数方法的注意点</strong></p>\n<blockquote>\n<p>注意：<br>\n查找元素是否存在时，可以使用<br>\n① <code>mp.find()</code>  ②  <code>mp.count()</code>  ③  <code>mp[key]</code> <br>\n 但是第三种情况，如果不存在对应的 <code>key</code>  时，会自动创建一个键值对（产生一个额外的键值对空间）<br>\n所以为了不增加额外的空间负担，最好使用前两种方法</p>\n</blockquote>\n<hr>\n<p><strong>使用迭代器进行正反向遍历：</strong></p>\n<p><code>mp.begin()</code>  和 <code>mp.end()</code>  用法：<br>\n<strong>用于正向遍历 map</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    it <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/* 输出</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>1 2</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>2 3</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>3 4</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr></table></figure><p><code>mp.rbegin()</code>  和 <code>mp.rend()</code> <br>\n<strong> 用于逆向遍历 map</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    it <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/* 输出</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>3 4</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>2 3</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>1 2</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>二分查找 <code>lower_bound() upper_bound()</code></p>\n<blockquote>\n<p>map 的二分查找以第一个元素（即键为准），对<strong>键</strong>进行二分查找<br>\n返回值为 map 迭代器类型</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> m<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 有序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it1 <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it1<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//it1->first=2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it2 <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it2<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//it2->first=6</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"添加元素\"><a class=\"markdownIt-Anchor\" href=\"#添加元素\">#</a> 添加元素</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 先声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 方式一</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token string\">\"学习\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"看书\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token string\">\"玩耍\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"打游戏\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 方式二：插入元素构造键值对</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>mp<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vegetable\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"蔬菜\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 方式三</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>mp<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">pair</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fruit\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"水果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 方式四</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>mp<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hahaha\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"wawawa\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"访问元素\"><a class=\"markdownIt-Anchor\" href=\"#访问元素\">#</a> 访问元素</h3>\n<p>**6.4.1 下标访问：** 大部分情况用于访问单个元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token string\">\"菜哇菜\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"强哇强\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> mp<span class=\"token punctuation\">[</span><span class=\"token string\">\"菜哇菜\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 只是简写的一个例子，程序并不完整</span></pre></td></tr></table></figure><p><strong>6.4.2 遍历访问：</strong></p>\n<p><strong>方式一：迭代器访问</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//      键                 值 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//it 是结构体指针访问所以要用 -> 访问</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//*it 是结构体变量 访问要用。访问</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//cout&lt;&lt;(*it).first&lt;&lt;\" \"&lt;&lt;(*it).second;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>方式二：智能指针访问</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> mp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 键，值</span></pre></td></tr></table></figure><p><strong>方式三：对指定单个元素访问</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> it <span class=\"token operator\">-></span> first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span>  it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>方式四：c++17 特性才具有</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> mp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//x,y 对应键和值</span></pre></td></tr></table></figure><h3 id=\"与unordered_map的比较\"><a class=\"markdownIt-Anchor\" href=\"#与unordered_map的比较\">#</a> 与 unordered_map 的比较</h3>\n<p>这里就不单开一个大目录讲 unordered_map 了，直接在 map 里面讲了。</p>\n<h4 id=\"内部实现原理\"><a class=\"markdownIt-Anchor\" href=\"#内部实现原理\">#</a> 内部实现原理</h4>\n<p><strong>map</strong>：内部用<strong>红黑树</strong>实现，具有<strong>自动排序</strong>（按键从小到大）功能。</p>\n<p><strong>unordered_map</strong>：内部用<strong>哈希表</strong>实现，内部元素无序杂乱。</p>\n<h4 id=\"效率比较\"><a class=\"markdownIt-Anchor\" href=\"#效率比较\">#</a> 效率比较</h4>\n<p><strong>map</strong>：</p>\n<ul>\n<li>优点：内部用红黑树实现，内部元素具有有序性，查询删除等操作复杂度为 O (logN)</li>\n<li>缺点：占用空间，红黑树里每个节点需要保存父子节点和红黑性质等信息，空间占用较大。</li>\n</ul>\n<p><strong>unordered_map</strong>：</p>\n<ul>\n<li>优点：内部用哈希表实现，查找速度非常快（适用于大量的查询操作）。</li>\n<li>缺点：建立哈希表比较耗时。</li>\n</ul>\n<blockquote>\n<p>两者方法函数基本一样，差别不大。</p>\n<p>注意：</p>\n<ul>\n<li>\n<p>随着内部元素越来越多，两种容器的插入删除查询操作的时间都会逐渐变大，效率逐渐变低。</p>\n</li>\n<li>\n<p>使用 <code>[]</code>  查找元素时，如果元素不存在，两种容器<strong>都是</strong>创建一个空的元素；如果存在，会正常索引对应的值。所以如果查询过多的不存在的元素值，容器内部会创建大量的空的键值对，后续查询创建删除效率会<strong>大大降低</strong>。</p>\n</li>\n<li>\n<p>查询容器内部元素的最优方法是：先判断存在与否，再索引对应值（适用于这两种容器）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 以 map 为例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">999999999</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 此处判断是否存在 x 这个键</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> mp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 只有存在才会索引对应的值，避免不存在 x 时多余空元素的创建</span></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<p>还有一种映射：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93eXF6LnRvcC9wLzg3MDEyNDU4Mi5odG1s\">multimap</span><br>\n 键可以重复，即一个键对应多个值，如要了解，可以自行搜索。</p>\n<h2 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\">#</a> set</h2>\n<p>set 容器中的元素不会重复，当插入集合中已有的元素时，并不会插入进去，而且 set 容器里的元素自动从小到大排序。</p>\n<p>即：set 里面的元素<strong>不重复 且有序</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"函数方法-3\"><a class=\"markdownIt-Anchor\" href=\"#函数方法-3\">#</a> 函数方法</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.begin()</code></td>\n<td style=\"text-align:left\">返回 set 容器的第一个元素的地址（迭代器）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.end()</code></td>\n<td style=\"text-align:left\">返回 set 容器的最后一个元素的下一个地址（迭代器）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.rbegin()</code></td>\n<td style=\"text-align:left\">返回逆序迭代器，指向容器元素最后一个位置 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.rend()</code></td>\n<td style=\"text-align:left\">返回逆序迭代器，指向容器第一个元素前面的位置 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.clear()</code></td>\n<td style=\"text-align:left\">删除 set 容器中的所有的元素，返回 unsigned int 类型 O (N)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.empty()</code></td>\n<td style=\"text-align:left\">判断 set 容器是否为空 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.insert()</code></td>\n<td style=\"text-align:left\">插入一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.size()</code></td>\n<td style=\"text-align:left\">返回当前 set 容器中的元素个数 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(iterator)</code></td>\n<td style=\"text-align:left\">删除定位器 iterator 指向的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(first,second）</code></td>\n<td style=\"text-align:left\">删除定位器 first 和 second 之间的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(key_value)</code></td>\n<td style=\"text-align:left\">删除键值 key_value 的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find(element)</code></td>\n<td style=\"text-align:left\">查找 set 中的某一元素，有则返回该元素对应的迭代器，无则返回结束迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.count(element)</code></td>\n<td style=\"text-align:left\">查找 set 中的元素出现的个数，由于 set 中元素唯一，此函数相当于查询 element 是否出现</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.lower_bound(k)</code></td>\n<td style=\"text-align:left\">返回大于等于 k 的第一个元素的迭代器 O (logN)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.upper_bound(k)</code></td>\n<td style=\"text-align:left\">返回大于 k 的第一个元素的迭代器 O (logN)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"访问-2\"><a class=\"markdownIt-Anchor\" href=\"#访问-2\">#</a> 访问</h3>\n<h2 id=\"pair\"><a class=\"markdownIt-Anchor\" href=\"#pair\">#</a> pair</h2>\n<p>pair 只含有两个元素，可以看作是只有两个元素的结构体。<br>\n<strong>应用：</strong></p>\n<ul>\n<li>代替二元结构体</li>\n<li>作为 map 键值对进行插入（代码如下）</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mp<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">pair</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xingmaqi\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;utility></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//1. 初始化定义</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wangyaqi\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 带初始值的</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">;</span><span class=\"token comment\">// 不带初始值的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//2. 赋值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"访问-3\"><a class=\"markdownIt-Anchor\" href=\"#访问-3\">#</a> 访问</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义结构体数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>p<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 和结构体类似，first 代表第一个元素，second 代表第二个元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"string\"><a class=\"markdownIt-Anchor\" href=\"#string\">#</a> string</h2>\n<p>string 是一个字符串类，和 <code>char</code>  型字符串类似。</p>\n<p>可以把 string 理解为一个字符串类型，像 int 一样可以定义</p>\n<h3 id=\"初始化及定义\"><a class=\"markdownIt-Anchor\" href=\"#初始化及定义\">#</a> 初始化及定义</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//1.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>string str1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成空字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//2.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>string <span class=\"token function\">str2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456789\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成 \"1234456789\" 的复制品 </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//3.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>string <span class=\"token function\">str3</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果为 \"123\" ，从 0 位置开始，长度为 3</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//4.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>string <span class=\"token function\">str4</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 \"12345\" ，长度为 5</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//5.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>string <span class=\"token function\">str5</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 \"22222\" , 构造 5 个字符 '2' 连接而成的字符串</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//6.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>string <span class=\"token function\">str6</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 \"3456789\"，截取第三个元素（2 对应第三位）到最后</span></pre></td></tr></table></figure><p><strong>简单使用</strong></p>\n<ul>\n<li>\n<p>访问单个字符：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"xing ma qi!!!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li>\n<p>string 数组使用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    string s<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"loading...  \"</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">9</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"string-特性\"><a class=\"markdownIt-Anchor\" href=\"#string-特性\">#</a> string 特性</h3>\n<ul>\n<li>\n<p>支持<strong>比较</strong>运算符<br>\n string 字符串支持常见的比较操作符 <code>（&gt;,&gt;=,&lt;,&lt;=,==,!=）</code> ，支持 <code>string</code>  与 <code>C-string</code>  的比较（如  <code>str &lt; &quot;hello&quot;</code> ）。<br>\n在使用 <code>&gt;,&gt;=,&lt;,&lt;=</code>  这些操作符的时候是根据 “当前字符特性” 将字符按  <code>字典顺序</code>  进行逐一得 比较。字典排序靠前的字符小， 比较的顺序是从前向后比较，遇到不相等的字符就按这个位置上的两个字符的比较结果确定两个字符串的大小（前面减后面）。</p>\n<p>同时，`string (“aaaa”) 。</p>\n<ul>\n<li>\n<p>支持 <code>+</code> <strong> 运算</strong>符，代表拼接字符串<br>\n string 字符串可以拼接，通过”+” 运算符进行拼接。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"456\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>string s <span class=\"token operator\">=</span> s1 <span class=\"token operator\">+</span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//123456</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"读入详解\"><a class=\"markdownIt-Anchor\" href=\"#读入详解\">#</a> 读入详解</h3>\n<p><strong>读入字符串，遇空格，回车结束</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>读入一行字符串（包括空格），遇回车结束</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意:  <code>getline(cin, s)</code>  会获取前一个输入的换行符，需要在前面添加读取换行符的语句。如： <code>getchar()</code>  或 <code>cin.get()</code></p>\n<p>错误读取：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此时读取相当于读取了前一个回车字符</span></pre></td></tr></table></figure><p>正确读取：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//cin.get()</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 可正确读入下一行的输入</span></pre></td></tr></table></figure><blockquote>\n<p><code>cin</code>  与 <code>cin.getline()</code>  混用</p>\n<p>cin 输入完后，回车，cin 遇到回车结束输入，但回车还在输入流中，cin 并不会清除，导致 <code>getline()</code>  读取回车，结束。<br>\n需要在 cin 后面加 <code>cin.ignore()</code> ；主动删除输入流中的换行符。（不常用）</p>\n</blockquote>\n<p><strong>cin 和 cout 解锁</strong></p>\n<p>代码（写在 main 函数开头）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>为什么要进行 <code>cin</code>  和 <code>cout</code>  的解锁，原因是：</p>\n<p>在一些题目中，读入的<strong>数据量很大</strong>，往往超过了 1e5（10<sup>5</sup>）的数据量，而 <code>cin</code>  和 <code>cout</code>  的读入输出的速度<strong>很慢</strong>（是因为 <code>cin</code>  和 <code>cout</code>  为了兼容 C 语言的读入输出在性能上做了妥协），远不如 <code>scanf</code>  和 <code>printf</code>  的速度，具体原因可以搜索相关的博客进行了解。</p>\n<p><strong>所以</strong>对 <code>cin</code>  和 <code>cout</code>  进行解锁使 <code>cin</code>  和 <code>cout</code>  的速度几乎接近 <code>scanf</code>  和 <code>printf</code> ，避免输入输出超时。</p>\n</blockquote>\n<p><strong>注意</strong>： <code>cin cout</code>  解锁使用时，不能与  <code>scanf,getchar, printf,cin.getline()</code>  混用，一定要注意，会出错。</p>\n<blockquote>\n<p><strong>string 与 C 语言字符串（C-string）的区别</strong></p>\n<ul>\n<li>string<br>\n 是 C++ 的一个类，专门实现字符串的相关操作。具有丰富的操作方法，数据类型为 <code>string</code> ，字符串结尾没有 <code>\\0</code>  字符</li>\n<li>C-string<br>\nC 语言中的字符串，用 char 数组实现，类型为 <code>const char *</code> , 字符串结尾以 <code>\\0</code>  结尾</li>\n</ul>\n</blockquote>\n<p>一般来说 string 向 char 数组转换会出现一些问题，所以为了能够实现转换，string 有一个方法 <code>c_str()</code>  实现 string 向 char 数组的转换。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s <span class=\"token operator\">=</span> <span class=\"token string\">\"xing ma qi\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> s2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"函数方法-4\"><a class=\"markdownIt-Anchor\" href=\"#函数方法-4\">#</a> 函数方法</h3>\n<ul>\n<li><strong>获取字符串长度</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.size()</code>  和 <code>s.length()</code></td>\n<td style=\"text-align:left\">返回 string 对象的字符个数，他们执行效果相同。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.max_size()</code></td>\n<td style=\"text-align:left\">返回 string 对象最多包含的字符数，超出会抛出 length_error 异常</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.capacity()</code></td>\n<td style=\"text-align:left\">重新分配内存之前，string 对象能包含的最大字符数</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>插入</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.push_back()</code></td>\n<td style=\"text-align:left\">在末尾插入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">例： <code>s.push_back('a')</code></td>\n<td style=\"text-align:left\">末尾插入一个字符 a</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.insert(pos,element)</code></td>\n<td style=\"text-align:left\">在 pos 位置插入 element</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">例： <code>s.insert(s.begin(),'1')</code></td>\n<td style=\"text-align:left\">在第一个位置插入 1 字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.append(str)</code></td>\n<td style=\"text-align:left\">在 s 字符串结尾添加 str 字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">例： <code>s.append(&quot;abc&quot;)</code></td>\n<td style=\"text-align:left\">在 s 字符串末尾添加字符串 “abc”</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>删除</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>erase(iterator p)</code></td>\n<td style=\"text-align:left\">删除字符串中 p 所指的字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(iterator first, iterator last)</code></td>\n<td style=\"text-align:left\">删除字符串中迭代器区间 <code>[first,last)</code>  上所有字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(pos, len)</code></td>\n<td style=\"text-align:left\">删除字符串中从索引位置 pos 开始的 len 个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>clear()</code></td>\n<td style=\"text-align:left\">删除字符串中所有字符</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>字符替换</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.replace(pos,n,str)</code></td>\n<td style=\"text-align:left\">把当前字符串从索引 pos 开始的 n 个字符替换为 str</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.replace(pos,n,n1,c)</code></td>\n<td style=\"text-align:left\">把当前字符串从索引 pos 开始的 n 个字符替换为 n1 个字符 c</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.replace(it1,it2,str)</code></td>\n<td style=\"text-align:left\">把当前字符串 <code>[it1,it2)</code>  区间替换为 str <strong>it1 ,it2 为迭代器哦</strong></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>大小写转换</strong></li>\n</ul>\n<p>法一：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>tolower(s[i])</code></td>\n<td style=\"text-align:left\">转换为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>toupper(s[i])</code></td>\n<td style=\"text-align:left\">转换为大写</td>\n</tr>\n</tbody>\n</table>\n<p>法二：</p>\n<p>通过 stl 的 transform 算法配合 tolower 和 toupper 实现。<br>\n有 4 个参数，前 2 个指定要转换的容器的起止范围，第 3 个参数是结果存放容器的起始位置，第 4 个参数是一元运算。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token double-colon punctuation\">::</span>tolower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 转换小写</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token double-colon punctuation\">::</span>toupper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 转换大写</span></pre></td></tr></table></figure><ul>\n<li><strong>分割</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.substr(pos,n)</code></td>\n<td style=\"text-align:left\">截取从 pos 索引开始的 n 个字符</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>查找</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.find (str, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置（默认为 0）开始，查找子串 str，返回找到的位置索引，-1 表示查找不到子串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find (c, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置（默认为 0）开始，查找字符 c，返回找到的位置索引，-1 表示查找不到字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.rfind (str, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置开始，反向查找子串 s，返回找到的位置索引，-1 表示查找不到子串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.rfind (c,pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置开始，反向查找字符 c，返回找到的位置索引，-1 表示查找不到字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find_first_of (str, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置（默认为 0）开始，查找子串 s 的字符，返回找到的位置索引，-1 表示查找不到字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find_first_not_of (str,pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置（默认为 0）开始，查找第一个不位于子串 s 的字符，返回找到的位置索引，-1 表示查找不到字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find_last_of(str, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置开始，查找最后一个位于子串 s 的字符，返回找到的位置索引，-1 表示查找不到字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find_last_not_of ( str, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置开始，查找最后一个不位于子串 s 的字符，返回找到的位置索引，-1 表示查找不到子串</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog bird chicken bird cat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 字符串查找 ----- 找到后返回首字母在字符串中的下标</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 1. 查找一个字符串</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chicken\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：9</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 2. 从下标为 6 开始找字符 'i'，返回找到的第一个 i 的下标</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token char\">'i'</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：11</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 3. 从字符串的末尾开始查找字符串，返回的还是首字母在字符串中的下标</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">rfind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chicken\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：9</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 4. 从字符串的末尾开始查找字符</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">rfind</span><span class=\"token punctuation\">(</span><span class=\"token char\">'i'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：18 因为是从末尾开始查找，所以返回第一次找到的字符</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 5. 在该字符串中查找第一个属于字符串 s 的字符</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find_first_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"13br98\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：4---b</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 6. 在该字符串中查找第一个不属于字符串 s 的字符 ------ 先匹配 dog，然后 bird 匹配不到，所以打印 4</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find_first_not_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello dog 2006\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果是：4</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find_first_not_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog bird 2006\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 结果是：9</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 7. 在该字符串最后中查找第一个属于字符串 s 的字符</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find_last_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"13r98\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：19</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 8. 在该字符串最后中查找第一个不属于字符串 s 的字符 ------ 先匹配 t--a---c，然后空格匹配不到，所以打印 21</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find_last_not_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"teac\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：21</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><strong>排序</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 按 ASCII 码排序</span></pre></td></tr></table></figure><h2 id=\"bitset\"><a class=\"markdownIt-Anchor\" href=\"#bitset\">#</a> bitset</h2>\n<p>bitset 在 bitset 头文件中，它类似数组，并且每一个元素只能是０或１，每个元素只用１bit 空间</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bitset></span></span></pre></td></tr></table></figure><h3 id=\"初始化定义\"><a class=\"markdownIt-Anchor\" href=\"#初始化定义\">#</a> 初始化定义</h3>\n<p>初始化方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>bitset &lt; n &gt;a</code></td>\n<td style=\"text-align:left\">a 有 n 位，每位都为 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bitset &lt; n &gt;a(b)</code></td>\n<td style=\"text-align:left\">a 是 unsigned long 型 u 的一个副本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bitset &lt; n &gt;a(s)</code></td>\n<td style=\"text-align:left\">a 是 string 对象 s 中含有的位串的副本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bitset &lt; n &gt;a(s,pos,n)</code></td>\n<td style=\"text-align:left\">a 是 s 中从位置 pos 开始的 n 个位的副本</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意： <code>n</code>  必须为常量表达式</p>\n</blockquote>\n<p>演示代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token operator\">></span> bitset1<span class=\"token punctuation\">;</span>　　  <span class=\"token comment\">// 无参构造，长度为４，默认每一位为０</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">9</span><span class=\"token operator\">></span> <span class=\"token function\">bitset2</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　<span class=\"token comment\">// 长度为 9，二进制保存，前面用０补充</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"100101\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token operator\">></span> <span class=\"token function\">bitset3</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 长度为 10，前面用０补充</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">char</span> s2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"10101\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">13</span><span class=\"token operator\">></span> <span class=\"token function\">bitset4</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 长度为 13，前面用０补充</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> bitset1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//0000</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> bitset2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//000001100</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> bitset3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//0000100101</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> bitset4 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　<span class=\"token comment\">//0000000010101</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"特性\"><a class=\"markdownIt-Anchor\" href=\"#特性\">#</a> 特性</h3>\n<p><code>bitset</code>  可以进行<strong>位操作</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token operator\">></span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token operator\">></span> <span class=\"token function\">bar</span> <span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0011\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">^=</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 1010 (foo 对 bar 按位异或后赋值给 foo)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">&amp;=</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0010 (按位与后赋值给 foo)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">|=</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0011 (按位或后赋值给 foo)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 1100 (左移２位，低位补０，有自身赋值)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0110 (右移１位，高位补０，有自身赋值)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 1100 (按位取反)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>bar <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0110 (左移，不赋值)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>bar <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0001 (右移，不赋值)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">==</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//false (0110==0011 为 false)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">!=</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//true  (0110!=0011 为 true)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">&amp;</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0010 (按位与，不赋值)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">|</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0111 (按位或，不赋值)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">^</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0101 (按位异或，不赋值)</span></pre></td></tr></table></figure><p><strong>访问</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 可以通过 [] 访问元素 (类似数组)，注意最低位下标为０，如下：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token operator\">></span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"1011\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//0</span></pre></td></tr></table></figure><h3 id=\"方法函数-5\"><a class=\"markdownIt-Anchor\" href=\"#方法函数-5\">#</a> 方法函数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>b.any()</code></td>\n<td style=\"text-align:left\">b 中是否存在置为 1 的二进制位，有 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.none()</code></td>\n<td style=\"text-align:left\">b 中是否没有 1，没有 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.count()</code></td>\n<td style=\"text-align:left\">b 中为 1 的个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.size()</code></td>\n<td style=\"text-align:left\">b 中二进制位的个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.test(pos)</code></td>\n<td style=\"text-align:left\">测试 b 在 pos 位置是否为 1，是 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b[pos]</code></td>\n<td style=\"text-align:left\">返回 b 在 pos 处的二进制位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.set()</code></td>\n<td style=\"text-align:left\">把 b 中所有位都置为 1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.set(pos)</code></td>\n<td style=\"text-align:left\">把 b 中 pos 位置置为 1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.reset()</code></td>\n<td style=\"text-align:left\">把 b 中所有位都置为 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.reset(pos)</code></td>\n<td style=\"text-align:left\">把 b 中 pos 位置置为 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.flip()</code></td>\n<td style=\"text-align:left\">把 b 中所有二进制位取反</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.flip(pos)</code></td>\n<td style=\"text-align:left\">把 b 中 pos 位置取反</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.to_ulong()</code></td>\n<td style=\"text-align:left\">用 b 中同样的二进制位返回一个 unsigned long 值</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"array\"><a class=\"markdownIt-Anchor\" href=\"#array\">#</a> array</h2>\n<p>头文件</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;array></span></span></pre></td></tr></table></figure><p><code>array</code>  是 C++11 新增的容器，效率与普通数据相差无几，比 <code>vector</code>  效率要高，自身添加了一些成员函数。</p>\n<p>和其它容器不同，array 容器的大小是<strong>固定</strong>的，无法动态的扩展或收缩，<strong>只允许访问或者替换存储的元素。</strong></p>\n<p><strong>注意：</strong></p>\n<p><code>array</code>  的使用要在 <code>std</code>  命名空间里</p>\n<h3 id=\"声明与初始化\"><a class=\"markdownIt-Anchor\" href=\"#声明与初始化\">#</a> 声明与初始化</h3>\n<p><strong>基础数据类型</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明一个大小为 100 的 `int` 型数组，元素的值不确定</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 声明一个大小为 100 的 int 型数组，初始值均为 0 初始值与默认元素类型等效</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 声明一个大小为 100 的 int 型数组，初始化部分值，其余全部为 0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 或者可以用等号</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>高级数据类型</strong></p>\n<p>不同于数组的是对元素类型不做要求，可以套结构体</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"ha\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"haha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token operator\">&lt;</span>node<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"存取元素\"><a class=\"markdownIt-Anchor\" href=\"#存取元素\">#</a> 存取元素</h3>\n<ul>\n<li>\n<p>修改元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>访问元素</p>\n<p>下标访问</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \\n\"</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>利用 <code>auto</code>  访问</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>迭代器访问</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>at()</code>  函数访问</p>\n<p>下标为 <code>1</code>  的元素加上下标为 <code>2</code>  的元素，答案为 <code>5</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>get</code>  方法访问</p>\n<p>将 <code>a</code>  数组下标为 <code>1</code>  位置处的值改为 <code>x</code></p>\n<p>注意：获取的下标只能写数字，不能填变量</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"成员函数\"><a class=\"markdownIt-Anchor\" href=\"#成员函数\">#</a> 成员函数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">成员函数</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>begin()</code></td>\n<td style=\"text-align:left\">返回容器中第一个元素的访问迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>end()</code></td>\n<td style=\"text-align:left\">返回容器最后一个元素之后一个位置的访问迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>rbegin()</code></td>\n<td style=\"text-align:left\">返回最后一个元素的访问迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>rend()</code></td>\n<td style=\"text-align:left\">返回第一个元素之前一个位置的访问迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>size()</code></td>\n<td style=\"text-align:left\">返回容器中元素的数量，其值等于初始化 array 类的第二个模板参数 <code>N</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>max_size()</code></td>\n<td style=\"text-align:left\">返回容器可容纳元素的最大数量，其值始终等于初始化 array 类的第二个模板参数 N</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>empty()</code></td>\n<td style=\"text-align:left\">判断容器是否为空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>at(n)</code></td>\n<td style=\"text-align:left\">返回容器中 n 位置处元素的引用，函数会自动检查 n 是否在有效的范围内，如果不是则抛出 out_of_range 异常</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>front()</code></td>\n<td style=\"text-align:left\">返回容器中第一个元素的直接引用，函数不适用于空的 array 容器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>back()</code></td>\n<td style=\"text-align:left\">返回容器中最后一个元素的直接引用，函数不适用于空的 array 容器。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>data()</code></td>\n<td style=\"text-align:left\">返回一个指向容器首个元素的指针。利用该指针，可实现复制容器中所有元素等类似功能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>fill(x)</code></td>\n<td style=\"text-align:left\">将  <code>x</code>  这个值赋值给容器中的每个元素，相当于初始化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>array1.swap(array2)</code></td>\n<td style=\"text-align:left\">交换 array1 和 array2 容器中的所有元素，但前提是它们具有相同的长度和类型</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"部分用法示例\"><a class=\"markdownIt-Anchor\" href=\"#部分用法示例\">#</a> 部分用法示例</h3>\n<p><code>data()</code></p>\n<p>指向底层元素存储的指针。对于非空容器，返回的指针与首元素地址比较相等。</p>\n<p><code>at()</code></p>\n<p>下标为 <code>1</code>  的元素加上下标为 <code>2</code>  的元素，答案为 <code>5</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>fill()</code></p>\n<p>array 的 <code>fill()</code>  函数，将 <code>a</code>  数组全部元素值变为 <code>x</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>另外还有其它的 <code>fill()</code>  函数：将 <code>a</code>  数组 [begin,end) 全部值变为 <code>x</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>get 方法获取元素值</strong></p>\n<p>将 <code>a</code>  数组下标为 <code>1</code>  位置处的值改为 <code>x</code></p>\n<p>注意：获取的下标只能写数字，不能填变量</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>排序</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"tuple\"><a class=\"markdownIt-Anchor\" href=\"#tuple\">#</a> tuple</h2>\n<p>tuple 模板是 pair 的泛化，可以封装不同类型任意数量的对象。</p>\n<p>可以把 tuple 理解为 pair 的扩展，tuple 可以声明二元组，也可以声明三元组。</p>\n<p>tuple 可以等价为<strong>结构体</strong>使用</p>\n<p><strong>头文件</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;tuple></span></span></pre></td></tr></table></figure><h3 id=\"声明初始化\"><a class=\"markdownIt-Anchor\" href=\"#声明初始化\">#</a> 声明初始化</h3>\n<p>声明一个空的 <code>tuple</code>  三元组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> t1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>赋值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t1 <span class=\"token operator\">=</span> <span class=\"token function\">make_tuple</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hahaha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建的同时初始化</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以使用 pair 对象构造 tuple 对象，但 tuple 对象必须是两个元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> t3 <span class=\"token punctuation\">&#123;</span>p<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 pair 对象赋给 tuple 对象</span></pre></td></tr></table></figure><h3 id=\"元素操作\"><a class=\"markdownIt-Anchor\" href=\"#元素操作\">#</a> 元素操作</h3>\n<p>获取 tuple 对象 <code>t</code>  的第一个元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>修改 tuple 对象 <code>t</code>  的第一个元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"函数操作\"><a class=\"markdownIt-Anchor\" href=\"#函数操作\">#</a> 函数操作</h3>\n<p>获取元素个数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> tuple_size<span class=\"token operator\">&lt;</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><p>获取对应元素的值</p>\n<p>通过 <code>get(obj)</code>  方法获取， <code>n</code>  必须为数字不能是变量</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><p>通过 <code>tie</code>  解包 获取元素值</p>\n<p><code>tie</code>  可以让 tuple 变量中的三个值依次赋到 tie 中的三个变量中</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> one<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string two<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hahaha\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> one <span class=\"token operator\">&lt;&lt;</span> two <span class=\"token operator\">&lt;&lt;</span> three <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1hahaha3</span></pre></td></tr></table></figure><h1 id=\"stl函数\"><a class=\"markdownIt-Anchor\" href=\"#stl函数\">#</a> STL 函数</h1>\n<h2 id=\"accumulate\"><a class=\"markdownIt-Anchor\" href=\"#accumulate\">#</a> accumulate</h2>\n<ul>\n<li>\n<p><code> accumulate(beg, end, init)</code></p>\n</li>\n<li>\n<p>** 复杂度：**O (N)</p>\n</li>\n<li>\n<p>作用：对一个序列的元素求和</p>\n</li>\n<li>\n<p><code>init</code>  为对序列元素求和的<strong>初始值</strong></p>\n</li>\n<li>\n<p>返回值类型：与 <code>init</code>  一致</p>\n</li>\n<li>\n<p><strong>基础累加求和：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 对 [0,2] 区间求和，初始值为 0，结果为 0+1+3+5=9</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> res1 <span class=\"token operator\">=</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 对 [0,3] 区间求和，初始值为 5，结果为 5+1+3+5+9=23</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> res2 <span class=\"token operator\">=</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>** 自定义二元对象求和：** 使用 lambda 表达式</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ll num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>st<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">10000000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 返回值类型与 init 一致，同时注意参数类型（a）也要一样</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 初始值为 1，累加 1+10000000001+10000000002+10000000003=30000000007</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ll res <span class=\"token operator\">=</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>st <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> st <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1ll</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>ll a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"atoi\"><a class=\"markdownIt-Anchor\" href=\"#atoi\">#</a> atoi</h2>\n<ul>\n<li>\n<p><code>atoi(const char *)</code></p>\n</li>\n<li>\n<p>将字符串转换为 <code>int</code>  类型</p>\n</li>\n<li>\n<p>注意参数为 <code>char</code>  型数组，如果需要将 string 类型转换为 int 类型，可以使用 <code>stoi</code>  函数（参考下文），或者将 <code>string</code>  类型转换为 <code>const char *</code>  类型。</p>\n</li>\n<li>\n<p>关于输出数字的范围：<br>\n <code>atoi</code> <strong> 不做</strong>范围检查，如果超出上界，输出上界，超出下界，输出下界。<br>\n <code>stoi</code> <strong> 会做</strong>范围检查，默认必须在 <code>int</code>  范围内，如果超出范围，会出现 RE（Runtime Error）错误。</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s <span class=\"token operator\">=</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1234</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"stoi\"><a class=\"markdownIt-Anchor\" href=\"#stoi\">#</a> stoi</h2>\n<ul>\n<li>\n<p><code>stoi(const string*)</code></p>\n</li>\n<li>\n<p>将对应 string 类型字符串转换为数字</p>\n</li>\n<li>\n<p>注意参数为 <code>string</code>  字符串类型。</p>\n<p>关于输出数字的范围：<br>\n <code>stoi</code> <strong> 会做</strong>范围检查，默认必须在 <code>int</code>  范围内，如果超出范围，会出现 RE（Runtime Error）错误。<br>\n <code>atoi</code> <strong> 不做</strong>范围检查，如果超出上界，输出上界，超出下界，输出下界。</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s <span class=\"token operator\">=</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1234</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"iota\"><a class=\"markdownIt-Anchor\" href=\"#iota\">#</a> iota</h2>\n<ul>\n<li>\n<p><code>iota(beg, end)</code></p>\n</li>\n<li>\n<p>让序列递增赋值</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">iota</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 0 1 2 3 4 5 6 7 8 9</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"to_string\"><a class=\"markdownIt-Anchor\" href=\"#to_string\">#</a> to_string</h2>\n<ul>\n<li>\n<p>将数字转化为字符串，支持小数（double）</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"fill\"><a class=\"markdownIt-Anchor\" href=\"#fill\">#</a> fill</h2>\n<ul>\n<li>\n<p><code>fill(beg,end,num)</code></p>\n</li>\n<li>\n<p>对一个序列进行初始化赋值</p>\n</li>\n<li>\n<p><strong>复杂度：</strong> O(N)</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对 a 数组的所有元素赋 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//1 1 1 1 1</span></pre></td></tr></table></figure></li>\n<li>\n<p>注意区分 memset：</p>\n<p><code>memset()</code>  是按<strong>字节</strong>进行赋值，对于初始化赋 <code>0</code>  或 <code>-1</code>  有比较好的效果.</p>\n<p>如果赋某个特定的数会<strong>出错</strong>，赋值特定的数建议使用 <code>fill()</code></p>\n</li>\n</ul>\n<h2 id=\"reverse\"><a class=\"markdownIt-Anchor\" href=\"#reverse\">#</a> reverse</h2>\n<ul>\n<li>\n<p><code>reverse(beg,end)</code></p>\n</li>\n<li>\n<p>对序列进行翻转</p>\n</li>\n<li>\n<p><strong>复杂度：</strong> O(N)</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcde\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对 s 进行翻转</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//edcba</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 对 a 数组进行翻转</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4321</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"sort\"><a class=\"markdownIt-Anchor\" href=\"#sort\">#</a> sort</h2>\n<ul>\n<li>\n<p><code>sort(beg, end)</code></p>\n</li>\n<li>\n<p>``sort(beg, end, cmp)`</p>\n<p>再定义一个比较函数，通常对条件筛选进行排序，一般与结构体连用。</p>\n</li>\n<li>\n<p>对一个序列进行排序</p>\n</li>\n<li>\n<p><strong>复杂度：</strong> O(NlogN)</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对 a 数组的 [1,n] 位置进行从小到大排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 对 a 数组的 [0,n-1] 位置从大到小排序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">greater</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 对 a 数组的 [0,n-1] 位置从小到大排序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">less</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 自定义排序，定义比较函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>node a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 按结构体里面的 x 值降序排列</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> node <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 只能接受 以函数为形式的自定义排序规则，无法接受以结构体为形式的自定义排序规则</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"stable_sort\"><a class=\"markdownIt-Anchor\" href=\"#stable_sort\">#</a> stable_sort</h2>\n<h2 id=\"is_sorted\"><a class=\"markdownIt-Anchor\" href=\"#is_sorted\">#</a> is_sorted</h2>\n<h2 id=\"unique\"><a class=\"markdownIt-Anchor\" href=\"#unique\">#</a> unique</h2>\n<h2 id=\"transform\"><a class=\"markdownIt-Anchor\" href=\"#transform\">#</a> transform</h2>\n<h2 id=\"lower_bound-upper_bound\"><a class=\"markdownIt-Anchor\" href=\"#lower_bound-upper_bound\">#</a> lower_bound + upper_bound</h2>\n<ul>\n<li>\n<p>二分查找</p>\n</li>\n<li>\n<p><strong>复杂度：</strong> O(logN)</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 a 数组中查找第一个大于等于 x 的元素，返回该元素的地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 在 a 数组中查找第一个大于 x 的元素，返回该元素的地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 如果未找到，返回尾地址的下一个位置的地址</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"max_elementmin_element\"><a class=\"markdownIt-Anchor\" href=\"#max_elementmin_element\">#</a> max_element+min_element</h2>\n<h2 id=\"maxmin\"><a class=\"markdownIt-Anchor\" href=\"#maxmin\">#</a> max+min</h2>\n<h2 id=\"minmax\"><a class=\"markdownIt-Anchor\" href=\"#minmax\">#</a> minmax</h2>\n<h2 id=\"minmax_element\"><a class=\"markdownIt-Anchor\" href=\"#minmax_element\">#</a> minmax_element</h2>\n<h2 id=\"nth_element\"><a class=\"markdownIt-Anchor\" href=\"#nth_element\">#</a> nth_element</h2>\n<h2 id=\"next_permutation\"><a class=\"markdownIt-Anchor\" href=\"#next_permutation\">#</a> next_permutation</h2>\n<h2 id=\"partial_sort\"><a class=\"markdownIt-Anchor\" href=\"#partial_sort\">#</a> partial_sort</h2>\n<h2 id=\"random_shuffle\"><a class=\"markdownIt-Anchor\" href=\"#random_shuffle\">#</a> random_shuffle</h2>\n<h2 id=\"__gcd\"><a class=\"markdownIt-Anchor\" href=\"#__gcd\">#</a> __gcd</h2>\n<h2 id=\"__lg\"><a class=\"markdownIt-Anchor\" href=\"#__lg\">#</a> __lg</h2>\n<h2 id=\"_builtin-内置位运算函数\"><a class=\"markdownIt-Anchor\" href=\"#_builtin-内置位运算函数\">#</a> _<em>builtin</em> 内置位运算函数</h2>\n<h3 id=\"__builtin_ffs\"><a class=\"markdownIt-Anchor\" href=\"#__builtin_ffs\">#</a> __builtin_ffs</h3>\n<h3 id=\"__builtin_popcount\"><a class=\"markdownIt-Anchor\" href=\"#__builtin_popcount\">#</a> __builtin_popcount</h3>\n<h3 id=\"__builtin_ctz\"><a class=\"markdownIt-Anchor\" href=\"#__builtin_ctz\">#</a> __builtin_ctz</h3>\n<h3 id=\"__builtin_clz\"><a class=\"markdownIt-Anchor\" href=\"#__builtin_clz\">#</a> __builtin_clz</h3>\n<h3 id=\"__builtin_parity\"><a class=\"markdownIt-Anchor\" href=\"#__builtin_parity\">#</a> __builtin_parity</h3>\n<p>一．</p>\n<p>二 vector 扩容原理<br>\n 1 新增元素：Vector 通过一个连续的数组存放元素，如果集合已满，在新增数据的时候，就会分配一块更大的内存，将原来的数据复制过来，释放之前的内存，在插入新增的元素。注意不是在原来空间后直接增加空间<br>\n 2 对 vector 的任何操作，一旦引起空间重新配置，指向原 vector 的所有迭代器就都失效了。<br>\n3 不同的编译器实现的扩容方式不一样，VS2015 中以 1.5 倍扩容，GCC 以 2 倍扩容。</p>\n<p>三 vector 扩容为什么以 2 倍增长<br>\n 1 时间和空间的权衡，简单来说， 空间分配的多，平摊时间复杂度低，但浪费空间也多。<br>\n2 均摊添加每个元素的开销最小。</p>\n<p>四 vector 扩容为什么以 1.5 倍增长<br>\n理想分配方案是是在第 N 次分配的时候能重用之前 N-1 次释放的内存，如果按照 1.5 分配，1，1.5，3，4.5…… 当你需要分配 4.5 时，前面已分配 5.5，你可以直接利用，把旧数据 move 过去。但选择两倍的增长比如像这样：1，2，4，8，16，32，… 每次需要申请的空间都大于用到前面释放的内存 (4&gt;2+1)，无法重用。</p>\n<p>五 vector 常用接口：<br>\n・清空 vector 可以使用成员函数 c.clear ()<br>\n・判断 vector 是否为空，可以使用成员函数 empty ()，如果为空返回 true，否则返回 false<br>\n・vector 输出最后一个元素的引用可以用 back () 成员函数，如果容器为空，则行为未定义<br>\n・vector 输出第一个元素的引用可以用 front () 成员函数，如果容器为空，则行为未定义<br>\n・vector 支持用下标访问元素，类似数组一样 c [n] 其中 n 是一个无符号整数，如果 n 大于容器的长度，那么行为未定义<br>\n・vector 为了防止越界访问，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1jLWtxNmEwOGhxcGc4Z2J3M2E0bWZuc2QuYXQ=\">其中有成员函数 c.at</span> (n)，返回下标为 n 的元素的引用。如果下标越界，那么抛出 out_of_range 的异常<br>\n・pop_back () 成员函数用来删除 vector 中的最后一个元素，如果容器为空会出现未定义行为。<br>\n・c.erase (it) 成员函数，删除迭代器 it 所指向的元素，返回一个指向被删除元素之后的迭代器，如果 it 指向最后一个元素，那么返回以为尾后迭代器（通常是 end ()）。若 it 就是 end ()，那么行为未定义。<br>\n・c.erase (beg,ed) 删除 [beg,ed) 范围的元素，同时返回最后一个元素的后面的迭代器，如果 ed 就是尾后迭代器，那么还返回一个尾后迭代器。<br>\n・vector 中 begin 和 end 函数返回的是什么？<br>\nbegin 返回的是第一个元素的迭代器，end 返回的是最后一个元素后面位置的迭代器。前闭后开区间【）<br>\n・vector 中的 reserve 和 resize 的区别<br>\n reserve 是直接扩充到已经确定的大小，可以减少多次开辟、释放空间的问题（优化 push_back），就可以 提高效率，其次还可以减少多次要拷贝数据的问题。reserve 只是保证 vector 中的空间大小（capacity）最少 达到参数所指定的大小 n。reserve () 只有一个参数。<br>\nresize () 可以改变有效空间的大小，也有改变默认值的功能。capacity 的大小也会随着改变。resize () 可以有 多个参数。<br>\n・vector 中的 size 和 capacity 的区别<br>\n size 表示当前 vector 中有多少个元素（finish - start）;<br>\ncapacity 函数则表示它已经分配的内存中可以容纳多少元素（end_of_storage - start）;<br>\n・vector 迭代器失效的情况<br>\n当插入一个元素到 vector 中，由于引起了内存重新分配，所以指向原内存的迭代器全部失效。 当删除容器中一个元素后，该迭代器所指向的元素已经被删除，那么也造成迭代器失效。erase 方法会返回下 一个有效的迭代器，所以当我们要删除某个元素时，需要 it=vec.erase (it)。<br>\n・正确释放 vector 的内存 (clear (), swap (), shrink_to_fit ())<br>\n vec.clear ()：清空内容，但是不释放内存。<br>\nvector ().swap (vec)：清空内容，且释放内存，想得到一个全新的 vector。 vec.shrink_to_fit ()：请求容器降低其 capacity 和 size 匹配。 vec.clear ();vec.shrink_to_fit ();：清空内容，且释放内存。<br>\n・vector 中 erase 方法与 algorithn 中的 remove 方法区别<br>\n vector 中 erase 方法真正删除了元素，迭代器不能访问了。<br>\nremove 只是简单地将元素移到了容器的最后面，迭代器还是可以访问到。因为 algorithm 通过迭代器进行操作，不知道容器的内部结构，所以无法进行真正的删除。</p>\n<p>六 List 原理</p>\n<p>list 是由双向链表实现的，因此内存空间是不连续的。<br>\nlist 的随机访问效率不好，需要遍历元素，时间复杂度为 o (n)。<br>\n3. 底层是双向链表，所以每个元素有两个指针的额外空间开销。<br>\n4. 在任何位置都能高效地插入和删除元素。只要改变元素的指针值，不需要拷贝元素。<br>\n七 vector、list、queue 选择原则：<br>\n1 需要对数据高效地随机访问 (存取)，而不在乎插入和删除的效率，采用 vector<br>\n2 需要大量插入、删除数据，而不关心随机访问数据，采用 list<br>\n3 需要随机访问数据，而且关心前后增删数据的能力，采用 deque<br>\n4 对数据中间的增删操作比较多：采用 list，建议在排序的基础上，批量进行增删可以对运行效率提供最大的保证</p>\n<p>八 map 的底层实现<br>\n容器的数据结构是采用红黑树进行管理，插入的元素健位不允许重复，所使用的节点元素的比较函数，只对元素的健值进行比较，元素的各项数据可通过健值检索出来。map 容器是一种关联容器。</p>\n<p>九 map 和 unordered_map 的实现机理：<br>\nmap: 是基于红黑树来实现的（红黑树是非常严格的平衡二叉搜索树），红黑树具有自动排序功能，红黑树的每一个节点都代表着 map 中的一个元素，因此对于 map 的查找，删除和插入操作都是对红黑树的操作。<br>\nunordered_map: 是基于哈希表来实现的，查找的时间复杂度是 O (1), 在海量数据处理中有着广泛的应用。</p>\n<p>十 map 和 unordered_map 的优缺点<br>\n map 的优点：（1）map 是有序的（2）基于红黑树实现，查找的时间复杂度是 O (n)<br>\n map 的缺点：空间占用率比较高，因为内部实现了红黑树，虽然提高了运行效率，但是每个节点都要保存父亲节点和孩子节点和红黑树的性质，使得每一个节点都占用大量的空间。<br>\n适用的情况：对于要有序的结构，适用 map<br>\nunordered_map 的优点：因为内部是哈希表来实现的，所以查找效率会非常高<br>\n unordered_map 的缺点：哈希表的建立比较费时<br>\n适用的情况：对于查找问题，适用 unordered_map 会更好一点。</p>\n<p>十一 Map 插入元素方法<br>\n map&lt;int, string&gt; mapStudent;<br>\n1 mapStudent.insert(pair&lt;int, string&gt;(1, “student_one”));<br>\n2 mapStudent.insert(map&lt;int, string&gt;::value_type (1, “student_one”));<br>\n3 mapStudent[1] = “student_one”;<br>\n 以上三种用法，虽然都可以实现数据的插入，但是它们是有区别的，当然了第一种和第二种在效果上是完成一样的，用 insert 函数插入数据，在数据的插入上涉及到集合的唯一性这个概念，即当 map 中有这个关键字时，insert 操作是插入数据不了的，但是用数组方式就不同了，它可以覆盖以前该关键字对应的值</p>\n<p>十二 为何 map 和 set 的插入删除效率比其他序列容器高<br>\n因为不需要内存拷贝和内存移动</p>\n<p>十三 当数据元素增多时（从 10000 到 20000），map 的 set 的查找速度会怎样 变化？<br>\nRB-TREE 用二分查找法，时间复杂度为 logn，所以从 10000 增到 20000 时，查找次数从 log10000=14 次到 log20000=15 次，多了 1 次而已。</p>\n<p>十四 map 、set、multiset、multimap 的特点<br>\n set 和 multiset 会根据特定的排序准则自动将元素排序，set 中元素不允许重复，multiset 可以重复。 map 和 multimap 将 key 和 value 组成的 pair 作为元素，根据 key 的排序准则自动将元素排序（因为红黑树也是 二叉搜索树，所以 map 默认是按 key 排序的），map 中元素的 key 不允许重复，multimap 可以重复。 map 和 set 的增删改查速度为都是 logn，是比较高效的。</p>\n<p>十五 为何 map 和 set 每次 insert 之后， 以前保存的 iterator 不会失效？<br>\n存储的是结点，不需要内存拷贝和内存移动。 插入操作只是结点指针换来换去，结点内存没有改变。而 iterator 就像指向结点的指针，内存没变，指向内 存的指针也不会变。 6</p>\n<p>十六 为何 map 和 set 不能像 vector 一样有个 reserve 函数来预分配数据？<br>\n 在 map 和 set 内部存储的已经不是元素本身了，而是包含元素的结点。也就是说 map 内部使用的 Alloc 并不是 map 声明的时候从参数中传入的 Alloc。</p>\n<p>十七 set 底层实现<br>\n底层是红黑树，set 会根据待定的排序准则，自动将元素排序。不允许元素重复。</p>\n<p>十八 set, multiset (map,multimap)<br>\n set 和 multiset 会根据特定的排序准则自动将元素排序，set 中元素不允许重复，multiset 可以重复。因为是排序的，所以 set 中的元素不能被修改，只能删除后再添加。</p>\n<p>十九 set 的底层实现实现为什么不用哈希表而使用红黑树？<br>\nset 中元素是经过排序的，红黑树也是有序的，哈希是无序的 如果只是单纯的查找元素的话，那么肯定要选哈希表了，因为哈希表在的最好查找时间复杂度为 O (1)，并且 如果用到 set 中那么查找时间复杂度的一直是 O（1），因为 set 中是不允许有元素重复的。而红黑树的查找时 间复杂度为 O (lgn)</p>\n<p>二十 hash 表<br>\n hash 表的实现，包括 STL 中的哈希桶长度常数。<br>\nhash 表的实现主要涉及两个问题：散列函数和碰撞处理。<br>\n1）hash function （散列函数）。最常见的散列函数：f (x) = x % TableSize .<br>\n2）碰撞问题（不同元素的散列值相同）。解决碰撞问题的方法有许多种，包括线性探测、二次探测、开链等做法。SGL 版本使用开链法，使用一个链表保持相同散列值的元素。</p>\n<p>二十一 你怎样理解迭代器？<br>\nIterator (迭代器) 用于提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示，相当于智能指针。</p>\n<p>二十二 迭代器失效问题<br>\n vector 迭代器<br>\n当插入一个元素后，插入点之前的迭代器如果未扩容则不受影响，插入点之后的迭代器失效；<br>\n当插入一个元素后，capacity 如果有变化，则容器需要重新分配内存，所有迭代器都会失效；<br>\n当进行删除操作后，指向删除点及之后元素的迭代器全部失效。<br>\ndeque 迭代器<br>\n在容器 begin/end 插入操作所有迭代器不受影响；<br>\n在容器非 begin/end 的位置插入和删除操作都会使指向该容器元素的所有迭代器失效。<br>\n在容器 begin/end 删除元素会使指向被删除元素的迭代器失效；<br>\nList/forward_list 迭代器<br>\n list insert 操作不会使 list 迭代器失效；<br>\nlist erase 操作会使当前指向被删除元素的迭代器失效，其它迭代器正常。<br>\nset 迭代器<br>\n set 的 insert 操作不会使 set 迭代器失效；<br>\nset erase 操作会使当前指向被删除元素的迭代器失效，其它迭代器正常。<br>\nmap 迭代器<br>\n map 的 insert 操作不会使 map 迭代器失效；<br>\nmap erase 删除操作会使当前指向被删除元素的迭代器失效</p>\n<p>二十三 vector 为何每次 insert 之后，以前保存的 iterator 不会失效？<br>\n 答:iterator 这里就相当于指向节点的指针，内存没有变，指向内存的指针怎么会失效呢 (当然被删除的那个元素本身已经失效了)。相对于 vector 来说，每一次删除和插入，指针都有可能失效，调用 push_back 在尾部插入也是如此。因为为了保证内部数据的连续存放，iterator 指向的那块内存在删除和插入过程中可能已经被其他内存覆盖或者内存已经被释放了。即使时 push_back 的时候，容器内部空间可能不够，需要一块新的更大的内存，只有把以前的内存释放，申请新的更大的内存，复制已有的数据元素到新的内存，最后把需要插入的元素放到最后，那么以前的内存指针自然就不可用了。特别时在和 find 等算法在一起使用的时候，牢记这个原则：不要使用过期的 iterator。</p>\n<p>二十四 vector、list、map、deque 用 erase（it）后，迭代器的变化。<br>\nvector 和 deque 是序列式容器，其内存分别是连续空间和分段连续空间，删除迭代器 it 后，其后面的迭代器都失效了，此时 it 及其后面的迭代器会自动加 1，使 it 指向被删除元素的下一个元素。<br>\nlist 删除迭代器 it 时，其后面的迭代器都不会失效，将前面和后面连接起来即可。<br>\nmap 也是只能使当前删除的迭代器失效，其后面的迭代器依然有效。</p>\n<p>二十五 不允许有遍历行为的容器有哪些（不提供迭代器）？<br>\n1）queue，除了头部外，没有其他方法存取 deque 的其他元素。<br>\n2）stack（底层以 deque 实现），除了最顶端外，没有任何其他方法可以存取 stack 的其他元素。<br>\n3）heap，所有元素都必须遵循特别的排序规则，不提供遍历功能。</p>\n<p>二十六 stl 中 alloc<br>\nSGI 版本 STL 的默认配置器 std::alloc。参见：《STL 源码剖析》<br>\n1）考虑到小型区块所可能造成的内存碎片问题，SGI 设计了双层配置器。第一级配置器直接使用 malloc () 和 free ()；第二级则视情况采取不同的策略：当配置区块超过 128bytes 时，视为 “足够大”，便调用第一级配置器；当配置区块小于 128bytes 时，视之为 “过小”，为了降低额外负担，便采用 memory pool（内存池）整理方式，而不在求助于第一级配置器。<br>\n2）内存池的核心：内存池和 16 个自由链表（各自管理 8,16，…，128bytes 的小额区块）。在分配一个小区块时，首先在所属自由链表中寻找，如果找到，直接抽出分配；若所属自由链表为空，则请求内存池为所属自由链表分配空间；默认情况下，为该自由链表分配 20 个区块，若内存池剩余容量不足，则分配可分配的最大容量；若内存池连一个区块都无法分配，则调用 chunk_alloc 为内存池分配一大块区块；若内存不足，则尝试调用 malloc 分配，否则返回 bad_alloc 异常。</p>\n<p>二十七 STL 线程不安全的情况<br>\n在对同一个容器进行多线程的读写、写操作时；<br>\n在每次调用容器的成员函数期间都要锁定该容器；<br>\n在每个容器返回的迭代器（例如通过调用 begin 或 end）的生存期之内都要锁定该容器； 在每个在容器上调用的算法执行期间锁定该容器。</p>\n<p>二十八 priority_queue 的底层原理<br>\n priority_queue：优先队列，其底层是用堆来实现的。在优先队列中，队首元素一定是当前队列中优先级最 高的那一个。</p>\n",
            "tags": [
                "C++",
                "STL"
            ]
        }
    ]
}