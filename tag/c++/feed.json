{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"c++\" tag",
    "description": "",
    "home_page_url": "https://adventure-yx.github.io",
    "items": [
        {
            "id": "https://adventure-yx.github.io/2023/06/28/MFC%E5%9B%BE%E5%BD%A2%E5%9B%BE%E5%83%8F/",
            "url": "https://adventure-yx.github.io/2023/06/28/MFC%E5%9B%BE%E5%BD%A2%E5%9B%BE%E5%83%8F/",
            "title": "MFC 图形图像",
            "date_published": "2023-06-28T02:12:08.000Z",
            "content_html": "<h1 id=\"cdc类及其屏幕绘图函数\"><a class=\"markdownIt-Anchor\" href=\"#cdc类及其屏幕绘图函数\">#</a> CDC 类及其屏幕绘图函数</h1>\n<p>CDC 类是一个设备上下文类。（Device Context）</p>\n<p>CDC 类提供了用来处理显示器或者打印机等设备上下文的成员函数，还有处理与窗口客户区关联的显示上下文的成员函数。使用 CDC 的成员函数可以进行所有的绘图操作，包括处理绘图工具、GDI 对象的选择、颜色和调色板的处理、获取和设置绘图属性、映射、窗口范围、坐标转换、剪切以及绘制直线、简单图形、椭圆和多边形等。另外，它还为文本输出、处理字体、使用打印机跳转和滚动等提供了成员函数。</p>\n<p>如上所述，CDC 类几乎封装了所有的 Windows GDI 函数，另外，MFC 中还有几个由 CDC 类派生的子类，包括 CWindowDC、CPaintDC、CClientDC、CMetaFileDC，它们用来进行一些特定的绘图操作。</p>\n<blockquote>\n<p>一般在使用完 CDC 对象要记得删除它，否则会有内存泄漏。很多情况下我们可以调用 <code>CWnd::GetDC()</code>  函数来获取设备上下文指针，即 CDC 指针，这个时候记得用完后调用 <code>CWnd::ReleaseDC()</code>  函数释放上下文。</p>\n</blockquote>\n<ul>\n<li>\n<p><code>HDC</code>  是 DC 的句柄，API 中的一个类似指针的数据类型。</p>\n</li>\n<li>\n<p><code>CDC</code>  是 MFC 的 DC 的一个类，设备上下文类都有一个成员变量 <code>m_nHdc</code> ，即 HDC 类型的句柄</p>\n</li>\n<li>\n<p><code>CPaintDC</code> ：封装 BeginPaint 和 EndPaint 两个 API 的调用</p>\n<ul>\n<li>用于响应窗口重绘消息 <code>WM_PAINT</code>  的绘图输出</li>\n<li>CPaintDC 在构造函数中调用 <code>BeginPaint()</code>  取得设备上下文，在析构函数中调用 <code>EndPaint()</code>  释放设备上下文。</li>\n<li><code>EndPaint()</code>  除了释放设备上下文外，还负责从消息队列中清除 <code>WM_PAINT</code>  消息。因此<strong>在处理窗口重绘时，必须使用 CPaintDC，否则 WM_PAINT 消息无法从消息队列中清除，将引起不断地窗口重绘</strong>。</li>\n<li>CPaintDC 也只能用在 WM_PAINT 消息处理中。</li>\n</ul>\n</li>\n<li>\n<p><code>CClientDC</code> ：客户区设备上下文，处理显示器描述表的相关的窗体客户区域。</p>\n<p>构造时自动调用 <code>GetDC</code>  函数，析构时自动调用 <code>ReleaseDC</code>  函数，一般应用于客户区窗口的绘制。</p>\n<p>当需要处理一个鼠标的单击，然后马上画出一个圆，不能等到下个 WM_PAINT 的消息到来才画图，而是马上，这时就需要 CClientDC 了，它可以在 <code>OnPaint</code>  的外面创建一个客户区 DC。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnLButtonDown</span> <span class=\"token punctuation\">(</span>UINT nFlags<span class=\"token punctuation\">,</span> CPoint ppoint<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    CRect rect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">GetClientRect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    CClientDC <span class=\"token function\">dc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">MoveTo</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">LineTo</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">MoveTo</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">LineTo</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>CWindowDC</code> ：处理显示器描述表相关的整个窗体区域，包括了框架和控件（子窗体）</p>\n<ul>\n<li>可在非客户区绘制图形，而 CClientDC，CPaintDC 只能在客户去绘制图形；</li>\n<li>坐标原点是在屏幕的左上角，而 CClientDC，CPaintDC 下坐标原点是在客户区的左上角；</li>\n<li>关联一特定窗口，允许开发者在目标窗口的任何一部分进行绘图包括边界与标题，这种 DC 同 <code>WM_NCPAINT</code>  消息一起发送。</li>\n</ul>\n</li>\n<li>\n<p><code>CMetaFileDC</code> ：与元文件相关的设备描述表关联。</p>\n</li>\n</ul>\n<h1 id=\"关于wm_paint事件为什么窗口不能立即重绘\"><a class=\"markdownIt-Anchor\" href=\"#关于wm_paint事件为什么窗口不能立即重绘\">#</a> 关于 WM_PAINT 事件（为什么窗口不能立即重绘）</h1>\n<p>系统会在多个不同的时机发送 WM_PAINT 消息：</p>\n<ul>\n<li>当第一次创建一个窗口时；</li>\n<li>当改变窗口的大小时；</li>\n<li>当把窗口从另一个窗口背后移出时；</li>\n<li>当最大化最小化窗口时等等</li>\n</ul>\n<p>这些动作都是由系统管理的，应用只是被动地接受该消息，在消息处理函数中进行绘制操作，大多数地时候应用也需要能够主动引发窗口中的绘制操作，比如当窗口显示的数据改变的时候，这一般是通过 <code>InvalidateRect()</code>  和 <code>InvalidateRgn()</code>  函数来完成的。 <code>InvalidateRect()</code>  和 <code>InvalidateRgn()</code>  把指定的区域加到窗口的 <code>Update Region</code>  中，当应用的消息队列没有其他消息时，如果窗口的 <code>Update Region</code>  不为空时，系统就会自动产生 WM_PAINT 消息。</p>\n<blockquote>\n<p>系统为什么不在调用 Invalidate 时发送 WM_PAINT 消息？又为什么要等到消息队列为空时才发送 WM_PAINT 消息？</p>\n</blockquote>\n<p>这是因为，系统把窗口中的绘制操作当作一种低优先级的操作，于是尽可能地推后做。不过这样也有利于提高绘制的效率：两个 WM_PAINT 消息之间通过 <code>InvalidateRect()</code>  和 <code>InvalidateRgn()</code>  函数使之失效的区域就会被累加起来，然后在一个 WM_PAINT 消息中一次的得到更新。不仅能避免多次重复地更新同一区域，也优化了应用的更新操作。像这种通过 <code>InvalidateRect()</code>  和 <code>InvalidateRgn()</code>  函数来使窗口区域无效，依赖于系统在合适的时机发送 WM_PAINT 消息的机制实际上是一种<strong>异步工作方式</strong>，也就是说，在无效化窗口区域和发送 WM_PAINT 消息之间是有延迟的。</p>\n<p>有时这种延迟并不是我们所期望的，这时我们当然可以在无效化窗口区域后利用 SendMessage 发送一条 WM_PAINT 消息来强制立即重绘，但不如使用 Windows GDI 为我们提供的更方便和更强大的函数： <code>UpdateWindow()</code>  和 <code>RedrawWindow()</code> 。</p>\n<p><code>UpdateWindow()</code>  会检查窗口的 Update Region，当其不为空时才发送 WM_PAINT 消息；</p>\n<p><code>RedrawWindow()</code>  则给我们更多的控制：是否重绘非客户区和背景，是否总是发送 WM_PAINT 消息而不管 Update Region 是否为空等。</p>\n<h1 id=\"cpaintdc与onpaint的使用\"><a class=\"markdownIt-Anchor\" href=\"#cpaintdc与onpaint的使用\">#</a> CPaintDC 与 OnPaint 的使用</h1>\n<h2 id=\"cbitmap-hbitmap-bitmap的区别\"><a class=\"markdownIt-Anchor\" href=\"#cbitmap-hbitmap-bitmap的区别\">#</a> CBitmap、HBITMAP、BITMAP 的区别</h2>\n<ul>\n<li>\n<p>BITMAP 是 C++ 中定义的位图结构体</p>\n<p>封装着 bitmap 的一些信息，定义了逻辑位图的高、宽、颜色格式以及位值。</p>\n<blockquote>\n<p>This structure defines the type, width, height, color format, and bit values of a bit map.</p>\n</blockquote>\n</li>\n<li>\n<p>HBITMAP 是 Windows 中使用的位图句柄</p>\n<p>相当于 bitmap 的指针。</p>\n<blockquote>\n<p>Handle to a bitmap.</p>\n<p>typedef HANDLE HBITMAP;</p>\n</blockquote>\n</li>\n<li>\n<p>CBitmap 是 MFC 封装的位图类</p>\n<blockquote>\n<p>Encapsulates a Windows graphics device interface(GDI) bitmap and provides member functions to manipulate the bitmap.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"三者之间的关系转换\"><a class=\"markdownIt-Anchor\" href=\"#三者之间的关系转换\">#</a> 三者之间的关系转换</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HBITMAP hBitmap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CBitmap bitmap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>BITMAP bm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 由 HBITMAP 得到关联的 CBtimap</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">Attach</span><span class=\"token punctuation\">(</span>hBitmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 得到 bm 指向的位图</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">GetBitmap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>bm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 由 CBitmap 得到相关的 HBITMAP</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>hBitmap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HBITMAP<span class=\"token punctuation\">)</span>bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">GetSafeHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"attach和detach\"><a class=\"markdownIt-Anchor\" href=\"#attach和detach\">#</a> Attach 和 Detach</h2>\n<p><code>Attach()</code>  是<strong>把一个 C++ 对象与一个 WINDOW 对象相关联</strong>，直到用 Detach () 把关联去掉。</p>\n<p>如果 Attach 了之后没有 Detach，则 C++ 对象销毁时 WINDOW 对象会跟着一起销毁。</p>\n<p>Attach 了以后，C<ins> 对象的指针和 WINDOWS 对象的 HWND 会有一个映射关系，其作用相当于直接用一个 C</ins> 对象去 Create 一个 WINDOWS 对象，例如 <code>CEdit edit;</code>   <code>edit.create()</code>  并且此映射是永久的，直到此对象销毁为止。</p>\n<blockquote>\n<p>如果用类似 <code>GetDlgItem()</code>  函数也可以返回一个指针，并可以强制转换。</p>\n<p><code>GetDlgItem()</code>  会到映射表里找，有两种映射表，一种是永久的，一种是临时的。</p>\n<p><strong>直接用 C++ 对象创建的 WINDOWS 对象或者是通过 Attach 的对象的映射关系都被放到永久表中，否则就在临时表中创建映射关系。</strong></p>\n<p>所以 <code>GetDlgItem()</code>  不推荐保存返回的指针，因为很难保证 WINDOWS 对象跟 C++ 对象的关联是否放在永久表中。如果映射是放在临时表中，那么在空闲时间会被自动删除。<strong>因为 Attach 完全是为了方便使用 MFC 类的成员函数去操纵 WINDOWS 对象。</strong></p>\n</blockquote>\n<h1 id=\"gdi对象之画笔cpen\"><a class=\"markdownIt-Anchor\" href=\"#gdi对象之画笔cpen\">#</a> GDI 对象之画笔 CPen</h1>\n<p>图形设备接口 GDI（Graphics Device Interface）</p>\n<p>在 MFC 中，CGdiObject 类是 GDI 对象的基类，CGdiObject 类有 6 个直接的派生类，GDI 对象主要也是这 6 个，分别是：CBitmap、CBrush、CFont、CPalette、CPen、CRgn。其中最常用的是画笔 CPen 和画刷 CBrush</p>\n<h1 id=\"gdi对象之画刷cbrush\"><a class=\"markdownIt-Anchor\" href=\"#gdi对象之画刷cbrush\">#</a> GDI 对象之画刷 CBrush</h1>\n<p>创建 Picture Control 控件，添加 CStatic 变量 mPicColor。创建 “选择颜色” 的按钮控件，添加事件响应函数，功能实现如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CBrushExampleDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedBtnColorSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tCOLORREF color <span class=\"token operator\">=</span> <span class=\"token function\">RGB</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 颜色对话框的初始颜色</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tCColorDialog <span class=\"token function\">colorDlg</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 构造颜色对话框</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tCRect rectPicture<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 图片控件的矩形区域坐标</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tCBrush newBrush<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 创建新画刷</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tCBrush <span class=\"token operator\">*</span>pOldBrush<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 旧画刷指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tCClientDC <span class=\"token function\">clientDC</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 构建客户区的设备上下文对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IDOK <span class=\"token operator\">==</span> colorDlg<span class=\"token punctuation\">.</span><span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">// 如果点击了颜色对话框的确定按钮，则执行下列操作。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// 获取颜色对话框中选择的颜色</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcolor <span class=\"token operator\">=</span> colorDlg<span class=\"token punctuation\">.</span><span class=\"token function\">GetColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// 用选择的颜色创建新画刷</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tnewBrush<span class=\"token punctuation\">.</span><span class=\"token function\">CreateSolidBrush</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 获取图片控件矩形区域屏幕坐标</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tmPicColor<span class=\"token punctuation\">.</span><span class=\"token function\">GetWindowRect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rectPicture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 将图片控件矩形区域的屏幕坐标转换为其父窗口即对话框的客户区坐标</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">ScreenToClient</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rectPicture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">// 选择新画刷，并保存旧画刷的指针</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tpOldBrush <span class=\"token operator\">=</span> clientDC<span class=\"token punctuation\">.</span><span class=\"token function\">SelectObject</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>newBrush<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 以新画刷为图片控件填充颜色</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tclientDC<span class=\"token punctuation\">.</span><span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span>rectPicture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">// 恢复旧画刷</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tclientDC<span class=\"token punctuation\">.</span><span class=\"token function\">SelectObject</span><span class=\"token punctuation\">(</span>pOldBrush<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token comment\">// 删除旧画刷</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tnewBrush<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>CClientDC 类是 CDC 类的派生类，它生成的设备上下文对应于窗口的客户区，另一个类 CWindowDC 类也是 CDC 类的派生类，它对应的则包括客户区和非客户区，也就是说，CClientDC 只能在客户区绘图，而 CWindowDC 可以在客户区和非客户区绘图。</p>\n<ul>\n<li>非客户区包括窗口中的标题栏、菜单栏、状态栏、滚动条边框等区域。</li>\n<li>客户区就是除去非客户区之外的主要工作区域</li>\n</ul>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/25/MFC%E6%96%87%E6%A1%A3%E8%A7%86%E5%9B%BE%E6%A1%86%E6%9E%B6/",
            "url": "https://adventure-yx.github.io/2023/06/25/MFC%E6%96%87%E6%A1%A3%E8%A7%86%E5%9B%BE%E6%A1%86%E6%9E%B6/",
            "title": "MFC 文档/视图框架",
            "date_published": "2023-06-25T00:50:08.000Z",
            "content_html": "<h1 id=\"文档视图框架\"><a class=\"markdownIt-Anchor\" href=\"#文档视图框架\">#</a> 文档 / 视图框架</h1>\n<p>MFC 向导自动生成的项目中包含 CxxxDoc 类，CxxxView 类和 CMainFrame 类。</p>\n<p>文档 / 视图结构是 MFC 提供的一种设计，它将数据的处理和显示分开，这样更便于对程序的维护和扩展。</p>\n<ul>\n<li>\n<p>文档</p>\n<p>文档对象用于管理和维护数据，包括保存数据，取出数据以及修改数据等操作，在数据被修改以后，文档可以通知其对应的所有视图更新显示。</p>\n</li>\n<li>\n<p>视图</p>\n<p>视图对象将文档中的数据可视化，负责从文档对象中取出数据显示给用户，并接受用户的输入和编辑，将数据的改变反映给文档对象。视图充当了文档和用户之间媒介的角色。</p>\n</li>\n<li>\n<p>框架</p>\n<p>一个文档可能有多个视图界面，这就需要有框架来管理。框架就是用来管理文档和视图的。框架窗口是应用程序的主窗口，应用程序执行时会先创建一个最顶层的框架窗口。视图窗口是没有菜单和边界的子窗口，它必须包含在框架窗口中，即置于框架窗口的客户区内。</p>\n</li>\n</ul>\n<h1 id=\"文档模板\"><a class=\"markdownIt-Anchor\" href=\"#文档模板\">#</a> 文档模板</h1>\n<p>文档模板中存放了文档、视图和框架相关的信息，应用程序通过文档模板创建文档对象，框架窗口对象和视图对象。另外，文档、视图、框架之间的关系也是文档模板来管理的。</p>\n<p>在 HelloWorld.cpp 中，CHelloWorldApp 应用程序类的成员函数 <code>CHelloWorldApp::InitInstance()</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token class-name\">CHelloWorldApp</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 注册应用程序的文档模板。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 文档模板将用作文档、框架窗口和视图之间的连接</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tCSingleDocTemplate<span class=\"token operator\">*</span> pDocTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tpDocTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CSingleDocTemplate</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tIDR_MAINFRAME<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CHelloWorldDoc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CMainFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 主 SDI 框架窗口</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CHelloWorldView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pDocTemplate<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">AddDocTemplate</span><span class=\"token punctuation\">(</span>pDocTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在构造文档模板类 CSingleDocTemplate 的对象时，第一个参数是资源 ID:IDR_MAINFRAME，它包括框架窗口图标等，后面 3 个参数是 RUNTIME_CLASS 宏的调用，RUNTIME_CLASS 用于获取类的运行信息，文档模板可以根据这些动态创建信息来创建相应类的对象，即文档对象、框架窗口对象和视图对象。</p>\n<p>AddDocTemplate (pDocTemplate) 函数用来注册文档模板对象。</p>\n<h1 id=\"框架类-文档类-视图类\"><a class=\"markdownIt-Anchor\" href=\"#框架类-文档类-视图类\">#</a> 框架类、文档类、视图类</h1>\n<ul>\n<li>\n<p>CMainFrame 框架类继承于 CFrameWndEx 类，而 CFrameWndEx 类又继承于 CFrameWnd 类，CFrameWnd 类中用于管理文档和视图的成员函数有：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获得当前活动视图对象对应文档对象的指针，如果不存在返回 NULL</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">virtual</span> CDocument<span class=\"token operator\">*</span> <span class=\"token function\">GetActiveDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 获得当前活动视图对象的指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CView<span class=\"token operator\">*</span> <span class=\"token function\">GetActiveView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 设置活动视图。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 参数 pViewNew 为要激活的视图对象的指针。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 参数 bNotify 指定视图是否接受激活通知。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetActiveView</span><span class=\"token punctuation\">(</span>CView<span class=\"token operator\">*</span> pViewNew<span class=\"token punctuation\">,</span> BOLL bNotify <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>CHelloWorldDoc 文档类继承于 CDocument 类，主要成员函数有：</p>\n<pre><code class=\"language-cpp\">\n</code></pre>\n</li>\n<li>\n<p>CHelloWorldView 视图类继承于 CView 类，CView 类中与文档 / 视图结构相关的成员函数包括：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取视图关联的文档对象的指针，如果视图没有关联到文档上则返回 NULL</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CDocument<span class=\"token operator\">*</span> <span class=\"token function\">GetDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"各对象之间关系\"><a class=\"markdownIt-Anchor\" href=\"#各对象之间关系\">#</a> 各对象之间关系</h1>\n<p>涉及到的对象包括<strong>应用程序对象</strong>、<strong>文档模板对象</strong>、<strong>文档对象</strong>、<strong>视图对象</strong>和<strong>框架窗口对象</strong>。</p>\n<ol>\n<li>\n<p>应用程序对象保存了一个文档模板的列表。</p>\n<p>在任何对象中调用全局函数 <code>AfxGetApp()</code>  都可以获得应用程序对象的指针。通过调用 <code>CWinAppEx::GetFirstDocTemplatePosition()</code> 、 <code>CWinAppEx::GetNextDocTemplate()</code>  函数可以遍历所有的文档模板。</p>\n</li>\n<li>\n<p>文档模板对象用于维护文档、视图和框架窗口的映射关系，它包含一个已打开文档的列表。</p>\n<p>我们可以通过调用 CDocTemplate::GetFirstDocPosition ()、CDocTemplate::GetNextDoc () 来遍历该文档模板对应的所有文档。</p>\n</li>\n<li>\n<p>框架窗口对象中包含有指向当前活动视图对象的指针。</p>\n<p>AfxGetApp ()-&gt;m_pMainWnd 即为主框架窗口对象的指针，可以通过调用 CFrameWndEx::GetActiveView 来获取当前活动视图对象的指针，并且使用 CFrameWndEx::GetActiveDocument 函数获取当前活动视图对应的文档。</p>\n</li>\n<li>\n<p>文档对象中维护着该文档的视图列表，已经创建该文档的文档模板对象的指针。</p>\n<p>可以通过调用</p>\n</li>\n<li>\n<p>视图是框架窗口的子窗口，它保存有指向对应文档对象的指针。</p>\n<p>可以通过调用 CView::GetParentFrame 获取其所属的框架窗口对象的指针，调用 CView::GetDocument 获取该视图对应的文档对象的指针。</p>\n</li>\n</ol>\n<p>另外，在 MDI 多文档程序中，调用 CMDIFrameWnd::MDIGetActive 可以获取当前活动的 MDI 子窗口。</p>\n<h1 id=\"分割窗口和csplitterwnd类\"><a class=\"markdownIt-Anchor\" href=\"#分割窗口和csplitterwnd类\">#</a> 分割窗口和 CSplitterWnd 类</h1>\n<p>将一个窗口分割成多个窗口，每个窗口都包含视图。</p>\n<p>MFC 分割窗口：动态分割，静态分割。</p>\n<ul>\n<li>动态分割通常用于创建同一文档对应的多个视图，而且这些视图一般都是同一类型的视图，能够在用户编辑文档的不同部分时提供方便。动态分割窗口最多可以有两行两列。</li>\n<li>静态分割比较常见，窗口创建时分割的窗格就已经生成了，而且用户不能改变窗格的数量和顺序。静态分割窗口最多支持 16 行 16 列。通常静态分割的每个窗格中包含不同类的视图，当然也可以包含同一类的视图。</li>\n</ul>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/10/MFC%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6/",
            "url": "https://adventure-yx.github.io/2023/06/10/MFC%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6/",
            "title": "MFC 常用控件",
            "date_published": "2023-06-10T03:12:08.000Z",
            "content_html": "<h1 id=\"常用控件\"><a class=\"markdownIt-Anchor\" href=\"#常用控件\">#</a> 常用控件</h1>\n<p>控件的消息通知</p>\n<p>当控件有事件发生时，他会向父窗口发送通知消息。最常发生的事件就是鼠标单击了，此时控件会向父窗口发送 BN_CLICKED 消息，实际上也就是给父窗口发送 WM_COMMAND 消息，在 wParam 参数中包含有通知消息码（鼠标单击的通知消息码就是 BN_CLICKED）和控件 ID，IParam 参数中包含了控件的句柄。在 MFC 消息映射机制中，消息就是由三部分组成：消息值，wParam 参数，IParam 参数。</p>\n<p>控件消息映射宏的格式：</p>\n<p>ON_通知消息码 <code>(nID, memberFun)</code></p>\n<p>nID 参数是控件的 ID，memberFun 参数是消息处理函数名。</p>\n<p>例如 <code>ON_BN_CLICKED(IDC_PMAC_BUTTON, &amp;LoginDlg::OnBnClickedPmacButton)</code></p>\n<p>消息处理函数声明：</p>\n<p><code>afx_msg void memberFun();</code></p>\n<h2 id=\"静态文本框-static-text\"><a class=\"markdownIt-Anchor\" href=\"#静态文本框-static-text\">#</a> 静态文本框 Static Text</h2>\n<p>如果我们想在程序中<strong>动态创建静态文本框</strong>，而不是像前面那样直接从 Toolbox 中拖到对话框模板上，那么就需要使用 CStatic 类的成员函数 Create。Create 函数的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  LPCTSTR lpszText<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  DWORD dwStyle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> RECT<span class=\"token operator\">&amp;</span> rect<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  CWnd<span class=\"token operator\">*</span> pParentWnd<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  UINT nID <span class=\"token operator\">=</span> <span class=\"token number\">0xffff</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>lpszText：指定要在控件中显示的文字。如果为 NULL 则不会显示任何文字。</p>\n</li>\n<li>\n<p>dwStyle：指定静态控件的风格。静态文本框一般都是对话框或其他窗口的子窗口，而且是可见的，所以应该包含 WS_CHILD 和 WS_VISIBLE 风格，另外，MSDN 中说明，还可以为其设置 “static control styles” 中风格的任意组合。</p>\n<table>\n<thead>\n<tr>\n<th>SS_BITMAP</th>\n<th>一个位图将显示在静态控件中，Create 函数的 lpszText 参数字符串是资源文件中定义的位图名。此风格忽略宽度和高度参数，静态控件自动调整它的尺寸来适应位图</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SS_BLACKFRAME</td>\n<td>指定一个具有与窗口边界同色的框，默认为黑色</td>\n</tr>\n<tr>\n<td>SS_BLACKRECT</td>\n<td>指定一个具有与窗口边界同色的实矩形，默认为黑色</td>\n</tr>\n<tr>\n<td>SS_CENTER</td>\n<td>使显示的正文居中对齐，正文可以换行</td>\n</tr>\n<tr>\n<td>SS_GRAYFRAME</td>\n<td>指定一个具有与屏幕背景同色的边框</td>\n</tr>\n<tr>\n<td>SS_GRAYRECT</td>\n<td>指定一个具有与屏幕背景同色的实矩形</td>\n</tr>\n<tr>\n<td>SS_ICON</td>\n<td>使控件显示一个在资源中定义的图标，图标的名字由 Create 函数的 lpszText 参数指定，图标自动调整它的尺寸</td>\n</tr>\n<tr>\n<td>SS_LEFT</td>\n<td>左对齐正文，正文能回绕</td>\n</tr>\n<tr>\n<td>SS_LEFTNOWORDWRAP</td>\n<td>左对齐正文，正文不能回绕</td>\n</tr>\n<tr>\n<td>SS_NOTIFY</td>\n<td>使控件能向父窗口发送鼠标事件消息</td>\n</tr>\n<tr>\n<td>SS_RIGHT</td>\n<td>右对齐正文，可以回绕</td>\n</tr>\n<tr>\n<td>SS_SIMPLE</td>\n<td>使静态正文在运行时不能被改变并使正文显示在单行中</td>\n</tr>\n<tr>\n<td>SS_WHITEFRAME</td>\n<td>指定一个具有与窗口背景同色的框，默认为白色</td>\n</tr>\n<tr>\n<td>SS_WHITERECT</td>\n<td>指定一个具有与窗口背景同色的实心矩形，默认为白色</td>\n</tr>\n</tbody>\n</table>\n<p>我们在对话框模板添加静态文本框时，可以在静态文本框的属性页中设置它的风格，很多都与上面的风格是对应的，例如，Simple 属性就相当于 SS_SIMPLE 风格。</p>\n</li>\n<li>\n<p>rect：指定静态控件的位置和大小，它可以是 RECT 结构体类型，也可以是 CRect 类的对象。</p>\n</li>\n<li>\n<p>pParentWnd：指定静态控件的父窗口，通常是一个 CDialog 对象，不能是 NULL。</p>\n</li>\n<li>\n<p>nID：指定静态控件的 ID。</p>\n</li>\n</ul>\n<h3 id=\"cstatic类的成员函数\"><a class=\"markdownIt-Anchor\" href=\"#cstatic类的成员函数\">#</a> CStatic 类的成员函数</h3>\n<table>\n<thead>\n<tr>\n<th>GetBitmap</th>\n<th>获取由 SetBitmap 函数设置的位图的句柄</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GetCursor</td>\n<td>获取由 SetCurSor 设置的光标的句柄</td>\n</tr>\n<tr>\n<td>GetEnhMetaFile</td>\n<td>获取由 SetEnhMetaFile 设置的增强图元文件的句柄</td>\n</tr>\n<tr>\n<td>GetIcon</td>\n<td>获取由 SetIcon 设置的图标的句柄</td>\n</tr>\n<tr>\n<td>SetBitmap</td>\n<td>设置要在静态控件中显示的位图</td>\n</tr>\n<tr>\n<td>SetCursor</td>\n<td>设置要在静态控件中显示的光标图片</td>\n</tr>\n<tr>\n<td>SetEnhMetaFile</td>\n<td>设置要在静态控件中显示的增强图元文件</td>\n</tr>\n<tr>\n<td>SetIcon</td>\n<td>设置要在静态控件中显示的图标</td>\n</tr>\n</tbody>\n</table>\n<p>除了上述成员函数外，由于 CStatic 是 CWnd 的派生类，CWnd 的很多成员函数也可以使用，例如，GetWindowText、GetWindowRect、SetWindowText 等。</p>\n<h2 id=\"编辑框-edit-control\"><a class=\"markdownIt-Anchor\" href=\"#编辑框-edit-control\">#</a> 编辑框 Edit Control</h2>\n<h2 id=\"按钮控件-button-radio-button和check-box\"><a class=\"markdownIt-Anchor\" href=\"#按钮控件-button-radio-button和check-box\">#</a> 按钮控件 Button、Radio Button 和 Check Box</h2>\n<p>按钮控件包括：</p>\n<ul>\n<li>命令按钮（Button）</li>\n<li>单选按钮（Radio Button）</li>\n<li>复选框（Check Button）</li>\n</ul>\n<p>按钮控件会向父窗口发送通知消息，例如 <code>BN_CLICKED</code> 、 <code>BN_DOUBLECLICKED</code></p>\n<h3 id=\"按钮控件的创建\"><a class=\"markdownIt-Anchor\" href=\"#按钮控件的创建\">#</a> 按钮控件的创建</h3>\n<p>MFC 提供了 CButton 类封装按钮控件的所有操作。有两种创建方式：</p>\n<ul>\n<li>在对话框模板上直接添加按钮控件资源。</li>\n<li>通过 CButton 类的成员函数 Create 动态创建按钮。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Create 函数原型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tLPCTSTR lpszCaption<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    DWORD dwStyle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> RECT<span class=\"token operator\">&amp;</span> rect<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    CWnd<span class=\"token operator\">*</span> pParentWnd<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    UINT nID</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>lpszCaption：指定按钮控件显示的文本。</li>\n<li>dwStyle：指定按钮控件的风格，可以设置为以下按钮风格的任意组合\n<ul>\n<li>BS_CHECKBOX：指定在按钮右侧带有标题的选择框</li>\n<li>BS_AUTOCHECKBOX：同 BS_CHECKBOX，不过单击鼠标时按钮会自动反转</li>\n<li>BS_AUTORADIOBUTTON： 同 BS_RADIOBUTTON，不过单击鼠标时按钮会自动反转</li>\n<li>BS_AUTO3STATE ：同 BS_3STATE，不过单击按钮时会改变状态</li>\n<li>BS_DEFPUSHBUTTON：指定默认的命令按钮，这种按钮的周围有一个黑框，用户可以按回车键来快速选择该按钮</li>\n<li>BS_GROUPBOX：指定一个组框</li>\n<li>BS_LEFTTEXT：使控件的标题显示在按钮的左边</li>\n<li>BS_OWNERDRAW：指定一个自绘式按钮</li>\n<li>BS_PUSHBUTTON：指定一个命令按钮</li>\n<li>BS_RADIOBUTTON：指定一个单选按钮，在圆按钮的右边显示正文</li>\n<li>BS_3STATE：同 BS_CHECKBOX，不过控件有 3 种状态 — 选择、未选择和变灰</li>\n</ul>\n</li>\n</ul>\n<p>当然，除了以上列出的风格，一般还会为按钮设置 <code>WS_CHILD</code> 、 <code>WS_VISIBLE</code>  和 <code>WS_TABSTOP</code>  等风格，WS_TABSTOP 风格使按钮控件具有 tab 停止属性，即按 tab 键切换焦点控件时能够将焦点停在按钮控件上。创建一组单选按钮时，第一个按钮的风格应设置为 WS_CHILD|WS_VISIBLE|WS_TABSTOP|WS_GROUP|BS_AUTORADIOBUTTON，其他单选按钮的风格应为 WS_CHILD|WS_VISIBLE|BS_AUTORADIOBUTTON，不包含 WS_TABSTOP 和 WS_GROUP。</p>\n<p>在对话框模板上直接添加按钮控件时，它的属性中包含了上述风格，例如，复选框的 Tri_state 属性实际上代表的就是 BS_3STATE 风格。</p>\n<p>剩下的三个参数与静态文本框的 Create 函数中的相应参数类似</p>\n<h3 id=\"cbutton类的主要成员函数\"><a class=\"markdownIt-Anchor\" href=\"#cbutton类的主要成员函数\">#</a> CButton 类的主要成员函数</h3>\n<ul>\n<li>\n<p>HBITMAP SetBitmap(HBITMAP hBitmap);</p>\n<p>设置要在按钮中显示的位图，参数 nBitmap 为位图的句柄。返回值为按钮原来位图的句柄。</p>\n</li>\n<li>\n<p>HBITMAP GetBitmap() const;</p>\n<p>获取之前由 SetBitmap 函数设置的按钮的位图的句柄。</p>\n</li>\n<li>\n<p>void SetButtonStyle(UINT nStyle, BOOL bRedraw = TRUE);</p>\n<p>设置按钮风格，参数 nStyle 指定按钮的风格，bRedraw 指定按钮是否重绘，为 TRUE 则重绘，否则不重绘，默认为重绘。</p>\n</li>\n<li>\n<p>UINT GetButtonStyle() const;</p>\n<p>获取按钮控件的风格</p>\n</li>\n<li>\n<p>void SetCheck(int cCheck);</p>\n<p>设置按钮的选择状态，参数 nCheck 为 0 表示未选中状态，1 表示选中状态，2 表示不确定状态（仅用于复选框）</p>\n</li>\n<li>\n<p>int GetCheck() const;</p>\n<p>获取按钮的选择状态，返回值的意义同 SetCheck 函数的 nCheck 参数</p>\n</li>\n<li>\n<p>HCURSOR SetCursor(HCURSOR hCursor);</p>\n<p>设置要显示到按钮上的光标图，参数 hCursor 指定了光标的句柄。返回值为按钮原来光标的句柄。</p>\n</li>\n<li>\n<p>HCURSOR GetCursor();</p>\n<p>获取 SetCursor 设置的光标的句柄。</p>\n</li>\n<li>\n<p>HICON SetIcon(HICON hIcon);</p>\n<p>设置要在按钮上显示的图标。参数 hIcon 指定了图标的句柄，返回值为按钮原来图标的句柄。</p>\n</li>\n<li>\n<p>HICON GetIcon() const;</p>\n<p>获取 SetIcon 设置的图标的句柄。</p>\n</li>\n<li>\n<p>void SetState(BOOL bHighlight);</p>\n<p>设置按钮高亮状态，参数 bHighlight 指定按钮是否高亮显示，非 0 则为高亮，否则取消高亮显示状态。</p>\n</li>\n<li>\n<p>UINT GetState() const;</p>\n<p>获取按钮控件的选择状态、高亮状态和焦点状态。我们可以通过将返回值与各个掩码相与来获得各种状态值，掩码与对应的相与结果说明如下：</p>\n<ul>\n<li>掩码 0x0003：用来获取单选按钮或复选框的状态。相与结果为 0 表示未选中，1 表示被选中，2 表示不确定状态（仅用于复选框）。</li>\n<li>掩码 0x0004：用来判断按钮是否是高亮显示。相与结果为非 0 值表示按钮是高亮显示的。当单击按钮并按住鼠标左键时，按钮会呈高亮显示。</li>\n<li>掩码 0x0008：相与结果为非零值表示按钮拥有输入焦点。</li>\n</ul>\n</li>\n</ul>\n<p>下面再列出几个继承自 CWnd 类的成员函数，通过它们获取或设置按钮控件的状态非常方便，只需要知道按钮的 ID。</p>\n<ul>\n<li>\n<p>void CheckDlgButton(int nIDButton,UINT nCheck);</p>\n<p>用来设置按钮的选择状态。参数 nIDButton 指定了按钮的 ID。nCheck 的值为 0 表示按钮未被选择，为 1 表示按钮被选择，为 2 表示按钮处于不确定状态（仅用于复选框）。</p>\n</li>\n<li>\n<p>UINT IsDlgButtonChecked(int nIDButton) const;</p>\n<p>返回复选框或单选按钮的选择状态。返回值为 0 表示按钮未被选择，为 1 表示按钮被选择，为 2 表示按钮处于不确定状态（仅用于复选框）。</p>\n</li>\n<li>\n<p>void CheckRadioButton(int nIDFirstButton,int nIDLastButton,int nIDCheckButton);</p>\n<p>用来选择组中的一个单选按钮。参数 nIDFirstButton 指定了组中第一个按钮的 ID，nIDLastButton 指定了组中最后一个按钮的 ID，nIDCheckButton 指定了要选择的按钮的 ID。</p>\n</li>\n<li>\n<p>int GetCheckedRadioButton(int nIDFirstButton, int nIDLastButton);</p>\n<p>用来获得一组单选按钮中被选中按钮的 ID。参数 nIDFirstButton 说明了组中第一个按钮的 ID，nIDLastButton 说明了组中最后一个按钮的 ID。</p>\n</li>\n</ul>\n<p>​    另外，CWnd 类的成员函数 GetWindowText ()、SetWindowText () 等也可以用来获取或设置按钮中显示的文本。</p>\n<h2 id=\"列表框控件-listbox\"><a class=\"markdownIt-Anchor\" href=\"#列表框控件-listbox\">#</a> 列表框控件 ListBox</h2>\n<h2 id=\"组合框控件-combo-box\"><a class=\"markdownIt-Anchor\" href=\"#组合框控件-combo-box\">#</a> 组合框控件 Combo Box</h2>\n<h2 id=\"滚动条控件-scroll-bar\"><a class=\"markdownIt-Anchor\" href=\"#滚动条控件-scroll-bar\">#</a> 滚动条控件 Scroll Bar</h2>\n<h2 id=\"图片控件-picture-control\"><a class=\"markdownIt-Anchor\" href=\"#图片控件-picture-control\">#</a> 图片控件 Picture Control</h2>\n<h2 id=\"列表视图控件-list-control\"><a class=\"markdownIt-Anchor\" href=\"#列表视图控件-list-control\">#</a> 列表视图控件 List Control</h2>\n<h2 id=\"树形控件-tree-control\"><a class=\"markdownIt-Anchor\" href=\"#树形控件-tree-control\">#</a> 树形控件 Tree Control</h2>\n<h2 id=\"标签控件-tab-control\"><a class=\"markdownIt-Anchor\" href=\"#标签控件-tab-control\">#</a> 标签控件 Tab Control</h2>\n<h1 id=\"菜单与cmenu类\"><a class=\"markdownIt-Anchor\" href=\"#菜单与cmenu类\">#</a> 菜单与 CMenu 类</h1>\n<ul>\n<li>\n<p>下拉式菜单</p>\n<p>一般在窗口标题栏下面显示，通常是由主菜单栏、子菜单及子菜单中的菜单项和分割条组成。</p>\n</li>\n<li>\n<p>弹出式菜单</p>\n<p>一般通过单击鼠标右键显示，它的主菜单不可见，只显示子菜单。</p>\n</li>\n</ul>\n<p>菜单可以在 VS 的 Resource View 资源视图中直接创建编辑。打开资源视图中的 Menu 中 ID 为 IDR_MAINFRAME 的菜单资源。</p>\n<p>点击菜单栏中的某一项会弹出子菜单，子菜单中有多个菜单项和分割条。菜单项中有”…“表示点击后会弹出对话框。带下划线的表示热键</p>\n<h2 id=\"cmenu类主要成员函数\"><a class=\"markdownIt-Anchor\" href=\"#cmenu类主要成员函数\">#</a> CMenu 类主要成员函数</h2>\n<ul>\n<li>\n<p>BOOL LoadMenu(UINT nIDResource);</p>\n<p>加载菜单资源，并将其附加到 CMenu 对象上。参数 nIDResource 指定了要加载的菜单资源的 ID。如果菜单加载成功则返回 TRUE，否则返回 FALSE</p>\n</li>\n<li>\n<p>BOOL DeleteMenu(UINT nPosition, UINT nFlags);</p>\n<p>在菜单中删除一个菜单项。参数 nPosition 指定要删除的菜单项。参数 nFlags 就用来解释 nPosition 的意义，为 MF_BYCOMMAND 时说明 nPosition 表示菜单项的 ID，为 MF_BYPOSITION 时说明 nPosition 表示菜单项的位置，第一个菜单项的位置为 0。如果删除菜单项成功则返回 TRUE，否则返回 FALSE。</p>\n</li>\n<li>\n<p>BOOL TrackPopupMenu(UINT nFlags, int x, int y, CWnd* pWnd, LPCRECT IpRect = 0);</p>\n<p>用来在指定位置显示一个浮动的弹出式菜单。</p>\n</li>\n<li>\n<p>UINT CheckMenuItem(UINT nIDCheckItem, UINT nCheck);</p>\n<p>在弹出的菜单中增加选中标记或移除选中标记。参数 nIDCheckItem 指定要选中或取消选中的菜单项。</p>\n</li>\n<li>\n<p>UINT EnableMenuItem(UINT nIDEnableItem, UINT nEnable);</p>\n<p>激活、禁用菜单项或使其变灰。参数 nIDEnableItem 指定要激活、禁用或变灰的菜单项。参数 nEnable 指定操作的类型。可以是 MF_DISABLED、</p>\n</li>\n<li>\n<p>CMenu* GetSubMenu(int nPos) const;</p>\n</li>\n</ul>\n<h2 id=\"菜单消息\"><a class=\"markdownIt-Anchor\" href=\"#菜单消息\">#</a> 菜单消息</h2>\n<p>菜单主要能发送两种消息：COMMAND 消息和 UPDATE_COMMAND_UI 消息。</p>\n<ul>\n<li>\n<p>COMMAND 消息</p>\n<p>在菜单项被点击时发送该消息。</p>\n</li>\n<li>\n<p>UPDATE_COMMAND_UI 消息</p>\n<p>用来维护菜单项的各项状态，包括激活、禁用、变灰、选中、未选中等。在下拉菜单每次打开的时候，所有菜单项的此消息都会被发送出，如果所属类中为菜单项的该消息添加了处理函数，则执行相应函数更新菜单状态，如果菜单项没有此消息处理函数，也没有 COMMAND 消息的处理函数，那么它就会变灰。</p>\n</li>\n</ul>\n<h1 id=\"工具栏与ctoolbar类\"><a class=\"markdownIt-Anchor\" href=\"#工具栏与ctoolbar类\">#</a> 工具栏与 CToolBar 类</h1>\n<p>打开资源视图中的 ToolBar 中 ID 为 IDR_MAINFRAME 的工具栏资源。</p>\n<h1 id=\"状态栏与cstatusbar类\"><a class=\"markdownIt-Anchor\" href=\"#状态栏与cstatusbar类\">#</a> 状态栏与 CStatusBar 类</h1>\n<p>状态栏一般在窗口的最底部，用来显示各种状态。</p>\n<p>状态栏实际上也是一个窗口，一般分为几个窗格，每个窗格分别用来显示不同的信息和状态等，如菜单项和工具栏按钮的提示信息。</p>\n<p>用 MFC 向导生成的单文档或多文档程序都会自动创建状态栏，在结果界面中可以看到窗口底部有个状态栏，该状态栏被分为了几个窗格，分别用来显示菜单项和工具栏按钮的提示信息及 Caps Lock、Num Lock、Scroll Lock 键的状态。</p>\n<p><img data-src=\"image-20230529160507134.png\" alt=\"image-20230529160507134\"></p>\n<p>也可以自定义状态栏，加入新的提示信息或指示器。</p>\n<h2 id=\"cstatusbar类\"><a class=\"markdownIt-Anchor\" href=\"#cstatusbar类\">#</a> CStatusBar 类</h2>\n<p>MFC 为状态栏提供了 CStatusBar 类，封装了状态栏的属性和操作。</p>\n<p>CStatusBar 类的几个主要成员函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个状态栏</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span> pParentWnd<span class=\"token punctuation\">,</span> DWORD dwStyle <span class=\"token operator\">=</span> WS_CHILD<span class=\"token operator\">|</span>WS_VISIBLE<span class=\"token operator\">|</span>CBRS_BOTTOM<span class=\"token punctuation\">,</span> UINT nID <span class=\"token operator\">=</span> AFX_IDW_STATUS_BAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 pParentWnd 为状态栏父窗口指针。</li>\n<li>参数 dwStyle 为状态栏风格，除了标准 windows 风格外它还支持：\n<ul>\n<li>CBRS_TOP：位于框架窗口顶部</li>\n<li>CBRS_BOTTOM：位于框架窗口顶部</li>\n<li>CBRS_NOALIGN：父窗口大小改变时状态栏不会被重新定位</li>\n</ul>\n</li>\n<li>参数 nID 指定状态栏的 ID</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 为每个指示器设置显示文本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BOOL <span class=\"token function\">SetIndicators</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> UINT<span class=\"token operator\">*</span> IpIDArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nIDCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用 IpIDArray 数组中的对应元素为每个指示器设置一个 ID，然后加载每个 ID 代表的字符串，设置为这些指示器的显示文本。</p>\n<ul>\n<li>参数 IpIDArray 为指向一个 ID 数组的指针</li>\n<li>参数 nIDCount 为 IpIDArray 数组的元素个数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>UINT <span class=\"token function\">GetItemID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>获取由 nIndex 指定的指示器的 ID。</p>\n<ul>\n<li>参数 nIndex 为要获取 ID 的指示器索引</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString <span class=\"token function\">GetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>获取状态栏窗格中显示的文本。</p>\n<ul>\n<li>参数 nIndex 为要获取文本的窗格索引</li>\n<li>返回值为包含窗格文本的 CString 对象</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">SetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">,</span> LPCTSTR lpszNewText<span class=\"token punctuation\">,</span> BOOL bUpdate <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>设置状态窗格的显示文本。</p>\n<ul>\n<li>参数 nIndex 为要设置文本的窗格索引</li>\n<li>参数 lpszNewText 为指向新的窗格文本的指针</li>\n<li>参数 bUpdate 表示是否设置后立即更新显示</li>\n</ul>\n<h2 id=\"状态栏创建\"><a class=\"markdownIt-Anchor\" href=\"#状态栏创建\">#</a> 状态栏创建</h2>\n<p>在 MainFrm.h 中可以看到，CMainFrame 类的成员变量中创建状态栏使用的是 CMFCStatusBar 类对象。CMFCStatusBar 类和 CStatusBar 类用法类似，功能更加丰富。</p>\n<ol>\n<li>\n<p>构造一个 CMFCStatusBar 类的对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CMFCStatusBar     m_wndStatusBar<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>调用 CMFCStatusBar::Create 函数来创建状态栏窗口。</p>\n<p>在 CMainFrame::OnCreate 函数的实现中，可以找到 CMFCStatusBar::Create 函数的调用</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token function\">TRACE0</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未能创建状态栏\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 未能创建</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>调用 CMFCStatusBar::SetIndicators 函数为状态栏划分窗格，并为每个指示器设置显示文本。</p>\n<p>该函数需要一个 ID 数组的参数，在 MainFrm.cpp 中定义了如下一个窗格 ID 的数组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> UINT indicators<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tID_SEPARATOR<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// 状态行指示器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tID_INDICATOR_CAPS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tID_INDICATOR_NUM<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tID_INDICATOR_SCRL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>indicators 数组定义了状态栏窗格的划分信息。</p>\n<p>第一个元素一般为 ID_SEPARATOR，对应的窗格用来显示命令提示信息，后三项为指示器文本的字符 ID，可以根据这些 ID 在 String Table 字符串资源中找到相应的字符串。查找方法，在 Resource View 资源视图中，打开 String Table 字符串资源，可以看到 ID、Value 和 Caption 三列，ID 对应的 Caption 列文本就是要查找的字符串。</p>\n<p>划分窗格</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetIndicators</span><span class=\"token punctuation\">(</span>indicators<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>indicators<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>之后我们就可以通过 CMFCStatusBar::SetPaneText 设置窗格文本。</p>\n</li>\n</ol>\n<h2 id=\"状态栏应用实例-添加时间窗格\"><a class=\"markdownIt-Anchor\" href=\"#状态栏应用实例-添加时间窗格\">#</a> 状态栏应用实例 - 添加时间窗格</h2>\n<ol>\n<li>\n<p>在资源视图的 String Table 中添加新的字符串资源，ID 为 ID_INDICATOR_TIME，Caption 为 “00:00:00”。这是为了给时间的显示预留空间，因为状态栏会根据字符串的长度为相应的窗格确定缺省宽度。</p>\n</li>\n<li>\n<p>在 indicators 数组插入 ID_INDICATOR_TIME</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> UINT indicators<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tID_SEPARATOR<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// 状态行指示器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tID_INDICATOR_CAPS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tID_INDICATOR_NUM<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tID_INDICATOR_SCRL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tID_INDICATOR_TIME<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>要实时显示系统时间，就需要一个定时器，每秒钟更新一次时间显示。在 CMainFrame::OnCreate 函数中开启定时器</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">CMainFrame</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>LPCREATESTRUCT lpCreateStruct<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CFrameWndEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>lpCreateStruct<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 启动定时器，定时器 ID 为 1，定时时间为 1000ms</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 Class View 类视图中找到 CMainFrame 类，右键点击属性，然后在属性页中，点工具栏上的 Messages 消息按钮，显示出消息列表，找到 WM_TIMER 消息，添加其消息处理函数 <code>void CMainFrame::OnTimer(UINT_PTR nIDEvent)</code> ，并修改此函数实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMainFrame</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>UINT_PTR nIDEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加消息处理程序代码和 / 或调用默认值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tCString strTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 获取当前系统时间，并保存到 curTime</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tCTime curTime <span class=\"token operator\">=</span> <span class=\"token class-name\">CTime</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 格式化 curTime, 将字符串保存到 strTime</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstrTime <span class=\"token operator\">=</span> curTime<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%H:%M:%S\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 在状态栏的时间窗格中显示系统时间字符串</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tm_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> strTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token class-name\">CFrameWndEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>nIDEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试实现</p>\n</li>\n</ol>\n<h1 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/09/MFC%E5%B8%B8%E7%94%A8%E7%B1%BB/",
            "url": "https://adventure-yx.github.io/2023/06/09/MFC%E5%B8%B8%E7%94%A8%E7%B1%BB/",
            "title": "MFC 常用类",
            "date_published": "2023-06-09T02:12:08.000Z",
            "content_html": "<h1 id=\"mfc常用类cstring类\"><a class=\"markdownIt-Anchor\" href=\"#mfc常用类cstring类\">#</a> MFC 常用类：CString 类</h1>\n<p>CString 类提供了对字符串的便捷操作。</p>\n<blockquote>\n<p>CStringT 是一个操作可变长度字符串的模板类</p>\n<p>CStringT 模板类有三个实例：CString、CStringA 和 CStringW，分别提供对 TCHAR、char 和 wchar_t 字符类型的字符串的操作。</p>\n<ul>\n<li>char 类型定义的是 ANSI 字符</li>\n<li>wchar_t 类型定义的是 Unicode 字符</li>\n<li>TCHAR 类型取决于字符编码</li>\n</ul>\n</blockquote>\n<ol>\n<li>\n<p>CString 类的构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 将一个已经存在的 CString 对象 stringSrc 的内容拷贝到该 CString 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">CString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> CString<span class=\"token operator\">&amp;</span> stringSrc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CString <span class=\"token function\">str1</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.xxx.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将常量字符串拷贝到 str1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CString <span class=\"token function\">str2</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 将 str1 拷贝到 str2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 2. 将字符串 Ipch 中的前 nLength 个字符串拷贝到该 CString 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">CString</span><span class=\"token punctuation\">(</span>LPCTSTR Ipch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.xxx.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 构造的字符串对象内容为 “www”</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 3. 使用此函数构造的 CString 对象中将含有 nLength 个重复的 ch 字符。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">CString</span><span class=\"token punctuation\">(</span>TCHAR ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nLength <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'w'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t\t<span class=\"token comment\">//str 为 www</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 类的大小写转换及顺序转换函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将字符串中的所有大写字符转换为小写字符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString<span class=\"token operator\">&amp;</span> <span class=\"token function\">MakeLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 将字符串中的所有小写字符转换为大写字符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CString<span class=\"token operator\">&amp;</span> <span class=\"token function\">MakeUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 将字符串中的所有字符顺序颠倒</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>CString<span class=\"token operator\">&amp;</span> <span class=\"token function\">MakeReverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ZiFuChuan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">MakeLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">MakeUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">MakeReverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 对象的连接</p>\n<p>多个 CSstring 对象可以通过重载运算符 +，+= 实现连接</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"baidu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//\"baidu\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>str <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str <span class=\"token operator\">+</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//\"www.baidu.\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>str <span class=\"token operator\">+=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">//\"www.baidu.com\"</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 对象的比较</p>\n<ul>\n<li>\n<p>可以通过 ==、!=、&gt;、&lt;、&gt;=、&lt;= 等重载运算符实现；</p>\n</li>\n<li>\n<p>也可以通过 Compare 和 CompareNoCase 成员函数实现。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将该 CString 对象与 psz 字符比较，如果相等则返回 0，如果小于 psz 则返回小于 0，如果大于则返回大于 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Compare</span><span class=\"token punctuation\">(</span>PCXSTR psz<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 功能相同，但不区分大小写</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">CompareNoCase</span><span class=\"token punctuation\">(</span>PCXSTR psz<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>CString 对象字符串的提取操作</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 提取字符串左边 nCount 个字符的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">Left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 提取字符串右边 nCount 个字符的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CString <span class=\"token function\">Right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 3. 提取字符串中以索引 iFirst 位置开始的 nCount 个字符组成的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CString <span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> iFirst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 4. 提取字符串中以索引 iFirst 位置开始至字符串结尾的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>CString <span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> iFirst<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>CString str1 <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yigezifuchuan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>CString str2 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">Left</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// \"yig\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>str2 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// \"ige\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>str3 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// \"ifuchuan\"</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 对象字符串的查找操作</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 CString 对象字符串的 iStart 的索引位置开始，查找字符串 pszSub 或字符 ch 第一次出现的位置，如果没有找到则返回 - 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>PCXSTR pszSub<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>XCHAR ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 查找字符串 pszCharSet 中任意字符，返回第一次出现的位置，如果没有找到则返回 - 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">FindOneOf</span><span class=\"token punctuation\">(</span>PCXSTR pszCharSet<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 从字符串末尾开始查找指定的字符 ch，返回其位置，找不到则返回 - 1。尽管是从后向前查找，但是位置的索引还是要从开始算起</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">ReverseFind</span><span class=\"token punctuation\">(</span>XCHAR ch<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>CString str <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jizhuomi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> nIndex1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> nIndex2 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">FindOneOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mui\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> nIndex3 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">ReverseFind</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 7</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 类对象字符串的替换和删除</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString str <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jizhuomi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 用字符 chNEW 替换 chOLD，返回替换的字符个数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'j'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//str 为 \"jjzhuomj\", n1=2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 从字符串中删除 iIndex 位置开始的 nCount 个字符，返回删除操作后的字符串长度</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//str 为 \"jhuomj\", n2=6</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 删除字符串中所有由 chRemove 指定的字符，返回删除的字符个数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> n3 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'j'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//str 为 \"huom\", n3=2</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 类的格式化字符串方法</p>\n<p>使用 CString 类的 Format 成员函数可以将 int，short，long，float，double 等数据类型格式化为字符串对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">float</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2.3f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%d, b=%f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//str 为 \"a=1, b=2.300000\"</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"mfc常用类ctime类和ctimespan类\"><a class=\"markdownIt-Anchor\" href=\"#mfc常用类ctime类和ctimespan类\">#</a> MFC 常用类：CTime 类和 CTimeSpan 类</h1>\n<p>CTime 类的对象表示的时间基于格林威治标准时间（GMT）</p>\n<p>CTimeSpan 类的对象表示的是时间间隔。</p>\n<p>CTime 类和 CTimeSpan 类一般不会被继承使用，两者对象的大小都是 8 个字节。</p>\n<p>CTime 表示的日期上限是 3000 年 12 月 31 日，下限是 1970 年 1 月 1 日 12:00:00 AM GMT</p>\n<h2 id=\"ctime类的主要成员函数\"><a class=\"markdownIt-Anchor\" href=\"#ctime类的主要成员函数\">#</a> CTime 类的主要成员函数</h2>\n<h1 id=\"mfc常用类定时器timer\"><a class=\"markdownIt-Anchor\" href=\"#mfc常用类定时器timer\">#</a> MFC 常用类：定时器 Timer</h1>\n<p>定时器可以定时完成某项任务。使用定时器时，给系统传入一个时间间隔数据，然后系统就会在每个时间间隔后触发定时处理程序，实现周期性的自动操作。例如，我们可以在数据采集系统中，为定时器设置定时采集时间间隔为 1 小时，那么每隔 1 小时系统就会采集一次数据，可以在无人操作的情况下准确的尽心操作。</p>\n<ul>\n<li>MFC 的 CWnd 类提供的成员函数 SetTimer ()</li>\n<li>Windows API 函数 SetTimer ()</li>\n<li>CWnd 类的成员函数 SetTimer () 只能在 CWnd 类或其派生类中使用，而 API 函数 SetTimer () 没有这个限制</li>\n</ul>\n<h2 id=\"mfc定时器\"><a class=\"markdownIt-Anchor\" href=\"#mfc定时器\">#</a> MFC 定时器</h2>\n<h3 id=\"启动定时器\"><a class=\"markdownIt-Anchor\" href=\"#启动定时器\">#</a> 启动定时器</h3>\n<p>CWnd::SetTimer 的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>UINT_PTR <span class=\"token function\">SerTimer</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    UINT_PTR nIDEvent<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT nElapse<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>CALLBACK <span class=\"token operator\">*</span>lpfnTimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>HWND<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">,</span> UINT_PTR<span class=\"token punctuation\">,</span> DWORD<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 nIDEvent 指定一个非零的定时器 ID；</li>\n<li>参数 nElaspe 指定间隔时间，单位为毫秒；</li>\n<li>参数 lpfnTimer 指定一个回调函数的地址，如果该参数为 NULL，则 WM_TIMER 消息被发送到应用程序的消息队列，并被 CWnd 对象处理。</li>\n<li>如果此函数成功则返回一个新的定时器 ID，我们可以使用此 ID 通过 KillTimer 成员函数来销毁该定时器，如果函数失败则返回 0。</li>\n</ul>\n<blockquote>\n<p>通过 SetTimer 成员函数可以看出，<strong>处理定时事件可以有两种方式</strong>：</p>\n<ul>\n<li><strong>通过 WM_TIMER 消息的消息响应函数</strong></li>\n<li><strong>通过回调函数</strong></li>\n</ul>\n<p>如果要启动多个定时器，就要多次调用 SetTimer 成员函数，另外，在不同的 CWnd 中可以有 ID 相同的定时器，并不冲突。</p>\n</blockquote>\n<h3 id=\"为wm_timer消息添加消息处理函数或定义回调函数\"><a class=\"markdownIt-Anchor\" href=\"#为wm_timer消息添加消息处理函数或定义回调函数\">#</a> 为 WM_TIMER 消息添加消息处理函数，或定义回调函数</h3>\n<p>如果调用 CWnd::SetTimer 函数时最后一个参数为 NULL，则通过 WM_TIMER 的消息处理函数来处理定时事件。添加 WM_TIMER 消息的处理函数的方法是，在工程的 Class View 类视图中找到要添加定时器的类，点击右键，选择 Properties，显示其属性页，然后再属性页工具栏上点击 Message 按钮，下面列表就列出了所有消息，找到 WM_TIMER 消息，添加消息处理函数。添加后，cpp 文件中会出现</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">BEGIN_MESSAGE_MAP</span><span class=\"token punctuation\">(</span>CExampleDlg<span class=\"token punctuation\">,</span> CDialogEx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">ON_WM_TIMER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">END_MESSAGE_MAP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CExampleDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>UINT_PTR nIDEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">CDialogEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>nIDEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>之后可以在 OnTimer 函数中进行相应的处理。OnTimer 的参数 nIDEvent 为定时器 ID，即在 SetTimer 成员函数中指定的定时器 ID，如果有多个定时器，可以像以下处理：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CExampleDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>UINT_PTR nIDEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>nIDEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 如果收到 ID 为 1 的定时器的消息则调用 func1 函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 如果收到 ID 为 2 的定时器的消息则调用 func2 函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">CDialogEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>nIDEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果调用 CWnd::SetTimer 函数最后一个参数不为 NULL，则需要定义回调函数。回调函数的形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> CALLBACK EXPORT <span class=\"token function\">TimerProc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tHWND hWnd<span class=\"token punctuation\">,</span>\t<span class=\"token comment\">// handle of CWnd that called SetTimer</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT nMsg<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    UINT nIDEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    DWORD dwTime</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 hWnd 为调用 SetTimer 成员函数的 CWnd 对象的句柄，即拥有此定时器的窗口的句柄；</li>\n<li>参数 nMsg 为 WM_TIMER，而且总为 WM_TIMER</li>\n<li>参数 nIDEvent 为定时器 ID；</li>\n<li>参数 dwTime 为系统启动以来的毫秒数，即 GetTickCount () 函数的返回值。</li>\n</ul>\n<p>这样 CWnd::SetTimer 函数最后一个参数就可以为 TimeProc。</p>\n<blockquote>\n<p>回调函数的名称不一定为 TimeProc，可以取其他名字，但返回值类型、参数的类型和个数不能改变。</p>\n<p>回调函数为全局函数，需要写在使用他的位置前面，或者写在后面然后再使用之前声明。</p>\n</blockquote>\n<h3 id=\"销毁定时器\"><a class=\"markdownIt-Anchor\" href=\"#销毁定时器\">#</a> 销毁定时器</h3>\n<p>不再使用定时器时，可以销毁它。销毁定时器需要使用 CWnd 类的 KillTimer 成员函数，CWnd::KillTimer 函数原型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">KillTimer</span><span class=\"token punctuation\">(</span>UINT_PTR nIDEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数 nIDEvent 为要销毁的定时器的 ID，是调用 CWnd::SetTimer 函数时设置的定时器 ID。</p>\n<p>如果定时器被销毁则返回 TRUE，如果没有找到指定的定时器则返回 FALSE。</p>\n<p>如果要销毁多个定时器，则多次调用 KillTimer 函数，并分别传入要销毁的定时器 ID。</p>\n<h2 id=\"通过windows-api函数使用定时器\"><a class=\"markdownIt-Anchor\" href=\"#通过windows-api函数使用定时器\">#</a> 通过 Windows API 函数使用定时器</h2>\n<h3 id=\"启动定时器-2\"><a class=\"markdownIt-Anchor\" href=\"#启动定时器-2\">#</a> 启动定时器</h3>\n<p>Windows API 函数 SetTimer 原型如下</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>UINT_PTR <span class=\"token function\">SerTimer</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    HWND hWnd，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT_PTR nIDEvent<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    UINT nElapse<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    TIMERPROC lpTimerFunc</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 hWnd 为与定时器关联的窗口的句柄；</li>\n<li>参数 nIDEvent 为非零的定时器 ID。如果 hWnd 为 NULL 且还不存在 ID 为 nIDEvent 的定时器，那么 nIDEvent 参数被忽略，然后生成一个新的 ID 的定时器；如果 hWnd 指定的窗口已存在 ID 为 nIDEvent 的定时器，那么这个已存在的定时器被新的定时器所取代。</li>\n<li>参数 nElapse 和 lpTimerFunc 同 CWnd::SetTimer 函数。</li>\n</ul>\n<h3 id=\"为wm_timer消息添加消息处理函数或定义回调函数-2\"><a class=\"markdownIt-Anchor\" href=\"#为wm_timer消息添加消息处理函数或定义回调函数-2\">#</a> 为 WM_TIMER 消息添加消息处理函数，或定义回调函数</h3>\n<p>如果调用 SetTimer 函数时，最后一个参数为 NULL，我们需要自己为 WM_TIMER 消息添加处理函数。要注意的是，WM_TIMER 消息的附加数据 wParam 为定时器 ID，IParam 为回调函数的指针，如果回调用 SetTimer 时回调函数为 NULL，那么 IParam 也为 NULL。</p>\n<p>而如果调用 SetTimer 函数时最后一个参数不为 NULL，我们就需要定义回调函数。</p>\n<h3 id=\"销毁定时器-2\"><a class=\"markdownIt-Anchor\" href=\"#销毁定时器-2\">#</a> 销毁定时器</h3>\n<p>KillTimer API 函数原型</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">KillTimer</span><span class=\"token punctuation\">(</span>HWND hWnd<span class=\"token punctuation\">,</span> UINT_PTR uIDEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"mfc定时器应用实例\"><a class=\"markdownIt-Anchor\" href=\"#mfc定时器应用实例\">#</a> MFC 定时器应用实例</h2>\n<ol>\n<li>\n<p>创建项目，添加控件</p>\n</li>\n<li>\n<p>在 Dlg 类中添加两个成员变量，在构造函数中初始化</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">CTimerExampleDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CTimerExampleDlg</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span> pParent <span class=\"token comment\">/*=NULL*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">:</span> <span class=\"token function\">CDialogEx</span><span class=\"token punctuation\">(</span>CTimerExampleDlg<span class=\"token double-colon punctuation\">::</span>IDD<span class=\"token punctuation\">,</span> pParent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tm_hIcon <span class=\"token operator\">=</span> <span class=\"token function\">AfxGetApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">LoadIcon</span><span class=\"token punctuation\">(</span>IDR_MAINFRAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tmData1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tmData2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在对话框模板上双击 OK 按钮添加消息处理函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CTimerExampleDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 启动 ID 为 1 的定时器，定时时间为 1 秒</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 启动 ID 为 2 的定时器，定时时间为 2 秒</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//CDialogEx::OnOK();</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>为 WM_TIMER 消息添加处理函数的方法</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CTimerExampleDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>UINT_PTR nIDEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>nIDEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">// 如果 mData1 已经达到 10 则销毁 ID 为 1 的定时器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">==</span> mData1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token function\">KillTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">// 刷新编辑框 IDC_EDIT1 的显示</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token function\">SetDlgItemInt</span><span class=\"token punctuation\">(</span>IDC_EDIT1<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>mData1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">==</span> mData2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token function\">KillTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token function\">SetDlgItemInt</span><span class=\"token punctuation\">(</span>IDC_EDIT2<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>mData2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token class-name\">CDialogEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>nIDEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>运行程序</p>\n</li>\n</ol>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/06/C++Boost%E5%BA%93%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "url": "https://adventure-yx.github.io/2023/06/06/C++Boost%E5%BA%93%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "title": "C++Boost库 内存管理",
            "date_published": "2023-06-06T02:10:08.000Z",
            "content_html": "<h1 id=\"smart_ptr库概述\"><a class=\"markdownIt-Anchor\" href=\"#smart_ptr库概述\">#</a> smart_ptr 库概述</h1>\n<p>计算机系统中资源有很多种，内存是我们最常用到的，此外还有文件描述符、socket、操作系统 handle、数据库连接等，程序中申请这些资源后必须及时归还系统，否则就会产生难以预料的后果。</p>\n<h2 id=\"raii机制\"><a class=\"markdownIt-Anchor\" href=\"#raii机制\">#</a> RAII 机制</h2>\n<p>为了管理内存等资源，通常采用 RAII 机制（资源获取即初始化，Resource Acquisition Is Initialization），在使用资源的类的构造函数中申请资源，然后使用，最终在析构函数中释放资源</p>\n<p>如果对象是<strong>用声明的方式在栈上创建</strong>的（一个局部对象），那么 RAII 机制会正常工作，当离开作用域时对象会自动销毁从而调用析构函数释放资源。</p>\n<p>但如果对象是<strong>用 new 操作符在堆上创建</strong>的，那么他的析构函数就不会自动调用，必须明确地用对应的 delete 操作符销毁它才能释放资源。</p>\n<blockquote>\n<p>new 和 delete 以及指针的不恰当应用时造成资源获取 / 释放问题的根源。</p>\n</blockquote>\n<h2 id=\"智能指针\"><a class=\"markdownIt-Anchor\" href=\"#智能指针\">#</a> 智能指针</h2>\n<p>智能指针可以在退出作用域时（不管是正常流程离开或是因异常离开），总调用 delete 来析构在堆上动态分配的对象。</p>\n<p>存在多种智能指针，其中最著名的时 C++98 标准中的 <code> std::auto_ptr</code> ，它部分地解决了获取资源自动释放的问题，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    auto_ptr<span class=\"token operator\">&lt;</span>class_need_resource<span class=\"token operator\">></span> \t<span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> class_need_resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    auto_ptr<span class=\"token operator\">&lt;</span>demo_class<span class=\"token operator\">></span>\t\t\t<span class=\"token function\">p2</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>\t<span class=\"token comment\">// 离开作用域时，p1，p2 自动析构从而释放内存等资源</span></pre></td></tr></table></figure><p>auto_ptr 的构造函数接受 new 操作符或者对象工厂创建出的对象指针作为参数，从而代理了原始指针。虽然他是一个对象，但因为重载了 <code>operator*</code>  和 <code>operator-&gt;</code> ，其行为非常类似指针，可以把它用在大多数普通指针可用的地方。当推出作用域时（离开 main 函数或者发生异常），C++ 语言会确保 auto_ptr 对象销毁，调用 auto_ptr 的析构函数，进而使用 delete 操作符删除原始指针释放资源。</p>\n<p>auto_ptr 很好用，被包含在 C<ins>98 标准库中令他在世界范围内被广泛使用，使智能指针的思想、用法深入人心。但它也存在一些缺陷，所以在 C</ins>11/14 标准提供了更完善的 <code>unique_ptr</code> 、 <code>shared_ptr</code> 、 <code>weak_ptr</code> ，而这些正是基于 <code>boost.smart_ptr</code>  库</p>\n<p>boost.smart_ptr 库提供了六种智能指针，包括 <code>scoped_ptr</code> 、 <code>scoped_array</code> 、 <code>shared_ptr</code> 、 <code>shared_array</code> 、 <code>weak_ptr</code>  和 <code>intrusive_ptr</code> 。他们是轻量级的对象，速度与原始指针相差无几，都是异常安全的（exception safe），而且对于所指向的类型 T 也仅要求：类型 T 的析构函数不能抛出异常。</p>\n<h1 id=\"scoped_ptr\"><a class=\"markdownIt-Anchor\" href=\"#scoped_ptr\">#</a> scoped_ptr</h1>\n<p>scoped_ptr 是一个类似 auto_ptr/unique_ptr 的智能指针，他包装了 new 操作符在堆上分配的动态对象，能够保证动态创建的对象在任何时候都可以被正确地删除。但 scoped_ptr 地所有权更加严格，不能转让，一旦 scoped_ptr 获取了对象的管理权，我们就无法再从他那里取回来。scoped_ptr 地名字也明确了：这个智能指针只能在本作用域内使用，不希望被转让。</p>\n<h2 id=\"类摘要\"><a class=\"markdownIt-Anchor\" href=\"#类摘要\">#</a> 类摘要</h2>\n<p>scoped_ptr 地类摘要如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">scoped_ptr</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// noncopyable</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    T <span class=\"token operator\">*</span>px<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 原始指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">scoped_ptr</span><span class=\"token punctuation\">(</span>scoped_ptr <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 拷贝构造函数私有化</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    scoped_ptr <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>scoped_ptr <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 赋值操作私有化</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>scoped_ptr <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 相等操作私有化</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>scoped_ptr <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 不等操作私有化</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">scoped_ptr</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 显式构造函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">scoped_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 重置智能指针</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    T <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 操作符重载</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    T <span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 操作符重载</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    T <span class=\"token operator\">*</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 获得原始指针</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 显式 bool 值转型</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>scoped_ptr <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 交换指针</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span>\t\t\t\t\t<span class=\"token comment\">// 与空指针比较</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>scoped_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>detail<span class=\"token double-colon punctuation\">::</span>sp_nullptr_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"操作函数\"><a class=\"markdownIt-Anchor\" href=\"#操作函数\">#</a> 操作函数</h2>\n<ul>\n<li>\n<p>scoped_ptr 的构造函数接受一个类型为 T * 的指针 p，创建出一个 scoped_ptr 对象，并在内部保存指针参数 p，p 必须是一个 new 表达式动态分配的结果，或者是个空指针（nullptr）。当 scoped_ptr 对象的生命周期结束时～scoped_ptr () 会使用 delete 操作符自动销毁所保存的指针对象，从而正确地回收资源。</p>\n<blockquote>\n<p>实际上调用的是 <code>boost::check_delete()</code>  函数</p>\n</blockquote>\n</li>\n<li>\n<p>scoped_ptr 同时把拷贝构造函数和赋值操作符都声明为私有的，禁止对智能指针的拷贝操作（原理参考 noncopyable），保证了被他管理的指针不能被转让所有权。</p>\n</li>\n<li>\n<p>成员函数 reset () 的功能是重置 scoped_ptr：它删除原来保存的指针，再保存新的指针值 p。如果 p 是空指针，那么 scoped_ptr 将不持有任何指针。一般情况下 reset () 不应该被调用，因为他违背了 scoped_ptr 的本意 —— 资源应该一直由 scoped_ptr 自己自动管理。</p>\n</li>\n<li>\n<p>scoped_ptr 用 <code>operator*()</code>  和 <code>operator-&gt;()</code>  重载了解引用操作符 <code>*</code>  和箭头操作符 <code>-&gt;</code> ，以模仿被代理的原始指针的行为，因此可以把 scoped_ptr 对象如同指针一样使用。如果 scoped_ptr 保存的是空指针，那么这两个操作的行为未定义。（debug 模式下，scoped_ptr 内部使用了 BOOST_ASSERT 来断言指针非空）</p>\n</li>\n<li>\n<p>scoped_ptr 提供了一个可以在 bool 语境中自动转换成 bool 值（如 if 的条件表达式）的功能，用来测试 scoped_ptr 是否持有一个有效的非空指针。它可以代替和空指针比较的操作，而且写法更简单。</p>\n</li>\n<li>\n<p>成员函数 swap () 可以交换两个 scoped_ptr 保存的原始指针。它是高效的操作，被用于实现 reset () 函数，也可以被 boost::swap 所利用。</p>\n</li>\n<li>\n<p>成员函数 get () 返回 scoped_ptr 内部保存的原始指针，可以用在某些要求必须是原始指针的场景（如底层的 C 接口）。但使用时要小心，这将使原始指针脱离 scoped_ptr 的控制。不能对这个指针做 delete 操作，否则 scoped_ptr 析构时会对已经删除的指针再进行删除操作，发生未定义行为（通常是程序崩溃）</p>\n</li>\n</ul>\n<p>scoped_ptr 支持有限的比较操作，不能在两个 scoped_ptr 之间进行相等或者不能测试，默认仅支持与 C++11 的 nullptr 进行比较（也可以是 NULL 或者 0，因为这两者可以隐式转换为 nullptr）</p>\n<h2 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\">#</a> 用法</h2>\n<p>scoped_ptr 的用法很简单：在原本使用指针变量接受 new 表达式结果的地方改用 scoped_ptr 对象，然后去掉那些多余的 try/catch 和 delete 操作就可以了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scoped_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 构造一个 scoped_ptr 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 使用显式 bool 转型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 空指针比较</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>sp <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//operator * 取字符串内容</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> sp<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//operator-> 取字符串长度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 错误，scoped_ptr 未定义递增操作符</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">prev</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 错误，scoped_ptr 未定义递减操作符</span></pre></td></tr></table></figure><blockquote>\n<p>不再需要 delete 操作，scoped_ptr 会自动释放资源。如果对 scoped_ptr 执行 delete 会得到一个编译错误：因为 scoped_ptr 是一个行为类似指针的对象，而不是指针，对一个对象应用 delete 是不允许的。</p>\n</blockquote>\n<p>scoped_ptr 把拷贝构造函数和赋值函数都声明为私有的，不允许拷贝或赋值，拒绝了指针所有权的转让，只能在 scoped_ptr 被声明的作用域内使用（除了 scoped_ptr 自己，其他任何人都无权访问被管理的指针，从而保证了指针的绝对安全）由此引出一个另一个结论：如果一个类拥有 scoped_ptr 的成员变量，那么它也会是不可拷贝和赋值的。</p>\n<p>使用 scoped_ptr 的两个好处：</p>\n<ul>\n<li>代码变得清晰简单，简单意味着更少的错误。</li>\n<li>它并没有增加多余的操作，安全的同时保证了效率，可以获得与原始指针同样的速度。</li>\n</ul>\n<p>用法示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/smart_ptr.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> boost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">posix_file</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">posix_file</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 构造函数打开文件夹</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"open file:\"</span> <span class=\"token operator\">&lt;&lt;</span> file_name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">posix_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"close file\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 文件类的 scoped_ptr，将在离开作用域时自动析构，从而关闭文件释放资源</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    scoped_ptr<span class=\"token operator\">&lt;</span>posix_file<span class=\"token operator\">></span> <span class=\"token function\">fp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">posix_file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tmp/a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    scoped_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 一个 int 指针的 scoped_ptr</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 可以像普通指针一样使用解引用操作符 *</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 置空 scoped_ptr</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 与 0 比较，p 不持有任何指针</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 测试 bool 语境可以使用！</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"scoped_ptr == nullptr\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span>\t\t<span class=\"token comment\">// 发生析构，p 和 fp 管理的指针自动被删除</span></pre></td></tr></table></figure><p>运行结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>open file<span class=\"token operator\">:</span><span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>a<span class=\"token punctuation\">.</span>txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>scoped_ptr <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>close file</pre></td></tr></table></figure><h2 id=\"对比unique_ptr\"><a class=\"markdownIt-Anchor\" href=\"#对比unique_ptr\">#</a> 对比 unique_ptr</h2>\n<p><code>std::unique_ptr</code>  是在 <code>C++11</code>  标准中定义的新的智能指针，用来取代 C++98 中的 auto_ptr</p>\n<p>根据 C++11 标准，unique_ptr 不仅能够代理 new 创建的单个对象，也能代理 new [] 创建的数组对象，也就是说它结合了 scoped_ptr 和 scoped_array 两者的能力。</p>\n<p>C++11 标准中对 unique_ptr 的定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token operator\">=</span> default_delete<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span>\t\t\t\t<span class=\"token comment\">// 使用删除器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">unique_ptr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">typedef</span> some_define pointer<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 内部类型定义</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">typedef</span> T \t\t\telement_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span>pointer p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    unique_ptr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>unique_ptr<span class=\"token operator\">&amp;&amp;</span> u<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 转移语义赋值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    element_type<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    pointer <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    pointer <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 获得原始指针</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//bool 值转型</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    pointer <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 释放指针的管理权</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>pointer p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 重置智能指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>unique_ptr<span class=\"token operator\">&amp;</span> u<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 交换指针</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> unique_ptr<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 使用 delete 禁用拷贝</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    unique_ptr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> unique_ptr<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> unique_ptr<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> unique_ptr<span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>unique_ptr 的基本能力与 scoped_ptr 相同，同样可以在作用域内管理指针，也不允许拷贝构造和拷贝赋值，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 声明一个 unique_ptr，管理 int 指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">//bool 语境测试指针是否有效</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span>up <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 使用 operator * 操作指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>up <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>up<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 释放指针</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 此时不管理任何指针</span></pre></td></tr></table></figure><p>但 unique_ptr 要比 scoped_ptr 有更多的功能：可以像原始指针一样进行比较，可以像 shared_ptr 一样定制删除器，也可以安全的放入标准容器。</p>\n<h2 id=\"make_unique\"><a class=\"markdownIt-Anchor\" href=\"#make_unique\">#</a> make_unique</h2>\n<p><code>C++11</code>  标准定义了 <code>unique_ptr</code> ，但却 “遗忘” 了对应的工厂函数 <code>make_unique()</code> （C++14 标准中补上了这个漏洞）</p>\n<p>在 boost.smart_ptr 库中有实现 <code>make_unique()</code>  函数，包含在头文件 &lt;boost/smart_ptr/make_unique.hpp&gt; 里</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>Args<span class=\"token operator\">></span>\t\t\t\t\t\t<span class=\"token comment\">// 使用可变参数模板</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">boost</span><span class=\"token double-colon punctuation\">::</span>detail<span class=\"token double-colon punctuation\">::</span>up_if_not_array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>type</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make_unique</span><span class=\"token punctuation\">(</span>Args<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">unique_ptr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//C++11 的完美转发</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<ul>\n<li>它不包含在头文件 &lt;boost/smart_ptr.hpp&gt; 中，必须单独包含；</li>\n<li>它位于命名空间 boost 下</li>\n</ul>\n</blockquote>\n<p>boost::make_unique () 用法与 C++14 标准是一样的，示例如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 使用 auto 创建 unique_ptr&lt;int > 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 访问指针内容</span></pre></td></tr></table></figure><h1 id=\"scoped_array\"><a class=\"markdownIt-Anchor\" href=\"#scoped_array\">#</a> scoped_array</h1>\n<p>scoped_array 很像 scoped_ptr，它包装了 new [] 操作符（而不是单纯的 new）在堆上分配的动态数组，为动态数组提供了一个代理，保证可以正确地释放内存。</p>\n<p>scoped_array 相当于 C++11 标准中管理数组对象用法地 unique_ptr。</p>\n<h2 id=\"类摘要-2\"><a class=\"markdownIt-Anchor\" href=\"#类摘要-2\">#</a> 类摘要</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">scoped_array</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">//noncopyable</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">scoped_array</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">scoped_array</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 重置智能指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    T<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ptrdiff_t i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 重载 operator []</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    T<span class=\"token operator\">*</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 获得原始指针</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 显示 bool 值转型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>scoped_array<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 交换指针</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>构造函数接受的指针 p 必须是 new [] 的结果，而不能是 new 表达式的结果；</li>\n<li>没有 *、-&gt; 操作符重载因为 scoped_array 持有的不是一个普通指针；</li>\n<li>析构函数使用 delete [] 释放资源，而不是 delete；</li>\n<li>提供 operator [] 操作符重载，可以像普通数组一样用下标访问元素；</li>\n<li>没有 begin ()、end () 等类似容器的迭代器操作函数。</li>\n</ul>\n<h2 id=\"用法-2\"><a class=\"markdownIt-Anchor\" href=\"#用法-2\">#</a> 用法</h2>\n<p>scoped_array 与 scoped_ptr 源于相同的设计思想，故而用法非常相似：它只能在被声明的作用域内使用，不能拷贝、赋值。唯一不同的是，scoped_array 包装的是 new [] 产生的指针，并在析构时调用 delete []—— 因为它管理的是动态数组，而不是单个动态对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 scoped_array</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>scoped_array<span class=\"token punctuation\">[</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 包装动态数组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//scoped_array 重载了 operator []，因此它用起来就像是一个普通的数组，但因为他不提供指针运算，所以不能用数组首地址 + N 的方式访问数组元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sa<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>sa <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//error</span></pre></td></tr></table></figure><p>在使用重载 operator [] 时应注意，scoped_array 不提供数组索引的范文检查，如果使用了超过动态数组大小的索引或者是负数索引，将因为未定义行为。</p>\n<p>用法示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/smart_ptr.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> boost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    scoped_array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sa</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 一个 scoped_array 对象代理原始数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">fill_n</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sa<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 可以使用标准库算法赋值数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    sa<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sa<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sa<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 像普通数组使用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//scoped_array 被自动析构释放动态数组资源</span></pre></td></tr></table></figure><h2 id=\"对比unique_ptr-2\"><a class=\"markdownIt-Anchor\" href=\"#对比unique_ptr-2\">#</a> 对比 unique_ptr</h2>\n<p>C++11 标准中 unique_ptr 使用模板提供了对数组对象的支持，类代码摘要如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">unique_ptr</span><span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> D<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">typedef</span> some_define\tpointer<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 内部类型定义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">typedef</span> T\t\t\telement_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span>pointer p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    T<span class=\"token operator\">&amp;</span>\t\t<span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 重载 operator</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    pointer <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 获得原始指针</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 显式 bool 值转型</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    pointer <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 释放指针的管理权</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>pointer p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 重置智能指针</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>unique_ptr<span class=\"token operator\">&amp;</span> u<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 交换指针</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">unique_ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> unique_ptr<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用 delete 禁用拷贝</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    unique_ptr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> unique_ptr<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>unique_ptr 的数组对象用法和 scoped_array 基本相同，但模板参数中需要声明为数组类型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 注意模板参数和 new []</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 支持 bool 转换</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>up<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> up<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>up<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 释放 new 出的内存空间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 此时不管理任何指针</span></pre></td></tr></table></figure><p>因为 unique_ptr 的数组用法仅是模板特化，所以它同样具有 unique_ptr 的其他功能，如比较运算，定制删除器等，功能要比 scoped_array 更多。</p>\n<p>同样头文件 &lt;boost/smart_ptr/make_unique.hpp&gt; 里提供了创建数组对象 unique_ptr 的工厂函数 make_unique ():</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> a <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 5 个元素的动态数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 数组越界，未定义行为</span></pre></td></tr></table></figure><h2 id=\"使用建议\"><a class=\"markdownIt-Anchor\" href=\"#使用建议\">#</a> 使用建议</h2>\n<blockquote>\n<p>scoped_array 没有给程序增加额外的负担，用起来很方便轻巧。它的速度与原始数组同样快，很适合习惯于用 new 操作符在堆上分配内存的程序员。但 scoped_array 的功能很有限，不能动态增长，没有边界检查，也没有迭代器支持，不能搭配 STL 算法，仅有一个纯粹的裸数组接口。而且，应当避免使用 new [] 操作符，编译器很难区分出 new [] 和 new 分配的空间，除非对性能有非常苛刻的要求，或者编译器不支持标准库，否则都不推荐使用 scoped_array，它是为了与老式 C 风格代码兼容而使用的类。</p>\n</blockquote>\n<p>在需要使用动态数组的情况下，我们应该使用 std::vector，它比 scoped_array 提供了更多的灵活性，而只付出了很小的代价。由于 vector 有丰富的成员函数来操纵数据，能够使代码更加简单明了，易于维护。</p>\n<h1 id=\"shared_ptr\"><a class=\"markdownIt-Anchor\" href=\"#shared_ptr\">#</a> shared_ptr</h1>\n<p>shared_ptr 是一个最像指针的智能指针，是 boost.shared_ptr 库中最有价值、最重要的组成部分，也是最有用的，Boost 库的许多组件 —— 甚至还包括一些其他领域的智能指针都使用了 shared_ptr，所以它被毫无悬念地收入了 C++11 标准。</p>\n<p>shared_ptr 与 scoped_ptr 一样包装了 new 操作符在堆上分配的动态对象，但它实现的是引用计数型的智能指针，可以被自由的拷贝和赋值，在任意的地方共享它，当没有代码使用（引用计数为 0）时，才删除被包装的动态分配的对象。</p>\n<p>shared_ptr 也可以安全地放到标准容器中，是在 STL 容器中存储指针的最标准解法。</p>\n<h2 id=\"类摘要-3\"><a class=\"markdownIt-Anchor\" href=\"#类摘要-3\">#</a> 类摘要</h2>\n<p><code>shared_ptr</code>  要比 <code>scoped_ptr</code>  复杂许多，类摘要如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">shared_ptr</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pubilc<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 内部类型定义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">typedef</span> T element_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">shared_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token operator\">></span> <span class=\"token keyword\">explicit</span> <span class=\"token function\">shared_ptr</span><span class=\"token punctuation\">(</span>Y <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">></span> <span class=\"token function\">shared_ptr</span><span class=\"token punctuation\">(</span>Y <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> D d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">shared_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 拷贝构造</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">shared_ptr</span><span class=\"token punctuation\">(</span>shared_ptr <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 赋值操作</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    shared_ptr <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>shared_ptr <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token operator\">></span> shared_ptr <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>shared_ptr<span class=\"token operator\">&lt;</span>Y<span class=\"token operator\">></span> <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 重置智能指针</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>Y <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>Y <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> D d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 操作符重载</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    T <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    T <span class=\"token operator\">*</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 获取原始指针</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    T <span class=\"token operator\">*</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 是否唯一</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 引用计数</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 显式 bool 转型</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 交换指针</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>shared_ptr <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"操作函数-2\"><a class=\"markdownIt-Anchor\" href=\"#操作函数-2\">#</a> 操作函数</h2>\n<p><code>shared_ptr</code>  和 <code>scoped_ptr</code>  同样是用于管理 <code>new</code>  动态分配对象的智能指针，因此功能上有很多相似之处：他们都重载了 <code>*</code>  和 <code>-&gt;</code>  操作符以模仿原始指针的行为，提供 <code>显式bool类型转换</code> 以判断指针的有效性， <code>get()</code>  可以得到原始指针，并且没有提供指针算术运算操作，也不能管理 <code>new[]</code>  产生的动态数组指针。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">spi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>spi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span>spi <span class=\"token operator\">=</span> <span class=\"token number\">253</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">sps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"smart\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sps<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">dont_do_this</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>shared_ptr</code>  是可以被安全共享的，有着正常的拷贝、复制语义，也可以进行 shared_ptr 间的比较，是最智能的智能指针。</p>\n<p><code>shared_ptr</code>  有多种形式的构造函数，应用于各种可能的情形：</p>\n<ul>\n<li>无参的 <code>shared_ptr()</code>  构造函数，创建一个持有空指针的 <code>shared_ptr</code> ;</li>\n<li><code>shared_ptr(Y *p)</code>  获取指向类型 T 的指针 p 的管理权，同时引用计数置为 1。该构造函数要求 <code>Y类型</code> 必须能够转换为 <code>T类型</code> ；</li>\n<li><code>shared_ptr(shared_ptr const &amp;r)</code>  从另外一个 <code>shared_ptr</code>  获得指针的管理权，同时引用计数加 1，结果是两个 <code>shared_ptr</code>  共享一个指针的管理权；</li>\n<li><code>operator=</code>  赋值操作符可以从另外一个 <code>shared_ptr</code>  获得指针的管理权，其行为同构造函数；</li>\n<li><code>shared_ptr(Y *p, D d)</code>  行为类似 <code>shared_ptr(Y *p)</code> ，但使用 <code>参数d</code>  指定了析构时的定制删除器，而不是简单的 delete。</li>\n</ul>\n<p><code>shared_ptr</code>  的 <code>reset()</code>  函数的行为，与 <code>scoped_ptr</code>  也不尽相同，它的作用是将引用计数减 1，停止对指针的共享，除非引用计数为 0，否则不会发生删除操作。带参数的 <code>reset()</code>  则类似相同形式的构造函数，原指针引用计数减 1 的同时改为管理另一个指针。</p>\n<p><code>shared_ptr</code>  有两个专门的函数来检查引用计数。 <code>unique()</code>  在 <code>shared_ptr</code>  是指针的唯一所有者时，返回 true（这时 shared_ptr 的行为类似 scoped_ptr 或 unique_ptr）， <code>use_count()</code>  返回当前指针的引用计数。要小心， <code>use_count()</code>  应该仅仅用于测试或者调试，他不提供高效率的操作，而且在极少情况下是不可用的。而 <code>unique()</code>  则是可靠的，任何时候都可用，而且比 <code>use_count() == 1</code>  速度更快。</p>\n<p><code>shared_ptr</code>  还支持比较运算，可以测试两个 <code>shared_ptr</code>  的相等或不相等，比较基于内部保存的指针，相当于 <code>a.get() == b.get()</code> 。 <code>shared_ptr</code>  还可以使用 <code>operator&lt;</code>  比较大小，同样基于内部保存的指针，但不提供 <code>operator&lt;</code>  以外的比较操作符，这使得 <code>shared_ptr</code>  可以被用于标准关联容器（set 和 map）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//shared_ptr 类型定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> shared_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> sp_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 标准映射容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token operator\">&lt;</span>sp_t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 一个 shared_ptr 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sp_t <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 关联数组用法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>m<span class=\"token punctuation\">[</span>sp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">111</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此外， <code>shared_ptr</code>  还支持流输出操作符 <code>operator&lt;&lt;</code> ，输出内部的指针值，方便调试</p>\n<h2 id=\"用法-3\"><a class=\"markdownIt-Anchor\" href=\"#用法-3\">#</a> 用法</h2>\n<p>shared_ptr 的高智能使其行为最接近原始指针，因此他比 scoped_ptr 的应用范围更广。几乎 100% 可以在任何 new 出现的地方接受 new 的动态分配结果，然后被任意使用，从而完全消灭 delete 的使用和内存泄漏，而他的用法同样简单。</p>\n<p>shared_ptr 也提供基本的线程安全保证，一个 shared_ptr 可以被多个线程安全读取，但其他的访问形式结果都是未定义的。</p>\n<p>一个简单用法示例如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 一个指向整数的 shared_ptr</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">.</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 现在 shared_ptr 是指针的唯一持有者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> sp2 <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 第二个 shared_ptr，拷贝构造函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sp <span class=\"token operator\">==</span> sp2 <span class=\"token operator\">&amp;&amp;</span> sp<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 两个 shared_ptr 相等指向同一个对象，引用计数为 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">*</span>sp2 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 使用解引用操作符修改被指向的对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sp <span class=\"token operator\">==</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 另一个 shared_ptr 也同时被修改</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>sp<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 停止 shared_ptr 的使用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//sp 不再持有任何指针</span></pre></td></tr></table></figure><p>一个复杂用法示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 一个拥有 shared_ptr 的类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">shared</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 构造函数初始化 shared_ptr</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">shared</span><span class=\"token punctuation\">(</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span>p_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 输出 shared_ptr 的引用计数和所指向的值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"count:\"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" v=\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 使用 shared_ptr 作为函数参数同样输出引用计数和指向的值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print_func</span><span class=\"token punctuation\">(</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"count:\"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" v=\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    shared <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 构造两个自定义类</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    s1<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    s2<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 修改 shared_ptr 所指的值</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">print_func</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    s1<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 运行结果：</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>count<span class=\"token operator\">:</span><span class=\"token number\">3</span> v<span class=\"token operator\">=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>count<span class=\"token operator\">:</span><span class=\"token number\">3</span> v<span class=\"token operator\">=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>count<span class=\"token operator\">:</span><span class=\"token number\">4</span> v<span class=\"token operator\">=</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>count<span class=\"token operator\">:</span><span class=\"token number\">3</span> v<span class=\"token operator\">=</span><span class=\"token number\">20</span></pre></td></tr></table></figure><p>示例代码定义了一个类和一个函数，两者都接受 shared_ptr 对象作为参数，特别注意的是没有使用引用的方式传递参数，而是直接拷贝，就像是在使用一个原始指针 ——shared_ptr 支持这样的用法。</p>\n<p>在声明了 shared_ptr 和两个 shared 类实例后，指针被它们所共享，因此引用计数为 3。<strong>print_func () 函数内部拷贝了一个 shared_ptr 对象，因此引用计数再增加 1，但当退出函数时拷贝自动析构，引用计数又恢复为 3</strong>。</p>\n<h2 id=\"工厂函数\"><a class=\"markdownIt-Anchor\" href=\"#工厂函数\">#</a> 工厂函数</h2>\n<p><code>shared_ptr</code>  很好地消除了显式的 <code>delete</code>  调用，但这还不够，因为 <code>shared_ptr</code>  的构造还需要 <code>new</code>  调用，这导致了代码中的某种不对称性。虽然 <code>shared_ptr</code>  很好地包装了 <code>new</code>  表达式，但<strong>过多的显式 new 操作符也可以由使用工厂模式解决</strong>。</p>\n<p>因此， <code>smart_ptr</code>  库提供了一个工厂函数（位于 boost 命名空间） <code>make_shared()</code>  来消除显式地 new 调用，声明如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span>\t<span class=\"token comment\">//C++11 可变参数模板</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typename</span> <span class=\"token class-name\">boost</span><span class=\"token double-colon punctuation\">::</span>detail<span class=\"token double-colon punctuation\">::</span>sp_if_not_array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>type\t<span class=\"token comment\">// 模板元计算类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make_shared</span><span class=\"token punctuation\">(</span>Args <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//C++11 右值引用用法</span></pre></td></tr></table></figure><p><code>make_shared()</code>  函数可以接受若干个参数，然后把它们传递给类型 T 地构造函数，创建一个 <code>shared_ptr&lt;T&gt;</code>  的对象并返回。通常 <code>make_shared()</code>  函数要比直接创建 <code>shared_ptr</code>  对象的方式快且高效，因为它内部仅分配一次内存，消除了 <code>shared_ptr</code>  构造时的开销。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">auto</span> sp <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"make_shared\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 创建 string 的共享指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">auto</span> spv <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 创建 vector 的共享指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>spv<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>如果 C++ 编译器支持 <code>C++11</code>  的可变参数模板特性，那么 make_shared () 的参数数量没有限制，能够以任意多数量的参数构造对象，否则它只能接受最多 10 个参数，一般情况下这不会成为问题，实际上，很少有如此多参数的函数接口，即使有，那也会是一个设计的不够好的接口，应该被重构。</p>\n<p>除了 <code>make_shared()</code> ，smart_ptr 库还提供一个 <code>allocate_shared()</code> ，它比 <code>make_shared()</code>  多接受一个定制的内存分配器类型参数，其他方面都相同。</p>\n</blockquote>\n<h2 id=\"应用于标准容器\"><a class=\"markdownIt-Anchor\" href=\"#应用于标准容器\">#</a> 应用于标准容器</h2>\n<p>有两种方式可以将 <code>shared_ptr</code>  应用于标准容器（或者容器适配器等其他容器）。</p>\n<ul>\n<li>\n<p>将容器作为 <code>shared_ptr</code>  管理的对象，如 <code>shared_ptr&lt;list&lt;T&gt;&gt;</code> ，使容器可以被安全共享，用法与普通 <code>shared_ptr</code>  没有区别</p>\n</li>\n<li>\n<p>将 <code>shared_ptr</code>  作为容器的元素，如 <code> vector&lt;shared_ptr&lt;T&gt;&gt;</code> ，因为 shared_ptr 支持拷贝语义和比较操作，符合标准容器对元素的要求，所以可以在容器中安全的容纳元素的指针而不是拷贝。</p>\n<p>标准容器不能容纳 <code>scoped_ptr</code> ，因为 <code>scoped_ptr</code>  不能拷贝和赋值。标准容器可以容纳原始指针，但这就丧失了容器的很多好处，因为标准容器无法自动管理类型为指针的元素，必须编写额外的大量代码来保证指针最终被正确删除，这通常很麻烦而且容易出错。</p>\n<p>存储 <code>shared_ptr</code>  的容器与存储原始指针的容器功能几乎一样，但 <code>shared_ptr</code>  做了指针的管理工作，可以任意使用 <code>shared_ptr</code>  而不用担心资源泄露。</p>\n</li>\n</ul>\n<p>将 <code>shared_ptr</code>  应用于标准容器的用法：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">typedef</span> vector<span class=\"token operator\">&lt;</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> vs<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 一个持有 shared_ptr 的标准容器类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    vs <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 声明一个持有 10 个元素的容器，元素被初始化为空指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> pos <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> pos <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pos<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 使用工厂函数赋值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pos<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>需要注意的是迭代器和 operator [ ] 的用法，因为容器内存储的是 <code>shared_ptr</code> ，我们必须对迭代器 pos 使用一次解引用操作符 <code> *</code>  以获得 <code> shared_ptr</code> ，然后再对 <code> shared_ptr</code>  使用解引用操作符 <code> *</code>  才能操作真正的值。 <code> *(*pos)</code>  也可以写成 <code> **pos</code></p>\n<p>vector 的 operator [ ] 用法与迭代器类似，也需要使用 <code>*</code>  来获取真正的值</p>\n<p>使用 <code>boost.foreach</code>  库或者 <code>C++11</code>  里的 <code>for</code>  可以避免迭代器到 <code>shared_ptr</code>  的两次解引用，直接取出容器里的 <code>shared_ptr</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>ptr <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// C++11 的 for 循环，引用形式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ptr <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 使用工厂函数赋值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"应用于工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#应用于工厂模式\">#</a> 应用于工厂模式</h2>\n<p>工厂模式是一种创建型设计模式，这个模式包装了 new 操作符的使用，使对象的创建工作集中在工厂类或工厂函数中，从而更容易适应变化， <code>make_shared()</code>  就是工厂模式的一个很好的例子。</p>\n<p>在程序中编写自己的工厂类或者工厂函数时通常需要在堆上使用 new 动态分布，然后返回对象的指针，而是返回一个被 shared_ptr 包装的智能指针，这样可以很好的保护系统资源，而且会更好的控制对接口的使用。</p>\n<p>shared_ptr 应用于工厂模式的用法，首先实现一个纯抽象基类，也就是接口类：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">abstract</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">abstract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>abstract 的析构函数，被定义为 protected，意味着除了它自己和它的子类，其他任何对象都无权调用 delete 来删除它。</p>\n</blockquote>\n<p>再定义 abstract 的实现子类：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">impl</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">abstract</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">impl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">impl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Class impl f\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Class impl g\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>随后的工厂函数返回基类的 shared_ptr:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span>abstract<span class=\"token operator\">></span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>impl<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样就完成了全部工厂模式的实现，现在可以把这些组合起来：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 工厂函数创建对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    p<span class=\"token operator\">-></span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    p<span class=\"token operator\">-></span><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>由于基类 <code>abstract</code>  的析构函数是 <code>protected</code> ，所以用户不能做出任何对指针的破坏行为，即使是用 <code>get()</code>  获得了原始指针：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>abstract <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 正确</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">delete</span> q<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 错误，无法访问 abstract 的保护析构函数</span></pre></td></tr></table></figure><p>但这不是绝对的，用一些方法也可以再 <code>shared_ptr</code>  外删除对象，因为 <code>impl()</code>  的析构函数是公开的，所以：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>impl <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>impl<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 强制转型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">delete</span> q<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样就可以任意操作原本处于 <code>shared_ptr</code>  控制之下的原始指针了，但永远也不要这样做，因为这会使 <code>shared_ptr</code>  在析构时删除可能已经不存在的指针， 引发未定义行为。</p>\n<h2 id=\"定制删除器\"><a class=\"markdownIt-Anchor\" href=\"#定制删除器\">#</a> 定制删除器</h2>\n<p>当使用 <code>shared_ptr</code>  的另一种形式的构造函数 <code>shared_ptr(Y* p, D d)</code> ，它涉及 <code>shared_ptr</code>  另一个重要概念 —— 删除器。</p>\n<h2 id=\"对比stdshared_ptr\"><a class=\"markdownIt-Anchor\" href=\"#对比stdshared_ptr\">#</a> 对比 std::shared_ptr</h2>\n<p><code>C++11</code>  标准中定义了 <code>std::shared_ptr</code>  功能与 <code>boost::shared_ptr</code>  基本相同，可以完全等价互换。</p>\n<h2 id=\"显式bool转型\"><a class=\"markdownIt-Anchor\" href=\"#显式bool转型\">#</a> 显式 bool 转型</h2>\n<p>早期 boost 中的 <code>shared_ptr</code>  的 bool 转型是隐式转换，但在 <code>C++11</code>  标准发布后为了与标准一致添加了 <code>explicit</code>  修饰，变成了显式转换。</p>\n<p>处于兼容性的考虑， <code>C++11</code>  标准规定在 if/assert/for 等逻辑判断语境下， <code>shared_ptr</code>  还是可以隐式转换的，但其他情形 —— 如函数参数或者返回值 —— 则必须显示转换，可以使用 <code>static_cast&lt;bool&gt;(p)</code> 、 <code>p != nullptr</code>  或者 <code>!!p</code>  等形式。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">bool_test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">776</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 创建一个 shared_ptr</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//assert 可以隐式转换</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">//if 判断可以隐式转换</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"explicit cast\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 返回值必须显式转换</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "Boost"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/05/C++Boost%E5%BA%93%20%E5%87%BD%E6%95%B0%E4%B8%8E%E5%9B%9E%E8%B0%83/",
            "url": "https://adventure-yx.github.io/2023/06/05/C++Boost%E5%BA%93%20%E5%87%BD%E6%95%B0%E4%B8%8E%E5%9B%9E%E8%B0%83/",
            "title": "C++Boost库 函数与回调",
            "date_published": "2023-06-05T02:10:08.000Z",
            "content_html": "<h1 id=\"函数与回调\"><a class=\"markdownIt-Anchor\" href=\"#函数与回调\">#</a> 函数与回调</h1>\n<p>围绕函数与函数对象，共有 4 个 Boost 库，应用了 <code>C++</code>  中高级的语言特性和技巧，功能很强大，相应的用法也比较复杂灵活。其中前三个 ref、bind、function 已经被收入 <code>C++11</code>  标准。</p>\n<ul>\n<li>\n<p><strong>ref 工具类</strong></p>\n<p>是本章其他库的基础，可以包装对象的引用，在传递参数时，消除对象拷贝的代价，或者将不可拷贝的对象变为可以拷贝。</p>\n</li>\n<li>\n<p><strong>bind</strong></p>\n<p>是 <code>C++标准库</code> 中函数适配器的增强，可以适配任意的可调用对象 —— 包括函数指针，函数引用和函数对象，把它们变成一个新的函数对象，是迈向 C++ 函数式编程的第一步。</p>\n</li>\n<li>\n<p><strong>function</strong></p>\n<p>是对 <code>C/C++</code>  中函数指针类型的增强，能够容纳任意的可调用对象，可以配合 bind 使用。</p>\n</li>\n<li>\n<p><strong>signals2</strong></p>\n<p>实现了威力强大的观察者模式。参考 <code>Java</code>  中的 <code>Observable/Observer</code>  或者 <code>C#</code> 中的 <code>event/delegate</code></p>\n</li>\n</ul>\n<h1 id=\"ref\"><a class=\"markdownIt-Anchor\" href=\"#ref\">#</a> ref</h1>\n<p><code>C++标准库</code> 和 <code>Boost</code>  中的算法大量使用了函数对象作为判断式或谓词参数，而这些参数都是传值语义，算法或函数在内部保留函数对象的拷贝并使用，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 函数对象，计算整数的平方</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">square</span>\t\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 返回结果的类型定义</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> result_type<span class=\"token punctuation\">;</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>\tx <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一般情况下，传值语义都是可行的，但也有很多特殊情况：作为参数的函数对象拷贝代价过高（具有复杂的内部状态），不希望拷贝对象（内部状态不应该被改变），甚至拷贝是不可行的（noncopyable、singleton）。</p>\n<p><code> boost.ref</code>  应用代理模式，引入对象引用的包装器概念解决了这个问题。它位于命名空间 boost，为了使用 ref 组件，需要包含头文件 <code> include &lt;boost/ref.hpp&gt;</code></p>\n<h2 id=\"类摘要\"><a class=\"markdownIt-Anchor\" href=\"#类摘要\">#</a> 类摘要</h2>\n<p>ref 库定义了一个很小很简单的引用类型的包装器，名字叫 reference_wrapper</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">reference_wrapper</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">reference_wrapper</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">t_</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 隐式转换</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">operator</span> T<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>t_<span class=\"token punctuation\">;</span>\t<span class=\"token punctuation\">&#125;</span>\t\t\t\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 访问被包装的对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    T<span class=\"token operator\">&amp;</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>t_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    T<span class=\"token operator\">*</span> <span class=\"token function\">get_pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> t_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 保存对象指针</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    T<span class=\"token operator\">*</span> t_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>reference_wrapper 的构造函数接受类型 T 的引用类型，内部使用指针存储指向 t 的引用，构造出一个 reference_wrapper 对象，从而包装了引用。</p>\n<p>get () 和 get_pointer () 这两个函数分别返回存储的引用和指针，相当于解开对 t 的包装。</p>\n<blockquote>\n<p>reference_wrapper 的构造函数被声明为 explicit，因此必须在创建对象时就赋值初始化，就像是使用一个引用类型的变量。</p>\n</blockquote>\n<p>reference_wrapper 还支持隐式类型转换，可以在需要的语境下返回存储的引用，因此它很像引用类型，能够在任何需要 T 出现的地方使用 reference_wrapper。</p>\n<h2 id=\"基本用法\"><a class=\"markdownIt-Anchor\" href=\"#基本用法\">#</a> 基本用法</h2>\n<h1 id=\"bind\"><a class=\"markdownIt-Anchor\" href=\"#bind\">#</a> bind</h1>\n<p>bind 是对 C++98 标准中函数适配器 bind1st/bind2nd 的泛化和增强，可以适配任意的可调用对象，包括函数指针、函数引用、成员函数指针和函数对象。</p>\n<p>bind 远远地超越了 STL 中的函数绑定器 bind1st/bind2nd，可以绑定最多 9 个函数参数，而且对被绑定对象的要求很低，可以在没有 result_type 内部类型定义的情况下完成对函数对象的绑定。</p>\n<p>bind 位于命名空间 boost，为了使用 bind 组件，需要包含头文件 <code> &lt;boost/bind.hpp&gt;</code> ，即</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/bind.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> boost<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code> bind</code>  库用于将函数对象与参数进行绑定，从而创建一个新的函数对象。这对于在代码中<strong>实现参数传递和延迟求值</strong>非常有用。</p>\n<p><code> bind</code>  库通过使用 <code> _1</code> 、 <code> _2</code>  等占位符来指定函数对象中的参数位置，从而实现参数的绑定。绑定后的函数对象可以像普通函数一样使用。</p>\n</blockquote>\n<h2 id=\"工作原理\"><a class=\"markdownIt-Anchor\" href=\"#工作原理\">#</a> 工作原理</h2>\n<p>bind 并不是一个单独的类或函数，而是非常庞大的家族，依据绑定的参数个数和要绑定的调用对象类型，总数有数十个不同的重载形式，但他们的名字都叫 bind，编译器会根据具体的绑定代码自动确定要使用的正确形式。</p>\n<p>bind 的基本形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token operator\">></span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A1</span><span class=\"token operator\">></span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>F f<span class=\"token punctuation\">,</span> A1 a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>arg<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span> _1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>arg<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">></span> _2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>arg<span class=\"token operator\">&lt;</span><span class=\"token number\">9</span><span class=\"token operator\">></span> _9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>bind 接受的第一个参数必须是一个可调用对象 f，可以是函数、函数指针、函数对象和成员函数指针，之后 bind 接受最多 9 个参数，参数数量必须与 f 的参数数量相等。</p>\n<p>绑定完成后，bind 会返回一个函数对象，它内部保存了 f 的拷贝，具有 operator ()，返回值类型被自动推导为 f 的返回值类型被自动推导为 f 的返回值类型。在发生调用时，这个函数对象把之前存储的参数转发给 f 完成调用。</p>\n<blockquote>\n<p>例如一个函数 <code> func(a1, a2)</code> ，它等价于一个具有无参 operator () 的 bind 函数对象调用 <code> bind(func, a1, a2)</code></p>\n</blockquote>\n<p>这是 bind 最简单的形式。bind 表达式存储了 func 和 a1、a2 的拷贝，产生了一个临时函数对象。因为 func 接受两个参数，而 a1 和 a2 都是实参，因此临时函数对象将具有一个无参的 operator ()。当 operator () 调用发生时函数对象把 a1、a2 的拷贝传递给 func，完成真正的函数调用。</p>\n<p>bind 的真正威力在于它的占位符，他们分别被定义为_1、_2、_3 一直到_9，位于一个匿名命名空间。占位符可以取代 bind 中参数的位置，<strong>在发生函数调用时才接受真正的参数</strong>。</p>\n<p>占位符的名字表示他在调用式中的顺序，而在绑定表达式中没有顺序的要求，_1 不一定要第一个出现，也不一定只出现一次。</p>\n<blockquote>\n<p>例如 <code> bind(func, _2, _1)(a1, a2)</code>  等价于 <code> func(a2, a1)</code></p>\n</blockquote>\n<h2 id=\"绑定普通函数\"><a class=\"markdownIt-Anchor\" href=\"#绑定普通函数\">#</a> 绑定普通函数</h2>\n<p>bind 可以绑定普通函数，可以使用函数名或函数指针。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/bind.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">auto</span> test1 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// f(1, 2)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">auto</span> test2 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// g(1, 2, 3)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">auto</span> test3 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// f(x, 9) </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">auto</span> test4 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// f(x, y)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">auto</span> test5 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// f(y, x)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">auto</span> test6 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//f (x, x), y 参数被忽略</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">auto</span> test7 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// g(x, 8, y)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">auto</span> test8 <span class=\"token operator\">=</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> _3<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//g (z, y, y), x 参数被忽略</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> test8 <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>必须绑定表达式中提供函数要求的所有参数，无论是真是参数还是占位符</p>\n</blockquote>\n<p>bind 也可以绑定函数指针</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span> f_type<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 函数指针定义</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g<span class=\"token punctuation\">)</span> g_type<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 函数指针定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    f_type pf <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    g_type pg <span class=\"token operator\">=</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> z <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// (*pf)(x, 9)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>pg<span class=\"token punctuation\">,</span> _3<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// (*pg)(z, y, y)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"绑定类的成员函数\"><a class=\"markdownIt-Anchor\" href=\"#绑定类的成员函数\">#</a> 绑定类的成员函数</h2>\n<p><strong>类的成员函数不同于普通函数，因为成员函数指针不能直接调用 operator ()，它必须被绑定到一个对象或指针，然后才能得到 this 指针进而调用成员函数。因此 bind 需要 “牺牲” 一个占位符的位置，要求用户提供一个类的实例、引用或者指针，通过对象作为第一个参数来调用成员函数。</strong></p>\n<blockquote>\n<p>实际上成员函数的第一个（隐含的）参数就是对象指针。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>X<span class=\"token double-colon punctuation\">::</span>fun<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这意味着使用成员函数时只能最多绑定 8 个参数。</p>\n<p>例如，有一个 demo 类：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    demo a<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 类的实例 a</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    demo <span class=\"token operator\">&amp;</span>ra <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 类的实例 a 的引用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    demo <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 类的实例 a 的指针</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo<span class=\"token double-colon punctuation\">::</span>f<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo<span class=\"token double-colon punctuation\">::</span>f<span class=\"token punctuation\">,</span> ra<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo<span class=\"token double-colon punctuation\">::</span>f<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>必须在成员函数前加上取地址操作符 &amp;，表明这是一个成员函数指针，否则会无法通过编译，这是与绑定普通函数的一个小小的不同。</p>\n</blockquote>\n<blockquote>\n<p>bind 可以绑定成员函数，也可以使用专门用来绑定成员函数的 <code> boost::mem_fn</code> ，它同样被收录进 C++11</p>\n</blockquote>\n<p>示例：使用 bind 搭配标准算法 for_each 用来调用容器中所有对象的 print () 函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/bind.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> boost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">point</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>point<span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>point<span class=\"token double-colon punctuation\">::</span>print<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>bind 同样支持绑定虚拟成员函数，用法与非虚函数相同，虚函数的行为由实际调用发生时的实例来将决定。</p>\n</blockquote>\n<h2 id=\"绑定类的成员变量\"><a class=\"markdownIt-Anchor\" href=\"#绑定类的成员变量\">#</a> 绑定类的成员变量</h2>\n<p>bind 的另一个对类的操作是他可以绑定 public 成员变量，就像是一个选择器，用法和绑定成员函数类似，只需要把成员变量名像一个成员函数一样去使用。</p>\n<p>如上例 point 类，假设我们已经在 vector 中存储了大量的 point 对象，而我们想要得到他们的 x 坐标值：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>point<span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>point<span class=\"token double-colon punctuation\">::</span>x<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code> bind(&amp;point::x, _1)</code>  取出 point 对象的成员变量 x。</li>\n<li><code> transform</code>  算法调用 bind 表达式操作容器 v，这个把成员变量填入到 v2 中。</li>\n</ul>\n<p>使用 bind 也可以实现直接选择出 pair 对的 first 和 second 成员，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> string<span class=\"token operator\">></span> pair_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pair_t <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pair_t<span class=\"token double-colon punctuation\">::</span>first <span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pair_t<span class=\"token double-colon punctuation\">::</span>second<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// string</span></pre></td></tr></table></figure><h2 id=\"绑定函数对象\"><a class=\"markdownIt-Anchor\" href=\"#绑定函数对象\">#</a> 绑定函数对象</h2>\n<p>bind 可以绑定任意的函数对象，包括标准库中的所有与定义的函数对象。</p>\n<h2 id=\"对比c11标准\"><a class=\"markdownIt-Anchor\" href=\"#对比c11标准\">#</a> 对比 C++11 标准</h2>\n<p>C++11 标准使用可变参数模板和完美转发简化了 bind 的定义，支持绑定任意数量的参数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> BoundArgs<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>unspecified <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>F<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">,</span> BoundArgs<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//bind 函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> std<span class=\"token double-colon punctuation\">::</span>placeholders <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">extern</span> unspecified _1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">extern</span> unspecified _2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>std::bind</code>  的用法与 <code>boost::bind</code>  完全相同。但是为了避免冲突，标准占位符位于 <code>std::placeholder</code>  命名空间</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>placeholder<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>另外</p>\n<p>C++11 标准还提供了语言级别的 lambda 表达式，它可以就地声明匿名函数对象，用法非常灵活。lambda 表达式某种程度上也可以代替 bind。捕获列表 [] 相当于绑定的变量，函数参数列表 () 则相当于 bind 的占位符：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> lf <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t<span class=\"token comment\">//lambda 表达式，捕获所有外部变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 调用函数 f, x 占位，绑定一个参数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">lf</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 等价于 bind 表达式</span></pre></td></tr></table></figure><p>相比较，lambda 表达式更类似函数的形式更利于理解。</p>\n<h1 id=\"function\"><a class=\"markdownIt-Anchor\" href=\"#function\">#</a> function</h1>\n<p>function 是一个函数对象的” 容器 “，概念上像是 C/C++ 中函数指针类型的泛化，是一种” 智能函数指针 “。它<strong>以对象的形式封装了原始的函数指针或函数对象</strong>，能够容纳任意符合函数签名的可调用对象。因此它<strong>可以被用于回调机制，暂时保管函数或函数对象，在之后需要的时机再调用，使回调机制拥有更多的弹性</strong>。</p>\n<p>function 可以配合 bind/lambda 使用，存储 bind/lambda 表达式的结果，使 bind/lambda 可以被多次调用。</p>\n<h2 id=\"类摘要-2\"><a class=\"markdownIt-Anchor\" href=\"#类摘要-2\">#</a> 类摘要</h2>\n<p>同 bind 一样，function 也不是一个单独的类，function 可以容纳 0 到 10 个参数的函数，因此多达 11 个类，命名分别为 function0 到 function10。但通常使用一个更通用的 function 类：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">Signature</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">function</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">functionN</span> <span class=\"token operator\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TN</span><span class=\"token operator\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pubilc<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">typedef</span> R \tresult_type<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 内部类型定义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">typedef</span> TN \targN_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> arity <span class=\"token operator\">=</span> N<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 参数个数常量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">F</span><span class=\"token operator\">></span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> function<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 基本操作</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">safe_bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//bool 转型</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Functor</span><span class=\"token operator\">></span> Functor<span class=\"token operator\">*</span> <span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 访问内部元素</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Functor</span><span class=\"token operator\">></span> <span class=\"token keyword\">bool</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Functor<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>type_info<span class=\"token operator\">&amp;</span> <span class=\"token function\">target_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    result_type <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arg1_type<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 调用操作符</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"function的声明\"><a class=\"markdownIt-Anchor\" href=\"#function的声明\">#</a> function 的声明</h2>\n<p>function 只需要一个模板参数，这个参数就是将要容纳的函数类型，例如：</p>\n<p><code> function&lt;int ()&gt; func;</code></p>\n<p>将声明一个可以容纳返回值为 int、无参函数的 function 对象。尖括号中的类型声明就是一个没有函数名的函数原型。它也具有很好的可读性，可以读作 function of int ()，表明这是一个容纳 int () 的 function 对象。</p>\n<p>function 的函数类型声明也可以像真的函数那样带有参数名，例如</p>\n<p><code> function&lt;int (int a, int b, int c)&gt; func2;</code>  与 <code> function&lt;int (int , int , int)&gt; func2;</code>  是完全等价的。</p>\n<blockquote>\n<p>如果我们已经知道将要容纳的函数，那么也可以用 C++11 关键字 decltype 来直接获取函数类型。例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 使用 decltype 推导函数类型</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"操作函数\"><a class=\"markdownIt-Anchor\" href=\"#操作函数\">#</a> 操作函数</h2>\n<p>function 的构造函数可以接受任意符合模板中声明的函数类型的可调用对象，如函数指针和函数对象，或是另一个 function 对象的引用，之后在内部存储一份它的拷贝。</p>\n<h2 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\">#</a> 用法</h2>\n<p>function 就像是一个函数的容器，也可以把 function 想象成一个泛化的函数指针，只要符合它声明中的函数类型，任何普通函数、成员函数、函数对象都可以存储在 function 对象中，然后在任何需要的时候被调用。</p>\n<p>这种能够容纳任意可调用对象的能力是非常重要的，在编写泛型代码的时候尤其有用，他使我们可以接受任意的函数或者函数对象，增加程序的灵活性。与原始的函数指针相比，function 对象的体积更大（3 个指针大小），速度稍慢（10% 左右的性能差异）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/function.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> boost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 无参构造一个 function 对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 此时 function 不持有任何对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    func <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//func 存储函数 f</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 验证已存储函数 f</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 调用 function 的 operator ()</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    func <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//function 清空，相当于 clear ()</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只要函数签名式一致，function 也可以存储成员函数和函数对象，或者是 bind/lambda 表达式。假设有一个类 demo_class，它既有普通成员函数，又重载了 operator ()：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">demo_class</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t<span class=\"token comment\">// 加法操作</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 重载 operator ()</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>demo_class<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>func1 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo_class<span class=\"token double-colon punctuation\">::</span>add<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>demo_class sc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>存储成员函数时可以<strong>直接在 function 声明的函数签名式中指定类的类型，然后用 bind 绑定成员函数</strong>：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>demo_class<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>func1 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo_class<span class=\"token double-colon punctuation\">::</span>add<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>demo_class sc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>也可以在函数类型中<strong>仅写出成员函数的签名，在 bind 时直接绑定类的实例</strong>：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>func <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo_class<span class=\"token double-colon punctuation\">::</span>add<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"使用ref库\"><a class=\"markdownIt-Anchor\" href=\"#使用ref库\">#</a> 使用 ref 库</h2>\n<p>function 使用拷贝语义保存参数，当参数很大时拷贝的代价往往很高，或者有时不能拷贝参数。</p>\n<p>这时可以使用 ref 库，它允许以引用的方式传递参数，能够降低 function 拷贝的代价。</p>\n<p>function 并不要求 ref 库提供 operator ()，因为它能够自动识别包装类 reference_wrapper，并调用 get () 方法获得被包装的对象：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>demo_class sc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>func <span class=\"token operator\">=</span> <span class=\"token function\">cref</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 使用 cref () 函数包装常对象的引用，cref () 是一个常引用包装只能调用 const 成员对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 调用被引用的对象</span></pre></td></tr></table></figure><h2 id=\"用于回调\"><a class=\"markdownIt-Anchor\" href=\"#用于回调\">#</a> 用于回调</h2>\n<p>function 可以容纳任意符合函数签名式的可调用物，因此它非常适合代替函数指针，存储用于回调的函数。</p>\n<p>作为示例，定义一个 demo 类，它使用 function 代替函数指针作为内部类型保存回调函数，存储形式为 void (int) 的可调用物：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">demo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> func_t<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//function 类型定义</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    func_t func<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">//function 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 内部成员变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">n</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">CallBack</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>CallBack f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        func <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 存储回调函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//demo 类定义结束</span></pre></td></tr></table></figure><ul>\n<li>demo 类使用模板函数 accept () 接受回调函数。之所以使用模板函数，是因为这种形式更加灵活，用户可以在不知道也不关心内部存储形式的情况下传递任何可调用对象，包括函数指针和函数对象</li>\n<li>demo 类的成员函数 run () 用于调用回调函数</li>\n</ul>\n<p>接下来定义一个用于回调的函数，他将输入翻倍：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">call_back_func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"call_back_func:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>demo 的回调可以这样使用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    demo <span class=\"token function\">dc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>call_back_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 接受回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 调用回调函数，输出 “call_back_func:20”</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<p>使用普通函数进行回调并不能体现 function 的好处，</p>\n<hr>\n<p>function 还可以搭配 bind 库，把 bind 表达式作为回调函数，可以<strong>接受类成员函数</strong>，或者把不符合函数签名式的函数 bind 转为可接受的形式。</p>\n<p>示例如下，定义一个回调函数工厂类，他有两个回调函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">call_back_factory</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">call_back_func1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"call_back_factory1:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">call_back_func2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"call_back_factory2:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">*</span> j <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    demo <span class=\"token function\">dc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    call_back_factory cbf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>call_back_factory<span class=\"token double-colon punctuation\">::</span>call_bcak_func1<span class=\"token punctuation\">,</span> cbf<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 输出：call_back_factory1:20</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>call_back_factory<span class=\"token double-colon punctuation\">::</span>call_bcak_func2<span class=\"token punctuation\">,</span> cbf<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 输出：call_back_factory2:100</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>通过以上示例可以看到 function 用于回调的好处，它无需改变回调的接口就可以解耦客户代码，使客户代码不必绑死在一种回调形式上，进而可以持续演化，而 function 始终能够保持与客户代码争取沟通。</p>\n</blockquote>\n<h2 id=\"对比c11的auto\"><a class=\"markdownIt-Anchor\" href=\"#对比c11的auto\">#</a> 对比 C++11 的 auto</h2>\n<p>一些情况下，C++11 的新关键字 auto 可以近似地取代 function，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> func <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 存储一个普通函数指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>demo sc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span> func2 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>demo<span class=\"token double-colon punctuation\">::</span>add<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 存储一个 bind 表达式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>但他们的实现大不相同。</strong></p>\n<ul>\n<li>function 类似一个容器，可以容纳任意有 operator () 的类型（函数指针、函数对象、lambda 表达式），它是运行时的，可以任意拷贝、赋值、存储其他可调用物。</li>\n<li>auto 仅是编译器推导出的一个静态类型变量，他很难再赋以其他值，也无法容纳其他类型，不能用于泛型编程。</li>\n</ul>\n<p>当需要存储一个可调用物用于回调时，最好使用 function，它具有更多的灵活性，特别是把回调作为类的一个成员的时候我们只能使用 function。</p>\n<p>auto 的优点在于，它的类型是在编译器推导的，没有运行时开销，效率上要比 function 略高一点，但他声明的变量不能存储其他类型的可调用物，不具有灵活性，只能用于有限范围的延后回调。</p>\n<h2 id=\"对比c11的stdfunction\"><a class=\"markdownIt-Anchor\" href=\"#对比c11的stdfunction\">#</a> 对比 C++11 的 std::function</h2>\n<p>C++11 标准定义了 <code> std::function</code> ，声明摘要如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> ArgTypes<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">function</span><span class=\"token operator\">&lt;</span><span class=\"token function\">R</span><span class=\"token punctuation\">(</span>ArgTypes<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token operator\">></span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>function<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 交换函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>F<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> A<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 显式 bool 转型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    R <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ArgTypes<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// operator()</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>type_info<span class=\"token operator\">&amp;</span> <span class=\"token function\">target_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> T<span class=\"token operator\">*</span> <span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>std::function</code>  与 <code>boost::function</code>  基本相同，只有少量区别：</p>\n<ul>\n<li>\n<p>没有 <code>clear()</code>  和 <code>empty()</code>  成员函数；</p>\n</li>\n<li>\n<p>提供 <code>assign()</code>  成员函数；</p>\n</li>\n<li>\n<p><code>explicit()</code>  显式 bool 转型。</p>\n<p>因此，同 shared_ptr 一样，在函数返回值或者函数参数等语境里转型 bool 需要使用 <code>static_cast&lt;bool&gt;(f)</code>  或者 <code>!!f</code>  的形式。</p>\n</li>\n</ul>\n",
            "tags": [
                "C++",
                "Boost"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/02/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "url": "https://adventure-yx.github.io/2023/06/02/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "title": "字符集与VS中的字符处理",
            "date_published": "2023-06-02T07:12:08.000Z",
            "content_html": "<h1 id=\"字符集\"><a class=\"markdownIt-Anchor\" href=\"#字符集\">#</a> 字符集</h1>\n<ul>\n<li>\n<p>ASCII（American Standard Code for Information Interchange）</p>\n<p>一个字节（8bit）表示的字符编码，其中只用到了前 7 位，表示 127 个字符。</p>\n</li>\n<li>\n<p>ANSI 多字节字符集（American National Standard Institute）</p>\n<p>由字节数据的最高位判断：</p>\n<ul>\n<li>最高位为 0，代表是单字节，按照 ASCII 表进行编码</li>\n<li>最高位为 1，代表是本地化扩展字符，需要将相邻的两个字节组成一个整体，来进行码值求取，得到的码值对应的本地化字符集中可以得到相应的字符是什么。\n<ul>\n<li>简体中文系统下，ANSI 编码代表 GB2312 编码 (GBK 是 GB2312 的扩展，兼容 GB2312)</li>\n<li>繁体中文系统下，ANSI 编码代表 BIG5 编码</li>\n<li>日文系统下，ANSI 编码代表 JIS 编码</li>\n</ul>\n</li>\n<li>不同 ANSI 编码之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中。需要将不同的 ANSI 编码都转换成 UTF-8 编码，进而存储。</li>\n</ul>\n</li>\n<li>\n<p>Unicode 编码（Universal Multiple-Octet Coded Character Set，通用多八位编码字符集）</p>\n<p>国际组织制定的可以容纳世界上所有文字和字符的编码方案，使用定宽 2 个字节 <code>Ox0000-OxFFFF</code>  来表示一个字符。对于英文浪费了一个字节。</p>\n</li>\n<li>\n<p>UTF-8（8bit Unicode Transformation Format，8 位 Unicode 通用转换格式）</p>\n<p>UTF-8 是 Unicode 的实现方式之一，是一种针对 Unicode 的可变长度字符编码，使用 1-4 个字节进行编码</p>\n<p>对单字节字符，第一位为 0，后 7 位与 ASCII 码一致。</p>\n</li>\n<li>\n<p>UTF-16</p>\n<p>可变长度字符编码，将字符编码成 2 字节或者 4 字节</p>\n</li>\n<li>\n<p>UTF-32</p>\n<p>固定长度的编码，始终占用 4 字节。</p>\n</li>\n</ul>\n<h1 id=\"字符类型\"><a class=\"markdownIt-Anchor\" href=\"#字符类型\">#</a> 字符类型</h1>\n<ul>\n<li>\n<p><strong>char</strong></p>\n<p>字符型，单位是字节，占 8bit</p>\n</li>\n<li>\n<p><strong>wchar_t</strong></p>\n<p>宽字符，单位是双字节，占 16bit</p>\n<p>wchar_t 是 Unicode 定义的数据类型，定义在 <code>&lt;string.h&gt;</code>  中。在 ANSI 中使用 wchar_t 会报错，wchar_t 类型的字符是按 Unicode 的编码方式存储的。</p>\n<blockquote>\n<p>给 wchar_t 类型变量赋值时，要注意类型以及编码方式是否匹配。</p>\n<p><code>wchar_t *str = L&quot;aaabbb&quot;;</code></p>\n<p>str 是 wchar_t 类型，而 wchar_t 是 Unicode 数据类型，所以后面的字符串要用 L 指令转化为 Unicode 编码</p>\n</blockquote>\n</li>\n<li>\n<p><strong>TCHAR</strong></p>\n<p>TCHAR 是一个宏，并不是实际的某一个类型。当使用多字节字符集时，TCHAR 就是 char；当使用 Unicode 字符集时，TCHAR 就可以当作 wchar_t 来用。使用 TCHAR，编译器会根据我们字符集来进行相应的转化。TCHAR 定义在 &lt;tchar.h&gt; 中，使用要先包含头文件。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span>  <span class=\"token expression\">UNICODE</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">wchar_t</span> TCHAR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> TCHAR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>LPSTR</strong>：32bit 指针，指向一个字符串，每个字符占 1 个字节。相当于 <code>char*</code></p>\n</li>\n<li>\n<p><strong>LPCSTR</strong>：32bit 指针，指向一个常字符串，每个字符占 1 个字节。相当于 <code>const char*</code></p>\n</li>\n<li>\n<p><strong>LPTSTR</strong>：32bit 指针，指向一个字符串，每个字节可能占 1 个字节或 2 个字节，取决于 Unicode 是否定义。相当于 <code>tchar*</code></p>\n</li>\n<li>\n<p><strong>LPCTSTR</strong>：32bit 指针，指向一个常字符串，每个字节可能占 1 个字节或 2 个字节，取决于 Unicode 是否定义。相当于 <code>const tchar*</code></p>\n</li>\n<li>\n<p><strong>LPWSTR</strong>：32bit 指针，指向一个 Unicode 字符串的指针，每个字符占 2 字节。相当于 <code>wchar_t*</code></p>\n</li>\n<li>\n<p><strong>LPCWSTR</strong>：32bit 指针，指向一个 Unicode 常字符串的指针，每个字符占 2 字节。相当于 <code>const wchar_t*</code></p>\n</li>\n</ul>\n<h1 id=\"l指令\"><a class=\"markdownIt-Anchor\" href=\"#l指令\">#</a> L 指令</h1>\n<p>字符串前面加 L 表示该字符串是 Unicode 字符串，可以将 ANSI 字符串转换为 Unicode 字符串，就是每个字符占 2 个字节。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"_t宏\"><a class=\"markdownIt-Anchor\" href=\"#_t宏\">#</a> _T () 宏</h1>\n<p>_T (&quot;&quot;) 是一个宏定义在 tchar.h 下。</p>\n<p>_T () 或者 TEXT () 宏，可以把引号括起来的字符串，根据环境选择合适的编码方式。</p>\n<ul>\n<li>如果定义的是 Unicode，那么_T (“abc”) 就相当于 L&quot;abc&quot;，也就是宽字符；</li>\n<li>如果是多字节编码，那么英文采用单字节，汉字采用双字节；</li>\n<li>在 Unicode 环境下，要求 LPCWSTR 的地方不可以给一个 char*，而在多字节编码下可以。</li>\n</ul>\n<blockquote>\n<p>Windows 使用两种字符集 ANSI 和 UNICODE，前者就是通常使用的单字节方式，但这种方式处理中文这样的双字节字符不方便，容易出现半个汉字的情况。而后者是双字节，方便处理双字节字符。Windows NT 的所有与字符有关的函数都提供两种方式的版本，Windows 9x 只支持 ANSI 方式。</p>\n</blockquote>\n<ul>\n<li></li>\n</ul>\n<blockquote>\n<p>比如</p>\n<p><code>wchar_t Str[] = L&quot;Hello World!&quot;;</code>  是双字节存储字符串，_T 是与之适配的宏。</p>\n</blockquote>\n<p>当有 <code>#ifdef _UNICODE</code>  的时候，_T () 就是 L；</p>\n<p>当没有 <code>#ifdef _UNICODE</code>  的时候，_T () 就是 ANSI 的。</p>\n<h1 id=\"mfc中cstring和stdstring的转换\"><a class=\"markdownIt-Anchor\" href=\"#mfc中cstring和stdstring的转换\">#</a> MFC 中 CString 和 std::string 的转换</h1>\n<p>CString 实际是 CStringT，也就是模板类</p>\n<p>在 Unicode 环境下，实际是 CStringW</p>\n<p>在多字符集环境下，实际是 CStringA</p>\n<p>std::string 是多字符集环境下的</p>\n<h2 id=\"unicode环境下\"><a class=\"markdownIt-Anchor\" href=\"#unicode环境下\">#</a> Unicode 环境下</h2>\n<ul>\n<li>\n<p>CString 转换 std::string</p>\n<p>CString 实际是 CStringW，要转换为多字符集，需要进行转码。使用 WideCharToMultiByte 转换成多字符集，然后再构造 std::string</p>\n</li>\n<li>\n<p>std::string 转换 CString</p>\n<p>CStringT 模板类会自动做 char* 到 wchar_t * 的转码</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//CString -> std::string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">strCS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>USES_CONVERSION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">strS</span><span class=\"token punctuation\">(</span><span class=\"token function\">W2A</span><span class=\"token punctuation\">(</span>strCS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//std::string -> CString</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CString strCStemp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>strCStemp <span class=\"token operator\">=</span> strS<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 不能写在同一行</span></pre></td></tr></table></figure><h2 id=\"多字符集环境下\"><a class=\"markdownIt-Anchor\" href=\"#多字符集环境下\">#</a> 多字符集环境下</h2>\n<p>CString 就是 CStringA</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//CString -> std::string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">strCS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string str1 str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>str1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">GetBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CStringA<span class=\"token punctuation\">)</span>str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//std::string -> CString</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string strTemp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>CString str <span class=\"token operator\">=</span> strTemp<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// 可以写在一行</span></pre></td></tr></table></figure><h1 id=\"tixml写入配置文件时bool类型转stdstring\"><a class=\"markdownIt-Anchor\" href=\"#tixml写入配置文件时bool类型转stdstring\">#</a> TiXML 写入配置文件时 bool 类型转 std::string</h1>\n<p>定义：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token class-name\">DeviceConfigDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BoolToStr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> is<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> is <span class=\"token operator\">?</span> <span class=\"token string\">\"true\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pCheckSelfXRayConnect<span class=\"token operator\">-></span><span class=\"token function\">SetAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enabled\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">BoolToStr</span><span class=\"token punctuation\">(</span>isCheckSelfXRayConnect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/01/MFC%E5%AF%B9%E8%AF%9D%E6%A1%86/",
            "url": "https://adventure-yx.github.io/2023/06/01/MFC%E5%AF%B9%E8%AF%9D%E6%A1%86/",
            "title": "MFC 对话框",
            "date_published": "2023-06-01T01:12:08.000Z",
            "content_html": "<h1 id=\"创建对话框\"><a class=\"markdownIt-Anchor\" href=\"#创建对话框\">#</a> 创建对话框</h1>\n<p><img data-src=\"image-20230525105517622.png\" alt=\"\"></p>\n<ol>\n<li>创建对话框资源，添加控件。</li>\n<li>创建对话框类，添加控件变量，添加控件的消息处理函数。</li>\n</ol>\n<blockquote>\n<p>添加控件变量时，类的成员变量一般以 m 开头，标识它是一个成员变量。</p>\n</blockquote>\n<h1 id=\"对话框类的数据交换和检验\"><a class=\"markdownIt-Anchor\" href=\"#对话框类的数据交换和检验\">#</a> 对话框类的数据交换和检验</h1>\n<p>在程序运行界面中，用户往往会改变控件的属性，例如在编辑框中输入字符串，或者改变组合框中的选中项，又或者改变复选框的选中状态等。</p>\n<p><strong>控件的属性改变后，MFC 会相应的修改控件关联变量的值</strong>。这种同步的改变是通过<strong> MFC 为对话框类自动生成的成员函数 DoDataExchange () 函数</strong>实现的，这也叫做<strong>对话框的数据交换和检验机制</strong>。</p>\n<p>为三个编辑框添加了变量之后，在 <code>AdditionTestDlg.cpp</code>  中 <code>CAdditionTestDlg::DoDataExchange()</code>  函数的函数体中多了三条 <code>DDX_Text</code>  调用语句。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DoDataExchange</span><span class=\"token punctuation\">(</span>CDataExchange<span class=\"token operator\">*</span> pDX<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 处理 MFC 默认的数据交换</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">CDialogEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DoDataExchange</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 处理控件 IDC_SUMMAND_EDIT 和变量 m_editSummand 之间的数据交换</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">DDX_Text</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">,</span> IDC_SUMMAND_EDIT<span class=\"token punctuation\">,</span> m_editSummand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 处理控件 IDC_ADDEND_EDIT 和变量 m_editAddend 之间的数据交换</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">DDX_Text</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">,</span> IDC_ADDEND_EDIT<span class=\"token punctuation\">,</span> m_editAddend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 处理控件 IDC_SUM_EDIT 和变量 m_editSum 之间的数据交换</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">DDX_Text</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">,</span> IDC_SUM_EDIT<span class=\"token punctuation\">,</span> m_editSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>数据交换机制</strong>：</p>\n<p>如果在程序运行界面中输入被加数，通过 <code>CAdditionTestDlg</code>  的 <code>DoDataExchange()</code>  函数可以将输入的值保存到 <code>m_editSummand</code>  变量中；反之，如果程序运行中修改了变量 <code>m_editSummand</code>  的值，则通过 <code>CAdditionTestDlg</code>  的 <code>DoDataExchange()</code>  函数也可以将新的变量值显示到被加数的编辑框中。</p>\n<p><strong>但这种数据交换机制中，DoDataExchange () 函数并不是自动调用的，而是需要我们在程序中调用 CDialogEx::UpdateData () 函数，由 UpdateData () 再去自动调用 DoDataExchange ()</strong></p>\n</blockquote>\n<p><code>CDialogEx::UpdateData()</code>  函数原型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>BOOL bSaveAndValidate <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>bSaveAndValidate</code>  用于指示数据传输的方向， <code>TRUE</code>  表示从控件传给变量， <code>FALSE</code>  表示从变量传给控件。默认为 <code>TRUE</code> ，从控件传给变量。</li>\n<li>返回值表示操作是否成功。</li>\n</ul>\n<h1 id=\"为对话框控件添加消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#为对话框控件添加消息处理函数\">#</a> 为对话框控件添加消息处理函数</h1>\n<h2 id=\"预处理器afx_design_time\"><a class=\"markdownIt-Anchor\" href=\"#预处理器afx_design_time\">#</a> 预处理器 AFX_DESIGN_TIME</h2>\n<pre><code class=\"language-CPP\">#ifdef AFX_DESIGN_TIME\n\tenum &#123; IDD = IDD_LOGIN_DIALOG &#125;;\n#endif\n</code></pre>\n<p>类向导使用它来将对话框 ID（ <code>IDD_LOGIN_DIALOG</code> ）映射到对话框类（派生自 CDialogEx）</p>\n<p>删除掉这部分，程序可以正常编译，但类向导不能再正常工作，无法读取到类中的成员函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 旧版本的 Visual Studio 中，对话框类的构造函数如下：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CAdditionTestDlg</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span> pParent <span class=\"token comment\">/*=NULL*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token operator\">:</span> <span class=\"token function\">CDialogEx</span><span class=\"token punctuation\">(</span>CAdditionTestDlg<span class=\"token double-colon punctuation\">::</span>IDD<span class=\"token punctuation\">,</span> pParent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span>        </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//CAdditionTestDlg::IDD 编译时实际使用了符号，没有 #ifdef AFX_DESIGN_TIME</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 新版本的 Visual Studio 中，对话框类的构造函数如下：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">LoginDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">LoginDlg</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span> pParent <span class=\"token comment\">/*=nullptr*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token operator\">:</span> <span class=\"token function\">CDialogEx</span><span class=\"token punctuation\">(</span>IDD_LOGIN_DIALOG<span class=\"token punctuation\">,</span> pParent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">AFX_DESIGN_TIME</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span> IDD <span class=\"token operator\">=</span> IDD_LOGIN_DIALOG <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h2 id=\"添加消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#添加消息处理函数\">#</a> 添加消息处理函数</h2>\n<ul>\n<li>\n<p>使用类向导添加消息处理函数</p>\n<p><img data-src=\"image-20230525133212478.png\" alt=\"image-20230525133212478\"></p>\n</li>\n<li>\n<p>通过资源视图 “Add Event Handler…” 添加消息处理函数</p>\n<p>在按钮控件上点击右键进入</p>\n<p><img data-src=\"image-20230525133538866.png\" alt=\"image-20230525133538866\"></p>\n</li>\n<li>\n<p>在控件的属性视图中添加消息处理函数</p>\n<p><img data-src=\"image-20230525133733319.png\" alt=\"image-20230525133733319\"></p>\n</li>\n<li>\n<p>双击控件添加消息处理函数</p>\n<p>最直接最简单的方法，双击 “计算” 按钮，MFC 会自动为其在 CAdditionDlg 类中添加 <code>BN_CLICKED</code>  消息的处理函数 <code>OnBnClickedAddButton()</code></p>\n</li>\n</ul>\n<h2 id=\"在消息处理函数中添加自定义功能\"><a class=\"markdownIt-Anchor\" href=\"#在消息处理函数中添加自定义功能\">#</a> 在消息处理函数中添加自定义功能</h2>\n<p>添加消息处理函数之后，得到一个空的 <code>OnBnClickedAddButton()</code>  函数的函数体，要实现我们想要的功能，还需要在函数体中加入自定义功能代码。</p>\n<p>要实现加法功能：获取被加数和加数的数值，然后计算他们的和并显示到和的编辑框里。函数体为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedAddButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加控件通知处理程序代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 将各控件中的数据保存到相应的位置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 将被加数和加数的和赋值给 m_editSum</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tm_editSum <span class=\"token operator\">=</span> m_editSummand <span class=\"token operator\">+</span> m_editAddend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 根据各变量的值更新相应的控件。和编辑框会显示 m_editSum 的值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"设置控件的tab顺序\"><a class=\"markdownIt-Anchor\" href=\"#设置控件的tab顺序\">#</a> 设置控件的 Tab 顺序</h2>\n<ul>\n<li>Ctrl+D</li>\n<li>主菜单 -&gt;format-&gt;tab order</li>\n</ul>\n<h1 id=\"模态与非模态对话框及其弹出过程\"><a class=\"markdownIt-Anchor\" href=\"#模态与非模态对话框及其弹出过程\">#</a> 模态与非模态对话框及其弹出过程</h1>\n<ul>\n<li>\n<p>模态对话框</p>\n<p>弹出后，本应用程序其他窗口不再接受用户输入，只有该对话框相应用户输入，在对他进行操作退出后，其他窗口才能继续与用户交互。</p>\n</li>\n<li>\n<p>非模态对话框</p>\n<p>弹出后，本应用程序其他窗口仍能相应用户输入。非模态对话框一般用来显示提示信息等。</p>\n</li>\n<li>\n<p><strong>对话框是怎么弹出的？</strong></p>\n<p>应用程序 App 类实例的初始化工作由 <code>CAdditionTestApp::InitInstance()</code>  实现</p>\n<p>其中后半段有定义对话框对象并弹出对话框：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CAdditionTestDlg dlg<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 定义对话框类 CAdditionDlg dlg</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tm_pMainWnd <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dlg<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 将 dlg 设置为主窗口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tINT_PTR nResponse <span class=\"token operator\">=</span> dlg<span class=\"token punctuation\">.</span><span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 弹出对话框 dlg，并将 DoModal 函数返回值（退出时点击按钮的 ID）赋值给 nResponse</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nResponse <span class=\"token operator\">==</span> IDOK<span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 判断返回值是否为 OK 按钮（其 ID 为 IDOK，已删除）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">// TODO: “确定” 来关闭对话框的代码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nResponse <span class=\"token operator\">==</span> IDCANCEL<span class=\"token punctuation\">)</span>\t\t\t\t\t\t<span class=\"token comment\">// 判断返回值是否为 Cancel 按钮（其 ID 为 IDCANCEL，退出按钮）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// TODO: “取消” 来关闭对话框的代码</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>弹出对话框比较关键的一个函数，就是对话框类的<strong> DoModal () 函数</strong>。</p>\n<p><code>CDialog::DoModal()</code>  函数的原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">virtual</span> INT_PTR <span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>返回值：整数值，指定了传递给 <code>CDialog::EndDialog</code> （该函数用于关闭对话框）的 <code>nResult</code>  参数值。如果不能创建对话框，则返回 <code>-1</code> ；如果出现其他错误，则返回 <code>IDABORT</code></li>\n<li>调用了它对话框就会弹出，<strong>返回值是退出对话框时所点的按钮的 ID</strong>，比如，点击 “退出” 按钮，那么 <code>DoModal</code>  返回值就是 <code>IDCANCEL</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"添加模态对话框并弹出它\"><a class=\"markdownIt-Anchor\" href=\"#添加模态对话框并弹出它\">#</a> 添加模态对话框并弹出它</h2>\n<ol>\n<li>\n<p>右键资源文件中 “Dialog” 文件夹，插入 Dialog，创建一个新的对话框模板</p>\n<p>设置 ID 为 <code>IDD_TIP_DIALOG</code> ，Caption 为 “提示 “</p>\n</li>\n<li>\n<p>在对话框模板上右键选择 Add Class… 添加对话框类</p>\n<p>设置 &quot;class name&quot; 为 CTipDlg，在 Solution Explorer 中生成 TipDlg.h 和 TipDlg.cpp.</p>\n</li>\n<li>\n<p>要在点” 计算 “按钮之后弹出此提示对话框，那么就要在” 计算 “按钮的消息处理函数 <code>OnBnClickedAddButton()</code>  中访问提示对话框类。所以为了访问 CTipDlg 类，在 AdditionTestDlg.cpp 中包含 CTipDlg 的头文件 <code>#include &quot;TipDlg.h&quot;</code></p>\n</li>\n<li>\n<p>修改 <code>OnBnClickedAddButton()</code>  的函数体，在所有代码之前，构造 CTipDlg 类的对象 tipDlg，并通过语句 <code>tipDlg.DoModal();</code>  弹出对话框，最后判断 <code>DoModal()</code>  函数的返回值是 <code>IDOK</code>  还是 <code>IDCANCEL</code>  来确定是否继续进行计算。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedAddButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 用于保存 DoModal 函数的返回值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tINT_PTR nRes<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 构造对话框类 CTipDlg 的实例</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tCTipDlg tipDlg<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 弹出对话框</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tnRes <span class=\"token operator\">=</span> tipDlg<span class=\"token punctuation\">.</span><span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 判断对话框退出后返回值是否为 IDCANCEL，如果是则 return, 否则继续向下执行</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IDCANCEL <span class=\"token operator\">==</span> nRes<span class=\"token punctuation\">)</span>\t\t\t\t\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 将各控件中的数据保存到相应的位置</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 将被加数和加数的和赋值给 m_editSum</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tm_editSum <span class=\"token operator\">=</span> m_editSummand <span class=\"token operator\">+</span> m_editAddend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 根据各变量的值更新相应的控件。和编辑框会显示 m_editSum 的值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试</p>\n</li>\n</ol>\n<h2 id=\"添加非模态对话框并显示\"><a class=\"markdownIt-Anchor\" href=\"#添加非模态对话框并显示\">#</a> 添加非模态对话框并显示</h2>\n<p>非模态对话框显示后，程序其他窗口仍然能正常运行，可以响应用户输入，还可以相互切换。</p>\n<p>实际上，模态和非模态对话框在创建对话框资源和生成对话框类上是没有区别的。</p>\n<p>需要修改的是，对话框类实例的创建和显示，也就是在 <code>CAdditionTestDlg::OnBnClickedAddButton()</code>  函数体中添加的对话框显示代码。具体步骤：</p>\n<ol>\n<li>\n<p>在 AdditionTestDlg.h 中包含 CTipDlg 头文件并定义 CTipDlg 类型的指针成员变量。</p>\n<p>删除 <code>AdditionTestDlg.cpp</code>  中包含的 <code>#include &quot;TipDlg.h&quot;</code> ，而在 <code>AdditionTestDlg.h</code>  中包含 <code>#include &quot;TipDlg.h&quot;</code> ，因为我们要在 <code>AdditionTestDlg.h</code>  中定义 CTipDlg 类型的指针变量，所以要先包含它的头文件；然后在 <code>AdditionTestDlg.h</code>  中为 CAdditionTestDlg 类添加 private 成员变量 <code>CTipDlg *m_pTipDlg;</code></p>\n</li>\n<li>\n<p>在 <code>CAdditionTestDlg</code>  类的狗在函数中初始化成员变量 <code>m_pTipDlg(NULL)</code></p>\n</li>\n<li>\n<p>修改 <code>CAdditionTestDlg::OnBnClickedAddButton()</code>  函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedAddButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加控件通知处理程序代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 模态对话框</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tINT_PTR nRes;\t\t\t\t\t\t\t// 用于保存 DoModal 函数的返回值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tCTipDlg tipDlg;\t\t\t\t\t\t\t// 构造对话框类 CTipDlg 的实例</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tnRes = tipDlg.DoModal ();\t\t\t\t// 弹出对话框</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tif (IDCANCEL == nRes)\t\t\t\t\t// 判断对话框退出后返回值是否为 IDCANCEL，如果是则 return, 否则继续向下执行</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\treturn;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 非模态对话框</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 动态创建对话框</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_pTipDlg <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 创建非模态对话框实例</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tm_pTipDlg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CTipDlg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tm_pTipDlg<span class=\"token operator\">-></span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>IDD_TIP_DIALOG<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 显示非模态对话框</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tm_pTipDlg<span class=\"token operator\">-></span><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>SW_SHOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 将各控件中的数据保存到相应的位置</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 将被加数和加数的和赋值给 m_editSum</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tm_editSum <span class=\"token operator\">=</span> m_editSummand <span class=\"token operator\">+</span> m_editAddend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 根据各变量的值更新相应的控件。和编辑框会显示 m_editSum 的值</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>因为此对话框实例是动态创建的，所以需要手动删除动态对象来销毁对话框。我们在 CAdditionTestDlg 类的析构函数中添加删除代码。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">CAdditionTestDlg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 如果非模态对话框已经创建则删除它</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_pTipDlg <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span> m_pTipDlg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试。</p>\n</li>\n</ol>\n<h1 id=\"属性页对话框及其相关类\"><a class=\"markdownIt-Anchor\" href=\"#属性页对话框及其相关类\">#</a> 属性页对话框及其相关类</h1>\n<p>右键点属性弹出的对话框，通过标签切换各个界面。</p>\n<p>主要用到的类：CPropertyPage 类和 CPropertySheet 类。</p>\n<ul>\n<li>\n<p>CPropertyPage 类</p>\n<p>CPropertyPage 类继承自 CDialog 类，它被用于处理某单个属性页，所以要为每个属性页都创建一个继承自 CPropertyPage 类的子类</p>\n<ul>\n<li>\n<p>构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 第一个是没有任何参数的构造函数。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">CPropertyPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 第二个构造函数中，参数 nIDTemplate 是属性页的对话框资源 ID，参数 nIDCaption 是属性页对话框选项卡的标题所用字符串资源的 ID，若设为 0，则选项卡标题就使用该属性页的对话框资源的标题。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">CPropertyPage</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tUINT nIDTemplate<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    UINT nIDCaption <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    DWORD dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROPSHEETPAGE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 第三个构造函数中，参数 lpszTemplateName 为属性页的对话框资源的名称字符串，不能为 NULL。参数 nIDCaption 同上。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">CPropertyPage</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tLPCTSTR lpszTemplateName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    UINT nIDCaption <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    DWORD dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROPSHEETPAGE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>CancelToClose()</code>  函数</p>\n<p>在模态属性页对话框的属性页进行了某不可恢复的操作后，使用 <code>CancelToClose()</code>  函数将 “OK” 按钮改为 “Close” 按钮，并禁用 “Cancel” 按钮。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CancelToClose</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>SetModified()</code>  函数</p>\n<p>调用此函数可激活或禁用 “Apply” 按钮，函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetModified</span><span class=\"token punctuation\">(</span>BOOL bChanged <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>可重载函数</p>\n<p>CPropertyPage 类提供了一些消息处理函数，来响应属性页对话框的各种消息。我们重载这些消息处理函数，就可以自定义对属性页对话框操作的处理。可重载的消息处理函数包括：</p>\n<ul>\n<li><code>OnApply</code> ：处理属性页的 “Apply” 按钮被单击的消息</li>\n<li><code>OnCancel</code> ：处理属性页的 “Cancel” 按钮被单击的消息</li>\n<li><code>OnKillActive</code> ：处理属性页当前活动状态被切换的消息，常用于数据验证</li>\n<li><code>OnOK</code> ：处理属性页的 “OK” 按钮、“Apply” 按钮或者 “Close” 按钮被单击的消息</li>\n<li><code>OnQueryCancel</code> ：处理属性页的 “Cancel” 按钮被单击前发出的消息</li>\n<li><code>OnReset</code> ：处理属性页的 “Reset” 按钮被单击的消息</li>\n<li><code>OnSetActive</code> ：处理属性页被切换为当前活动页的消息</li>\n<li><code>OnWizardBack</code> ：处理属性页的 “Back” 按钮被单击的消息，仅在向导对话框中有效</li>\n<li><code>OnWizardFinish</code> ：处理属性页的 “Finish” 按钮被单击的消息，仅在向导对话框中有效</li>\n<li><code>OnWizardNext</code> ：处理属性页的 “Next” 按钮被单击的消息，仅在向导对话框中有效</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>CPropertySheet</code>  类</p>\n<p><code>CPropertySheet</code>  类继承自 <code>CWnd</code>  类，它是属性表类，负责加载、打开或删除属性页，并可以在属性页对话框中切换属性页，和对话框类似有模态和非模态两种。</p>\n<ul>\n<li>\n<p>构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">CPropertySheet</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">CPropertySheet</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    UINT nIDCaption<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    CWnd<span class=\"token operator\">*</span> pParentWnd <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    UINT iSelectPage <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">CPropertySheet</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    LPCTSTR pszCaption<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    CWnd<span class=\"token operator\">*</span> pParentWnd <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    UINT iSelectPage <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>nIDCaption</code> ：标题的字符串资源的 ID。</li>\n<li>参数 <code>pParentWnd</code> ：属性页对话框的父窗口，若设为 NULL，则父窗口为应用程序的主窗口。</li>\n<li>参数 <code>iSelectPage</code> ：初始状态时，活动属性页的索引，默认为第一个添加到属性表的属性页。</li>\n<li>参数 <code>pszCaption</code> ：标题字符串。</li>\n</ul>\n</li>\n<li>\n<p><code>GetActiveIndex()</code>  函数</p>\n<p>获取当前活动属性页的索引。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">GetActiveIndex</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>返回值：当前活动属性页的索引。</li>\n</ul>\n</li>\n<li>\n<p><code>GetActivePage()</code>  函数</p>\n<p>获取当前活动属性页对象。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CPropertyPage<span class=\"token operator\">*</span> <span class=\"token function\">GetActivePage</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>返回值：当前活动属性页对象的指针。</li>\n</ul>\n</li>\n<li>\n<p><code>GetPage()</code>  函数</p>\n<p>获取某个属性页对象。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CPropertyPage<span class=\"token operator\">*</span> <span class=\"token function\">GetPage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nPage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>nPage</code> ：目标属性页的索引。</li>\n<li>返回值：目标属性页对象的指针。</li>\n</ul>\n</li>\n<li>\n<p><code>GetPageCount()</code>  函数</p>\n<p>获取属性页的数量。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">GetPageCount</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>GetPageIndex()</code>  函数</p>\n<p>获取某属性页在属性页对话框中的索引。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">GetPageIndex</span><span class=\"token punctuation\">(</span>CPropertyPage<span class=\"token operator\">*</span> pPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>pPage</code> ：要获取索引的属性页对象的指针。</li>\n<li>返回值：属性页对象在属性页对话框中的索引。</li>\n</ul>\n</li>\n<li>\n<p><code>SetActivePage()</code>  函数</p>\n<p>设置某个属性页为活动属性页。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">SetActivePage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>BOOL <span class=\"token function\">SetActivePage</span><span class=\"token punctuation\">(</span>CPropertyPage<span class=\"token operator\">*</span> pPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>nPage</code> ：要设置为活动属性页的索引。</li>\n<li>参数 <code>pPage</code> ：要设置为活动属性页的对象指针。</li>\n</ul>\n</li>\n<li>\n<p><code>SetWizardButtons()</code>  函数</p>\n<p>在向导对话框上启用或禁用 Back、Next 或 Finish 按钮，应在调用 DoModal 之前调用此函数。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetWizardButtons</span><span class=\"token punctuation\">(</span>DWORD dwFlags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数 <code>dwFlags</code> ：设置向导按钮的外观和功能属性。可以是以下值的组合：</p>\n<ul>\n<li>PSWIZB_BACK          启用 “Back” 按钮，如果不包含此值则禁用 “Back” 按钮。</li>\n<li>PSWIZB_NEXT          启用 “Next” 按钮，如果不包含此值则禁用 “Next” 按钮。</li>\n<li>PSWIZB_FINISH         启用 “Finish” 按钮。</li>\n<li>PSWIZB_DISABLEDFINISH  显示禁用的 “Finish” 按钮。</li>\n</ul>\n</li>\n<li>\n<p><code>SetWizardMode()</code>  函数</p>\n<p>设置属性页对话框为向导对话框模式，应在调用 DoModal 之前调用此函数。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetWizardMode</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>SetTitle()</code>  函数</p>\n<p>设置属性对话框的标题。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetTitle</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    LPCTSTR lpszText<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT nStyle <span class=\"token operator\">=</span> <span class=\"token number\">0</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>参数 <code>lpszText</code> ：标题字符串。</p>\n</li>\n<li>\n<p>参数 <code>nStyle</code> ：指定属性表标题的风格。应当为 0 或 PSH_PROPTITLE。如果设为 PSH_PROPTITLE，则单词 “Properties” 会出现在指定标题之后。</p>\n<p>例如， <code>SetTitle(&quot;Simple&quot;,PSH_PROPTITLE)</code>  这种调用会使得属性表标题为 “Simple Properties”。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>AddPage()</code>  函数</p>\n<p>为属性对话框添加新的属性页。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddPage</span><span class=\"token punctuation\">(</span>CPropertyPage <span class=\"token operator\">*</span>pPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数 <code>pPage</code> ：要添加的新的属性页的对象指针。</p>\n</li>\n<li>\n<p><code>PressButton()</code>  函数</p>\n<p>模拟按下某指定的按钮。函数原型为</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PressButton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数 <code>nButton</code> ：要模拟按下的按钮，它可以是下列值之一：</p>\n<ul>\n<li>PSBTN_BACK  选择 “Back” 按钮。</li>\n<li>PSBTN_NEXT  选择 “Next” 按钮。</li>\n<li>PSBTN_FINISH  选择 “Finish” 按钮。</li>\n<li>PSBTN_OK  选择 “OK” 按钮。</li>\n<li>PSBTN_APPLYNOW  选择 “Apply” 按钮。</li>\n<li>PSBTN_CANCEL  选择 “Cancel” 按钮。</li>\n<li>PSBTN_HELP  选择 “帮助” 按钮。</li>\n</ul>\n</li>\n<li>\n<p><code>RemovePage()</code>  函数</p>\n<p>删除某属性页。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemovePage</span><span class=\"token punctuation\">(</span>CPropertyPage <span class=\"token operator\">*</span>pPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemovePage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>pPage</code> ：要删除的属性页的对象指针。</li>\n<li>参数 <code>nPage</code> ：要删除的属性页的索引。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"向导对话框\"><a class=\"markdownIt-Anchor\" href=\"#向导对话框\">#</a> 向导对话框</h1>\n<h1 id=\"消息对话框\"><a class=\"markdownIt-Anchor\" href=\"#消息对话框\">#</a> 消息对话框</h1>\n<h1 id=\"文件对话框\"><a class=\"markdownIt-Anchor\" href=\"#文件对话框\">#</a> 文件对话框</h1>\n<h1 id=\"字体对话框\"><a class=\"markdownIt-Anchor\" href=\"#字体对话框\">#</a> 字体对话框</h1>\n<h1 id=\"颜色对话框\"><a class=\"markdownIt-Anchor\" href=\"#颜色对话框\">#</a> 颜色对话框</h1>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/05/26/MFC%E6%B6%88%E6%81%AF%E6%98%A0%E5%B0%84%E6%9C%BA%E5%88%B6/",
            "url": "https://adventure-yx.github.io/2023/05/26/MFC%E6%B6%88%E6%81%AF%E6%98%A0%E5%B0%84%E6%9C%BA%E5%88%B6/",
            "title": "MFC 消息映射机制",
            "date_published": "2023-05-26T02:12:08.000Z",
            "content_html": "<h1 id=\"mfc消息映射机制\"><a class=\"markdownIt-Anchor\" href=\"#mfc消息映射机制\">#</a> MFC 消息映射机制</h1>\n<p><strong>Windows 应用程序是消息驱动的</strong>。在 MFC 软件开发中，界面操作或者线程之间通信都会用到消息，<strong>通过对消息的处理实现相应的操作</strong>。比较典型的过程是，用户操作窗口，然后有消息产生，送给窗口的消息处理函数处理，对用户的操作做出响应。</p>\n<h1 id=\"什么是消息\"><a class=\"markdownIt-Anchor\" href=\"#什么是消息\">#</a> 什么是消息</h1>\n<p>窗口消息一般由三个部分组成：</p>\n<ul>\n<li>一个无符号整数，是消息值；</li>\n<li>消息附带的 WPARAM 类型的参数；</li>\n<li>消息附带的 LPARAM 类型的参数。</li>\n</ul>\n<p>实际一般所说的是狭义上的消息值，也就是一个无符号整数，经常被定义为宏。</p>\n<h1 id=\"什么是消息映射机制\"><a class=\"markdownIt-Anchor\" href=\"#什么是消息映射机制\">#</a> 什么是消息映射机制</h1>\n<p>MFC 使用一种消息映射机制来处理消息，在应用程序框架中的表现就是，<strong>一个消息与消息处理函数 —— 对应的消息映射表，以及消息处理函数的声明和实现等代码</strong>。</p>\n<p>当窗口收到消息时，会到消息映射表中查找该消息对应的消息处理函数，然后由消息处理函数进行相应的处理。</p>\n<p>SDK 编程时需要在窗口过程中 —— 判断消息值进行相应的处理，相比之下 MFC 的消息映射机制要方便好用的多。</p>\n<h1 id=\"windows消息分类\"><a class=\"markdownIt-Anchor\" href=\"#windows消息分类\">#</a> Windows 消息分类</h1>\n<p>Windows 消息分为<strong>系统消息</strong>和<strong>用户自定义消息</strong>。系统消息有三种：</p>\n<ul>\n<li><strong>标准 Windows 消息</strong>。除 WM_COMMAND 外的 WM_开头的消息是标准消息。例如：WM_CREATE、WM_CLOSE。</li>\n<li><strong>命令消息</strong>。WM_COMMAND，消息中附带了标志符 ID 来区分是来自哪个菜单、工具栏按钮或加速键的消息。</li>\n<li><strong>通知消息</strong>。通知消息一般由列表框等子窗口发送给父窗口，消息名也是 WM_COMMAND，其中附带了控件通知码来区分控件。</li>\n</ul>\n<p><strong>CWnd 的派生类都可以接收到标准 Windows 消息、通知消息和命令消息。命令消息还可以由文档类等接收。</strong></p>\n<p><strong>用户自定义消息实际上就是用户定义一个宏作为消息，此宏的值应该大于等于 WM_USER，然后宏就可以跟系统消息一样使用，窗口类中可以定义它的处理函数。</strong></p>\n<h1 id=\"消息映射表\"><a class=\"markdownIt-Anchor\" href=\"#消息映射表\">#</a> 消息映射表</h1>\n<p>除了一些没有基类的类或 CObject 的直接派生类外，其他的类都可以自动生成消息映射表。</p>\n<p>消息映射表如下（CMainFrame.cpp）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">BEGIN_MESSAGE_MAP</span><span class=\"token punctuation\">(</span>CMainFrame<span class=\"token punctuation\">,</span> CFrameWndEx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">ON_WM_CREATE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ON_COMMAND</span><span class=\"token punctuation\">(</span>ID_VIEW_CUSTOMIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnViewCustomize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">ON_REGISTERED_MESSAGE</span><span class=\"token punctuation\">(</span>AFX_WM_CREATETOOLBAR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnToolbarCreateNew<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">ON_COMMAND_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">ON_UPDATE_COMMAND_UI_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnUpdateApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">ON_WM_SETTINGCHANGE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">END_MESSAGE_MAP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 <code>BEGIN_MESSAGE_MAP</code>  和 <code>END_MESSAGE_MAP</code>  之间的内容成为消息映射入口项。</p>\n<p>消息映射除了在 <code>CMainFrame</code>  的实现文件中添加消息映射表外，在类的定义文件 <code>MainFrm.h</code>  中还会添加一个宏调用： <code> DECLEAR_MESSAGE_MAP</code></p>\n<p>一般这个宏调用写在类定义的结尾处。</p>\n<h1 id=\"添加消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#添加消息处理函数\">#</a> 添加消息处理函数</h1>\n<ol>\n<li>\n<p>在类定义中加入消息处理函数的函数声明，以 <code>afx_msg</code>  打头。例如 MainFrm.h 中的声明：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>afx_msg <span class=\"token keyword\">int</span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>LPCREATESTRUCT lpCreateStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>afx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnViewCustomize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>afx_msg LRESULT <span class=\"token function\">OnToolbarCreateNew</span><span class=\"token punctuation\">(</span>WPARAM wp<span class=\"token punctuation\">,</span> LPARAM lp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>afx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnApplicationLook</span><span class=\"token punctuation\">(</span>UINT id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>afx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnUpdateApplicationLook</span><span class=\"token punctuation\">(</span>CCmdUI<span class=\"token operator\">*</span> pCmdUI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>afx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnSettingChange</span><span class=\"token punctuation\">(</span>UINT uFlags<span class=\"token punctuation\">,</span> LPCTSTR lpszSection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在类的消息映射表中添加该消息的消息映射入口项。例如 MainFrm.h 中的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_WM_CREATE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ON_COMMAND</span><span class=\"token punctuation\">(</span>ID_VIEW_CUSTOMIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnViewCustomize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ON_REGISTERED_MESSAGE</span><span class=\"token punctuation\">(</span>AFX_WM_CREATETOOLBAR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnToolbarCreateNew<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ON_COMMAND_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ON_UPDATE_COMMAND_UI_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnUpdateApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">ON_WM_SETTINGCHANGE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>在类的实现中添加消息处理函数的函数实现。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">CMainFrame</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>LPCREATESTRUCT lpCreateStruct<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>通过以上 3 个步骤后， <code>WM_CREATE</code>  等消息就可以在窗口类中被消息处理函数处理了。</p>\n<h1 id=\"各种windows消息的消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#各种windows消息的消息处理函数\">#</a> 各种 Windows 消息的消息处理函数</h1>\n<blockquote>\n<p>标准 Windows 消息。除 WM_COMMAND 外的 WM_开头的消息是标准消息。例如：WM_CREATE、WM_CLOSE。</p>\n</blockquote>\n<p>标准 Windows 消息的消息处理函数都与 WM_CREATE 消息类似。</p>\n<blockquote>\n<p>命令消息。WM_COMMAND，消息中附带了标志符 ID 来区分是来自哪个菜单、工具栏按钮或加速键的消息。</p>\n</blockquote>\n<p>命令消息的消息映射入口如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_COMMAND</span><span class=\"token punctuation\">(</span>ID_VIEW_CUSTOMIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnViewCustomize<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>消息为 <code>ID_VIEW_CUSTOMIZE</code></li>\n<li>消息处理函数为 <code>OnViewCustomize</code></li>\n</ul>\n<p>如果想用批量处理函数批量处理这些命令消息，则可以像 CMainFrame 消息映射表中的：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_COMMAND_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>值在 <code>ID_VIEW_APPLOOK_WIN_2000</code>  到 <code>ID_VIEW_APPLOOK_WINDOWS_7</code>  之间的菜单项等命令消息都由 CMainFrame 的 <code>OnApplicationLook</code>  函数处理。</li>\n<li>函数原型为 <code>afx_msg void OnApplicationLook(UINT id);</code></li>\n<li>参数 id 为用户操作的菜单项等的 ID</li>\n</ul>\n<blockquote>\n<p>通知消息。通知消息一般由列表框等子窗口发送给父窗口，消息名也是 WM_COMMAND，其中附带了控件通知码来区分控件。</p>\n</blockquote>\n<p>在操作列表框等控件时往往会给父窗口发送 <code>WM_NOTIFY</code>  通知消息。</p>\n<p><code>WM_NOTIFY</code>  消息的 <code>WPARAM</code>  参数为发送通知消息的控件的 ID； <code> LPARAM</code>  参数指向一个结构体，可能是 NMHDR 结构体，也可能是第一个元素为 NMHDR 结构体变量的其他结构体。</p>\n<p>NMHDR 结构体定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Typedef <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagNMHDR</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    HWND hwndFrom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT idFrom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    UINT code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>NMHDR<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>hwndFrom 为发送通知消息控件的句柄；</li>\n<li>idFrom 为控件 ID；</li>\n<li>code 为要处理的通知消息的通知码，例如 NM_CLICK</li>\n</ul>\n<p>通知消息的消息映射入口形式如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_NOTIFY</span><span class=\"token punctuation\">(</span>wNotifyCode<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> memberFxn<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>wNotifyCode 为要处理的通知消息通知码；</li>\n<li>id 为控件标识 ID；</li>\n<li>memberFxn 为此消息的消息处理函数。</li>\n</ul>\n<blockquote>\n<p>用户自定义消息</p>\n<ol>\n<li>定义消息宏</li>\n<li>在消息映射表中添加消息映射入口项</li>\n<li>在 MainFrm.h 中添加消息处理函数的函数声明</li>\n<li>在 MainFrm.cpp 中实现此函数</li>\n</ol>\n</blockquote>\n<h1 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/05/25/MFC%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6/",
            "url": "https://adventure-yx.github.io/2023/05/25/MFC%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6/",
            "title": "MFC 应用程序框架",
            "date_published": "2023-05-25T02:12:08.000Z",
            "content_html": "<h1 id=\"vs应用程序工程中文件的组成结构\"><a class=\"markdownIt-Anchor\" href=\"#vs应用程序工程中文件的组成结构\">#</a> VS 应用程序工程中文件的组成结构</h1>\n<p>如果已经以 Debug 方式编译链接过程序，则会在解决方案文件夹下和工程子文件夹下各有一个名为 “Debug” 的文件夹，而如果是 Release 方式编译则会有名为 “Release” 的文件夹。这两种编译方式将产生两种不同版本的可执行文件：</p>\n<ul>\n<li>\n<p>Debug 版本</p>\n<p>可执行文件中包含了用于调试的信息和代码。</p>\n</li>\n<li>\n<p>Release 版本</p>\n<p>没有调试信息，不能进行调试，但可执行文件较小。</p>\n</li>\n</ul>\n<p>工程中文件结构：</p>\n<ol>\n<li>\n<p>解决方案相关文件</p>\n<p>包括解决方案文件夹下的.sdf 文件、.sln 文件、.suo 文件和 ipch 文件夹。</p>\n<p>.sdf 文件和 ipch 目录一般与智能提示、错误提示、代码恢复和团队本地仓库有关。</p>\n<p>.sln 文件和.suo 文件为 MFC 自动生成的解决方案文件，它包含当前解决方案中的工程信息，存储解决方案的设置。</p>\n</li>\n<li>\n<p>工程相关文件</p>\n<p>包括工程文件夹下的.vcxproj 文件和.vcxproj.filters 文件。</p>\n<p>.vcxproj 文件是 MFC 生成的工程文件，它包含当前工程的设置和工程所包含的文件等信息。</p>\n<p>.vcxproj.filters 文件存放工程的虚拟目录信息，也就是在解决方案浏览器中的目录结构信息。</p>\n</li>\n<li>\n<p>应用程序头文件和源文件</p>\n<p>应用程序向导（MFC Application Wizard）会根据应用程序的类型（单文档、多文档或基于对话框的程序）自动生成一些头文件和源文件，这些文件是工程的主体部分，用于实现主框架、文档、视图等。</p>\n<ul>\n<li>HelloWorld.h：应用程序的主头文件。主要包含由 CWinAppEx 类派生的 CHelloWorldApp 类的声明，以及 CHelloWorldApp 类的全局对象 theApp 的声明。</li>\n<li>HelloWorld.cpp：应用程序的主源文件。主要包含 CHelloWorldApp 类的实现，CHelloWorldApp 类的全局对象 theApp 的声明。</li>\n<li>MainFrm.h 和 MainFrm.cpp：从 CFrameWndEx 类派生出 CMainFrame 类，用于创建主框架、菜单栏、工具栏、状态栏等。</li>\n<li>HelloWorldDoc.h 和 HelloWorldDoc.cpp：从 CDocument 类派生出 CHelloWorldDoc 文档类，包含一些用来初始化文档、串行化（保存和装入）文档和调试的成员函数。</li>\n<li>HelloWorldView.h 和 HelloWorldView.cpp：从 CView 类派生出 CHelloWorldView 视图类，用来显示和打印文档数据，包含了一些绘图和用于调试的成员函数。</li>\n<li>ClassView.h 和 ClassView.cpp：从 CDockablePane 类派生出 CClassView 类，用于实现应用程序左侧面板的 Class View。</li>\n<li>FlieView.h 和 FlieView.cpp：从 CDockablePane 类派生出 CFlieView 类，用于实现应用程序左侧面板的 Flie View。</li>\n<li>OutputWnd.h 和 OutputWnd.cpp：从 CDockablePane 类派生出 COutputWnd 类，用于实现应用程序下侧面板的 Output。</li>\n<li>PropertiesWnd.h 和 PropertiesWnd.cpp：从 CDockablePane 类派生出 CPropertiesWnd 类，用于实现应用程序右侧面板的 Properties。</li>\n<li>ViewTree.h 和 ViewTree.cpp：由 CTreeCtrl 类派生出 CViewTree 类，用于实现出现在 ClassView 和 FileView 中的树视图。</li>\n</ul>\n</li>\n<li>\n<p>资源文件</p>\n<p>一般使用 MFC 生成窗口程序都会有对话框、图标、菜单等资源，应用程序向导会生成资源相关文件：res 目录、HelloWorld.rc 文件和 Resource.h 文件。</p>\n<ul>\n<li>res 目录：工程文件夹下的 res 目录中含有应用程序默认图标、工具栏使用图标等图标文件。</li>\n<li>HelloWorld.rc：包含默认菜单定义、字符串表和加速键表，制定了默认的 About 对话框和应用程序默认图标文件等。</li>\n<li>Resource.h：含有各种资源的 ID 定义。</li>\n</ul>\n</li>\n<li>\n<p>预编译头文件</p>\n<p>几乎所有 MFC 程序的文件都要包含 afxwin.h 等文件（外部依赖项），如果每次都编译一次则会大大减慢编译速度。所以把常用的 MFC 头文件都放到了 stdafx.h 中，然后由 stdafx.cpp 包含 stdafx.h 文件，编译器对 stdafx.cpp 只编译一次，并生成编译后的预编译头 HelloWorld.pch（Precomplied Header Flie），大大提高了编译效率。</p>\n</li>\n<li>\n<p>编译链接生成的文件</p>\n<p>工程文件夹下的 Debug 和 Release 子文件夹中包含了编译链接时产生的中间文件。</p>\n<p>解决方案文件夹下的 Debug 和 Release 子文件夹中主要包含有应用程序的可执行文件。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"mfc应用程序框架分析\"><a class=\"markdownIt-Anchor\" href=\"#mfc应用程序框架分析\">#</a> MFC 应用程序框架分析</h1>\n<p>程序运行都有入口函数，Windows 应用程序的入口函数时 WinMain 函数，MFC 程序也是从 WinMain 函数开始的。</p>\n<ul>\n<li>MFC 应用程序，使用 MFC 库，应用程序框架开发。</li>\n<li>SDK 应用程序，不使用 MFC 库，直接用 Windows API 函数进行软件开发。</li>\n</ul>\n<h1 id=\"sdk应用程序\"><a class=\"markdownIt-Anchor\" href=\"#sdk应用程序\">#</a> SDK 应用程序</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span>    </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>LRESULT CALLBACK <span class=\"token function\">myWndProc</span><span class=\"token punctuation\">(</span>HWND hWindow<span class=\"token punctuation\">,</span> UINT msg<span class=\"token punctuation\">,</span> WPARAM wParam<span class=\"token punctuation\">,</span> LPARAM lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> WINAPI <span class=\"token function\">WinMain</span><span class=\"token punctuation\">(</span>HINSTANCE hInstance<span class=\"token punctuation\">,</span> HINSTANCE hPrevInstance<span class=\"token punctuation\">,</span> PSTR szCmdLine<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iCmdShow<span class=\"token punctuation\">)</span>      </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">static</span> TCHAR appName<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  WNDCLASSEX myWin<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>cbSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>myWin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> CS_HREDRAW <span class=\"token operator\">|</span> CS_VREDRAW<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>lpfnWndProc <span class=\"token operator\">=</span> myWndProc<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>cbClsExtra <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>cbWndExtra <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>hInstance <span class=\"token operator\">=</span> hInstance<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>hIcon <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>hIconSm  <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>hCursor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>hbrBackground <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HBRUSH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>COLOR_WINDOW <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>lpszMenuName <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>lpszClassName <span class=\"token operator\">=</span> appName<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">//Register      </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">RegisterClassEx</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>myWin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">const</span> HWND hWindow <span class=\"token operator\">=</span> <span class=\"token function\">CreateWindow</span><span class=\"token punctuation\">(</span>      </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    appName<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    appName<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    WS_OVERLAPPEDWINDOW<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    CW_USEDEFAULT<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    CW_USEDEFAULT<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    CW_USEDEFAULT<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    CW_USEDEFAULT<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    hInstance<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>hWindow<span class=\"token punctuation\">,</span>iCmdShow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token function\">UpdateWindow</span><span class=\"token punctuation\">(</span>hWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    MSG msg<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token function\">TranslateMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token function\">DispatchMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>      </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>msg<span class=\"token punctuation\">.</span>wParam<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span>      </pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span>      </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>LRESULT CALLBACK <span class=\"token function\">myWndProc</span><span class=\"token punctuation\">(</span>HWND hWindow<span class=\"token punctuation\">,</span> UINT msg<span class=\"token punctuation\">,</span> WPARAM wParam<span class=\"token punctuation\">,</span> LPARAM lParam<span class=\"token punctuation\">)</span>      </pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token operator\">==</span>WM_PAINT<span class=\"token punctuation\">)</span>      </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    PAINTSTRUCT ps<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">const</span> HDC hDC <span class=\"token operator\">=</span> <span class=\"token function\">BeginPaint</span><span class=\"token punctuation\">(</span>hWindow<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    RECT rect<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token function\">GetClientRect</span><span class=\"token punctuation\">(</span>hWindow<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">DrawText</span><span class=\"token punctuation\">(</span>hDC<span class=\"token punctuation\">,</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO WORLD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rect<span class=\"token punctuation\">,</span> DT_SINGLELINE <span class=\"token operator\">|</span> DT_CENTER <span class=\"token operator\">|</span> DT_VCENTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">EndPaint</span><span class=\"token punctuation\">(</span>hWindow<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span>      </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token operator\">==</span>WM_DESTROY<span class=\"token punctuation\">)</span>      </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token function\">PostQuitMessage</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span>      </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">DefWindowProc</span><span class=\"token punctuation\">(</span>hWindow<span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">,</span>wParam<span class=\"token punctuation\">,</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"程序运行流程\"><a class=\"markdownIt-Anchor\" href=\"#程序运行流程\">#</a> 程序运行流程</h2>\n<ol>\n<li>进入 WinMain 函数</li>\n<li>初始化 WNDCLASSEX，调用 RegisterClassEx 函数注册窗口类</li>\n<li>调用 ShowWindow 和 UpdateWindow 函数显示并更新窗口</li>\n<li>进入消息循环</li>\n</ol>\n<blockquote>\n<p>关于消息循环</p>\n<p>Windows 应用程序是消息驱动的，系统或用户让应用程序进行某项操作或完成某个任务时会发送消息，进入程序的消息队列，然后消息循环会将消息队列中的消息取出，交予相应的窗口过程处理。</p>\n<p>此程序的窗口过程函数就是 myWndProc 函数，窗口过程函数处理完消息就完成了某项操作或任务。本例是要显示 “HELLO WORLD” 字符串，UpdateWindow 函数会发送 WM_PAINT 消息，但是此消息不经过消息队列而是直接送到窗口过程处理，在窗口过程函数中最终绘制了 “HELLO WORLD” 字符串。</p>\n</blockquote>\n<h1 id=\"mfc应用程序\"><a class=\"markdownIt-Anchor\" href=\"#mfc应用程序\">#</a> MFC 应用程序</h1>\n<p>下面是 MFC 应用程序的运行流程，通过 MFC 库中代码进行分析：</p>\n<p>首先在 HelloWorld.cpp 中定义全局对象 theApp： <code>CHelloWorldApp theApp;</code> 。调用 CWinApp 和 CHelloWorldApp 的构造函数后，进入 WinMain 函数（位于 appmodul.cpp 中）。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">int</span> WINAPI   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">_tWinMain</span><span class=\"token punctuation\">(</span>HINSTANCE hInstance<span class=\"token punctuation\">,</span> HINSTANCE hPrevInstance<span class=\"token punctuation\">,</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _In_ LPTSTR lpCmdLine<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nCmdShow<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>suppress<span class=\"token operator\">:</span> <span class=\"token number\">4985</span><span class=\"token punctuation\">)</span>   </span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// call shared/exported WinMain   </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">AfxWinMain</span><span class=\"token punctuation\">(</span>hInstance<span class=\"token punctuation\">,</span> hPrevInstance<span class=\"token punctuation\">,</span> lpCmdLine<span class=\"token punctuation\">,</span> nCmdShow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>TCHAR.h</code>  中，有此定义： <code>#define _tWinMain  WinMain</code> ，所以这里的 <code>_tWinMain</code>  就是 <code>WinMain</code>  函数。它调用了 <code>AfxWinMain</code>  函数（位于 <code>WinMain.cpp</code>  中）。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>pp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> AFXAPI <span class=\"token function\">AfxWinMain</span><span class=\"token punctuation\">(</span>HINSTANCE hInstance<span class=\"token punctuation\">,</span> HINSTANCE hPrevInstance<span class=\"token punctuation\">,</span>LPTSTR lpCmdLine<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nCmdShow<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token comment\">// App global initializations (rare)   </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pApp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>pApp<span class=\"token operator\">-></span><span class=\"token function\">InitApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              <span class=\"token keyword\">goto</span> InitFailure<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pThread<span class=\"token operator\">-></span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token comment\">// Run 函数位于 THRDCORE.cpp 中，由此函数进入消息循环   </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       nReturnCode <span class=\"token operator\">=</span> pThread<span class=\"token operator\">-></span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略   </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token keyword\">return</span> nReturnCode<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面 InitInstance 函数的代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token class-name\">CTestApp</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略       </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       CSingleDocTemplate<span class=\"token operator\">*</span> pDocTemplate<span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       pDocTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CSingleDocTemplate</span><span class=\"token punctuation\">(</span>       </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              IDR_MAINFRAME<span class=\"token punctuation\">,</span>       </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              <span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CTestDoc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>       </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              <span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CMainFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// main SDI frame window       </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              <span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CTestView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pDocTemplate<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>             <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token function\">AddDocTemplate</span><span class=\"token punctuation\">(</span>pDocTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token comment\">// Parse command line for standard shell commands, DDE, file open       </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       CCommandLineInfo cmdInfo<span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token function\">ParseCommandLine</span><span class=\"token punctuation\">(</span>cmdInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token comment\">//ProcessShellCommand 位于 AppUI2.cpp 中，注册并创建窗口       </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ProcessShellCommand</span><span class=\"token punctuation\">(</span>cmdInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>             <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>       m_pMainWnd<span class=\"token operator\">-></span><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>SW_SHOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       m_pMainWnd<span class=\"token operator\">-></span><span class=\"token function\">UpdateWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>InitInstance</code>  中的 <code>ProcessShellCommand</code>  函数又调用了 <code>CMainFrame</code>  的 <code>LoadFrame</code>  函数注册并创建了窗口，执行完 <code>ProcessShellCommand</code>  函数以后，调用了 <code>m_pMainWnd</code>  的 <code>ShowWindow</code>  和 <code>UpdateWindow</code>  函数显示并更新框架窗口。这些与上面的 SDK 程序十分类似</p>\n<p>接下来该是消息循环了，上面的 <code>AfxWinMain</code>  函数中调用了 <code>pThread</code>  的 <code>Run</code>  函数（位于 <code>THRDCORE.cpp</code>  中），在 Run 中包含了消息循环。Run 函数的代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">CWinThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略       </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// phase2: pump messages while available       </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">do</span>      </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              <span class=\"token comment\">// pump message, but quit on WM_QUIT       </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">PumpMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                     <span class=\"token keyword\">return</span> <span class=\"token function\">ExitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              <span class=\"token comment\">// reset \"no idle\" state after pumping \"normal\" message       </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsIdleMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m_msgCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              <span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                     bIdle <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                     lIdleCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span>       </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PeekMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m_msgCur<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> PM_NOREMOVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略       </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span>       </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>BOOL <span class=\"token class-name\">CWinThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PumpMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span>     </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token function\">AfxInternalPumpMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>BOOL AFXAPI <span class=\"token function\">AfxInternalPumpMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       _AFX_THREAD_STATE <span class=\"token operator\">*</span>pState <span class=\"token operator\">=</span> <span class=\"token function\">AfxGetThreadState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pState<span class=\"token operator\">-></span>m_msgCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>          </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       <span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>             <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略       </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span>       </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略       </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pState<span class=\"token operator\">-></span>m_msgCur<span class=\"token punctuation\">.</span>message <span class=\"token operator\">!=</span> WM_KICKIDLE <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">AfxPreTranslateMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pState<span class=\"token operator\">-></span>m_msgCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>       <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>             <span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TranslateMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pState<span class=\"token operator\">-></span>m_msgCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>             <span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DispatchMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pState<span class=\"token operator\">-></span>m_msgCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span>     </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>       <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们看到 <code>PumpMessage</code>  中通过调用 <code>GetMessage</code> 、 <code>TranslateMessage</code> 、 <code>DispatchMessage</code>  等建立了消息循环并投递消息。</p>\n<p>窗口过程函数 <code>AfxWinProc</code>  形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LRESULT CALLBACK <span class=\"token function\">AfxWndProc</span><span class=\"token punctuation\">(</span>HWND hWnd<span class=\"token punctuation\">,</span>UINT nMsg<span class=\"token punctuation\">,</span>WPARAM wParam<span class=\"token punctuation\">,</span> LPARAM lParam<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      ……   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      CWnd<span class=\"token operator\">*</span>pWnd<span class=\"token operator\">=</span><span class=\"token class-name\">CWnd</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FromHandlePermanent</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">ReturnAfxCallWndProc</span><span class=\"token punctuation\">(</span>pWnd<span class=\"token punctuation\">,</span>hWnd<span class=\"token punctuation\">,</span>nMsg<span class=\"token punctuation\">,</span>wParam<span class=\"token punctuation\">,</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"sdk应用程序和mfc应用程序对比\"><a class=\"markdownIt-Anchor\" href=\"#sdk应用程序和mfc应用程序对比\">#</a> SDK 应用程序和 MFC 应用程序对比</h1>\n<p>运行流程是类似的，都是<strong>先进行初始化过程，再注册并创建窗口，然后显示、更新窗口，最后进入消息循环，消息都由窗口过程函数处理。</strong></p>\n<h1 id=\"mfc应用程序框架主要类之间的关系\"><a class=\"markdownIt-Anchor\" href=\"#mfc应用程序框架主要类之间的关系\">#</a> MFC 应用程序框架主要类之间的关系</h1>\n<p>自动生成的框架中比较重要的类包括：CHelloWorldApp、CMainFrame、CHelloWorldDoc 和 CHelloWorldView</p>\n<ul>\n<li><code>CHelloWorldApp</code>  类处理消息，将收到的消息分发给相应的对象。</li>\n<li><code>CMainFrame</code>  类是视图类 <code>CHelloWorldView</code>  的父窗口，CHelloWorldView 就显示在 <code>CMainFrame</code>  的客户区中。</li>\n<li>视图类 <code>CHelloWorldView</code>  用来显示文档类 <code>CHelloWorldDoc</code>  中的数据，并根据对视图类的操作修改文档类的数据。一个视图类只能跟一个文档类相联系，而一个文档类可以跟多个视图类相联系。</li>\n</ul>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/04/02/C++11/",
            "url": "https://adventure-yx.github.io/2023/04/02/C++11/",
            "title": "C++11/14/17",
            "date_published": "2023-04-02T12:10:08.000Z",
            "content_html": "<h1 id=\"安全性智能指针\"><a class=\"markdownIt-Anchor\" href=\"#安全性智能指针\">#</a> 安全性 —— 智能指针</h1>\n<p><strong>内存泄漏</strong>：由于疏忽或错误导致的程序未能释放已经不再使用的内存。</p>\n<p>进一步解释：</p>\n<ul>\n<li>\n<p>并非指内存从物理上消失，而是指程序在运行过程中，由于疏忽或错误而失去了对该内存的控制，从而造成了内存的浪费。</p>\n</li>\n<li>\n<p>常指堆内存泄漏，因为堆是动态分配的，而且是用户来控制的，如果使用不当，会产生内存泄漏。</p>\n</li>\n<li>\n<p>使用 malloc、calloc、realloc、new 等分配内存时，使用完后要调用相应的 free 或 delete 释放内存，否则这块内存就会造成内存泄漏。</p>\n</li>\n<li>\n<p>指针重新赋值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p <span class=\"token operator\">=</span> np<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>开始时，指针 p 和 p1 分别指向一块内存空间，但指针 p 被重新赋值，导致 p 初始时指向的那块内存空间无法找到，从而发生了内存泄漏。</p>\n</li>\n</ul>\n<p>解决内存泄漏最有效的方法是使用<strong>智能指针（smart pointer）</strong>。</p>\n<p>智能指针是存储指向动态分配（堆）对象指针的类，用于生存期的控制，能够确保在<strong>离开指针所在作用域时，自动地销毁动态分配的对象</strong>，防止内存泄露。</p>\n<p>智能指针的核心实现技术是<strong>引用计数</strong>，每使用它一次，内部引用计数加 1，每析构一次内部的引用计数减 1，减为 0 时，删除所指向的堆内存。</p>\n<p>C++11 中提供了三种智能指针，使用这些智能指针时需要引用头文件 <code> &lt;memory&gt;</code> :</p>\n<ul>\n<li><code> std::shared_ptr</code> ：共享的智能指针</li>\n<li><code> std::unique_ptr</code> ：独占的智能指针</li>\n<li><code> std::weak_ptr</code> ：弱引用的智能指针，它不共享指针，不能操作资源，是用来监视 <code>shared_ptr</code>  的。</li>\n</ul>\n<h2 id=\"共享智能指针shared_ptr\"><a class=\"markdownIt-Anchor\" href=\"#共享智能指针shared_ptr\">#</a> 共享智能指针（shared_ptr）</h2>\n<h3 id=\"shared_ptr的初始化\"><a class=\"markdownIt-Anchor\" href=\"#shared_ptr的初始化\">#</a> shared_ptr 的初始化</h3>\n<p>共享智能指针是指<strong>多个智能指针可以同时管理同一块有效的内存</strong>，共享智能指针  <code>shared_ptr</code>  是一个<strong>模板类</strong>，如果要进行初始化有三种方式：</p>\n<ul>\n<li>构造函数</li>\n<li><code>std::make_shared</code>  辅助函数</li>\n<li>reset 方法</li>\n</ul>\n<p>共享智能指针对象初始化完毕之后就指向了要管理的那块堆内存，如果想要查看当前有多少个智能指针同时管理着这块内存可以使用共享智能指针提供的一个成员函数 use_count，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 管理当前对象的 shared_ptr 实例数量，或若无被管理对象则为 0。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"通过构造函数初始化\"><a class=\"markdownIt-Anchor\" href=\"#通过构造函数初始化\">#</a> 通过构造函数初始化</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//shared_ptr&lt;T> 类模板中，提供了多种实用的构造函数，语法格式如下:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> 智能指针名字<span class=\"token punctuation\">(</span>创建堆内存<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 使用智能指针管理一块 int 型的堆内存</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr1管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 使用智能指针管理一块字符数组对应的堆内存</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token function\">ptr2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr2管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 创建智能指针对象，不管理任何内存</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr3管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 创建智能指针对象，初始化为空</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr4</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr4管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ptr1管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ptr2管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ptr3管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ptr4管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><blockquote>\n<p>如果智能指针被初始化了一块有效内存，那么这块内存的引用计数 + 1，如果智能指针没有被初始化或者被初始化为 nullptr 空指针，引用计数不会 + 1。另外，不要使用一个原始指针初始化多个 shared_ptr。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//error, 编译不会报错，运行会出错</span></pre></td></tr></table></figure><h3 id=\"通过拷贝和移动构造函数初始化\"><a class=\"markdownIt-Anchor\" href=\"#通过拷贝和移动构造函数初始化\">#</a> 通过拷贝和移动构造函数初始化</h3>\n<p>当一个智能指针被初始化之后，就可以通过这个智能指针初始化其他新对象。在创建新对象的时候，对应的拷贝构造函数或者移动构造函数就被自动调用了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 使用智能指针管理一块 int 型的堆内存，内部引用计数为 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr1管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 调用拷贝构造函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr2</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr2管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr3 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr3管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 调用移动构造函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr4</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr4管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr5 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr5管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr5<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ptr1管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ptr2管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ptr3管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ptr4管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ptr5管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr></table></figure><blockquote>\n<p>如果使用拷贝的方式初始化共享智能指针对象，这两个对象会同时管理同一块堆内存，堆内存对应的引用计数也会增加；如果使用移动的方式初始智能指针对象，只是转让了内存的所有权，管理内存的对象并不会增加，因此内存的引用计数不会变化。</p>\n</blockquote>\n<h3 id=\"通过-stdmake_shared-初始化\"><a class=\"markdownIt-Anchor\" href=\"#通过-stdmake_shared-初始化\">#</a> 通过 std::make_shared 初始化</h3>\n<p>通过 C++ 提供的 std::make_shared () 就可以完成内存对象的创建并将其初始化给智能指针，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">make_shared</span><span class=\"token punctuation\">(</span> Args<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>T</code> ：模板参数的数据类型</li>\n<li><code>Args&amp;&amp;... args</code>  ：要初始化的数据，如果是通过 make_shared 创建对象，需按照构造函数的参数列表指定</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"construct Test...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"construct Test, x = \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"construct Test, str = \"</span> <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"destruct Test ...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 使用智能指针管理一块 int 型的堆内存，内部引用计数为 1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr1管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr2管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span> ptr3 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr3管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span> ptr4 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr_test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr4管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>使用 std::make_shared () 模板函数可以完成内存地址的创建，并将最终得到的内存地址传递给共享智能指针对象管理。如果申请的内存是普通类型，通过函数的（）可完成地址的初始化，如果要创建一个类对象，函数的（）内部需要指定构造对象需要的参数，也就是类构造函数的参数。</p>\n</blockquote>\n<h3 id=\"通过-reset-方法初始化\"><a class=\"markdownIt-Anchor\" href=\"#通过-reset-方法初始化\">#</a> 通过 reset 方法初始化</h3>\n<p>共享智能指针类提供的 std::shared_ptr::reset 方法函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span> Y<span class=\"token operator\">*</span> ptr <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Deleter</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span> Y<span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">,</span> Deleter d <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Deleter</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Alloc</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span> Y<span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">,</span> Deleter d<span class=\"token punctuation\">,</span> Alloc alloc <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>ptr：指向要取得所有权的对象的指针</li>\n<li>d：指向要取得所有权的对象的指针</li>\n<li>aloc：内部存储所用的分配器</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 使用智能指针管理一块 int 型的堆内存，内部引用计数为 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr3 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr4 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr1管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr2管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr3管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr4管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr1管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr2管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr3管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr4管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    ptr5<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr5管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr5<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ptr1管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ptr2管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ptr3管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ptr4管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ptr1管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ptr2管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ptr3管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ptr4管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ptr5管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><blockquote>\n<p>对于一个未初始化的共享智能指针，可以通过 reset 方法来初始化，当智能指针中有值的时候，调用 reset 会使引用计数减 1。</p>\n</blockquote>\n<h3 id=\"获取原始指针\"><a class=\"markdownIt-Anchor\" href=\"#获取原始指针\">#</a> 获取原始指针</h3>\n<hr>\n<h2 id=\"独占智能指针unique_ptr\"><a class=\"markdownIt-Anchor\" href=\"#独占智能指针unique_ptr\">#</a> 独占智能指针（unique_ptr）</h2>\n<h3 id=\"unique_ptr的初始化\"><a class=\"markdownIt-Anchor\" href=\"#unique_ptr的初始化\">#</a> unique_ptr 的初始化</h3>\n<p>std::unique_ptr 是一个独占型的智能指针，它不允许其他的智能指针共享其内部的指针，可以通过它的构造函数初始化一个独占智能指针对象，但是不允许通过赋值将一个 unique_ptr 赋值给另一个 unique_ptr。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过构造函数初始化对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//error, 不允许将一个 unique_ptr 赋值给另一个 unique_ptr</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>std::unique_ptr 不允许复制，但是可以通过函数返回给其他的 std::unique_ptr，还可以通过  <code>std::move</code>  来转移给其他的 std::unique_ptr，这样原始指针的所有权就被转移了，这个原始指针还是被独占的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">unique_ptr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 通过构造函数初始化</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 通过转移所有权的方式初始化</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr3 <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>unique_ptr 独占智能指针类也有一个 reset 方法，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span> pointer ptr <span class=\"token operator\">=</span> <span class=\"token function\">pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用 reset 方法可以让 unique_ptr 解除对原始内存的管理，也可以用来初始化一个独占的智能指针。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 解除对原始内存的管理</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t <span class=\"token comment\">// 重新指定智能指针管理的原始内存</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果想要获取独占智能指针管理的原始地址，可以调用 get () 方法，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pointer <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 得到内存地址中存储的实际数值 250</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"删除器\"><a class=\"markdownIt-Anchor\" href=\"#删除器\">#</a> 删除器</h3>\n<p>unique_ptr 指定删除器和 shared_ptr 指定删除器是有区别的，unique_ptr 指定删除器的时候需要确定删除器的类型，所以不能像 shared_ptr 那样直接指定删除器，举例说明：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">using</span> func_ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> func_ptr<span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的代码中第 7 行，func_ptr 的类型和 lambda 表达式的类型是一致的。在 lambda 表达式没有捕获任何变量的情况下是正确的，如果捕获了变量，编译时则会报错：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">using</span> func_ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> func_ptr<span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的代码中错误原因是这样的，在 lambda 表达式没有捕获任何外部变量时，可以直接转换为函数指针，一旦捕获了就无法转换了，如果想要让编译器成功通过编译，那么需要使用可调用对象包装器来处理声明的函数指针：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">using</span> func_ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<h2 id=\"弱引用智能指针weak_ptr\"><a class=\"markdownIt-Anchor\" href=\"#弱引用智能指针weak_ptr\">#</a> 弱引用智能指针（weak_ptr）</h2>\n<p>弱引用智能指针 std::weak_ptr 可以看做是 shared_ptr 的助手，它不管理 shared_ptr 内部的指针。std::weak_ptr 没有重载操作符 * 和 -&gt;，因为它不共享指针，不能操作资源，所以它的构造不会增加引用计数，析构也不会减少引用计数，它的主要作用就是作为一个旁观者监视 shared_ptr 中管理的资源是否存在。</p>\n<h3 id=\"初始化\"><a class=\"markdownIt-Anchor\" href=\"#初始化\">#</a> 初始化</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 默认构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token function\">weak_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 拷贝构造</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">weak_ptr</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> weak_ptr<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">U</span><span class=\"token operator\">></span> <span class=\"token function\">weak_ptr</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> weak_ptr<span class=\"token operator\">&lt;</span>U<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 通过 shared_ptr 对象构造</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">U</span><span class=\"token operator\">></span> <span class=\"token function\">weak_ptr</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> shared_ptr<span class=\"token operator\">&lt;</span>U<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 C++11 中，weak_ptr 的初始化可以通过以上提供的构造函数来完成初始化，具体使用方法如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp1<span class=\"token punctuation\">;</span>    \t<span class=\"token comment\">// 构造了一个空 weak_ptr 对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">wp2</span><span class=\"token punctuation\">(</span>wp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 通过一个空 weak_ptr 对象构造了另一个空 weak_ptr 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">wp3</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 通过一个 shared_ptr 对象构造了一个可用的 weak_ptr 实例对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp4<span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    wp4 <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 隐式类型转换，通过一个 shared_ptr 对象构造了一个可用的 weak_ptr 实例对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    wp5 <span class=\"token operator\">=</span> wp3<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 通过一个 weak_ptr 对象构造了一个可用的 weak_ptr 实例对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"其他常用方法\"><a class=\"markdownIt-Anchor\" href=\"#其他常用方法\">#</a> 其他常用方法</h3>\n<h4 id=\"use_count\"><a class=\"markdownIt-Anchor\" href=\"#use_count\">#</a> use_count()</h4>\n<p>通过调用 std::weak_ptr 类提供的 use_count () 方法可以获得当前所观测资源的引用计数，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数返回所监测的资源的引用计数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>修改一下上面的测试程序，添加打印资源引用计数的代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">wp2</span><span class=\"token punctuation\">(</span>wp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">wp3</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    wp4 <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    wp5 <span class=\"token operator\">=</span> wp3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use_count: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wp1: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wp2: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wp3: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wp4: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wp5: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp5<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 输出：</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>use_count<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>wp1<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>wp2<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>wp3<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>wp4<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>wp5<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>通过打印的结果可以知道，虽然弱引用智能指针 wp3、wp4、wp5 监测的资源是同一个，但是它的引用计数并没有发生任何的变化，也进一步证明了 weak_ptr 只是监测资源，并不管理资源。</p>\n<h4 id=\"expired\"><a class=\"markdownIt-Anchor\" href=\"#expired\">#</a> expired()</h4>\n<p>通过调用 std::weak_ptr 类提供的 expired () 方法来判断观测的资源是否已经被释放，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回 true 表示资源已经被释放，返回 false 表示资源没有被释放</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数使用方法如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">shared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">weak</span><span class=\"token punctuation\">(</span>shared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1. weak \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>weak<span class=\"token punctuation\">.</span><span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"is not\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" expired\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    shared<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"2. weak \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>weak<span class=\"token punctuation\">.</span><span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"is not\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" expired\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 输出：</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">1.</span> weak is <span class=\"token operator\">not</span> expired</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">2.</span> weak is expired</pre></td></tr></table></figure><p>weak_ptr 监测的就是 shared_ptr 管理的资源，当共享智能指针调用 shared.reset (); 之后管理的资源被释放，因此 weak.expired () 函数的结果返回 true，表示监测的资源已经不存在了。</p>\n<h4 id=\"lock\"><a class=\"markdownIt-Anchor\" href=\"#lock\">#</a> lock()</h4>\n<p>通过调用 std::weak_ptr 类提供的 lock () 方法来获取管理所监测资源的 shared_ptr 对象，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span>element_type<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数的使用方法如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> sp1<span class=\"token punctuation\">,</span> sp2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    sp1 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    wp <span class=\"token operator\">=</span> sp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    sp2 <span class=\"token operator\">=</span> wp<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use_count: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    sp1<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use_count: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    sp1 <span class=\"token operator\">=</span> wp<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use_count: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*sp1: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>sp1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*sp2: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>sp2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 输出：</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>use_count<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>use_count<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>use_count<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">*</span>sp1<span class=\"token operator\">:</span> <span class=\"token number\">520</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">*</span>sp2<span class=\"token operator\">:</span> <span class=\"token number\">520</span></pre></td></tr></table></figure><ul>\n<li>sp2 = wp.lock (); 通过调用 lock () 方法得到一个用于管理 weak_ptr 对象所监测的资源的共享智能指针对象，使用这个对象初始化 sp2，此时所监测资源的引用计数为 2</li>\n<li>sp1.reset (); 共享智能指针 sp1 被重置，weak_ptr 对象所监测的资源的引用计数减 1</li>\n<li>sp1 = wp.lock ();sp1 重新被初始化，并且管理的还是 weak_ptr 对象所监测的资源，因此引用计数加 1</li>\n<li>共享智能指针对象 sp1 和 sp2 管理的是同一块内存，因此最终打印的内存中的结果是相同的，都是 520</li>\n</ul>\n<h4 id=\"reset\"><a class=\"markdownIt-Anchor\" href=\"#reset\">#</a> reset()</h4>\n<p>通过调用 std::weak_ptr 类提供的 reset () 方法来清空对象，使其不监测任何资源，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数的使用方法如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">wp</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1. wp \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>wp<span class=\"token punctuation\">.</span><span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"is not\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" expired\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    wp<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"2. wp \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>wp<span class=\"token punctuation\">.</span><span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"is not\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" expired\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">1.</span> wp is <span class=\"token operator\">not</span> expired</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">2.</span> wp is expired</pre></td></tr></table></figure><h3 id=\"返回管理this的shared_ptr\"><a class=\"markdownIt-Anchor\" href=\"#返回管理this的shared_ptr\">#</a> 返回管理 this 的 shared_ptr</h3>\n<h3 id=\"解决循环引用问题\"><a class=\"markdownIt-Anchor\" href=\"#解决循环引用问题\">#</a> 解决循环引用问题</h3>\n<hr>\n<h1 id=\"多线程\"><a class=\"markdownIt-Anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<p><code>C++11</code>  之前，C++ 语言没有对并发编程提供语言级别的支持，这使得我们在编写可移植的并发程序时，存在诸多的不便。 <code>C++11</code>  中增加了线程以及线程相关的类，很方便地支持了并发编程，使得编写的多线程程序的可移植性得到了很大的提高。</p>\n<h2 id=\"处理日期和时间的-chrono-库\"><a class=\"markdownIt-Anchor\" href=\"#处理日期和时间的-chrono-库\">#</a> 处理日期和时间的 chrono 库</h2>\n<p>C++11 中提供了日期和时间相关的库 chrono，通过 chrono 库可以很方便地处理日期和时间，为程序的开发提供了便利。chrono 库主要包含三种类型的类： <code>时间间隔duration</code> 、 <code>时钟clocks</code> 、 <code>时间点time point</code> 。</p>\n<h3 id=\"时间间隔-duration\"><a class=\"markdownIt-Anchor\" href=\"#时间间隔-duration\">#</a> 时间间隔 duration</h3>\n<p>duration 表示一段时间间隔，用来记录时间长度，可以表示几秒、几分钟、几个小时的时间间隔。</p>\n<p><strong>duration 类的原型</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义于头文件 &lt;chrono></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rep</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Period</span> <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>ratio<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">duration</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>Rep</code> ：这是一个数值类型，表示时钟数（周期）的类型（默认为整型）。</p>\n</li>\n<li>\n<p><code>Period</code> ：表示时钟的周期，它的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义于头文件 &lt;ratio></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>intmax_t Num<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>intmax_t Denom <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ratio</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>ratio</code>  类表示每个时钟周期的秒数，其中第一个模板参数  <code>Num</code>  代表分子， <code>Denom</code>  代表分母，该分母值默认为 1，因此，<strong>ratio 代表的是一个分子除以分母的数值</strong>，比如：ratio&lt;2&gt; 代表一个时钟周期是 2 秒，ratio&lt;60 &gt; 代表一分钟，ratio&lt;60<em>60&gt; 代表一个小时，ratio&lt;60</em>60*24&gt; 代表一天。而 ratio&lt;1,1000&gt; 代表的是 1/1000 秒，也就是 1 毫秒，ratio&lt;1,1000000 &gt; 代表一微秒，ratio&lt;1,1000000000 &gt; 代表一纳秒。</p>\n<p>为了方便使用，在标准库中定义了一些常用的时间间隔，比如：时、分、秒、毫秒、微秒、纳秒，它们都位于 chrono 命名空间下，定义如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>纳秒：std::chrono::nanoseconds</td>\n<td>duration&lt;Rep*/* 至少 64 位的有符号整数类型 <em>/</em>, std::nano&gt;</td>\n</tr>\n<tr>\n<td>微秒：std::chrono::microseconds</td>\n<td>duration&lt;Rep*/* 至少 55 位的有符号整数类型 <em>/</em>, std::micro&gt;</td>\n</tr>\n<tr>\n<td>毫秒：std::chrono::milliseconds</td>\n<td>duration&lt;Rep*/* 至少 45 位的有符号整数类型 <em>/</em>, std::milli&gt;</td>\n</tr>\n<tr>\n<td>秒： std::chrono::seconds</td>\n<td>duration&lt;Rep*/* 至少 35 位的有符号整数类型 <em>/</em>&gt;</td>\n</tr>\n<tr>\n<td>分钟：std::chrono::minutes</td>\n<td>duration&lt;Rep*/* 至少 29 位的有符号整数类型 <em>/</em>, std::ratio&lt;60&gt;&gt;</td>\n</tr>\n<tr>\n<td>小时：std::chrono::hours</td>\n<td>duration&lt;Rep*/* 至少 23 位的有符号整数类型 <em>/</em>, std::ratio&lt;3600&gt;&gt;</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><strong>duration 类的构造函数</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">duration</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> duration<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2. 通过指定时钟周期的类型来构造对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rep2</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">explicit</span> <span class=\"token function\">duration</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> Rep2<span class=\"token operator\">&amp;</span> r <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 3. 通过指定时钟周期类型，和时钟周期长度来构造对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rep2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Period2</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token function\">duration</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> duration<span class=\"token operator\">&lt;</span>Rep2<span class=\"token punctuation\">,</span>Period2<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> d <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>为了更加方便的进行 duration 对象之间的操作，类内部进行了操作符重载：</p>\n<table>\n<thead>\n<tr>\n<th>操作符重载</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>operator=</td>\n<td>赋值内容 (公开成员函数)</td>\n</tr>\n<tr>\n<td>operator+<br/>operator-</td>\n<td>实现一元 + 和一元 - (公开成员函数)</td>\n</tr>\n<tr>\n<td>operator++<br/>operator++(int)<br/>operator–<br/>operator–(int)</td>\n<td>递增或递减周期计数 (公开成员函数)</td>\n</tr>\n<tr>\n<td>operator+=<br/>operator-=<br/>operator*=<br/>operator/=<br/>operator%=</td>\n<td>实现二个时长间的复合赋值 (公开成员函数)</td>\n</tr>\n</tbody>\n</table>\n<p>duration 类还提供了获取时间间隔的时钟周期数的方法 count ()，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">constexpr</span> rep <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>duration 类的使用</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;chrono></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>hours <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 一小时</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>milliseconds ms<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 3 毫秒</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>duration<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> ratio<span class=\"token operator\">&lt;</span><span class=\"token number\">1000</span><span class=\"token operator\">>></span> <span class=\"token function\">ks</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 3000 秒</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// chrono::duration&lt;int, ratio&lt;1000>> d3(3.5);  // error</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>duration<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token function\">dd</span><span class=\"token punctuation\">(</span><span class=\"token number\">6.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 6.6 秒</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 使用小数表示时钟周期的次数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>duration<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>ratio<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token operator\">>></span> <span class=\"token function\">hz</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"时间点-time-point\"><a class=\"markdownIt-Anchor\" href=\"#时间点-time-point\">#</a> 时间点 time point</h3>\n<p>chrono 库中提供了一个表示时间点的类  <code>time_point</code> ，该类的定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义于头文件 &lt;chrono></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Duration</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">Clock</span><span class=\"token double-colon punctuation\">::</span>duration</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">time_point</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>它被实现成如同存储一个 Duration 类型的自 Clock 的纪元起始开始的时间间隔的值，通过这个类最终可以得到时间中的某一个时间点。</p>\n<ul>\n<li>Clock：此时间点在此时钟上计量</li>\n<li>Duration：用于计量从纪元起时间的 std::chrono::duration 类型</li>\n</ul>\n<p><strong>time_point 类的构造函数</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 构造一个以新纪元 (epoch，即：1970.1.1) 作为值的对象，需要和时钟类一起使用，不能单独使用该无参构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">time_point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2. 构造一个对象，表示一个时间点，其中 d 的持续时间从 epoch 开始，需要和时钟类一起使用，不能单独使用该构造函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">time_point</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> duration<span class=\"token operator\">&amp;</span> d <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 3. 拷贝构造函数，构造与 t 相同时间点的对象，使用的时候需要指定模板参数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Duration2</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">time_point</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> time_point<span class=\"token operator\">&lt;</span>Clock<span class=\"token punctuation\">,</span>Duration2<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> t <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"时钟-clocks\"><a class=\"markdownIt-Anchor\" href=\"#时钟-clocks\">#</a> 时钟 clocks</h3>\n<p>chrono 库中提供了获取当前的系统时间的时钟类，包含的时钟一共有三种：</p>\n<ul>\n<li><code>system_clock</code> ：系统的时钟，系统的时钟可以修改，甚至可以网络对时，因此使用系统时间计算时间差可能不准。</li>\n<li><code>steady_clock</code> ：是固定的时钟，相当于秒表。开始计时后，时间只会增长并且不能修改，适合用于记录程序耗时</li>\n<li><code>high_resolution_clock</code> ：和时钟类  <code>steady_clock</code>  是等价的（是它的别名）。</li>\n</ul>\n<p>在这些时钟类的内部有  <code>time_point</code> 、 <code>duration</code> 、 <code>Rep</code> 、 <code>Period</code>  等信息，基于这些信息来获取当前时间，以及实现  <code>time_t</code>  和  <code>time_point</code>  之间的相互转换。</p>\n<h4 id=\"system_clock\"><a class=\"markdownIt-Anchor\" href=\"#system_clock\">#</a> system_clock</h4>\n<h4 id=\"steady_clock\"><a class=\"markdownIt-Anchor\" href=\"#steady_clock\">#</a> steady_clock</h4>\n<h4 id=\"high_resolution_clock\"><a class=\"markdownIt-Anchor\" href=\"#high_resolution_clock\">#</a> high_resolution_clock</h4>\n<h3 id=\"转换函数\"><a class=\"markdownIt-Anchor\" href=\"#转换函数\">#</a> 转换函数</h3>\n<h4 id=\"duration_cast\"><a class=\"markdownIt-Anchor\" href=\"#duration_cast\">#</a> duration_cast</h4>\n<h4 id=\"time_point_cast\"><a class=\"markdownIt-Anchor\" href=\"#time_point_cast\">#</a> time_point_cast</h4>\n<hr>\n<h2 id=\"线程类-thread\"><a class=\"markdownIt-Anchor\" href=\"#线程类-thread\">#</a> 线程类 thread</h2>\n<p>C++11 中提供的线程类叫做  <code>std::thread</code> ，基于这个类创建一个新的线程非常的简单，只需要提供线程函数或者函数对象即可，并且可以同时指定线程函数的参数。这个类提供的一些常用 API：</p>\n<h3 id=\"构造函数\"><a class=\"markdownIt-Anchor\" href=\"#构造函数\">#</a> 构造函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 默认构造函，构造一个线程对象，在这个线程中不执行任何处理动作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 移动构造函数，将 other 的线程所有权转移给新的 thread 对象。之后 other 不再表示执行线程。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span> thread<span class=\"token operator\">&amp;&amp;</span> other <span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 创建线程对象，并在该线程中执行函数 f 中的业务逻辑，args 是要传递给函数 f 的参数。任务函数 f 的可选类型有很多，普通函数，类成员函数，匿名函数，仿函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">thread</span><span class=\"token punctuation\">(</span> Function<span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">,</span> Args<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 使用 =delete 显示删除拷贝构造，不允许线程对象之间的拷贝</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> thread<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"公共成员函数\"><a class=\"markdownIt-Anchor\" href=\"#公共成员函数\">#</a> 公共成员函数</h3>\n<h3 id=\"get_id\"><a class=\"markdownIt-Anchor\" href=\"#get_id\">#</a> get_id()</h3>\n<p>应用程序启动之后默认只有一个线程，这个线程一般称之为<strong>主线程或父线程</strong>，通过线程类创建出的线程一般称之为<strong>子线程</strong>，每个被创建出的线程实例都对应一个线程 ID，这个 ID 是唯一的，可以通过这个 ID 来区分和识别各个已经存在的线程实例，这个获取线程 ID 的函数叫做  <code>get_id()</code> ，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>thread<span class=\"token double-colon punctuation\">::</span>id <span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>示例程序：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;chrono></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> string str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"子线程: i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"num: \"</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>             <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", str: \"</span> <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"子线程: i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"主线程的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    thread <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i love you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    thread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>func1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t 的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t1的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上面的示例程序中有一个 bug，在主线程中依次创建出两个子线程，打印两个子线程的线程 ID，最后主线程执行完毕就退出了（主线程就是执行 main () 函数的那个线程）。默认情况下，主线程销毁时会将与其关联的两个子线程也一并销毁，但是这时有可能子线程中的任务还没有执行完毕，最后也就得不到我们想要的结果了。</p>\n</blockquote>\n<p>当启动了一个线程（创建了一个 thread 对象）之后，在这个线程结束的时候 <code>std::terminate ()</code> ，我们如何去回收线程所使用的资源呢？thread 库给我们两种选择：</p>\n<ul>\n<li>加入式 <code>join()</code></li>\n<li>分离式 <code>detach()</code></li>\n</ul>\n<p>另外，我们必须要在线程对象销毁之前在二者之间作出选择，否则程序运行期间就会有 bug 产生。</p>\n<h3 id=\"join\"><a class=\"markdownIt-Anchor\" href=\"#join\">#</a> join()</h3>\n<p><code>join()</code>  字面意思是连接一个线程，意味着主动地等待线程的终止（线程阻塞）。在某个线程中通过子线程对象调用  <code>join()</code>  函数，调用这个函数的线程被阻塞，但是子线程对象中的任务函数会继续执行，当任务执行完毕之后  <code>join()</code>  会清理当前子线程中的相关资源然后返回，同时，调用该函数的线程解除阻塞继续向下执行。</p>\n<p>再次强调，我们一定要搞清楚这个函数阻塞的是哪一个线程，函数在哪个线程中被执行，那么函数就阻塞哪个线程。该函数的函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>有了这样一个线程阻塞函数之后，就可以解决在上面测试程序中的 bug 了，** 如果要阻塞主线程的执行，只需要在主线程中通过子线程对象调用这个方法即可，当调用这个方法的子线程对象中的任务函数执行完毕之后，主线程的阻塞也就随之解除了。** 修改之后的示例代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"主线程的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    thread <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i love you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    thread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>func1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t 的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t1的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当主线程运行到第八行 t.join ();，根据子线程对象 t 的任务函数 func () 的执行情况，主线程会做如下处理：</p>\n<ul>\n<li>如果任务函数 func () 还没执行完毕，主线程阻塞，直到任务执行完毕，主线程解除阻塞，继续向下运行</li>\n<li>如果任务函数 func () 已经执行完毕，主线程不会阻塞，继续向下运行</li>\n</ul>\n<p>同样，第 9 行的代码亦如此。</p>\n<h3 id=\"detach\"><a class=\"markdownIt-Anchor\" href=\"#detach\">#</a> detach()</h3>\n<p><code>detach()</code>  函数的作用是进行线程分离，分离主线程和创建出的子线程。在线程分离之后，主线程退出也会一并销毁创建出的所有子线程，在主线程退出之前，它可以脱离主线程继续独立的运行，任务执行完毕之后，这个子线程会自动释放自己占用的系统资源。该函数函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>线程分离函数没有参数也没有返回值，只需要在线程成功之后，通过线程对象调用该函数即可，继续将上面的测试程序修改一下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"主线程的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    thread <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i love you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    thread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>func1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t 的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t1的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    t<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 让主线程休眠，等待子线程执行完毕</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep_for</span><span class=\"token punctuation\">(</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注意事项：线程分离函数 detach () 不会阻塞线程，子线程和主线程分离之后，在主线程中就不能再对这个子线程做任何控制了，比如：通过 join () 阻塞主线程等待子线程中的任务执行完毕，或者调用 get_id () 获取子线程的线程 ID。有利就有弊，鱼和熊掌不可兼得，建议使用 join ()。</p>\n</blockquote>\n<h3 id=\"joinable\"><a class=\"markdownIt-Anchor\" href=\"#joinable\">#</a> joinable()</h3>\n<p>joinable () 函数用于判断主线程和子线程是否处理关联（连接）状态，一般情况下，二者之间的关系处于关联状态，该函数返回一个布尔类型：</p>\n<ul>\n<li>返回值为 true：主线程和子线程之间有关联（连接）关系</li>\n<li>返回值为 false：主线程和子线程之间没有关联（连接）关系<br>\n C++</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">joinable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"operator\"><a class=\"markdownIt-Anchor\" href=\"#operator\">#</a> operator=</h3>\n<p><strong>线程中的资源是不能被复制的</strong>，因此通过 = 操作符进行赋值操作最终并不会得到两个完全相同的对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// move (1)\t</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>thread<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>thread<span class=\"token operator\">&amp;&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// copy [deleted] (2)\t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>thread<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> other<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过以上 = 操作符的重载声明可以得知：</p>\n<ul>\n<li>如果 other 是一个右值，会进行资源所有权的转移</li>\n<li>如果 other 不是右值，禁止拷贝，该函数被显示删除（=delete），不可用</li>\n</ul>\n<h3 id=\"静态函数\"><a class=\"markdownIt-Anchor\" href=\"#静态函数\">#</a> 静态函数</h3>\n<p>thread 线程类还提供了一个静态方法，用于<strong>获取当前计算机的 CPU 核心数</strong>，根据这个结果在程序中创建出数量相等的线程，<strong>每个线程独自占有一个 CPU 核心，这些线程就不用分时复用 CPU 时间片，此时程序的并发效率是最高的。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">unsigned</span> <span class=\"token function\">hardware_concurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">hardware_concurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"CPU number: \"</span> <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<h2 id=\"线程命名空间-this_thread\"><a class=\"markdownIt-Anchor\" href=\"#线程命名空间-this_thread\">#</a> 线程命名空间 this_thread</h2>\n<hr>\n<h2 id=\"call_once-函数\"><a class=\"markdownIt-Anchor\" href=\"#call_once-函数\">#</a> call_once 函数</h2>\n<hr>\n<h2 id=\"线程同步之互斥锁-mutex\"><a class=\"markdownIt-Anchor\" href=\"#线程同步之互斥锁-mutex\">#</a> 线程同步之互斥锁 mutex</h2>\n<hr>\n<h2 id=\"线程同步之条件变量\"><a class=\"markdownIt-Anchor\" href=\"#线程同步之条件变量\">#</a> 线程同步之条件变量</h2>\n<hr>\n<h2 id=\"线程同步之原子变量-atomic\"><a class=\"markdownIt-Anchor\" href=\"#线程同步之原子变量-atomic\">#</a> 线程同步之原子变量 atomic</h2>\n<hr>\n<h2 id=\"线程异步\"><a class=\"markdownIt-Anchor\" href=\"#线程异步\">#</a> 线程异步</h2>\n<hr>\n<h1 id=\"易学和易用性\"><a class=\"markdownIt-Anchor\" href=\"#易学和易用性\">#</a> 易学和易用性</h1>\n<h2 id=\"lambda表达式\"><a class=\"markdownIt-Anchor\" href=\"#lambda表达式\">#</a> lambda 表达式</h2>\n<h3 id=\"基本用法\"><a class=\"markdownIt-Anchor\" href=\"#基本用法\">#</a> 基本用法</h3>\n<p>lambda 表达式是 C++11 最重要也是最常用的特性之一，这是现代编程语言的一个特点，lambda 表达式有以下优点：</p>\n<ul>\n<li>声明式的编程风格：就地匿名定义目标函数或函数对象，不需要额外写一个命名函数或函数对象。</li>\n<li>简洁：避免了代码膨胀和功能分散，让开发更加高效。</li>\n<li>在需要的时间和地点实现功能闭包，让程序更加灵活。</li>\n</ul>\n<p>lambda 表达式定义了一个匿名函数，并且可以捕获一定范围内的变量。lambda 表达式的语法形式简单，归纳如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>capture<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span> opt <span class=\"token operator\">-></span> ret <span class=\"token punctuation\">&#123;</span>body<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中 <code>capture</code>  是捕获列表， <code>params</code>  是参数列表， <code>opt</code>  是函数选项， <code>ret</code>  是返回值类型， <code>body</code>  是函数体。</p>\n<ol>\n<li>\n<p>捕获列表 [ ]：捕获一定范围内的变量</p>\n</li>\n<li>\n<p>参数列表 ( )：和普通函数的参数列表一样，如果没有参数，参数列表可以省略不写。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\t<span class=\"token comment\">// 没有参数，参数列表为空</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\t\t<span class=\"token comment\">// 没有参数，参数列表省略不写</span></pre></td></tr></table></figure></li>\n<li>\n<p>opt 选项，不需要可以省略</p>\n<ul>\n<li>mutable: 可以修改按值传递进来的拷贝（注意是能修改拷贝，而不是值本身）</li>\n<li>exception: 指定函数抛出的异常，如抛出整数类型的异常，可以使用 throw ();</li>\n</ul>\n</li>\n<li>\n<p>ret 返回值类型：在 C++11 中，lambda 表达式的返回值是通过返回值后置语法来定义的。</p>\n</li>\n<li>\n<p>函数体：函数的实现，这部分不能省略，但函数体可以为空。</p>\n</li>\n</ol>\n<h3 id=\"捕获列表\"><a class=\"markdownIt-Anchor\" href=\"#捕获列表\">#</a> 捕获列表</h3>\n<p>lambda 表达式的捕获列表可以捕获一定范围内的变量，具体使用方式如下：</p>\n<ul>\n<li><code>[]</code>  - 不捕捉任何变量</li>\n<li><code>[&amp;]</code>  - 捕获外部作用域中所有变量，并作为引用在函数体内使用 (<strong>按引用捕获</strong>)</li>\n<li><code>[=]</code>  - 捕获外部作用域中所有变量，并作为副本在函数体内使用 (<strong>按值捕获</strong>)\n<ul>\n<li><strong>拷贝的副本在匿名函数体内部是只读的</strong></li>\n</ul>\n</li>\n<li><code>[=, &amp;foo]</code>  - 按值捕获外部作用域中所有变量，并按照引用捕获外部变量 foo</li>\n<li><code>[bar]</code>  - 按值捕获 bar 变量，同时不捕获其他变量</li>\n<li><code>[&amp;bar]</code>  - 按引用捕获 bar 变量，同时不捕获其他变量</li>\n<li><code>[this]</code>  - 捕获当前类中的 this 指针\n<ul>\n<li>让 lambda 表达式拥有和当前类成员函数同样的访问权限</li>\n<li>如果已经使用了 &amp; 或者 =, 默认添加此选项</li>\n</ul>\n</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">auto</span> x1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> m_number<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">auto</span> x2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> m_number <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">auto</span> x3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> m_number <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">auto</span> x4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> m_number<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">auto</span> x5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> m_number <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">auto</span> x6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> m_number <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">auto</span> x7 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> m_number<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> m_number <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>x1：错误，没有捕获外部变量，不能使用类成员 m_number</li>\n<li>x2：正确，以值拷贝的方式捕获所有外部变量</li>\n<li>x3：正确，以引用的方式捕获所有外部变量</li>\n<li>x4：正确，捕获 this 指针，可访问对象内部成员</li>\n<li>x5：错误，捕获 this 指针，可访问类内部成员，没有捕获到变量 x，y，因此不能访问。</li>\n<li>x6：正确，捕获 this 指针，x，y</li>\n<li>x7：正确，捕获 this 指针，并且可以修改对象内部变量的值</li>\n</ul>\n<blockquote>\n<p>在匿名函数内部，需要<strong>通过 lambda 表达式的捕获列表控制如何捕获外部变量，以及访问哪些变量</strong>。默认状态下 lambda 表达式无法修改通过复制方式捕获外部变量，如果希望修改这些外部变量，需要通过引用的方式进行捕获。</p>\n</blockquote>\n<h3 id=\"返回值\"><a class=\"markdownIt-Anchor\" href=\"#返回值\">#</a> 返回值</h3>\n<p>一般情况，lambda 表达式的返回值是非常明显的，因此在 C++11 中允许省略 lambda 表达式的返回值。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 完整的 lambda 表达式定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 忽略返回值的 lambda 表达式定义</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一般情况，不指定 lambda 表达式的返回值，编译器会根据 return 语句自动推导返回值的类型，但需要注意的是 <strong>labmda 表达式不能通过列表初始化自动推导出返回值类型</strong>。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ok，可以自动推导出返回值类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//error，不能推导出返回值类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">auto</span> f1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 基于列表初始化推导返回值，错误</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"函数本质\"><a class=\"markdownIt-Anchor\" href=\"#函数本质\">#</a> 函数本质</h3>\n<p>使用  <code>lambda 表达式捕获列表</code> 捕获外部变量，如果希望去修改按值捕获的外部变量，那么应该如何处理呢？这就需要使用 mutable 选项，<strong>被 mutable 修改时 lambda 表达式就算没有参数也要写明参数列表，并且可以去掉按值捕获的外部变量的只读（const）属性</strong>。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> f1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">//error, 按值捕获外部变量，a 是只读的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> f2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">mutable</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// ok</span></pre></td></tr></table></figure><p>为什么通过值拷贝的方式捕获的外部变量是只读的:</p>\n<ul>\n<li><strong>lambda 表达式的类型在 C++11 中会被看做是一个带 operator () 的类，即仿函数。</strong></li>\n<li><strong>按照 C++ 标准，lambda 表达式的 operator () 默认是 const 的，一个 const 成员函数是无法修改成员变量值的。</strong></li>\n</ul>\n<p><strong>mutable 选项的作用就在于取消 operator () 的 const 属性。</strong></p>\n<p>因为 lambda 表达式在 C++ 中会被看做是一个仿函数，因此可以使用 <code>std::function</code>  和 <code>std::bind</code>  来存储和操作 lambda 表达式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 包装可调用函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 绑定可调用函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f2 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> placeholders<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 函数调用</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于没有捕获任何变量的 lambda 表达式，还可以转换成一个普通的函数指针：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> func_ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 没有捕获任何外部变量的匿名函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>func_ptr f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 函数调用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1314</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr>\n<h2 id=\"指针空值类型-nullptr\"><a class=\"markdownIt-Anchor\" href=\"#指针空值类型-nullptr\">#</a> 指针空值类型 - nullptr</h2>\n<p>在 C++ 程序开发中，为了提高程序的健壮性，一般会在定义指针的同时完成初始化操作，或者在指针的指向尚未明确的情况下，都会给指针初始化为  <code>NULL</code> ，<strong>避免产生野指针（没有明确指向的指针，操作也这种指针极可能导致程序发生异常）</strong>。 <code>C++98/03</code>  标准中，将一个指针初始化为空指针的方式有 2 种：</p>\n<ul>\n<li><code>char *ptr = 0;</code></li>\n<li><code>char *ptr = NULL;</code></li>\n</ul>\n<p>在底层源码中 NULL 这个宏是这样定义的:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\"><span class=\"token constant\">NULL</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NULL</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NULL</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>也就是说如果源码是 C++ 程序  <code>NULL</code>  就是  <code>0</code> ，如果是 C 程序  <code>NULL</code>  表示  <code>(void*)0</code> 。</p>\n<p>那么为什么要这样做呢？ 是由于 C++ 中， <code>void *</code>  类型无法隐式转换为其他类型的指针，此时使用  <code>0</code>  代替  <code>((void *)0)</code> ，用于解决空指针的问题。这个 0（0x0000 0000）表示的就是虚拟地址空间中的 0 地址，这块地址是只读的。</p>\n<p>C++ 中将 NULL 定义为字面常量 0，并不能保证在所有场景下都能很好的工作，比如，函数重载时， <code>NULL</code>  和  <code>0</code>  无法区分：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"void func(char *p)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"void func(int p)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 想要调用重载函数 void func (char *p)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 想要调用重载函数 void func (int p)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 测试结果</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>通过打印的结果可以看到，虽然调用  <code>func(NULL)</code> ; 最终链接到的还是  <code>void func(int p)</code>  和预期是不一样的，其实这个原因前边已经说的很明白了，在 C++ 中  <code>NULL</code>  和  <code>0</code>  是等价的。</p>\n<p>出于兼容性的考虑，C++11 标准并没有对 NULL 的宏定义做任何修改，而是另其炉灶，引入了一个新的关键字  <code>nullptr</code> 。<strong>nullptr 专用于初始化空类型指针，不同类型的指针变量都可以使用 nullptr 来初始化</strong>：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>    ptr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span>   ptr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span><span class=\"token operator\">*</span> ptr3 <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对应上面的代码编译器会分别将 nullptr 隐式转换成 int*、char* 以及 double* 指针类型。</p>\n<p>使用 nullptr 可以很完美的解决上边提到的函数重载问题:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"void func(char *p)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"void func(int p)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 测试结果</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>通过输出的结果可以看出， <code>nullptr</code>  无法隐式转换为整形，但是<strong>可以隐式匹配指针类型</strong>。<strong>在 C++11 标准下，相比 NULL 和 0，使用 nullptr 初始化空指针可以令我们编写的程序更加健壮。</strong></p>\n<hr>\n<h2 id=\"自动类型推导\"><a class=\"markdownIt-Anchor\" href=\"#自动类型推导\">#</a> 自动类型推导</h2>\n<p>在 C++11 中增加了很多新的特性，比如可以使用  <code>auto</code>  自动推导变量的类型，还能够结合  <code>decltype</code>  来表示函数的返回值。使用新的特性可以让我们写出更加简洁，更加现代的代码。</p>\n<h3 id=\"auto\"><a class=\"markdownIt-Anchor\" href=\"#auto\">#</a> auto</h3>\n<p>在 C++11 之前 auto 和 static 是对应的，表示变量是自动存储的，但是非 static 的局部变量默认都是自动存储的，因此这个关键字变得非常鸡肋。</p>\n<p>在 C++11 中他们赋予了新的含义，使用这个关键字能够像别的语言一样自动推导出变量的实际类型。</p>\n<ol>\n<li>推导规则</li>\n</ol>\n<h3 id=\"decltype\"><a class=\"markdownIt-Anchor\" href=\"#decltype\">#</a> decltype</h3>\n<p>在某些情况下，不需要或者不能定义变量，但是希望得到某种类型，这时候就可以使用 C++11 提供的 decltype 关键字了，它的作用是在编译器编译的时候推导出一个表达式的类型，语法格式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">decltype</span> <span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>decltype 是 “declare type” 的缩写，意思是 “声明类型”。decltype 的推导是在编译期完成的，它只是用于表达式类型的推导，并不会计算表达式的值。来看一组简单的例子：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> b <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// b -> int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span> c <span class=\"token operator\">=</span> <span class=\"token number\">52.13</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// c -> double</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">*</span>c<span class=\"token punctuation\">)</span> d <span class=\"token operator\">=</span> <span class=\"token number\">520.1314</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// d -> double</span></pre></td></tr></table></figure><p>可以看到 decltype 推导的表达式可简单可复杂，在这一点上 auto 是做不到的，auto 只能推导已初始化的变量类型。</p>\n<h3 id=\"c14-函数返回类型推导\"><a class=\"markdownIt-Anchor\" href=\"#c14-函数返回类型推导\">#</a> c++14 函数返回类型推导</h3>\n<p>C<ins>11 允许 lambda 函数根据 return 语句的表达式类型推断返回类型。C</ins>14 为一般的函数也提供了这个能力。C++14 还拓展了原有的规则，使得函数体并不是 {return expression;} 形式的函数也可以使用返回类型推导。</p>\n<p>为了启用返回类型推导，函数声明必须将 auto 作为返回类型，但没有 C++11 的后置返回类型说明符：</p>\n<p>auto DeduceReturnType (); // 返回类型由编译器推断<br>\n如果函数实现中含有多个 return 语句，这些表达式必须可以推断为相同的类型。[9]</p>\n<p>使用返回类型推导的函数可以前向声明，但在定义之前不可以使用。它们的定义在使用它们的翻译单元（translation unit）之中必须是可用的。</p>\n<p>这样的函数中可以存在递归，但递归调用必须在函数定义中的至少一个 return 语句之后：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token function\">Correct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回类型被推断为 int</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Correct</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，可以调用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token function\">Wrong</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Wrong</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不能调用，之前没有 return 语句</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回类型被推断为 int</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"c17-auto表达式\"><a class=\"markdownIt-Anchor\" href=\"#c17-auto表达式\">#</a> c++17 auto 表达式</h3>\n<hr>\n<h2 id=\"基于范围的-for-循环\"><a class=\"markdownIt-Anchor\" href=\"#基于范围的-for-循环\">#</a> 基于范围的 for 循环</h2>\n<p>在  <code>C++98/03</code>  中，不同的容器和数组遍历的方式不尽相同，写法不统一，也不够简洁，而  <code>C++11</code>  基于范围的 for 循环可以以简洁、统一的方式来遍历容器和数组，用起来也更方便。</p>\n<h3 id=\"for循环新语法\"><a class=\"markdownIt-Anchor\" href=\"#for循环新语法\">#</a> for 循环新语法</h3>\n<p>传统 for 循环使用迭代器遍历容器：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们在遍历的过程中需要给出容器的两端：开头（begin）和结尾（end），因为这种遍历方式不是基于范围来设计的。在<strong>基于范围的 for 循环中</strong>，不需要再传递容器的两端，循环会自动以容器为范围展开，并且循环中也屏蔽掉了迭代器的遍历细节，直接抽取容器中的元素进行运算，使用这种方式进行循环遍历会让编码和维护变得更加简便。</p>\n<p>C++98/03 中普通的 for 循环，语法格式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>表达式 <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> 表达式 <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> 表达式 <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 循环体</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>C++11 基于范围的 for 循环，语法格式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>declaration <span class=\"token operator\">:</span> expression<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 循环体</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的语法格式中  <code>declaration</code>  表示遍历声明，在遍历过程中，当前被遍历到的元素会被存储到声明的变量中。 <code>expression</code>  是要遍历的对象，它可以是<strong>表达式</strong>、<strong>容器</strong>、<strong>数组</strong>、<strong>初始化列表</strong>等。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> value <span class=\"token operator\">:</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上面的例子中，是将容器中遍历的当前元素拷贝到了声明的变量 value 中，因此无法对容器中的元素进行写操作，如果需要在遍历过程中修改元素的值，需要使用引用。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"遍历修改之前的容器: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>value <span class=\"token operator\">:</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> value<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"遍历修改之后的容器: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>value <span class=\"token operator\">:</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 输出：</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>遍历修改之前的容器<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>遍历修改之后的容器<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span></pre></td></tr></table></figure><p>对容器的遍历过程中，如果只是读数据，不允许修改元素的值，可以使用  <code>const</code>  定义保存元素数据的变量，在定义的时候建议使用  <code>const auto &amp;</code> ，这样相对于  <code>const auto</code>  效率要更高一些。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> value <span class=\"token operator\">:</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用细节\"><a class=\"markdownIt-Anchor\" href=\"#使用细节\">#</a> 使用细节</h3>\n<p><strong>关系型容器 map 的遍历：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> m<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lucy\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lily\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 基于范围的 for 循环方式</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> it <span class=\"token operator\">:</span> m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"id: \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", name: \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 普通的 for 循环方式</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"id: \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", name: \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的例子中使用两种方式对 map 进行了遍历，通过对比有两点需要注意的事项：</p>\n<ul>\n<li>使用普通的 for 循环方式（基于迭代器）遍历关联性容器， auto 自动推导出的是一个<strong>迭代器类型</strong>，需要使用迭代器的方式取出元素中的键值对（和指针的操作方法相同）：\n<ul>\n<li>it-&gt;first</li>\n<li>it-&gt;second</li>\n</ul>\n</li>\n<li>使用基于范围的 for 循环遍历关联性容器，auto 自动推导出的类型是容器中的 value_type，相当于一个对组（std::pair）对象，提取键值对的方式如下：\n<ul>\n<li>it.first</li>\n<li>it.second</li>\n</ul>\n</li>\n</ul>\n<p><strong>元素只读：</strong></p>\n<p>通过对基于范围的 for 循环语法的介绍可以得知，在 for 循环内部声明一个变量的引用就可以修改遍历的表达式中的元素的值，但是这并不适用于所有的情况，对应 set 容器来说，内部元素都是只读的，这是由容器的特性决定的，因此在 for 循环中  <code>auto &amp;</code>  会被视为  <code>const auto &amp;</code>  。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> st<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item <span class=\"token operator\">:</span> st<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//error, 不能给常量赋值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>除此之外，<strong>在遍历关联型容器时也会出现同样的问题，基于范围的 for 循环中，虽然可以得到一个 std::pair 引用，但是我们是不能修改里边的 first 值的，也就是 key 值。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> m<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lucy\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lily\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> item <span class=\"token operator\">:</span> m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//item.first 是一个常量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"id: \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>first<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", name: \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>对应基于范围的 for 循环来说，冒号后边的表达式只会被执行一次。在得到遍历对象之后会先确定好迭代的范围，基于这个范围直接进行遍历。如果是普通的 for 循环，在每次迭代的时候都需要判断是否已经到了结束边界。</p>\n</blockquote>\n<h1 id=\"通用性能提升\"><a class=\"markdownIt-Anchor\" href=\"#通用性能提升\">#</a> 通用性能提升</h1>\n<h2 id=\"右值引用\"><a class=\"markdownIt-Anchor\" href=\"#右值引用\">#</a> 右值引用</h2>\n<h3 id=\"左值-右值\"><a class=\"markdownIt-Anchor\" href=\"#左值-右值\">#</a> 左值、右值</h3>\n<p>C++11 增加了一个新的类型，称为<strong>右值引用（ R-value reference）</strong>，标记为  <code>&amp;&amp;</code> 。在介绍右值引用类型之前先要了解什么是左值和右值：</p>\n<ul>\n<li>lvalue 是  <code>loactor value</code>  的缩写，rvalue 是  <code>read value</code>  的缩写</li>\n<li><strong>左值是指存储在内存中、有明确存储地址（可取地址）的数据；</strong></li>\n<li><strong>右值是指可以提供数据值的数据（不可取地址）；</strong></li>\n</ul>\n<p>通过描述可以看出，区分左值与右值的便捷方法是：<strong>可以对表达式取地址（&amp;）就是左值，否则为右值</strong>。所有有名字的变量或对象都是左值，而右值是匿名的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">520</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1314</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一般情况下，位于  <code>=</code>  前的表达式为左值，位于  <code>=</code>  后边的表达式为右值。也就是说例子中的  <code>a, b</code>  为左值， <code>520,1314</code>  为右值。 <code>a=b</code>  是一种特殊情况，在这个表达式中  <code>a, b</code>  都是左值，因为变量  <code>b</code>  是可以被取地址的，不能视为右值</p>\n<h3 id=\"纯右值-将亡值\"><a class=\"markdownIt-Anchor\" href=\"#纯右值-将亡值\">#</a> 纯右值、将亡值</h3>\n<p>C++11 中右值可以分为两种：一个是将亡值（ xvalue, expiring value），另一个则是纯右值（ prvalue, PureRvalue**）**：</p>\n<ul>\n<li><strong>纯右值：非引用返回的临时变量、运算表达式产生的临时变量、原始字面量和 lambda 表达式等</strong></li>\n<li><strong>将亡值：与右值引用相关的表达式，比如，T&amp;&amp; 类型函数的返回值、 std::move 的返回值等。</strong></li>\n</ul>\n<h3 id=\"右值引用-2\"><a class=\"markdownIt-Anchor\" href=\"#右值引用-2\">#</a> 右值引用</h3>\n<p>右值引用就是对一个右值进行引用的类型。因为右值是匿名的，所以我们只能通过引用的方式找到它。** 无论声明左值引用还是右值引用都必须立即进行初始化，因为引用类型本身并不拥有所绑定对象的内存，只是该对象的一个别名。** 通过右值引用的声明，该右值又 “重获新生”，其生命周期与右值引用类型变量的生命周期一样，只要该变量还活着，该右值临时量将会一直存活下去。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">=</span> <span class=\"token number\">520</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"construct: my name is jerry\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Test<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copy construct: my name is tom\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Test <span class=\"token function\">getObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;&amp;</span> a2 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    Test<span class=\"token operator\">&amp;</span> t <span class=\"token operator\">=</span> <span class=\"token function\">getObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    Test<span class=\"token operator\">&amp;&amp;</span> t <span class=\"token operator\">=</span> <span class=\"token function\">getObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">const</span> Test<span class=\"token operator\">&amp;</span> t <span class=\"token operator\">=</span> <span class=\"token function\">getObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>该例中 <code>int&amp;&amp; value = 520;</code>  里面 <code>520</code>  是纯右值， <code>value</code>  是对 <code>520</code>  这个右值的引用；</li>\n<li>在  <code>int &amp;&amp;a2 = a1;</code>  中  <code>a1</code>  虽然写在了  <code>=</code>  右边，但是它仍然是一个左值，<strong>使用左值初始化一个右值引用类型是不合法的。</strong></li>\n<li>在  <code>Test&amp; t = getObj()</code>  这句代码中语法是错误的，<strong>右值不能给普通的左值引用赋值。</strong></li>\n<li>在  <code>Test&amp;&amp; t = getObj();</code>  中  <code>getObj()</code>  返回的临时对象被称之为将亡值， <code>t</code>  是这个将亡值的右值引用。</li>\n<li><code>const Test&amp; t = getObj()</code>  这句代码的语法是正确的，<strong>常量左值引用是一个万能引用类型，它可以接受左值、右值、常量左值和常量右值。</strong></li>\n</ul>\n<h3 id=\"性能优化\"><a class=\"markdownIt-Anchor\" href=\"#性能优化\">#</a> 性能优化</h3>\n<hr>\n<h2 id=\"转移和完美转发\"><a class=\"markdownIt-Anchor\" href=\"#转移和完美转发\">#</a> 转移和完美转发</h2>\n<h3 id=\"move\"><a class=\"markdownIt-Anchor\" href=\"#move\">#</a> move</h3>\n<p>在 C++11 添加了右值引用，并且不能使用左值初始化右值引用，如果想要使用左值初始化一个右值引用需要借助  <code>std::move ()</code>  函数，<strong>使用 std::move 方法可以将左值转换为右值。使用这个函数并不能移动任何东西，而是和移动构造函数一样都具有移动语义，将对象的状态或者所有权从一个对象转移到另一个对象，只是转移，没有内存拷贝。</strong></p>\n<p>从实现上讲，std::move 基本等同于一个类型转换： <code>static_cast&lt;T&amp;&amp;&gt;(lvalue);</code> ，函数原型如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Ty</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>_NODISCARD <span class=\"token keyword\">constexpr</span> remove_reference_t<span class=\"token operator\">&lt;</span>_Ty<span class=\"token operator\">></span><span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>_Ty<span class=\"token operator\">&amp;&amp;</span> _Arg<span class=\"token punctuation\">)</span> _NOEXCEPT</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// forward _Arg as movable</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>remove_reference_t<span class=\"token operator\">&lt;</span>_Ty<span class=\"token operator\">></span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>_Arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用方法：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span>：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Test t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Test <span class=\"token operator\">&amp;&amp;</span> v1 <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Test <span class=\"token operator\">&amp;&amp;</span> v2 <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>在第 4 行中，使用左值初始化右值引用，因此语法是错误的</li>\n<li>在第 5 行中，使用 move () 函数将左值转换为了右值，这样就可以初始化右值引用了。</li>\n</ul>\n<p>假设一个临时容器很大，并且需要将这个容器赋值给另一个容器，就可以执行如下操作：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ls<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ls<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ls<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ls1 <span class=\"token operator\">=</span> ls<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 需要拷贝，效率低</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ls2 <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果不使用 std::move，拷贝的代价很大，性能较低。使用 move 几乎没有任何代价，只是转换了资源的所有权。如果一个对象内部有较大的堆内存或者动态数组时，使用  <code>move ()</code>  就可以非常方便的进行数据所有权的转移。另外，我们也可以给类编写相应的移动构造函数 <code>（T::T(T&amp;&amp; another)）</code> 和和具有移动语义的赋值函数 <code>（T&amp;&amp; T::operator=(T&amp;&amp; rhs)）</code> ，在构造对象和赋值的时候尽可能的进行资源的重复利用，因为它们都是接收一个右值引用参数。</p>\n<h3 id=\"forward\"><a class=\"markdownIt-Anchor\" href=\"#forward\">#</a> forward</h3>\n<p>右值引用类型是独立于值的，一个右值引用作为函数参数的形参时，在函数内部转发该参数给内部其他函数时，它就变成一个左值，并不是原来的类型了。如果需要按照参数原来的类型转发到另一个函数，可以使用 C++11 提供的  <code>std::forward ()</code>  函数，该函数实现的功能称之为完美转发。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数原型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> T<span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">forward</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">remove_reference</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>type<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> T<span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">forward</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">remove_reference</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>type<span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 精简之后的样子</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>当 T 为左值引用类型时，t 将被转换为 T 类型的左值</strong></li>\n<li><strong>当 T 不是左值引用类型时，t 将被转换为 T 类型的右值</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"l-value: \"</span> <span class=\"token operator\">&lt;&lt;</span> t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r-value: \"</span> <span class=\"token operator\">&lt;&lt;</span> t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testForward</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;&amp;</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">testForward</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1314</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">testForward</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">testForward</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">testForward</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">testForward</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 测试结果</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>l<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">520</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">520</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">520</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>l<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>l<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>l<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>l<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>l<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>l<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>r<span class=\"token operator\">-</span>value<span class=\"token operator\">:</span> <span class=\"token number\">1314</span></pre></td></tr></table></figure><ul>\n<li><code>testForward(520);</code>  函数的形参为未定引用类型  <code>T&amp;&amp;</code> ，实参为右值，初始化后被推导为一个右值引用\n<ul>\n<li><code>printValue(v);</code>  已命名的右值 v，编译器会视为左值处理，<strong>实参为左值</strong></li>\n<li><code>printValue(move(v));</code>  已命名的右值编译器会视为左值处理，通过 move 又将其转换为右值，<strong>实参为右值</strong></li>\n<li><code>printValue(forward&lt;T&gt;(v));</code> forward 的模板参数为右值引用，最终得到一个右值，<strong>实参为右值</strong></li>\n</ul>\n</li>\n<li><code>testForward(num);</code>  函数的形参为未定引用类型  <code>T&amp;&amp;</code> ，实参为左值，初始化后被推导为一个左值引用\n<ul>\n<li><code>printValue(v);</code>  <strong>实参为左值</strong></li>\n<li><code>printValue(move(v));</code>  通过 move 将左值转换为右值，<strong>实参为右值</strong></li>\n<li><code>printValue(forward&lt;T&gt;(v));</code> forward 的模板参数为左值引用，最终得到一个左值引用，<strong>实参为左值</strong></li>\n</ul>\n</li>\n<li><code>testForward(forward&lt;int&gt;(num));</code> forward 的模板类型为 int，最终会得到一个右值，函数的形参为未定引用类型  <code>T&amp;&amp;</code>  被右值初始化后得到一个右值引用类型\n<ul>\n<li><code>printValue(v);</code>  已命名的右值 v，编译器会视为左值处理，<strong>实参为左值</strong></li>\n<li><code>printValue(move(v));</code>  已命名的右值编译器会视为左值处理，通过 move 又将其转换为右值，<strong>实参为右值</strong></li>\n<li><code>printValue(forward&lt;T&gt;(v));</code> forward 的模板参数为右值引用，最终得到一个右值，<strong>实参为右值</strong></li>\n</ul>\n</li>\n<li><code>testForward(forward&lt;int&amp;&gt;(num));</code> forward 的模板类型为 int&amp;，最终会得到一个左值，函数的形参为未定引用类型  <code>T&amp;&amp;</code>  被左值初始化后得到一个左值引用类型\n<ul>\n<li><code>printValue(v);</code>  <strong>实参为左值</strong></li>\n<li><code>printValue(move(v));</code>  通过 move 将左值转换为右值，<strong>实参为右值</strong></li>\n<li><code>printValue(forward&lt;T&gt;(v));</code> forward 的模板参数为左值引用，最终得到一个左值，<strong>实参为左值</strong></li>\n</ul>\n</li>\n<li><code>testForward(forward&lt;int&amp;&amp;&gt;(num));</code> forward 的模板类型为 int&amp;&amp;，最终会得到一个右值，函数的形参为未定引用类型  <code>T&amp;&amp;</code>  被右值初始化后得到一个右值引用类型\n<ul>\n<li><code>printValue(v);</code>  已命名的右值 v，编译器会视为左值处理，<strong>实参为左值</strong></li>\n<li><code>printValue(move(v));</code>  已命名的右值编译器会视为左值处理，通过 move 又将其转换为右值，<strong>实参为右值</strong></li>\n<li><code>printValue(forward&lt;T&gt;(v));</code> forward 的模板参数为右值引用，最终得到一个右值，<strong>实参为右值</strong></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"列表初始化\"><a class=\"markdownIt-Anchor\" href=\"#列表初始化\">#</a> 列表初始化</h2>\n<p>关于 C<ins> 中的变量，数组，对象等都有不同的初始化方法，在这些繁琐的初始化方法中没有任何一种方式适用于所有的情况。为了统一初始化方式，并且让初始化行为具有确定的效果，在 C</ins>11 中提出了列表初始化的概念。</p>\n<h3 id=\"统一的初始化\"><a class=\"markdownIt-Anchor\" href=\"#统一的初始化\">#</a> 统一的初始化</h3>\n<p>在 <code>C++98/03</code>  中，对于普通数组和可以直接进行内存拷贝（memcpy ()）的对象是可以使用列表初始化来初始化数据的：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数组的初始化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span> array1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 对象的初始化</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">double</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>zhang3<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在  <code>C++11</code>  中，列表初始化变得更加灵活了：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Test <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    Test <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Test t2 <span class=\"token operator\">=</span> <span class=\"token number\">520</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Test t3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">520</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Test t4<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">520</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1314</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1314</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> arr1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> arr2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>t1</code> ：最中规中矩的初始化方式，通过提供的带参构造进行对象的初始化</li>\n<li><code>t2</code> ：语法错误，因为提供的拷贝构造函数是私有的。如果拷贝构造函数是公共的，520 会通过隐式类型转换被 Test (int) 构造成一个匿名对象，然后再通过对这个匿名对象进行拷贝构造得到 t2</li>\n<li>t3 和 t4：使用了 C++11 的初始化方式来初始化对象，效果和 t1 的方式是相同的。\n<ul>\n<li><strong>在初始时，{} 前面的等号是否书写对初始化行为没有任何影响。</strong></li>\n<li><strong>t3 虽然使用了等号，但是它仍然是列表初始化</strong>，因此私有的拷贝构造对它没有任何影响。</li>\n</ul>\n</li>\n<li>t1、arr1 和 t2、arr2：这两个是基础数据类型的列表初始化方式，可以看到，和对象的初始化方式是统一的。</li>\n<li>t4、a2、arr2 的写法，是 C++11 中新添加的语法格式，使用这种方式可以<strong>直接在变量名后边跟上初始化列表，来进行变量或者对象的初始化</strong>。</li>\n</ul>\n<p><strong>使用 new 操作符创建新对象的时候</strong>可以使用列表初始化进行对象的初始化</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">520</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">52.134</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>指针 p 指向了一个 new 操作符返回的内存，通过列表初始化将内存数据初始化为了 520</li>\n<li>变量 b 是对匿名对象使用列表初始之后，再进行拷贝初始化。</li>\n<li>数组 array 在堆上动态分配了一块内存，通过列表初始化的方式直接完成了多个元素的初始化。</li>\n</ul>\n<p>除此之外，列表初始化还可以直接用在函数返回值上：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> string name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"id: \"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", name: \"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Person <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">9527</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"华安\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    Person p <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>代码中的  <code>return &#123; 9527, &quot;华安&quot; &#125;;</code>  就相当于  <code>return (9527, &quot;华安&quot; );</code> ，直接返回了一个匿名对象。通过上面的几个例子可以看出在  <code>C++11</code>  使用列表初始化是非常便利的，它统一了各种对象的初始化方式，而且还让代码的书写更加简单清晰。</p>\n<h3 id=\"初始化列表细节\"><a class=\"markdownIt-Anchor\" href=\"#初始化列表细节\">#</a> 初始化列表细节</h3>\n<h3 id=\"stdinitializer_list\"><a class=\"markdownIt-Anchor\" href=\"#stdinitializer_list\">#</a> std::initializer_list</h3>\n<hr>\n<h2 id=\"常量表达式修饰符-constexpr\"><a class=\"markdownIt-Anchor\" href=\"#常量表达式修饰符-constexpr\">#</a> 常量表达式修饰符 - constexpr</h2>\n<h3 id=\"const\"><a class=\"markdownIt-Anchor\" href=\"#const\">#</a> const</h3>\n<p>在 C++11 之前只有  <code>const</code>  关键字，从功能上来说这个关键字有双重语义：<strong>变量只读</strong>，<strong>修饰常量</strong>，举一个简单的例子：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">//error，num 是一个只读变量，不是常量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> array1<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//ok，count 是一个常量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> a1 <span class=\"token operator\">=</span> <span class=\"token number\">520</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> a2 <span class=\"token operator\">=</span> <span class=\"token number\">250</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    b <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    a1 <span class=\"token operator\">=</span> <span class=\"token number\">1314</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b: \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 输出结果为 1314</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>函数  <code>void func(const int num)</code>  的参数  <code>num</code>  表示这个变量是只读的，但不是常量，因此使用  <code>int array[num];</code>  这种方式定义一个数组，编译器是会报错的，提示 <code>num不可用作为常量来使用。</code></li>\n<li><code>const int count = 24;</code>  中的  <code>count</code>  却是一个常量，因此可以使用这个常量来定义一个静态数组。</li>\n</ul>\n<p>另外，<strong>变量只读并不等价于常量</strong>，二者是两个概念不能混为一谈，分析一下这句测试代码  <code>const int&amp; b = a1;</code> ：</p>\n<ul>\n<li><code>b</code>  是一个常量的引用，所以 b 引用的变量是不能被修改的，也就是说  <code>b = a2;</code>  这句代码语法是错误的。</li>\n<li>在  <code>const</code>  对于变量  <code>a1</code>  是没有任何约束的， <code>a1</code>  的值变了  <code>b</code>  的值也就变了</li>\n<li>引用  <code>b</code>  是只读的，但是并不能保证它的值是不可改变的，也就是说它不是常量。</li>\n</ul>\n<h3 id=\"constexpr\"><a class=\"markdownIt-Anchor\" href=\"#constexpr\">#</a> constexpr</h3>\n<p>在 C++11 中添加了一个新的关键字  <code>constexpr</code> ，这个关键字是用来修饰常量表达式的。<strong>所谓常量表达式，指的就是由多个（≥1）常量（值不会改变）组成并且在编译过程中就得到计算结果的表达式。</strong></p>\n<p>在介绍 gcc/g++ 工作流程的时候，<strong>C++ 程序从编写完毕到执行分为四个阶段：预处理、 编译、汇编和链接 4 个阶段</strong>，得到可执行程序之后就可以运行了。需要额外强调的是，<strong>常量表达式和非常量表达式的计算时机不同，非常量表达式只能在程序运行阶段计算出结果，但是常量表达式的计算往往发生在程序的编译阶段</strong>，这可以极大提高程序的执行效率，因为表达式只需要在编译阶段计算一次，节省了每次程序运行时都需要计算一次的时间。</p>\n<p>那么问题来了，编译器如何识别表达式是不是常量表达式呢？</p>\n<p>在 C++11 中添加了  <code>constexpr</code>  关键字之后就可以在程序中使用它来修改常量表达式，用来提高程序的执行效率。在使用中建议将  <code>const</code>  和  <code>constexpr</code>  的功能区分开，即<strong>凡是表达 “只读” 语义的场景都使用</strong>  <code>const</code> <strong>，表达 “常量” 语义的场景都使用</strong>  <code>constexpr</code> 。</p>\n<p>在定义常量时，const 和 constexpr 是等价的，都可以在程序的编译阶段计算出结果，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 不是常量表达式，m 的值只有在运行时才会获取。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">520</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 是一个常量表达式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 是一个常量表达式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">520</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 是一个常量表达式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 是一个常量表达式</span></pre></td></tr></table></figure><p>对于 C++ 内置类型的数据，可以直接用  <code>constexpr</code>  修饰，但如果是自定义的数据类型（用 struct 或者 class 实现），直接用  <code>constexpr</code>  修饰是不行的。</p>\n<p>如果要定义一个结构体 / 类常量对象，可以这样写：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> Test t<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//error，不能修改常量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    t<span class=\"token punctuation\">.</span>num <span class=\"token operator\">+=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"id: \"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", num: \"</span> <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在第 13 行的代码中  <code>t.num += 100;</code>  的操作是错误的，对象 t 是一个常量，因此它的成员也是常量，常量是不能被修改的。</p>\n<h3 id=\"常量表达式函数\"><a class=\"markdownIt-Anchor\" href=\"#常量表达式函数\">#</a> 常量表达式函数</h3>\n<p>为了提高 C++ 程序的执行效率，我们可以将程序中值不需要发生变化的变量定义为常量，也可以使用  <code>constexpr</code>  修饰函数的返回值，这种函数被称作<strong>常量表达式函数</strong>，这些函数主要包括以下几种：<strong>普通函数 / 类成员函数、类的构造函数、模板函数。</strong></p>\n<h3 id=\"修饰普通函数\"><a class=\"markdownIt-Anchor\" href=\"#修饰普通函数\">#</a> 修饰普通函数</h3>\n<p><code>constexpr</code>  并不能修改任意函数的返回值，使这些函数成为常量表达式函数，必须要满足以下几个条件：</p>\n<ol>\n<li>\n<p><strong>函数必须要有返回值，并且 return 返回的表达式必须是常量表达式。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//error，不是常量表达式函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a: \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//error，不是常量表达式函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>函数  <code>func1()</code>  没有返回值，不满足常量表达式函数要求</li>\n<li>函数  <code>func2()</code>  返回值不是常量表达式，不满足常量表达式函数要求</li>\n</ul>\n</li>\n<li>\n<p><strong>函数在使用之前，必须有对应的定义语句。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在测试程序  <code>constexpr int num = func1();</code>  中，还没有定义  <code>func1()</code>  就直接调用了，应该将  <code>func1()</code>  函数的定义放到  <code>main()</code>  函数的上边。</p>\n</li>\n<li>\n<p><strong>整个函数的函数体中，不能出现非常量表达式之外的语句（using 指令、typedef 语句以及 static_assert 断言、return 语句除外）。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"i: \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">using</span> mytype <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> mytype a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> mytype b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> mytype c <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> c <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因为  <code>func1()</code>  是一个常量表达式函数，在函数体内部是不允许出现非常量表达式以外的操作，因此函数体内部的  <code>for</code>  循环是一个非法操作。</p>\n</li>\n</ol>\n<blockquote>\n<p>以上三条规则不仅对应普通函数适用，对应类的成员函数也是适用的</p>\n</blockquote>\n<h3 id=\"修饰模板函数\"><a class=\"markdownIt-Anchor\" href=\"#修饰模板函数\">#</a> 修饰模板函数</h3>\n<p>C++11 语法中， <code>constexpr</code>  可以修饰函数模板，但由于模板中类型的不确定性，因此函数模板实例化后的模板函数是否符合常量表达式函数的要求也是不确定的。如果  <code>constexpr</code>  修饰的模板函数实例化结果不满足常量表达式函数的要求，则  <code>constexpr</code>  会被自动忽略，即该函数就等同于一个普通函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 定义函数模板</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">constexpr</span> T <span class=\"token function\">dispaly</span><span class=\"token punctuation\">(</span>T t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"luffy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 普通函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">dispaly</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"luffy's name: \"</span> <span class=\"token operator\">&lt;&lt;</span> ret<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", age: \"</span> <span class=\"token operator\">&lt;&lt;</span> ret<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 常量表达式函数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> ret1 <span class=\"token operator\">=</span> <span class=\"token function\">dispaly</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> ret1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p1 <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"luffy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p2 <span class=\"token operator\">=</span> <span class=\"token function\">dispaly</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"luffy's name: \"</span> <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", age: \"</span> <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面示例程序中定义了一个函数模板  <code>display()</code> ，但由于其返回值类型未定，因此在实例化之前无法判断其是否符合常量表达式函数的要求：</p>\n<ul>\n<li><code>struct Person ret = dispaly(p);</code>  由于参数  <code>p</code>  是变量，所以实例化后的函数不是常量表达式函数，此时  <code>constexpr</code>  是无效的</li>\n<li><code>constexpr int ret1 = dispaly(250);</code>  参数是常量，符合常量表达式函数的要求，此时  <code>constexpr</code>  是有效的</li>\n<li><code>constexpr struct Person p2 = dispaly(p1);</code>  参数是常量，符合常量表达式函数的要求，此时  <code>constexpr</code>  是有效的</li>\n</ul>\n<h3 id=\"修饰构造函数\"><a class=\"markdownIt-Anchor\" href=\"#修饰构造函数\">#</a> 修饰构造函数</h3>\n<p>如果想用直接得到一个常量对象，也可以使用  <code>constexpr</code>  修饰一个构造函数，这样就可以得到一个常量构造函数了。常量构造函数有一个要求：<strong>构造函数的函数体必须为空，并且必须采用初始化列表的方式为各个成员赋值。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"luffy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"luffy's name: \"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", age: \"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<h2 id=\"委托构造函数和继承构造函数\"><a class=\"markdownIt-Anchor\" href=\"#委托构造函数和继承构造函数\">#</a> 委托构造函数和继承构造函数</h2>\n<h3 id=\"委托构造函数\"><a class=\"markdownIt-Anchor\" href=\"#委托构造函数\">#</a> 委托构造函数</h3>\n<p>委托构造函数允许使用同一个类中的一个构造函数调用其它的构造函数，从而简化相关变量的初始化。下面举例说明：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_max <span class=\"token operator\">=</span> max <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> max <span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_max <span class=\"token operator\">=</span> max <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> max <span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 冗余代码</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_min <span class=\"token operator\">=</span> min <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> min <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">?</span> min <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_max <span class=\"token operator\">=</span> max <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> max <span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 冗余代码</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_min <span class=\"token operator\">=</span> min <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> min <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">?</span> min <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 冗余代码</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_middle <span class=\"token operator\">=</span> mid <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">&amp;&amp;</span> mid <span class=\"token operator\">></span> min <span class=\"token operator\">?</span> mid <span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> m_min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> m_max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">int</span> m_middle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    Test <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"min: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span>m_min <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", middle: \"</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span>m_middle <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", max: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span>m_max <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的程序中有三个构造函数，但是这三个函数中都有重复的代码，在 C++11 之前构造函数是不能调用构造函数的，加入了委托构造之后，我们就可以轻松地完成代码的优化了：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_max <span class=\"token operator\">=</span> max <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> max <span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_min <span class=\"token operator\">=</span> min <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> min <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">?</span> min <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_middle <span class=\"token operator\">=</span> mid <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">&amp;&amp;</span> mid <span class=\"token operator\">></span> min <span class=\"token operator\">?</span> mid <span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> m_min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span> m_max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">int</span> m_middle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    Test <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"min: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span>m_min <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", middle: \"</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span>m_middle <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", max: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span>m_max <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在修改之后的代码中可以看到，重复的代码全部没有了，并且在一个构造函数中调用了其他的构造函数用于相关数据的初始化，相当于是一个链式调用。在使用委托构造函数的时候还需要注意一些几个问题：</p>\n<ul>\n<li>\n<p><strong>这种链式的构造函数调用不能形成一个闭环（死循环），否则会在运行期抛异常。</strong></p>\n</li>\n<li>\n<p><strong>如果要进行多层构造函数的链式调用，建议将构造函数的调用的写在初始列表中而不是函数体内部，否则编译器会提示形参的重复定义。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_max <span class=\"token operator\">=</span> max <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> max <span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//error, 此处编译器会报错，提示形参 max 被重复定义</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_min <span class=\"token operator\">=</span> min <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> min <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">?</span> min <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>在初始化列表中调用了代理构造函数初始化某个类成员变量之后，就不能在初始化列表中再次初始化这个变量了。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 错误，使用了委托构造函数就不能再次 m_max 初始化了</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_min <span class=\"token operator\">=</span> min <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> min <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">?</span> min <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"继承构造函数\"><a class=\"markdownIt-Anchor\" href=\"#继承构造函数\">#</a> 继承构造函数</h3>\n<p>C++11 中提供的继承构造函数可以让派生类直接使用基类的构造函数，而无需自己再写构造函数，尤其是在基类有很多构造函数的情况下，可以极大地简化派生类构造函数的编写。先来看没有继承构造函数之前的处理方式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_j</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">,</span> string k<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_j</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_k</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> m_i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">double</span> m_j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    string m_k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">,</span> string k<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    Child <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13.14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i love you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"int: \"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span>m_i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", double: \"</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span>m_j <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", string: \"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span>m_k <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过测试代码可以看出，在子类中初始化从基类继承的类成员，需要在子类中重新定义和基类一致的构造函数，这是非常繁琐的，C++11 中通过添加继承构造函数这个新特性完美的解决了这个问题，使得代码更加精简。</p>\n<p>继承构造函数的使用方法是这样的：通过使用  <code>using 类名::构造函数名</code> （其实类名和构造函数名是一样的）来声明使用基类的构造函数，这样子类中就可以不定义相同的构造函数了，直接使用基类的构造函数来构造派生类对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_j</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">,</span> string k<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_j</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_k</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> m_i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">double</span> m_j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    string m_k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">using</span> Base<span class=\"token double-colon punctuation\">::</span>Base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    Child <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"int: \"</span> <span class=\"token operator\">&lt;&lt;</span> c1<span class=\"token punctuation\">.</span>m_i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", double: \"</span> <span class=\"token operator\">&lt;&lt;</span> c1<span class=\"token punctuation\">.</span>m_j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    Child <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13.14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i love you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"int: \"</span> <span class=\"token operator\">&lt;&lt;</span> c2<span class=\"token punctuation\">.</span>m_i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", double: \"</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> c2<span class=\"token punctuation\">.</span>m_j <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", string: \"</span> <span class=\"token operator\">&lt;&lt;</span> c2<span class=\"token punctuation\">.</span>m_k <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在修改之后的子类中，没有添加任何构造函数，而是添加了  <code>using Base::Base;</code>  这样就可以在子类中直接继承父类的所有的构造函数，通过他们去构造子类对象了。</p>\n<p>另外如果在子类中隐藏了父类中的同名函数，也可以通过  <code>using</code>  的方式在子类中使用基类中的这些父类函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_j</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> j<span class=\"token punctuation\">,</span> string k<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_i</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_j</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_k</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"base class: i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> string str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"base class: i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", str = \"</span> <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> m_i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">double</span> m_j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    string m_k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">using</span> Base<span class=\"token double-colon punctuation\">::</span>Base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">using</span> Base<span class=\"token double-colon punctuation\">::</span>func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"child class: i'am superman!!!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    Child <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    c<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    c<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    c<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"superman\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 测试输出</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>child <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> i<span class=\"token number\">'</span>am superman<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>base <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> i <span class=\"token operator\">=</span> <span class=\"token number\">19</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>base <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> i <span class=\"token operator\">=</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> str <span class=\"token operator\">=</span> superman</pre></td></tr></table></figure><p>子类中的 func () 函数隐藏了基类中的两个 func () 因此默认情况下通过子类对象只能调用无参的 func ()，在上面的子类代码中添加了 using Base::func; 之后，就可以通过子类对象直接调用父类中被隐藏的带参 func () 函数了。</p>\n<hr>\n<h2 id=\"using-的使用\"><a class=\"markdownIt-Anchor\" href=\"#using-的使用\">#</a> using 的使用</h2>\n<p>在  <code>C++</code>  中  <code>using</code>  用于声明命名空间，使用命名空间也可以防止命名冲突。在程序中声明了命名空间之后，就可以直接使用命名空间中的定义的类了。在  <code>C++11</code>  中赋予了  <code>using</code>  新的功能，让 C++ 变得更年轻，更灵活。</p>\n<h3 id=\"定义别名\"><a class=\"markdownIt-Anchor\" href=\"#定义别名\">#</a> 定义别名</h3>\n<h3 id=\"模板的别名\"><a class=\"markdownIt-Anchor\" href=\"#模板的别名\">#</a> 模板的别名</h3>\n<hr>\n<h2 id=\"可调用对象包装器-绑定器\"><a class=\"markdownIt-Anchor\" href=\"#可调用对象包装器-绑定器\">#</a> 可调用对象包装器、绑定器</h2>\n<hr>\n<h2 id=\"pod-类型\"><a class=\"markdownIt-Anchor\" href=\"#pod-类型\">#</a> POD 类型</h2>\n<hr>\n<h2 id=\"默认函数控制-default-与-delete\"><a class=\"markdownIt-Anchor\" href=\"#默认函数控制-default-与-delete\">#</a> 默认函数控制 =default 与 =delete</h2>\n<hr>\n<h2 id=\"扩展的-friend-语法\"><a class=\"markdownIt-Anchor\" href=\"#扩展的-friend-语法\">#</a> 扩展的 friend 语法</h2>\n<hr>\n<h2 id=\"强类型枚举\"><a class=\"markdownIt-Anchor\" href=\"#强类型枚举\">#</a> 强类型枚举</h2>\n<hr>\n<h2 id=\"非受限联合体\"><a class=\"markdownIt-Anchor\" href=\"#非受限联合体\">#</a> 非受限联合体</h2>\n<hr>\n<h1 id=\"稳定性和兼容性\"><a class=\"markdownIt-Anchor\" href=\"#稳定性和兼容性\">#</a> 稳定性和兼容性</h1>\n<h2 id=\"noexcept\"><a class=\"markdownIt-Anchor\" href=\"#noexcept\">#</a> noexcept</h2>\n<h3 id=\"c-异常\"><a class=\"markdownIt-Anchor\" href=\"#c-异常\">#</a> C++ 异常</h3>\n<p>异常通常用于处理逻辑上可能发生的错误，在  <code>C++98</code>  中为我们提供了一套完善的异常处理机制，我们可以直接在程序中将各种类型的异常抛出，从而强制终止程序的运行。</p>\n<p>关于异常的基本语法如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 抛出异常的程序段</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    …………</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">throw</span> 表达式<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    …………</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 捕获并处理异常的程序段</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    复合语句</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型声明<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    复合语句</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>类型<span class=\"token punctuation\">(</span>形参<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    复合语句</pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"int exception, value: \"</span> <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"That's ok!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>异常被抛出后，从进入 try 块起，到异常被抛掷前，这期间在栈上构造的所有对象，都会被自动析构。析构的顺序与构造的顺序相反。这一过程称为栈的解旋。</p>\n</blockquote>\n<h3 id=\"异常接口声明\"><a class=\"markdownIt-Anchor\" href=\"#异常接口声明\">#</a> 异常接口声明</h3>\n<p>为了加强程序的可读性，可以在函数声明中列出可能抛出的所有异常类型，常用的有如下三种书写方式：</p>\n<ol>\n<li>\n<p>显示指定可以抛出的异常类型</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyException</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">msg</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    string msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">divisionMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span>MyException<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"division by zero!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// throw 100;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">double</span> v <span class=\"token operator\">=</span> <span class=\"token function\">divisionMethod</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"value: \"</span> <span class=\"token operator\">&lt;&lt;</span> v <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"catch except: \"</span>  <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>MyException e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"catch except: \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>msg <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第 7 行代码在  <code>divisionMethod</code>  函数后添加了  <code>throw</code>  异常接口声明，其参数表示可以抛出的异常类型，分别为  <code>int</code>  和  <code>MyException</code>  类型。</p>\n</li>\n<li>\n<p>抛出任意异常类型</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyException</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">msg</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    string msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">divisionMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"division by zero!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// throw 100;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第 7 行代码在  <code>divisionMethod</code>  没有添加异常接口声明，表示在该函数中<strong>可以抛出任意类型的异常</strong>。</p>\n</li>\n<li>\n<p>不抛出任何异常</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyException</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">msg</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    string msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">divisionMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"division by zero!!!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第 7 行代码在  <code>divisionMethod</code>  函数后添加了  <code>throw</code>  异常接口声明，其<strong>参数列表为空</strong>，表示该函数<strong>不允许抛出异常</strong>。</p>\n<blockquote>\n<p>以上程序在 VS 上的测试结果和在 Linux 上基于 G++ 的测试结果是不同的，如果违反了规则 VS 只会给出警告，而 G++ 则会直接终止程序的运行。（PS：VS 使用的不是 G++ 编译器）</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"noexcept异常声明\"><a class=\"markdownIt-Anchor\" href=\"#noexcept异常声明\">#</a> noexcept 异常声明</h3>\n<p>上面的例子中，在  <code>divisionMethod</code>  函数声明之后，我们定义了一个动态异常声明  <code>throw(MyException, int)</code> ，该声明指出了  <code>divisionMethod</code>  可能抛出的异常的类型。<strong>事实上，该特性很少被使用，因此在 C++11 中被弃用了</strong> ，而表示函数不会抛出异常的动态异常声明  <code>throw()</code>  也被新的  <code>noexcept</code>  异常声明所取代。</p>\n<p><code>noexcept</code>  形如其名， <strong>表示其修饰的函数不会抛出异常</strong> 。不过与  <code>throw ()</code>  动态异常声明不同的是，在 C++11 中如果  <code>noexcept</code>  修饰的函数抛出了异常，编译器可以选择直接调用  <code>std::terminate ()</code>  函数来终止程序的运行，这比基于异常机制的  <code>throw ()</code>  在效率上会高一些。这是因为异常机制会带来一些额外开销，比如函数抛出异常，会导致函数栈被依次地展开（栈解旋），并自动调用析构函数释放栈上的所有对象。<br>\n因此对于不会抛出异常的函数我们可以这样写:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">divisionMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"division by zero!!!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从语法上讲，noexcept 修饰符有两种形式：</p>\n<ol>\n<li>\n<p>简单地在函数声明后加上 noexcept 关键字</p>\n</li>\n<li>\n<p>可以接受一个常量表达式作为参数，如下所示∶</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">divisionMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">(</span>常量表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>常量表达式的结果会被转换成一个 bool 类型的值：</p>\n<ul>\n<li>值为 true，表示函数不会抛出异常</li>\n<li>值为 false，表示有可能抛出异常这里</li>\n<li>不带常量表达式的 noexcept 相当于声明了 noexcept（true），即不会抛出异常。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"类成员的快速初始化\"><a class=\"markdownIt-Anchor\" href=\"#类成员的快速初始化\">#</a> 类成员的快速初始化</h2>\n<h3 id=\"初始化类的非静态成员\"><a class=\"markdownIt-Anchor\" href=\"#初始化类的非静态成员\">#</a> 初始化类的非静态成员</h3>\n<p>在进行类成员变量初始化的时候，C<ins>11 标准对于 C</ins>98 做了补充，允许在定义类的时候在类内部直接对非静态成员变量进行初始化，在初始化的时候可以使用等号 = 也可以 使用花括号 {} 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">&#123;</span><span class=\"token number\">12</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">double</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.17</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">double</span> array1<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.17</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    string <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    string s2<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"hello, world\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以看到如果使用花括号 {} 的方式对类的非静态成员进行初始化，等号是可以省略不写的。</p>\n<ul>\n<li>第 9 行：错误，不能使用小括号 () 初始化对象，应该使用 花括号 {}</li>\n</ul>\n<h3 id=\"类内部赋值和初始化列表\"><a class=\"markdownIt-Anchor\" href=\"#类内部赋值和初始化列表\">#</a> 类内部赋值和初始化列表</h3>\n<p>在 C++11 之前对于非静态的类成员变量我们除了在构造函数内部进行赋值，也可以在类的初始化列表中进行初始化（这种方式比在构造函数内部赋值效率高）。那么，如果同时在类内部对非静态成员变量就地初始化和在初始化列表中进行初始化会怎么样呢？下面来测试一下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Init</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> z<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Init <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a: \"</span> <span class=\"token operator\">&lt;&lt;</span> tmp<span class=\"token punctuation\">.</span>a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", b: \"</span> <span class=\"token operator\">&lt;&lt;</span> tmp<span class=\"token punctuation\">.</span>b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", c: \"</span> <span class=\"token operator\">&lt;&lt;</span> tmp<span class=\"token punctuation\">.</span>c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>第 4 行：使用初始化列表对类的非静态成员进行初始化</li>\n<li>第 6、7、8 行：在类内部对非静态成员变量就地初始化（C++11 新特性）</li>\n</ul>\n<p>执行程序，输出的结果如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">30</span></pre></td></tr></table></figure><p>我们可以从函数的打印输出中看到，在类内部就地初始化和初始化列表并不冲突（程序可以正常运行）。程序员可以为同一成员变量既在类内部就地初始化，又在初始化列表中进行初始化，只不过初始化列表总是看起来后作用于非静态成员。也就是说，<strong>通过初始化列表指定的值会覆盖就地初始化时指定的值。</strong></p>\n<hr>\n<h2 id=\"数值类型和字符串之间的转换\"><a class=\"markdownIt-Anchor\" href=\"#数值类型和字符串之间的转换\">#</a> 数值类型和字符串之间的转换</h2>\n<h3 id=\"数值转换为字符串\"><a class=\"markdownIt-Anchor\" href=\"#数值转换为字符串\">#</a> 数值转换为字符串</h3>\n<p>使用 to_string () 方法可以非常方便地将各种数值类型转换为字符串类型，这是一个重载函，函数声明位于头文件 <string> 中，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件 &lt;string></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>string <span class=\"token function\">to_string</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    string pi <span class=\"token operator\">=</span> <span class=\"token string\">\"pi is \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1415926</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    string love <span class=\"token operator\">=</span> <span class=\"token string\">\"love is \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.20</span> <span class=\"token operator\">+</span> <span class=\"token number\">13.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> pi <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> love <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"字符串转换为数值\"><a class=\"markdownIt-Anchor\" href=\"#字符串转换为数值\">#</a> 字符串转换为数值</h3>\n<p>由于 C++ 中的数值类型包括整形和浮点型，因此针对于不同的类型提供了不同的函数，通过调用这些函数可以将字符串类型转换为对应的数值类型。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义于头文件 &lt;string></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span>       <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">long</span>      <span class=\"token function\">stol</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">stoll</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>      <span class=\"token function\">stoul</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">stoull</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">float</span>       <span class=\"token function\">stof</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">double</span>      <span class=\"token function\">stod</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> <span class=\"token function\">stold</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>str</code> ：要转换的字符串</li>\n<li><code>pos</code> ：传出参数，记录从哪个字符开始无法继续进行解析，比如: 123abc, 传出的位置为 3</li>\n<li><code>base</code> ：若 base 为 0 ，则自动检测数值进制：若前缀为 0 ，则为八进制，若前缀为 0x 或 0X，则为十六进制，否则为十进制。</li>\n</ul>\n<p>这些函数虽然都有多个参数，但是除去第一个参数外其他都有默认值，一般情况下使用默认值就能满足需求。关于函数的使用示例代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    string str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"45\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    string str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"3.14159\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    string str3 <span class=\"token operator\">=</span> <span class=\"token string\">\"9527 with words\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    string str4 <span class=\"token operator\">=</span> <span class=\"token string\">\"words and 2\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> myint1 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">float</span> myint2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stof</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> myint3 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 错误： 'std::invalid_argument'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// int myint4 = std::stoi(str4);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"std::stoi(\\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> str1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\") is \"</span> <span class=\"token operator\">&lt;&lt;</span> myint1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"std::stof(\\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> str2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\") is \"</span> <span class=\"token operator\">&lt;&lt;</span> myint2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"std::stoi(\\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> str3 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\") is \"</span> <span class=\"token operator\">&lt;&lt;</span> myint3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// cout &lt;&lt; \"std::stoi(\\\"\" &lt;&lt; str4 &lt;&lt; \"\\\") is \" &lt;&lt; myint4 &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 测试输出</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"45\"</span><span class=\"token punctuation\">)</span> is <span class=\"token number\">45</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3.14159\"</span><span class=\"token punctuation\">)</span> is <span class=\"token number\">3.14159</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"9527 with words\"</span><span class=\"token punctuation\">)</span> is <span class=\"token number\">9527</span></pre></td></tr></table></figure><p>从上述测试程序可以得出这样的结论，在 C++11 提供的这些转换函数将字符串转换为数值的过程中：</p>\n<ul>\n<li>如果字符串中所有字符都是数值类型，整个字符串会被转换为对应的数值，并通过返回值返回</li>\n<li>如果字符串的前半部分字符是数值类型，后半部不是，那么前半部分会被转换为对应的数值，并通过返回值返回</li>\n<li>如果字符第一个字符不是数值类型转换失败</li>\n</ul>\n<hr>\n<h2 id=\"模板的优化\"><a class=\"markdownIt-Anchor\" href=\"#模板的优化\">#</a> 模板的优化</h2>\n<h3 id=\"模板的右尖括号\"><a class=\"markdownIt-Anchor\" href=\"#模板的右尖括号\">#</a> 模板的右尖括号</h3>\n<p>在泛型编程中，模板实例化有一个非常繁琐的地方，那就是连续的两个右尖括号（&gt;&gt;）会被编译器解析成右移操作符，而不是模板参数表的结束。我们先来看一段关于容器遍历的代码，在创建的类模板  <code>Base</code>  中提供了遍历容器的操作函数  <code>traversal()</code> :</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// test.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">traversal</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    Base<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    b<span class=\"token punctuation\">.</span><span class=\"token function\">traversal</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果使用 C++98/03 标准来编译上边的这段代码，就会得到如下的错误提示：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>test.cpp:25:20: error: <span class=\"token string\">'>>'</span> should be <span class=\"token string\">'> >'</span> within a nested template argument list</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     Base<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>根据错误提示中描述模板的两个右尖括之间需要添加空格，这样写起来就非常的麻烦，<strong>C++11 改进了编译器的解析规则，尽可能地将多个右尖括号（&gt;）解析成模板参数结束符</strong>，方便我们编写模板相关的代码。</p>\n<p>上面的这段代码，在支持  <code>C++11</code>  的编译器中编译是没有任何问题的，如果使用 g++ 直接编译需要加参数  <code>-std=c++11</code> ：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ g++ test.cpp <span class=\"token parameter variable\">-std</span><span class=\"token operator\">=</span>c++11 <span class=\"token parameter variable\">-o</span> app</pre></td></tr></table></figure><h3 id=\"默认模板参数\"><a class=\"markdownIt-Anchor\" href=\"#默认模板参数\">#</a> 默认模板参数</h3>\n<p>在  <code>C++98/03</code>  标准中，类模板可以有默认的模板参数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">=</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> T t<span class=\"token operator\">=</span><span class=\"token number\">520</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"current value: \"</span> <span class=\"token operator\">&lt;&lt;</span> t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Test<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    t<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Test<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token operator\">></span> t1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是不支持函数的默认模板参数，<strong>在 C++11 中添加了对函数模板默认参数的支持</strong>:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">=</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>\t<span class=\"token comment\">// C++98/03 不支持这种写法，C++11 中支持这种写法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>T t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"current value: \"</span> <span class=\"token operator\">&lt;&lt;</span> t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过上面的例子可以得到如下结论：当所有模板参数都有默认参数时，函数模板的调用如同一个普通函数。但对于类模板而言，哪怕所有参数都有默认参数，在使用时也必须在模板名后跟随 &lt;&gt; 来实例化。</p>\n<p>另外：函数模板的默认模板参数在使用规则上和其他的默认参数也有一些不同，它没有必须写在参数表最后的限制。这样当默认模板参数和模板参数自动推导结合起来时，书写就显得非常灵活了。我们可以指定函数模板中的一部分模板参数使用默认参数，另一部分使用自动推导，比如下面的例子：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">R</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">N</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>R <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>N arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">auto</span> ret1 <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"return value-1: \"</span> <span class=\"token operator\">&lt;&lt;</span> ret1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">auto</span> ret2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">52.134</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"return value-2: \"</span> <span class=\"token operator\">&lt;&lt;</span> ret2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">auto</span> ret3 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">52.134</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"return value-3: \"</span> <span class=\"token operator\">&lt;&lt;</span> ret3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">auto</span> ret4 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"return value-4: \"</span> <span class=\"token operator\">&lt;&lt;</span> ret4 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 测试输出</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">return</span> value<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">520</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">return</span> value<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token number\">52.134</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">return</span> value<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token number\">52</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">return</span> value<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token operator\">:</span> d</pre></td></tr></table></figure><p>根据得到的日志输出，分析一下示例代码中调用的模板函数：</p>\n<ul>\n<li><code>auto ret = func(520);</code>\n<ul>\n<li>函数返回值类型使用了默认的模板参数，函数的参数类型是自动推导出来的为 int 类型。</li>\n</ul>\n</li>\n<li><code>auto ret1 = func&lt;double&gt;(52.134);</code>\n<ul>\n<li>函数的返回值指定为 double 类型，函数参数是通过实参推导出来的，为 double 类型</li>\n</ul>\n</li>\n<li><code>auto ret3 = func&lt;int&gt;(52.134);</code>\n<ul>\n<li>函数的返回值指定为 int 类型，函数参数是通过实参推导出来的，为 double 类型</li>\n</ul>\n</li>\n<li><code>auto ret4 = func&lt;char, int&gt;(100);</code>\n<ul>\n<li>函数的参数为指定为 int 类型，函数返回值指定为 char 类型，不需要推导</li>\n</ul>\n</li>\n</ul>\n<p>当默认模板参数和模板参数自动推导同时使用时（优先级从高到低）：</p>\n<ul>\n<li><strong>如果可以推导出参数类型则使用推导出的类型</strong></li>\n<li><strong>如果函数模板无法推导出参数类型，那么编译器会使用默认模板参数</strong></li>\n<li><strong>如果无法推导出模板参数类型并且没有设置默认模板参数，编译器就会报错。</strong></li>\n</ul>\n<p>看一下下面的例子：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 函数模板定义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>T arg1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> U arg2 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arg1: \"</span> <span class=\"token operator\">&lt;&lt;</span> arg1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", arg2: \"</span> <span class=\"token operator\">&lt;&lt;</span> arg2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 模板函数调用</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//func ();    // 编译报错</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 测试输出</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>arg1<span class=\"token operator\">:</span> a<span class=\"token punctuation\">,</span> arg2<span class=\"token operator\">:</span> d</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>arg1<span class=\"token operator\">:</span> <span class=\"token number\">97</span><span class=\"token punctuation\">,</span> arg2<span class=\"token operator\">:</span> a</pre></td></tr></table></figure><p>分析一下调用的模板函数 func ()：</p>\n<ul>\n<li><code>func('a');</code> ：参数 T 被自动推导为 char 类型，U 使用的默认模板参数为 char 类型</li>\n<li><code>func(97, 'a');</code> ：参数 T 被自动推导为 int 类型，U 使用推导出的类型为 char</li>\n<li><code>func();</code> ：参数 T 没有指定默认模板类型，并且无法自动推导，编译器会直接报错\n<ul>\n<li><strong>模板参数类型的自动推导是根据模板函数调用时指定的实参进行推断的</strong>，没有实参则无法推导</li>\n<li>模板参数类型的自动推导不会参考函数模板中指定的默认参数。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"final-和-override\"><a class=\"markdownIt-Anchor\" href=\"#final-和-override\">#</a> final 和 override</h2>\n<hr>\n<h2 id=\"超长整形-long-long\"><a class=\"markdownIt-Anchor\" href=\"#超长整形-long-long\">#</a> 超长整形 long long</h2>\n<hr>\n<h2 id=\"静态断言-static_assert\"><a class=\"markdownIt-Anchor\" href=\"#静态断言-static_assert\">#</a> 静态断言 static_assert</h2>\n<hr>\n<h2 id=\"原始字面量\"><a class=\"markdownIt-Anchor\" href=\"#原始字面量\">#</a> 原始字面量</h2>\n<hr>\n<h1 id=\"c14\"><a class=\"markdownIt-Anchor\" href=\"#c14\">#</a> C++14</h1>\n<h1 id=\"c17\"><a class=\"markdownIt-Anchor\" href=\"#c17\">#</a> C++17</h1>\n<h2 id=\"结构化绑定\"><a class=\"markdownIt-Anchor\" href=\"#结构化绑定\">#</a> 结构化绑定</h2>\n<p>可以绑定 pair，tuple，数组，结构体，结构化绑定以后也可以修改原值，也可以使自定义类型支持结构化绑定，但是要修改 std</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token function\">func_two</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">func_two</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> mp <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> mp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> y <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>pair <span class=\"token function\">pa</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hihi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> y <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token number\">2.2</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">0</span> a</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token number\">1</span> b</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">4</span> hihi</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">/*       vector vec = &#123;1,2,3&#125;;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      auto&amp;[xx, yy, zz] = vec;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      cout &lt;&lt; xx &lt;&lt; endl; */</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">//vector 当然不能使用结构化绑定啦</span></pre></td></tr></table></figure>",
            "tags": [
                "C++"
            ]
        }
    ]
}