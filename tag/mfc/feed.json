{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"mfc\" tag",
    "description": "",
    "home_page_url": "https://adventure-yx.github.io",
    "items": [
        {
            "id": "https://adventure-yx.github.io/2023/06/02/VS%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "url": "https://adventure-yx.github.io/2023/06/02/VS%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "title": "Visual Studio中的字符处理",
            "date_published": "2023-06-02T07:12:08.000Z",
            "content_html": "<h1 id=\"l指令\"><a class=\"markdownIt-Anchor\" href=\"#l指令\">#</a> L 指令</h1>\n<p>字符串前面加 L 表示该字符串是 Unicode 字符串，可以将 ANSI 字符串转换为 Unicode 字符串，就是每个字符占 2 个字节。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"_t宏\"><a class=\"markdownIt-Anchor\" href=\"#_t宏\">#</a> _T () 宏</h1>\n<p>_T (&quot;&quot;) 是一个宏定义在 tchar.h 下。</p>\n<p>_T () 或者 TEXT () 宏，可以把引号括起来的字符串，根据环境选择合适的编码方式。</p>\n<ul>\n<li>如果定义的是 Unicode，那么_T (“abc”) 就相当于 L&quot;abc&quot;，也就是宽字符；</li>\n<li>如果是多字节编码，那么英文采用单字节，汉字采用单字节；</li>\n<li>在 Unicode 环境下，要求 LPCWSTR 的地方不可以给一个 char*，而在多字节编码下可以。</li>\n</ul>\n<blockquote>\n<p>Windows 使用两种字符集 ANSI 和 UNICODE，前者就是通常使用的单字节方式，但这种方式处理中文这样的双字节字符不方便，容易出现半个汉字的情况。而后者是双字节，方便处理双字节字符。Windows NT 的所有与字符有关的函数都提供两种方式的版本，Windows 9x 只支持 ANSI 方式。</p>\n</blockquote>\n<ul>\n<li>LPSTR：32bit 指针，指向一个字符串，每个字符占 1 个字节。</li>\n<li>LPCSTR：32bit 指针，指向一个常字符串，每个字符占 1 个字节。</li>\n<li>LPTSTR：32bit 指针，指向一个字符串，每个字节可能占 1 个字节或 2 个字节，取决于 Unicode 是否定义。</li>\n<li>LPCTSTR：32bit 指针，指向一个常字符串，每个字节可能占 1 个字节或 2 个字节，取决于 Unicode 是否定义。</li>\n</ul>\n<blockquote>\n<p>比如</p>\n<p><code>wchar_t Str[] = L&quot;Hello World!&quot;;</code>  是双字节存储字符串，_T 是与之适配的宏。</p>\n</blockquote>\n<p>当有 <code>#ifdef _UNICODE</code>  的时候，_T () 就是 L；</p>\n<p>当没有 <code>#ifdef _UNICODE</code>  的时候，_T () 就是 ANSI 的。</p>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/05/25/MFC/",
            "url": "https://adventure-yx.github.io/2023/05/25/MFC/",
            "title": "MFC",
            "date_published": "2023-05-25T02:12:08.000Z",
            "content_html": "<h1 id=\"vs应用程序工程中文件的组成结构\"><a class=\"markdownIt-Anchor\" href=\"#vs应用程序工程中文件的组成结构\">#</a> VS 应用程序工程中文件的组成结构</h1>\n<p>如果已经以 Debug 方式编译链接过程序，则会在解决方案文件夹下和工程子文件夹下各有一个名为 “Debug” 的文件夹，而如果是 Release 方式编译则会有名为 “Release” 的文件夹。这两种编译方式将产生两种不同版本的可执行文件：</p>\n<ul>\n<li>\n<p>Debug 版本</p>\n<p>可执行文件中包含了用于调试的信息和代码。</p>\n</li>\n<li>\n<p>Release 版本</p>\n<p>没有调试信息，不能进行调试，但可执行文件较小。</p>\n</li>\n</ul>\n<p>工程中文件结构：</p>\n<ol>\n<li>\n<p>解决方案相关文件</p>\n<p>包括解决方案文件夹下的.sdf 文件、.sln 文件、.suo 文件和 ipch 文件夹。</p>\n<p>.sdf 文件和 ipch 目录一般与智能提示、错误提示、代码恢复和团队本地仓库有关。</p>\n<p>.sln 文件和.suo 文件为 MFC 自动生成的解决方案文件，它包含当前解决方案中的工程信息，存储解决方案的设置。</p>\n</li>\n<li>\n<p>工程相关文件</p>\n<p>包括工程文件夹下的.vcxproj 文件和.vcxproj.filters 文件。</p>\n<p>.vcxproj 文件是 MFC 生成的工程文件，它包含当前工程的设置和工程所包含的文件等信息。</p>\n<p>.vcxproj.filters 文件存放工程的虚拟目录信息，也就是在解决方案浏览器中的目录结构信息。</p>\n</li>\n<li>\n<p>应用程序头文件和源文件</p>\n<p>应用程序向导（MFC Application Wizard）会根据应用程序的类型（单文档、多文档或基于对话框的程序）自动生成一些头文件和源文件，这些文件是工程的主体部分，用于实现主框架、文档、视图等。</p>\n<ul>\n<li>HelloWorld.h：应用程序的主头文件。主要包含由 CWinAppEx 类派生的 CHelloWorldApp 类的声明，以及 CHelloWorldApp 类的全局对象 theApp 的声明。</li>\n<li>HelloWorld.cpp：应用程序的主源文件。主要包含 CHelloWorldApp 类的实现，CHelloWorldApp 类的全局对象 theApp 的声明。</li>\n<li>MainFrm.h 和 MainFrm.cpp：从 CFrameWndEx 类派生出 CMainFrame 类，用于创建主框架、菜单栏、工具栏、状态栏等。</li>\n<li>HelloWorldDoc.h 和 HelloWorldDoc.cpp：从 CDocument 类派生出 CHelloWorldDoc 文档类，包含一些用来初始化文档、串行化（保存和装入）文档和调试的成员函数。</li>\n<li>HelloWorldView.h 和 HelloWorldView.cpp：从 CView 类派生出 CHelloWorldView 视图类，用来显示和打印文档数据，包含了一些绘图和用于调试的成员函数。</li>\n<li>ClassView.h 和 ClassView.cpp：从 CDockablePane 类派生出 CClassView 类，用于实现应用程序左侧面板的 Class View。</li>\n<li>FlieView.h 和 FlieView.cpp：从 CDockablePane 类派生出 CFlieView 类，用于实现应用程序左侧面板的 Flie View。</li>\n<li>OutputWnd.h 和 OutputWnd.cpp：从 CDockablePane 类派生出 COutputWnd 类，用于实现应用程序下侧面板的 Output。</li>\n<li>PropertiesWnd.h 和 PropertiesWnd.cpp：从 CDockablePane 类派生出 CPropertiesWnd 类，用于实现应用程序右侧面板的 Properties。</li>\n<li>ViewTree.h 和 ViewTree.cpp：由 CTreeCtrl 类派生出 CViewTree 类，用于实现出现在 ClassView 和 FileView 中的树视图。</li>\n</ul>\n</li>\n<li>\n<p>资源文件</p>\n<p>一般使用 MFC 生成窗口程序都会有对话框、图标、菜单等资源，应用程序向导会生成资源相关文件：res 目录、HelloWorld.rc 文件和 Resource.h 文件。</p>\n<ul>\n<li>res 目录：工程文件夹下的 res 目录中含有应用程序默认图标、工具栏使用图标等图标文件。</li>\n<li>HelloWorld.rc：包含默认菜单定义、字符串表和加速键表，制定了默认的 About 对话框和应用程序默认图标文件等。</li>\n<li>Resource.h：含有各种资源的 ID 定义。</li>\n</ul>\n</li>\n<li>\n<p>预编译头文件</p>\n<p>几乎所有 MFC 程序的文件都要包含 afxwin.h 等文件（外部依赖项），如果每次都编译一次则会大大减慢编译速度。所以把常用的 MFC 头文件都放到了 stdafx.h 中，然后由 stdafx.cpp 包含 stdafx.h 文件，编译器对 stdafx.cpp 只编译一次，并生成编译后的预编译头 HelloWorld.pch（Precomplied Header Flie），大大提高了编译效率。</p>\n</li>\n<li>\n<p>编译链接生成的文件</p>\n<p>工程文件夹下的 Debug 和 Release 子文件夹中包含了编译链接时产生的中间文件。</p>\n<p>解决方案文件夹下的 Debug 和 Release 子文件夹中主要包含有应用程序的可执行文件。</p>\n</li>\n</ol>\n<h1 id=\"mfc应用程序框架分析\"><a class=\"markdownIt-Anchor\" href=\"#mfc应用程序框架分析\">#</a> MFC 应用程序框架分析</h1>\n<p>程序运行都有入口函数，Windows 应用程序的入口函数时 WinMain 函数，MFC 程序也是从 WinMain 函数开始的。</p>\n<ul>\n<li>MFC 应用程序，使用 MFC 库，应用程序框架开发。</li>\n<li>SDK 应用程序，不使用 MFC 库，直接用 Windows API 函数进行软件开发。</li>\n</ul>\n<h2 id=\"sdk应用程序\"><a class=\"markdownIt-Anchor\" href=\"#sdk应用程序\">#</a> SDK 应用程序</h2>\n<pre><code class=\"language-cpp\">\n</code></pre>\n<h3 id=\"程序运行流程\"><a class=\"markdownIt-Anchor\" href=\"#程序运行流程\">#</a> 程序运行流程</h3>\n<ol>\n<li>进入 WinMain 函数</li>\n<li>初始化 WNDCLASSEX，调用 RegisterClassEx 函数注册窗口类</li>\n<li>调用 ShowWindow 和 UpdateWindow 函数显示并更新窗口</li>\n<li>进入消息循环</li>\n</ol>\n<blockquote>\n<p>关于消息循环</p>\n<p>Windows 应用程序是消息驱动的，系统或用户让应用程序进行某项操作或完成某个任务时会发送消息，进入程序的消息队列，然后消息循环会将消息队列中的消息取出，交予相应的窗口过程处理。</p>\n</blockquote>\n<h2 id=\"mfc应用程序\"><a class=\"markdownIt-Anchor\" href=\"#mfc应用程序\">#</a> MFC 应用程序</h2>\n<blockquote>\n<p>SDK 应用程序和 MFC 应用程序对比</p>\n<p>运行流程是类似的，都是先进行初始化过程，再注册并创建窗口，然后显示、更新窗口，最后进入消息循环，消息都由窗口过程函数处理。</p>\n</blockquote>\n<h2 id=\"mfc应用程序框架主要类之间的关系\"><a class=\"markdownIt-Anchor\" href=\"#mfc应用程序框架主要类之间的关系\">#</a> MFC 应用程序框架主要类之间的关系</h2>\n<p>自动生成的框架中比较重要的类包括：CHelloWorldApp、CMainFrame、CHelloWorldDoc 和 CHelloWorldView</p>\n<p>CHelloWorldApp 类处理消息，将收到的消息分发给相应的对象。</p>\n<p>CMainFrame 类是视图类 CHelloWorldView 的父窗口，CHelloWorldView 就显示在 CMainFrame 的客户区中。</p>\n<p>视图类 CHelloWorldView 用来显示文档类 CHelloWorldDoc 中的数据，并根据对视图类的操作修改文档类的数据。一个视图类只能跟一个文档类相联系，而一个文档类可以跟多个视图类相联系。</p>\n<h1 id=\"mfc消息映射机制\"><a class=\"markdownIt-Anchor\" href=\"#mfc消息映射机制\">#</a> MFC 消息映射机制</h1>\n<p>Windows 应用程序是消息驱动的。在 MFC 软件开发中，界面操作或者线程之间通信都会用到消息，通过对消息的处理实现相应的操作。比较典型的过程是，用户操作窗口，然后有消息产生，送给窗口的消息处理函数处理，对用户的操作做出响应。</p>\n<h2 id=\"什么是消息\"><a class=\"markdownIt-Anchor\" href=\"#什么是消息\">#</a> 什么是消息</h2>\n<p>窗口消息一般由三个部分组成：</p>\n<ul>\n<li>一个无符号整数，是消息值；</li>\n<li>消息附带的 WPARAM 类型的参数；</li>\n<li>消息附带的 LPARAM 类型的参数。</li>\n</ul>\n<p>实际一般所说的是狭义上的消息值，也就是一个无符号整数，经常被定义为宏。</p>\n<h2 id=\"什么是消息映射机制\"><a class=\"markdownIt-Anchor\" href=\"#什么是消息映射机制\">#</a> 什么是消息映射机制</h2>\n<p>MFC 使用一种消息映射机制来处理消息，在应用程序框架中的表现就是，<strong>一个消息与消息处理函数 —— 对应的消息映射表，以及消息处理函数的声明和实现等代码</strong>。</p>\n<p>当窗口收到消息时，会到消息映射表中查找该消息对应的消息处理函数，然后由消息处理函数进行相应的处理。</p>\n<p>SDK 编程时需要在窗口过程中 —— 判断消息值进行相应的处理，相比之下 MFC 的消息映射机制要方便好用的多。</p>\n<h2 id=\"windows消息分类\"><a class=\"markdownIt-Anchor\" href=\"#windows消息分类\">#</a> Windows 消息分类</h2>\n<p>Windows 消息分为<strong>系统消息</strong>和<strong>用户自定义消息</strong>。系统消息有三种：</p>\n<ul>\n<li>标准 Windows 消息。除 WM_COMMAND 外的 WM_开头的消息是标准消息。例如：WM_CREATE、WM_CLOSE。</li>\n<li>命令消息。WM_COMMAND，消息中附带了标志符 ID 来区分是来自哪个菜单、工具栏按钮或加速键的消息。</li>\n<li>通知消息。通知消息一般由列表框等子窗口发送给父窗口，消息名也是 WM_COMMAND，其中附带了控件通知码来区分控件。</li>\n</ul>\n<p>CWnd 的派生类都可以接收到标准 Windows 消息、通知消息和命令消息。命令消息还可以由文档类等接收。</p>\n<p>用户自定义消息实际上就是用户定义一个宏作为消息，此宏的值应该大于等于 WM_USER，然后宏就可以跟系统消息一样使用，窗口类中可以定义它的处理函数。</p>\n<h2 id=\"消息映射表\"><a class=\"markdownIt-Anchor\" href=\"#消息映射表\">#</a> 消息映射表</h2>\n<p>除了一些没有基类的类或 CObject 的直接派生类外，其他的类都可以自动生成消息映射表。</p>\n<p>消息映射表如下（CMainFrame.cpp）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">BEGIN_MESSAGE_MAP</span><span class=\"token punctuation\">(</span>CMainFrame<span class=\"token punctuation\">,</span> CFrameWndEx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">ON_WM_CREATE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ON_COMMAND</span><span class=\"token punctuation\">(</span>ID_VIEW_CUSTOMIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnViewCustomize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">ON_REGISTERED_MESSAGE</span><span class=\"token punctuation\">(</span>AFX_WM_CREATETOOLBAR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnToolbarCreateNew<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">ON_COMMAND_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">ON_UPDATE_COMMAND_UI_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnUpdateApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">ON_WM_SETTINGCHANGE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">END_MESSAGE_MAP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 BEGIN_MESSAGE_MAP 和 END_MESSAGE_MAP 之间的内容成为消息映射入口项。</p>\n<p>消息映射除了在 CMainFrame 的实现文件中添加消息映射表外，在类的定义文件 MainFrm.h 中还会添加一个宏调用： <code> DECLEAR_MESSAGE_MAP</code></p>\n<p>一般这个宏调用写在类定义的结尾处。</p>\n<h2 id=\"添加消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#添加消息处理函数\">#</a> 添加消息处理函数</h2>\n<ol>\n<li>\n<p>在类定义中加入消息处理函数的函数声明，以 afx_msg 打头。例如 MainFrm.h 中的声明：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>afx_msg <span class=\"token keyword\">int</span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>LPCREATESTRUCT lpCreateStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tafx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnViewCustomize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tafx_msg LRESULT <span class=\"token function\">OnToolbarCreateNew</span><span class=\"token punctuation\">(</span>WPARAM wp<span class=\"token punctuation\">,</span> LPARAM lp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tafx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnApplicationLook</span><span class=\"token punctuation\">(</span>UINT id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tafx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnUpdateApplicationLook</span><span class=\"token punctuation\">(</span>CCmdUI<span class=\"token operator\">*</span> pCmdUI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tafx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnSettingChange</span><span class=\"token punctuation\">(</span>UINT uFlags<span class=\"token punctuation\">,</span> LPCTSTR lpszSection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在类的消息映射表中添加该消息的消息映射入口项。例如 MainFrm.h 中的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_WM_CREATE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">ON_COMMAND</span><span class=\"token punctuation\">(</span>ID_VIEW_CUSTOMIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnViewCustomize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ON_REGISTERED_MESSAGE</span><span class=\"token punctuation\">(</span>AFX_WM_CREATETOOLBAR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnToolbarCreateNew<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">ON_COMMAND_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">ON_UPDATE_COMMAND_UI_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnUpdateApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">ON_WM_SETTINGCHANGE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>在类的实现中添加消息处理函数的函数实现。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">CMainFrame</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>LPCREATESTRUCT lpCreateStruct<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>通过以上 3 个步骤后，WM_CREATE 等消息就可以在窗口类中被消息处理函数处理了。</p>\n<h2 id=\"各种windows消息的消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#各种windows消息的消息处理函数\">#</a> 各种 Windows 消息的消息处理函数</h2>\n<blockquote>\n<p>标准 Windows 消息。除 WM_COMMAND 外的 WM_开头的消息是标准消息。例如：WM_CREATE、WM_CLOSE。</p>\n</blockquote>\n<p>标准 Windows 消息的消息处理函数都与 WM_CREATE 消息类似。</p>\n<blockquote>\n<p>命令消息。WM_COMMAND，消息中附带了标志符 ID 来区分是来自哪个菜单、工具栏按钮或加速键的消息。</p>\n</blockquote>\n<p>命令消息的消息映射入口如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_COMMAND</span><span class=\"token punctuation\">(</span>ID_VIEW_CUSTOMIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnViewCustomize<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>消息为 <code>ID_VIEW_CUSTOMIZE</code></li>\n<li>消息处理函数为 <code>OnViewCustomize</code></li>\n</ul>\n<p>如果想用批量处理函数批量处理这些命令消息，则可以像 CMainFrame 消息映射表中的：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_COMMAND_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>值在 <code>ID_VIEW_APPLOOK_WIN_2000</code>  到 <code>ID_VIEW_APPLOOK_WINDOWS_7</code>  之间的菜单项等命令消息都由 CMainFrame 的 <code>OnApplicationLook</code>  函数处理。</li>\n<li>函数原型为 <code>afx_msg void OnApplicationLook(UINT id);</code></li>\n<li>参数 id 为用户操作的菜单项等的 ID</li>\n</ul>\n<blockquote>\n<p>通知消息。通知消息一般由列表框等子窗口发送给父窗口，消息名也是 WM_COMMAND，其中附带了控件通知码来区分控件。</p>\n</blockquote>\n<p>在操作列表框等控件时往往会给父窗口发送 <code>WM_NOTIFY</code>  通知消息。</p>\n<p><code>WM_NOTIFY</code>  消息的 <code>WPARAM</code>  参数为发送通知消息的控件的 ID； <code> LPARAM</code>  参数指向一个结构体，可能是 NMHDR 结构体，也可能是第一个元素为 NMHDR 结构体变量的其他结构体。</p>\n<p>NMHDR 结构体定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Typedef <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagNMHDR</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    HWND hwndFrom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT idFrom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    UINT code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>NMHDR<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>hwndFrom 为发送通知消息控件的句柄；</li>\n<li>idFrom 为控件 ID；</li>\n<li>code 为要处理的通知消息的通知码，例如 NM_CLICK</li>\n</ul>\n<p>通知消息的消息映射入口形式如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_NOTIFY</span><span class=\"token punctuation\">(</span>wNotifyCode<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> memberFxn<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>wNotifyCode 为要处理的通知消息通知码；</li>\n<li>id 为控件标识 ID；</li>\n<li>memberFxn 为此消息的消息处理函数。</li>\n</ul>\n<blockquote>\n<p>用户自定义消息</p>\n<ol>\n<li>定义消息宏</li>\n<li>在消息映射表中添加消息映射入口项</li>\n<li>在 MainFrm.h 中添加消息处理函数的函数声明</li>\n<li>在 MainFrm.cpp 中实现此函数</li>\n</ol>\n</blockquote>\n<h1 id=\"对话框-创建对话框\"><a class=\"markdownIt-Anchor\" href=\"#对话框-创建对话框\">#</a> 对话框 - 创建对话框</h1>\n<p><img data-src=\"image-20230525105517622.png\" alt=\"image-20230525105517622\"></p>\n<ol>\n<li>创建对话框资源，添加控件。</li>\n<li>创建对话框类，添加控件变量，添加控件的消息处理函数。</li>\n</ol>\n<blockquote>\n<p>添加控件变量时，类的成员变量一般以 m_开头，标识它是一个成员变量。</p>\n</blockquote>\n<h1 id=\"对话框类的数据交换和检验\"><a class=\"markdownIt-Anchor\" href=\"#对话框类的数据交换和检验\">#</a> 对话框类的数据交换和检验</h1>\n<p>在程序运行界面中，用户往往会改变控件的属性，例如在编辑框中输入字符串，或者改变组合框中的选中项，又或者改变复选框的选中状态等。</p>\n<p><strong>控件的属性改变后，MFC 会相应的修改控件关联变量的值</strong>。这种同步的改变是通过<strong> MFC 为对话框类自动生成的成员函数 DoDataExchange () 函数</strong>实现的，这也叫做<strong>对话框的数据交换和检验机制</strong>。</p>\n<p>为三个编辑框添加了变了之后，在 AdditionTestDlg.cpp 中 CAdditionTestDlg 的 DoDataExchange () 函数的函数体中多了三条 DDX_Text 调用语句。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DoDataExchange</span><span class=\"token punctuation\">(</span>CDataExchange<span class=\"token operator\">*</span> pDX<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 处理 MFC 默认的数据交换</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">CDialogEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DoDataExchange</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 处理控件 IDC_SUMMAND_EDIT 和变量 m_editSummand 之间的数据交换</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">DDX_Text</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">,</span> IDC_SUMMAND_EDIT<span class=\"token punctuation\">,</span> m_editSummand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 处理控件 IDC_ADDEND_EDIT 和变量 m_editAddend 之间的数据交换</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">DDX_Text</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">,</span> IDC_ADDEND_EDIT<span class=\"token punctuation\">,</span> m_editAddend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 处理控件 IDC_SUM_EDIT 和变量 m_editSum 之间的数据交换</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">DDX_Text</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">,</span> IDC_SUM_EDIT<span class=\"token punctuation\">,</span> m_editSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>数据交换机制：</p>\n<p>如果在程序运行界面中输入被加数，通过 CAdditionTestDlg 的 DoDataExchange () 函数可以将输入的值保存到 m_editSummand 变量中；反之，如果程序运行中修改了变量 m_editSummand 的值，则通过 CAdditionTestDlg 的 DoDataExchange () 函数也可以将新的变量值显示到被加数的编辑框中。</p>\n<p>但这种数据交换机制中，DoDataExchange () 函数并不是自动调用的，而是需要我们在程序中调用 CDialogEx::UpdateData () 函数，由 UpdateData () 再去自动调用 DoDataExchange ()</p>\n</blockquote>\n<p>CDialogEx::UpdateData () 函数原型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>BOOL bSaveAndValidate <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 bSaveAndValidate 用于指示数据传输的方向，TRUE 表示从控件传给变量，FALSE 表示从变量传给控件。默认为 TRUE，从控件传给变量。</li>\n<li>返回值表示操作是否成功。</li>\n</ul>\n<h1 id=\"对话框-为控件添加消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#对话框-为控件添加消息处理函数\">#</a> 对话框 - 为控件添加消息处理函数</h1>\n<h2 id=\"添加消息处理函数-2\"><a class=\"markdownIt-Anchor\" href=\"#添加消息处理函数-2\">#</a> 添加消息处理函数</h2>\n<ul>\n<li>\n<p>使用类向导添加消息处理函数</p>\n<p><img data-src=\"image-20230525133212478.png\" alt=\"image-20230525133212478\"></p>\n</li>\n<li>\n<p>通过资源视图 “Add Event Handler…” 添加消息处理函数</p>\n<p>在按钮控件上点击右键进入</p>\n<p><img data-src=\"image-20230525133538866.png\" alt=\"image-20230525133538866\"></p>\n</li>\n<li>\n<p>在控件的属性视图中添加消息处理函数</p>\n<p><img data-src=\"image-20230525133733319.png\" alt=\"image-20230525133733319\"></p>\n</li>\n<li>\n<p>双击控件添加消息处理函数</p>\n<p>最直接最简单的方法，双击 “计算” 按钮，MFC 会自动为其在 CAdditionDlg 类中添加 BN_CLICKED 消息的处理函数 OnBnClickedAddButton ()</p>\n</li>\n</ul>\n<h2 id=\"在消息处理函数中添加自定义功能\"><a class=\"markdownIt-Anchor\" href=\"#在消息处理函数中添加自定义功能\">#</a> 在消息处理函数中添加自定义功能</h2>\n<p>添加消息处理函数之后，得到一个空的 OnBnClickedAddButton () 函数的函数体，要实现我们想要的功能，还需要在函数体中加入自定义功能代码。</p>\n<p>要实现加法功能：获取被加数和加数的数值，然后计算他们的和并显示到和的编辑框里。函数体为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedAddButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加控件通知处理程序代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 将各控件中的数据保存到相应的位置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 将被加数和加数的和赋值给 m_editSum</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tm_editSum <span class=\"token operator\">=</span> m_editSummand <span class=\"token operator\">+</span> m_editAddend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 根据各变量的值更新相应的控件。和编辑框会显示 m_editSum 的值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"设置控件的tab顺序\"><a class=\"markdownIt-Anchor\" href=\"#设置控件的tab顺序\">#</a> 设置控件的 Tab 顺序</h2>\n<ul>\n<li>Ctrl+D</li>\n<li>主菜单 -&gt;format-&gt;tab order</li>\n</ul>\n<h1 id=\"对话框-模态与非模态对话框及其弹出过程\"><a class=\"markdownIt-Anchor\" href=\"#对话框-模态与非模态对话框及其弹出过程\">#</a> 对话框 - 模态与非模态对话框及其弹出过程</h1>\n<ul>\n<li>\n<p>模态对话框</p>\n<p>弹出后，本应用程序其他窗口不再接受用户输入，只有该对话框相应用户输入，在对他进行操作退出后，其他窗口才能继续与用户交互。</p>\n</li>\n<li>\n<p>非模态对话框</p>\n<p>弹出后，本应用程序其他窗口仍能相应用户输入。非模态对话框一般用来显示提示信息等。</p>\n</li>\n<li>\n<p>对话框是怎么弹出的？</p>\n<p>应用程序 App 类实例的初始化工作由 <code>CAdditionTestApp::InitInstance()</code>  实现</p>\n<p>其中后半段有定义对话框对象并弹出对话框：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CAdditionTestDlg dlg<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 定义对话框类 CAdditionDlg dlg</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tm_pMainWnd <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dlg<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 将 dlg 设置为主窗口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  INT_PTR nResponse <span class=\"token operator\">=</span> dlg<span class=\"token punctuation\">.</span><span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 弹出对话框 dlg，并将 DoModal 函数返回值（退出时点击按钮的 ID）赋值给 nResponse</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nResponse <span class=\"token operator\">==</span> IDOK<span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 判断返回值是否为 OK 按钮（其 ID 为 IDOK，已删除）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">// TODO: “确定” 来关闭对话框的代码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nResponse <span class=\"token operator\">==</span> IDCANCEL<span class=\"token punctuation\">)</span>\t\t\t\t\t\t<span class=\"token comment\">// 判断返回值是否为 Cancel 按钮（其 ID 为 IDCANCEL，退出按钮）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// TODO: “取消” 来关闭对话框的代码</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>弹出对话框比较关键的一个函数，就是对话框类的<strong> DoModal () 函数</strong>。</p>\n<p><code>CDialog::DoModal()</code>  函数的原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">virtual</span> INT_PTR <span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>返回值：整数值，指定了传递给 CDialog::EndDialog（该函数用于关闭对话框）的 nResult 参数值。如果不能创建对话框，则返回 - 1；如果出现其他错误，则返回 IDABORT</li>\n<li>调用了它对话框就会弹出，返回值是退出对话框时所点的按钮的 ID，比如，点击 “退出” 按钮，那么 DoModal 返回值就是 IDCANCEL</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"添加模态对话框并弹出它\"><a class=\"markdownIt-Anchor\" href=\"#添加模态对话框并弹出它\">#</a> 添加模态对话框并弹出它</h2>\n<ol>\n<li>\n<p>右键资源文件中 “Dialog” 文件夹，插入 Dialog，创建一个新的对话框模板</p>\n<p>设置 ID 为 IDD_TIP_DIALOG，Caption 为 “提示 “</p>\n</li>\n<li>\n<p>在对话框模板上右键选择 Add Class… 添加对话框类</p>\n<p>设置”class name“为 CTipDlg，在 Solution Explorer 中生成 TipDlg.h 和 TipDlg.cpp.</p>\n</li>\n<li>\n<p>要在点” 计算 “按钮之后弹出此提示对话框，那么就要在” 计算 “按钮的消息处理函数 OnBnClickedAddButton () 中访问提示对话框类。所以为了访问 CTipDlg 类，在 AdditionTestDlg.cpp 中包含 CTipDlg 的头文件 <code>#include &quot;TipDlg.h&quot;</code></p>\n</li>\n<li>\n<p>修改 OnBnClickedAddButton () 的函数体，在所有代码之前，构造 CTipDlg 类的对象 tipDlg，并通过语句 tipDlg.DoModal (); 弹出对话框，最后判断 DoModal () 函数的返回值是 IDOK 还是 IDCANCEL 来确定是否继续进行计算。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedAddButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tINT_PTR nRes<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 用于保存 DoModal 函数的返回值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tCTipDlg tipDlg<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 构造对话框类 CTipDlg 的实例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tnRes <span class=\"token operator\">=</span> tipDlg<span class=\"token punctuation\">.</span><span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 弹出对话框</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IDCANCEL <span class=\"token operator\">==</span> nRes<span class=\"token punctuation\">)</span>\t\t\t\t\t<span class=\"token comment\">// 判断对话框退出后返回值是否为 IDCANCEL，如果是则 return, 否则继续向下执行</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 将各控件中的数据保存到相应的位置</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 将被加数和加数的和赋值给 m_editSum</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tm_editSum <span class=\"token operator\">=</span> m_editSummand <span class=\"token operator\">+</span> m_editAddend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 根据各变量的值更新相应的控件。和编辑框会显示 m_editSum 的值</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试</p>\n</li>\n</ol>\n<h2 id=\"添加非模态对话框并显示\"><a class=\"markdownIt-Anchor\" href=\"#添加非模态对话框并显示\">#</a> 添加非模态对话框并显示</h2>\n<p>非模态对话框显示后，程序其他窗口仍然能正常运行，可以响应用户输入，还可以相互切换。</p>\n<p>实际上，模态和非模态对话框在创建对话框资源和生成对话框类上是没有区别的。</p>\n<p>需要修改的是，对话框类实例的创建和显示，也就是在 CAdditionTestDlg::OnBnClickedAddButton () 函数体中添加的对话框显示代码。具体步骤：</p>\n<ol>\n<li>\n<p>在 AdditionTestDlg.h 中包含 CTipDlg 头文件并定义 CTipDlg 类型的指针成员变量。</p>\n<p>删除 <code>AdditionTestDlg.cpp</code>  中包含的 <code>#include &quot;TipDlg.h&quot;</code> ，而在 <code>AdditionTestDlg.h</code>  中包含 <code>#include &quot;TipDlg.h&quot;</code> ，因为我们要在 AdditionTestDlg.h 中定义 CTipDlg 类型的指针变量，所以要先包含它的头文件；然后在 AdditionTestDlg.h 中为 CAdditionTestDlg 类添加 private 成员变量 CTipDlg *m_pTipDlg;</p>\n</li>\n<li>\n<p>在 CAdditionTestDlg 类的狗在函数中初始化成员变量 <code>m_pTipDlg(NULL)</code></p>\n</li>\n<li>\n<p>修改 CAdditionTestDlg::OnBnClickedAddButton () 函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedAddButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加控件通知处理程序代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 模态对话框</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tINT_PTR nRes;\t\t\t\t\t\t\t// 用于保存 DoModal 函数的返回值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tCTipDlg tipDlg;\t\t\t\t\t\t\t// 构造对话框类 CTipDlg 的实例</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tnRes = tipDlg.DoModal ();\t\t\t\t// 弹出对话框</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tif (IDCANCEL == nRes)\t\t\t\t\t// 判断对话框退出后返回值是否为 IDCANCEL，如果是则 return, 否则继续向下执行</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\treturn;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 非模态对话框</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 动态创建对话框</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_pTipDlg <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 创建非模态对话框实例</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tm_pTipDlg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CTipDlg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tm_pTipDlg<span class=\"token operator\">-></span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>IDD_TIP_DIALOG<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 显示非模态对话框</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tm_pTipDlg<span class=\"token operator\">-></span><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>SW_SHOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 将各控件中的数据保存到相应的位置</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 将被加数和加数的和赋值给 m_editSum</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tm_editSum <span class=\"token operator\">=</span> m_editSummand <span class=\"token operator\">+</span> m_editAddend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 根据各变量的值更新相应的控件。和编辑框会显示 m_editSum 的值</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>因为此对话框实例是动态创建的，所以需要手动删除动态对象来销毁对话框。我们在 CAdditionTestDlg 类的析构函数中添加删除代码。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">CAdditionTestDlg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 如果非模态对话框已经创建则删除它</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_pTipDlg <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span> m_pTipDlg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试。</p>\n</li>\n</ol>\n<h1 id=\"对话框-属性页对话框及其相关类\"><a class=\"markdownIt-Anchor\" href=\"#对话框-属性页对话框及其相关类\">#</a> 对话框 - 属性页对话框及其相关类</h1>\n<p>右键点属性弹出的对话框，通过标签切换各个界面。</p>\n<p>主要用到的类：CPropertyPage 类和 CPropertySheet 类。</p>\n<ul>\n<li>\n<p>CPropertyPage 类</p>\n<p>CPropertyPage 类继承自 CDialog 类，它被用于处理某单个属性页，所以要为每个属性页都创建一个继承自 CPropertyPage 类的子类</p>\n<ul>\n<li>\n<p>构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">CPropertyPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">CPropertyPage</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tUINT nIDTemplate<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    UINT nIDCaption <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    DWORD dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROPSHEETPAGE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">CPropertyPage</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tLPCTSTR lpszTemplateName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    UINT nIDCaption <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    DWORD dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROPSHEETPAGE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li></li>\n</ul>\n</li>\n<li>\n<p>CPropertySheet 类</p>\n<p>CPropertySheet 类继承自 CWnd 类，它是属性表类，负责加载、打开或删除属性页，并可以在属性页对话框中切换属性页，和对话框类似有模态和非模态两种。</p>\n</li>\n<li></li>\n</ul>\n<h1 id=\"对话框-向导对话框\"><a class=\"markdownIt-Anchor\" href=\"#对话框-向导对话框\">#</a> 对话框 - 向导对话框</h1>\n<h1 id=\"对话框-消息对话框\"><a class=\"markdownIt-Anchor\" href=\"#对话框-消息对话框\">#</a> 对话框 - 消息对话框</h1>\n<h1 id=\"对话框-文件对话框\"><a class=\"markdownIt-Anchor\" href=\"#对话框-文件对话框\">#</a> 对话框 - 文件对话框</h1>\n<h1 id=\"对话框-字体对话框\"><a class=\"markdownIt-Anchor\" href=\"#对话框-字体对话框\">#</a> 对话框 - 字体对话框</h1>\n<h1 id=\"对话框-颜色对话框\"><a class=\"markdownIt-Anchor\" href=\"#对话框-颜色对话框\">#</a> 对话框 - 颜色对话框</h1>\n<h1 id=\"常用控件\"><a class=\"markdownIt-Anchor\" href=\"#常用控件\">#</a> 常用控件</h1>\n<h1 id=\"菜单与cmenu类\"><a class=\"markdownIt-Anchor\" href=\"#菜单与cmenu类\">#</a> 菜单与 CMenu 类</h1>\n<ul>\n<li>\n<p>下拉式菜单</p>\n<p>一般在窗口标题栏下面显示，通常是由主菜单栏、子菜单及子菜单中的菜单项和分割条组成。</p>\n</li>\n<li>\n<p>弹出式菜单</p>\n<p>一般通过单击鼠标右键显示，它的主菜单不可见，只显示子菜单。</p>\n</li>\n</ul>\n<p>菜单可以在 VS 的 Resource View 资源视图中直接创建编辑。打开资源视图中的 Menu 中 ID 为 IDR_MAINFRAME 的菜单资源。</p>\n<p>点击菜单栏中的某一项会弹出子菜单，子菜单中有多个菜单项和分割条。菜单项中有”…“表示点击后会弹出对话框。带下划线的表示热键</p>\n<h1 id=\"工具栏与ctoolbar类\"><a class=\"markdownIt-Anchor\" href=\"#工具栏与ctoolbar类\">#</a> 工具栏与 CToolBar 类</h1>\n<p>打开资源视图中的 ToolBar 中 ID 为 IDR_MAINFRAME 的工具栏资源。</p>\n<h1 id=\"状态栏\"><a class=\"markdownIt-Anchor\" href=\"#状态栏\">#</a> 状态栏</h1>\n<p>状态栏一般在窗口的最底部，用来显示各种状态。</p>\n<p>状态栏实际上也是一个窗口，一般分为几个窗格，每个窗格分别用来显示不同的信息和状态等，如菜单项和工具栏按钮的提示信息。</p>\n<p>用 MFC 向导生成的单文档或多文档程序都会自动创建状态栏，在结果界面中可以看到窗口底部有个状态栏，该状态栏被分为了几个窗格，分别用来显示菜单项和工具栏按钮的提示信息及 Caps Lock、Num Lock、Scroll Lock 键的状态。</p>\n<p><img data-src=\"C:%5CUsers%5CAdministrator%5CDocuments%5CMFC%5Cimage-20230529160507134.png\" alt=\"image-20230529160507134\"></p>\n<p>也可以自定义状态栏，加入新的提示信息或指示器。</p>\n<h2 id=\"cstatusbar类\"><a class=\"markdownIt-Anchor\" href=\"#cstatusbar类\">#</a> CStatusBar 类</h2>\n<p>MFC 为状态栏提供了 CStatusBar 类，封装了状态栏的属性和操作。</p>\n<p>CStatusBar 类的几个主要成员函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个状态栏</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span> pParentWnd<span class=\"token punctuation\">,</span> DWORD dwStyle <span class=\"token operator\">=</span> WS_CHILD<span class=\"token operator\">|</span>WS_VISIBLE<span class=\"token operator\">|</span>CBRS_BOTTOM<span class=\"token punctuation\">,</span> UINT nID <span class=\"token operator\">=</span> AFX_IDW_STATUS_BAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 pParentWnd 为状态栏父窗口指针。</li>\n<li>参数 dwStyle 为状态栏风格，除了标准 windows 风格外它还支持：\n<ul>\n<li>CBRS_TOP：位于框架窗口顶部</li>\n<li>CBRS_BOTTOM：位于框架窗口顶部</li>\n<li>CBRS_NOALIGN：父窗口大小改变时状态栏不会被重新定位</li>\n</ul>\n</li>\n<li>参数 nID 指定状态栏的 ID</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 为每个指示器设置显示文本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BOOL <span class=\"token function\">SetIndicators</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> UINT<span class=\"token operator\">*</span> IpIDArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nIDCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用 IpIDArray 数组中的对应元素为每个指示器设置一个 ID，然后加载每个 ID 代表的字符串，设置为这些指示器的显示文本。</p>\n<ul>\n<li>参数 IpIDArray 为指向一个 ID 数组的指针</li>\n<li>参数 nIDCount 为 IpIDArray 数组的元素个数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>UINT <span class=\"token function\">GetItemID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>获取由 nIndex 指定的指示器的 ID。</p>\n<ul>\n<li>参数 nIndex 为要获取 ID 的指示器索引</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString <span class=\"token function\">GetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>获取状态栏窗格中显示的文本。</p>\n<ul>\n<li>参数 nIndex 为要获取文本的窗格索引</li>\n<li>返回值为包含窗格文本的 CString 对象</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">SetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">,</span> LPCTSTR lpszNewText<span class=\"token punctuation\">,</span> BOOL bUpdate <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>设置状态窗格的显示文本。</p>\n<ul>\n<li>参数 nIndex 为要设置文本的窗格索引</li>\n<li>参数 lpszNewText 为指向新的窗格文本的指针</li>\n<li>参数 bUpdate 表示是否设置后立即更新显示</li>\n</ul>\n<h2 id=\"状态栏创建\"><a class=\"markdownIt-Anchor\" href=\"#状态栏创建\">#</a> 状态栏创建</h2>\n<p>在 MainFrm.h 中可以看到，CMainFrame 类的成员变量中创建状态栏使用的是 CMFCStatusBar 类对象。CMFCStatusBar 类和 CStatusBar 类用法类似，功能更加丰富。</p>\n<ol>\n<li>\n<p>构造一个 CMFCStatusBar 类的对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CMFCStatusBar     m_wndStatusBar<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>调用 CMFCStatusBar::Create 函数来创建状态栏窗口。</p>\n<p>在 CMainFrame::OnCreate 函数的实现中，可以找到 CMFCStatusBar::Create 函数的调用</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token function\">TRACE0</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未能创建状态栏\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 未能创建</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>调用 CMFCStatusBar::SetIndicators 函数为状态栏划分窗格，并为每个指示器设置显示文本。</p>\n<p>该函数需要一个 ID 数组的参数，在 MainFrm.cpp 中定义了如下一个窗格 ID 的数组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> UINT indicators<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tID_SEPARATOR<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// 状态行指示器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tID_INDICATOR_CAPS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tID_INDICATOR_NUM<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tID_INDICATOR_SCRL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>indicators 数组定义了状态栏窗格的划分信息。</p>\n<p>第一个元素一般为 ID_SEPARATOR，对应的窗格用来显示命令提示信息，后三项为指示器文本的字符 ID，可以根据这些 ID 在 String Table 字符串资源中找到相应的字符串。查找方法，在 Resource View 资源视图中，打开 String Table 字符串资源，可以看到 ID、Value 和 Caption 三列，ID 对应的 Caption 列文本就是要查找的字符串。</p>\n<p>划分窗格</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetIndicators</span><span class=\"token punctuation\">(</span>indicators<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>indicators<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>之后我们就可以通过 CMFCStatusBar::SetPaneText 设置窗格文本。</p>\n</li>\n</ol>\n<h2 id=\"状态栏应用实例-添加时间窗格\"><a class=\"markdownIt-Anchor\" href=\"#状态栏应用实例-添加时间窗格\">#</a> 状态栏应用实例 - 添加时间窗格</h2>\n<ol>\n<li>\n<p>在资源视图的 String Table 中添加新的字符串资源，ID 为 ID_INDICATOR_TIME，Caption 为 “00:00:00”。这是为了给时间的显示预留空间，因为状态栏会根据字符串的长度为相应的窗格确定缺省宽度。</p>\n</li>\n<li>\n<p>在 indicators 数组插入 ID_INDICATOR_TIME</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> UINT indicators<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tID_SEPARATOR<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// 状态行指示器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tID_INDICATOR_CAPS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tID_INDICATOR_NUM<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tID_INDICATOR_SCRL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tID_INDICATOR_TIME<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>要实时显示系统时间，就需要一个定时器，每秒钟更新一次时间显示。在 CMainFrame::OnCreate 函数中开启定时器</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">CMainFrame</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>LPCREATESTRUCT lpCreateStruct<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CFrameWndEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>lpCreateStruct<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 启动定时器，定时器 ID 为 1，定时时间为 1000ms</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 Class View 类视图中找到 CMainFrame 类，右键点击属性，然后在属性页中，点工具栏上的 Messages 消息按钮，显示出消息列表，找到 WM_TIMER 消息，添加其消息处理函数 <code>void CMainFrame::OnTimer(UINT_PTR nIDEvent)</code> ，并修改此函数实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMainFrame</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>UINT_PTR nIDEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加消息处理程序代码和 / 或调用默认值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tCString strTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 获取当前系统时间，并保存到 curTime</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tCTime curTime <span class=\"token operator\">=</span> <span class=\"token class-name\">CTime</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 格式化 curTime, 将字符串保存到 strTime</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstrTime <span class=\"token operator\">=</span> curTime<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%H:%M:%S\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 在状态栏的时间窗格中显示系统时间字符串</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tm_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> strTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token class-name\">CFrameWndEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>nIDEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试实现</p>\n</li>\n</ol>\n<h1 id=\"文档视图框架\"><a class=\"markdownIt-Anchor\" href=\"#文档视图框架\">#</a> 文档 / 视图框架</h1>\n<p>MFC 向导自动生成的项目中包含 CxxxDoc 类，CxxxView 类和 CMainFrame 类。</p>\n<p>文档 / 视图结构是 MFC 提供的一种设计，它将数据的处理和显示分开，这样更便于对程序的维护和扩展。</p>\n<ul>\n<li>\n<p>文档</p>\n<p>文档对象用于管理和维护数据，包括保存数据，取出数据以及修改数据等操作，在数据被修改以后，文档可以通知其对应的所有视图更新显示。</p>\n</li>\n<li>\n<p>视图</p>\n<p>视图对象将文档中的数据可视化，负责从文档对象中取出数据显示给用户，并接受用户的输入和编辑，将数据的改变反映给文档对象。视图充当了文档和用户之间媒介的角色。</p>\n</li>\n<li>\n<p>框架</p>\n<p>一个文档可能有多个视图界面，这就需要有框架来管理。框架就是用来管理文档和视图的。框架窗口是应用程序的主窗口，应用程序执行时会先创建一个最顶层的框架窗口。视图窗口是没有菜单和边界的子窗口，它必须包含在框架窗口中，即置于框架窗口的客户区内。</p>\n</li>\n</ul>\n<h2 id=\"文档模板\"><a class=\"markdownIt-Anchor\" href=\"#文档模板\">#</a> 文档模板</h2>\n<p>文档模板中存放了文档、视图和框架相关的信息，应用程序通过文档模板创建文档对象，框架窗口对象和视图对象。另外，文档、视图、框架之间的关系也是文档模板来管理的。</p>\n<p>在 HelloWorld.cpp 中，CHelloWorldApp 应用程序类的成员函数 <code>CHelloWorldApp::InitInstance()</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token class-name\">CHelloWorldApp</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 注册应用程序的文档模板。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 文档模板将用作文档、框架窗口和视图之间的连接</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tCSingleDocTemplate<span class=\"token operator\">*</span> pDocTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tpDocTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CSingleDocTemplate</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tIDR_MAINFRAME<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CHelloWorldDoc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CMainFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 主 SDI 框架窗口</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CHelloWorldView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pDocTemplate<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">AddDocTemplate</span><span class=\"token punctuation\">(</span>pDocTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在构造文档模板类 CSingleDocTemplate 的对象时，第一个参数是资源 ID:IDR_MAINFRAME，它包括框架窗口图标等，后面 3 个参数是 RUNTIME_CLASS 宏的调用，RUNTIME_CLASS 用于获取类的运行信息，文档模板可以根据这些动态创建信息来创建相应类的对象，即文档对象、框架窗口对象和视图对象。</p>\n<p>AddDocTemplate (pDocTemplate) 函数用来注册文档模板对象。</p>\n<h2 id=\"框架类-文档类-视图类\"><a class=\"markdownIt-Anchor\" href=\"#框架类-文档类-视图类\">#</a> 框架类、文档类、视图类</h2>\n<ul>\n<li>\n<p>CMainFrame 框架类继承于 CFrameWndEx 类，而 CFrameWndEx 类又继承于 CFrameWnd 类，CFrameWnd 类中用于管理文档和视图的成员函数有：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获得当前活动视图对象对应文档对象的指针，如果不存在返回 NULL</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">virtual</span> CDocument<span class=\"token operator\">*</span> <span class=\"token function\">GetActiveDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 获得当前活动视图对象的指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CView<span class=\"token operator\">*</span> <span class=\"token function\">GetActiveView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 设置活动视图。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 参数 pViewNew 为要激活的视图对象的指针。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 参数 bNotify 指定视图是否接受激活通知。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetActiveView</span><span class=\"token punctuation\">(</span>CView<span class=\"token operator\">*</span> pViewNew<span class=\"token punctuation\">,</span> BOLL bNotify <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>CHelloWorldDoc 文档类继承于 CDocument 类，主要成员函数有：</p>\n<pre><code class=\"language-cpp\">\n</code></pre>\n</li>\n<li>\n<p>CHelloWorldView 视图类继承于 CView 类，CView 类中与文档 / 视图结构相关的成员函数包括：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取视图关联的文档对象的指针，如果视图没有关联到文档上则返回 NULL</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CDocument<span class=\"token operator\">*</span> <span class=\"token function\">GetDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"各对象之间关系\"><a class=\"markdownIt-Anchor\" href=\"#各对象之间关系\">#</a> 各对象之间关系</h2>\n<p>涉及到的对象包括<strong>应用程序对象</strong>、<strong>文档模板对象</strong>、<strong>文档对象</strong>、<strong>视图对象</strong>和<strong>框架窗口对象</strong>。</p>\n<ol>\n<li>\n<p>应用程序对象保存了一个文档模板的列表。</p>\n<p>在任何对象中调用全局函数 <code>AfxGetApp()</code>  都可以获得应用程序对象的指针。通过调用 <code>CWinAppEx::GetFirstDocTemplatePosition()</code> 、 <code>CWinAppEx::GetNextDocTemplate()</code>  函数可以遍历所有的文档模板。</p>\n</li>\n<li>\n<p>文档模板对象用于维护文档、视图和框架窗口的映射关系，它包含一个已打开文档的列表。</p>\n<p>我们可以通过调用 CDocTemplate::GetFirstDocPosition ()、CDocTemplate::GetNextDoc () 来遍历该文档模板对应的所有文档。</p>\n</li>\n<li>\n<p>框架窗口对象中包含有指向当前活动视图对象的指针。</p>\n<p>AfxGetApp ()-&gt;m_pMainWnd 即为主框架窗口对象的指针，可以通过调用 CFrameWndEx::GetActiveView 来获取当前活动视图对象的指针，并且使用 CFrameWndEx::GetActiveDocument 函数获取当前活动视图对应的文档。</p>\n</li>\n<li>\n<p>文档对象中维护着该文档的视图列表，已经创建该文档的文档模板对象的指针。</p>\n<p>可以通过调用</p>\n</li>\n<li>\n<p>视图是框架窗口的子窗口，它保存有指向对应文档对象的指针。</p>\n<p>可以通过调用 CView::GetParentFrame 获取其所属的框架窗口对象的指针，调用 CView::GetDocument 获取该视图对应的文档对象的指针。</p>\n</li>\n</ol>\n<p>另外，在 MDI 多文档程序中，调用 CMDIFrameWnd::MDIGetActive 可以获取当前活动的 MDI 子窗口。</p>\n<h2 id=\"分割窗口和csplitterwnd类\"><a class=\"markdownIt-Anchor\" href=\"#分割窗口和csplitterwnd类\">#</a> 分割窗口和 CSplitterWnd 类</h2>\n<p>将一个窗口分割成多个窗口，每个窗口都包含视图。</p>\n<p>MFC 分割窗口：动态分割，静态分割。</p>\n<ul>\n<li>动态分割通常用于创建同一文档对应的多个视图，而且这些视图一般都是同一类型的视图，能够在用户编辑文档的不同部分时提供方便。动态分割窗口最多可以有两行两列。</li>\n<li>静态分割比较常见，窗口创建时分割的窗格就已经生成了，而且用户不能改变窗格的数量和顺序。静态分割窗口最多支持 16 行 16 列。通常静态分割的每个窗格中包含不同类的视图，当然也可以包含同一类的视图。</li>\n</ul>\n<h1 id=\"mfc常用类cstring类\"><a class=\"markdownIt-Anchor\" href=\"#mfc常用类cstring类\">#</a> MFC 常用类：CString 类</h1>\n<p>CString 类提供了对字符串的便捷操作。</p>\n<blockquote>\n<p>CStringT 是一个操作可变长度字符串的模板类</p>\n<p>CStringT 模板类有三个实例：CString、CStringA 和 CStringW，分别提供对 TCHAR、char 和 wchar_t 字符类型的字符串的操作。</p>\n<ul>\n<li>char 类型定义的是 ANSI 字符</li>\n<li>wchar_t 类型定义的是 Unicode 字符</li>\n<li>TCHAR 类型取决于字符编码</li>\n</ul>\n</blockquote>\n<ol>\n<li>\n<p>CString 类的构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 将一个已经存在的 CString 对象 stringSrc 的内容拷贝到该 CString 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">CString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> CString<span class=\"token operator\">&amp;</span> stringSrc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CString <span class=\"token function\">str1</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.xxx.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将常量字符串拷贝到 str1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CString <span class=\"token function\">str2</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 将 str1 拷贝到 str2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 2. 将字符串 Ipch 中的前 nLength 个字符串拷贝到该 CString 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">CString</span><span class=\"token punctuation\">(</span>LPCTSTR Ipch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.xxx.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 构造的字符串对象内容为 “www”</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 3. 使用此函数构造的 CString 对象中将含有 nLength 个重复的 ch 字符。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">CString</span><span class=\"token punctuation\">(</span>TCHAR ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nLength <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'w'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t\t<span class=\"token comment\">//str 为 www</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 类的大小写转换及顺序转换函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将字符串中的所有大写字符转换为小写字符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString<span class=\"token operator\">&amp;</span> <span class=\"token function\">MakeLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 将字符串中的所有小写字符转换为大写字符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CString<span class=\"token operator\">&amp;</span> <span class=\"token function\">MakeUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 将字符串中的所有字符顺序颠倒</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>CString<span class=\"token operator\">&amp;</span> <span class=\"token function\">MakeReverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ZiFuChuan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">MakeLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">MakeUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">MakeReverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 对象的连接</p>\n<p>多个 CSstring 对象可以通过重载运算符 +，+= 实现连接</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"baidu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//\"baidu\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>str <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str <span class=\"token operator\">+</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//\"www.baidu.\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>str <span class=\"token operator\">+=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">//\"www.baidu.com\"</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 对象的比较</p>\n<ul>\n<li>\n<p>可以通过 ==、!=、&gt;、&lt;、&gt;=、&lt;= 等重载运算符实现；</p>\n</li>\n<li>\n<p>也可以通过 Compare 和 CompareNoCase 成员函数实现。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将该 CString 对象与 psz 字符比较，如果相等则返回 0，如果小于 psz 则返回小于 0，如果大于则返回大于 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Compare</span><span class=\"token punctuation\">(</span>PCXSTR psz<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 功能相同，但不区分大小写</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">CompareNoCase</span><span class=\"token punctuation\">(</span>PCXSTR psz<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>CString 对象字符串的提取操作</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 提取字符串左边 nCount 个字符的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">Left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 提取字符串右边 nCount 个字符的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CString <span class=\"token function\">Right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 3. 提取字符串中以索引 iFirst 位置开始的 nCount 个字符组成的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CString <span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> iFirst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 4. 提取字符串中以索引 iFirst 位置开始至字符串结尾的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>CString <span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> iFirst<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>CString str1 <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yigezifuchuan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>CString str2 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">Left</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// \"yig\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>str2 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// \"ige\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>str3 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// \"ifuchuan\"</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 对象字符串的查找操作</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 CString 对象字符串的 iStart 的索引位置开始，查找字符串 pszSub 或字符 ch 第一次出现的位置，如果没有找到则返回 - 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>PCXSTR pszSub<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>XCHAR ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 查找字符串 pszCharSet 中任意字符，返回第一次出现的位置，如果没有找到则返回 - 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">FindOneOf</span><span class=\"token punctuation\">(</span>PCXSTR pszCharSet<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 从字符串末尾开始查找指定的字符 ch，返回其位置，找不到则返回 - 1。尽管是从后向前查找，但是位置的索引还是要从开始算起</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">ReverseFind</span><span class=\"token punctuation\">(</span>XCHAR ch<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>CString str <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jizhuomi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> nIndex1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> nIndex2 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">FindOneOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mui\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> nIndex3 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">ReverseFind</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 7</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 类对象字符串的替换和删除</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString str <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jizhuomi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 用字符 chNEW 替换 chOLD，返回替换的字符个数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'j'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//str 为 \"jjzhuomj\", n1=2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 从字符串中删除 iIndex 位置开始的 nCount 个字符，返回删除操作后的字符串长度</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//str 为 \"jhuomj\", n2=6</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 删除字符串中所有由 chRemove 指定的字符，返回删除的字符个数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> n3 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'j'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//str 为 \"huom\", n3=2</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 类的格式化字符串方法</p>\n<p>使用 CString 类的 Format 成员函数可以将 int，short，long，float，double 等数据类型格式化为字符串对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">float</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2.3f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%d, b=%f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//str 为 \"a=1, b=2.300000\"</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"mfc常用类ctime类\"><a class=\"markdownIt-Anchor\" href=\"#mfc常用类ctime类\">#</a> MFC 常用类：CTime 类</h1>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        }
    ]
}