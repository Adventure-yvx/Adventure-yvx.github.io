{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"mfc\" tag",
    "description": "",
    "home_page_url": "https://adventure-yx.github.io",
    "items": [
        {
            "id": "https://adventure-yx.github.io/2023/06/02/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "url": "https://adventure-yx.github.io/2023/06/02/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "title": "字符集与VS中的字符处理",
            "date_published": "2023-06-02T07:12:08.000Z",
            "content_html": "<h1 id=\"字符集\"><a class=\"markdownIt-Anchor\" href=\"#字符集\">#</a> 字符集</h1>\n<ul>\n<li>\n<p>ASCII（American Standard Code for Information Interchange）</p>\n<p>一个字节（8bit）表示的字符编码，其中只用到了前 7 位，表示 127 个字符。</p>\n</li>\n<li>\n<p>ANSI 多字节字符集（American National Standard Institute）</p>\n<p>由字节数据的最高位判断：</p>\n<ul>\n<li>最高位为 0，代表是单字节，按照 ASCII 表进行编码</li>\n<li>最高位为 1，代表是本地化扩展字符，需要将相邻的两个字节组成一个整体，来进行码值求取，得到的码值对应的本地化字符集中可以得到相应的字符是什么。\n<ul>\n<li>简体中文系统下，ANSI 编码代表 GB2312 编码 (GBK 是 GB2312 的扩展，兼容 GB2312)</li>\n<li>繁体中文系统下，ANSI 编码代表 BIG5 编码</li>\n<li>日文系统下，ANSI 编码代表 JIS 编码</li>\n</ul>\n</li>\n<li>不同 ANSI 编码之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中。需要将不同的 ANSI 编码都转换成 UTF-8 编码，进而存储。</li>\n</ul>\n</li>\n<li>\n<p>Unicode 编码（Universal Multiple-Octet Coded Character Set，通用多八位编码字符集）</p>\n<p>国际组织制定的可以容纳世界上所有文字和字符的编码方案，使用定宽 2 个字节 <code>Ox0000-OxFFFF</code>  来表示一个字符。对于英文浪费了一个字节。</p>\n</li>\n<li>\n<p>UTF-8（8bit Unicode Transformation Format，8 位 Unicode 通用转换格式）</p>\n<p>UTF-8 是 Unicode 的实现方式之一，是一种针对 Unicode 的可变长度字符编码，使用 1-4 个字节进行编码</p>\n<p>对单字节字符，第一位为 0，后 7 位与 ASCII 码一致。</p>\n</li>\n<li>\n<p>UTF-16</p>\n<p>可变长度字符编码，将字符编码成 2 字节或者 4 字节</p>\n</li>\n<li>\n<p>UTF-32</p>\n<p>固定长度的编码，始终占用 4 字节。</p>\n</li>\n</ul>\n<h1 id=\"字符类型\"><a class=\"markdownIt-Anchor\" href=\"#字符类型\">#</a> 字符类型</h1>\n<ul>\n<li>\n<p><strong>char</strong></p>\n<p>字符型，单位是字节，占 8bit</p>\n</li>\n<li>\n<p><strong>wchar_t</strong></p>\n<p>宽字符，单位是双字节，占 16bit</p>\n<p>wchar_t 是 Unicode 定义的数据类型，定义在 <code>&lt;string.h&gt;</code>  中。在 ANSI 中使用 wchar_t 会报错，wchar_t 类型的字符是按 Unicode 的编码方式存储的。</p>\n<blockquote>\n<p>给 wchar_t 类型变量赋值时，要注意类型以及编码方式是否匹配。</p>\n<p><code>wchar_t *str = L&quot;aaabbb&quot;;</code></p>\n<p>str 是 wchar_t 类型，而 wchar_t 是 Unicode 数据类型，所以后面的字符串要用 L 指令转化为 Unicode 编码</p>\n</blockquote>\n</li>\n<li>\n<p><strong>TCHAR</strong></p>\n<p>TCHAR 是一个宏，并不是实际的某一个类型。当使用多字节字符集时，TCHAR 就是 char；当使用 Unicode 字符集时，TCHAR 就可以当作 wchar_t 来用。使用 TCHAR，编译器会根据我们字符集来进行相应的转化。TCHAR 定义在 &lt;tchar.h&gt; 中，使用要先包含头文件。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span>  <span class=\"token expression\">UNICODE</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">wchar_t</span> TCHAR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> TCHAR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>LPSTR</strong>：32bit 指针，指向一个字符串，每个字符占 1 个字节。相当于 <code>char*</code></p>\n</li>\n<li>\n<p><strong>LPCSTR</strong>：32bit 指针，指向一个常字符串，每个字符占 1 个字节。相当于 <code>const char*</code></p>\n</li>\n<li>\n<p><strong>LPTSTR</strong>：32bit 指针，指向一个字符串，每个字节可能占 1 个字节或 2 个字节，取决于 Unicode 是否定义。相当于 <code>tchar*</code></p>\n</li>\n<li>\n<p><strong>LPCTSTR</strong>：32bit 指针，指向一个常字符串，每个字节可能占 1 个字节或 2 个字节，取决于 Unicode 是否定义。相当于 <code>const tchar*</code></p>\n</li>\n<li>\n<p><strong>LPWSTR</strong>：32bit 指针，指向一个 Unicode 字符串的指针，每个字符占 2 字节。相当于 <code>wchar_t*</code></p>\n</li>\n<li>\n<p><strong>LPCWSTR</strong>：32bit 指针，指向一个 Unicode 常字符串的指针，每个字符占 2 字节。相当于 <code>const wchar_t*</code></p>\n</li>\n</ul>\n<h1 id=\"l指令\"><a class=\"markdownIt-Anchor\" href=\"#l指令\">#</a> L 指令</h1>\n<p>字符串前面加 L 表示该字符串是 Unicode 字符串，可以将 ANSI 字符串转换为 Unicode 字符串，就是每个字符占 2 个字节。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"_t宏\"><a class=\"markdownIt-Anchor\" href=\"#_t宏\">#</a> _T () 宏</h1>\n<p>_T (&quot;&quot;) 是一个宏定义在 tchar.h 下。</p>\n<p>_T () 或者 TEXT () 宏，可以把引号括起来的字符串，根据环境选择合适的编码方式。</p>\n<ul>\n<li>如果定义的是 Unicode，那么_T (“abc”) 就相当于 L&quot;abc&quot;，也就是宽字符；</li>\n<li>如果是多字节编码，那么英文采用单字节，汉字采用双字节；</li>\n<li>在 Unicode 环境下，要求 LPCWSTR 的地方不可以给一个 char*，而在多字节编码下可以。</li>\n</ul>\n<blockquote>\n<p>Windows 使用两种字符集 ANSI 和 UNICODE，前者就是通常使用的单字节方式，但这种方式处理中文这样的双字节字符不方便，容易出现半个汉字的情况。而后者是双字节，方便处理双字节字符。Windows NT 的所有与字符有关的函数都提供两种方式的版本，Windows 9x 只支持 ANSI 方式。</p>\n</blockquote>\n<ul>\n<li></li>\n</ul>\n<blockquote>\n<p>比如</p>\n<p><code>wchar_t Str[] = L&quot;Hello World!&quot;;</code>  是双字节存储字符串，_T 是与之适配的宏。</p>\n</blockquote>\n<p>当有 <code>#ifdef _UNICODE</code>  的时候，_T () 就是 L；</p>\n<p>当没有 <code>#ifdef _UNICODE</code>  的时候，_T () 就是 ANSI 的。</p>\n<h1 id=\"mfc中cstring和stdstring的转换\"><a class=\"markdownIt-Anchor\" href=\"#mfc中cstring和stdstring的转换\">#</a> MFC 中 CString 和 std::string 的转换</h1>\n<p>CString 实际是 CStringT，也就是模板类</p>\n<p>在 Unicode 环境下，实际是 CStringW</p>\n<p>在多字符集环境下，实际是 CStringA</p>\n<p>std::string 是多字符集环境下的</p>\n<h2 id=\"unicode环境下\"><a class=\"markdownIt-Anchor\" href=\"#unicode环境下\">#</a> Unicode 环境下</h2>\n<ul>\n<li>\n<p>CString 转换 std::string</p>\n<p>CString 实际是 CStringW，要转换为多字符集，需要进行转码。使用 WideCharToMultiByte 转换成多字符集，然后再构造 std::string</p>\n</li>\n<li>\n<p>std::string 转换 CString</p>\n<p>CStringT 模板类会自动做 char* 到 wchar_t * 的转码</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//CString -> std::string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">strCS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>USES_CONVERSION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">strS</span><span class=\"token punctuation\">(</span><span class=\"token function\">W2A</span><span class=\"token punctuation\">(</span>strCS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//std::string -> CString</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CString strCStemp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>strCStemp <span class=\"token operator\">=</span> strS<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 不能写在同一行</span></pre></td></tr></table></figure><h2 id=\"多字符集环境下\"><a class=\"markdownIt-Anchor\" href=\"#多字符集环境下\">#</a> 多字符集环境下</h2>\n<p>CString 就是 CStringA</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//CString -> std::string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">strCS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string str1 str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>str1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">GetBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CStringA<span class=\"token punctuation\">)</span>str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//std::string -> CString</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string strTemp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>CString str <span class=\"token operator\">=</span> strTemp<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// 可以写在一行</span></pre></td></tr></table></figure><h1 id=\"tixml写入配置文件时bool类型转stdstring\"><a class=\"markdownIt-Anchor\" href=\"#tixml写入配置文件时bool类型转stdstring\">#</a> TiXML 写入配置文件时 bool 类型转 std::string</h1>\n<p>定义：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token class-name\">DeviceConfigDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BoolToStr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> is<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> is <span class=\"token operator\">?</span> <span class=\"token string\">\"true\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pCheckSelfXRayConnect<span class=\"token operator\">-></span><span class=\"token function\">SetAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enabled\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">BoolToStr</span><span class=\"token punctuation\">(</span>isCheckSelfXRayConnect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/05/26/MFC%E6%B6%88%E6%81%AF%E6%98%A0%E5%B0%84%E6%9C%BA%E5%88%B6/",
            "url": "https://adventure-yx.github.io/2023/05/26/MFC%E6%B6%88%E6%81%AF%E6%98%A0%E5%B0%84%E6%9C%BA%E5%88%B6/",
            "title": "MFC 消息映射机制",
            "date_published": "2023-05-26T02:12:08.000Z",
            "content_html": "<h1 id=\"mfc消息映射机制\"><a class=\"markdownIt-Anchor\" href=\"#mfc消息映射机制\">#</a> MFC 消息映射机制</h1>\n<p><strong>Windows 应用程序是消息驱动的</strong>。在 MFC 软件开发中，界面操作或者线程之间通信都会用到消息，<strong>通过对消息的处理实现相应的操作</strong>。比较典型的过程是，用户操作窗口，然后有消息产生，送给窗口的消息处理函数处理，对用户的操作做出响应。</p>\n<h1 id=\"什么是消息\"><a class=\"markdownIt-Anchor\" href=\"#什么是消息\">#</a> 什么是消息</h1>\n<p>窗口消息一般由三个部分组成：</p>\n<ul>\n<li>一个无符号整数，是消息值；</li>\n<li>消息附带的 WPARAM 类型的参数；</li>\n<li>消息附带的 LPARAM 类型的参数。</li>\n</ul>\n<p>实际一般所说的是狭义上的消息值，也就是一个无符号整数，经常被定义为宏。</p>\n<h1 id=\"什么是消息映射机制\"><a class=\"markdownIt-Anchor\" href=\"#什么是消息映射机制\">#</a> 什么是消息映射机制</h1>\n<p>MFC 使用一种消息映射机制来处理消息，在应用程序框架中的表现就是，<strong>一个消息与消息处理函数 —— 对应的消息映射表，以及消息处理函数的声明和实现等代码</strong>。</p>\n<p>当窗口收到消息时，会到消息映射表中查找该消息对应的消息处理函数，然后由消息处理函数进行相应的处理。</p>\n<p>SDK 编程时需要在窗口过程中 —— 判断消息值进行相应的处理，相比之下 MFC 的消息映射机制要方便好用的多。</p>\n<h1 id=\"windows消息分类\"><a class=\"markdownIt-Anchor\" href=\"#windows消息分类\">#</a> Windows 消息分类</h1>\n<p>Windows 消息分为<strong>系统消息</strong>和<strong>用户自定义消息</strong>。系统消息有三种：</p>\n<ul>\n<li><strong>标准 Windows 消息</strong>。除 WM_COMMAND 外的 WM_开头的消息是标准消息。例如：WM_CREATE、WM_CLOSE。</li>\n<li><strong>命令消息</strong>。WM_COMMAND，消息中附带了标志符 ID 来区分是来自哪个菜单、工具栏按钮或加速键的消息。</li>\n<li><strong>通知消息</strong>。通知消息一般由列表框等子窗口发送给父窗口，消息名也是 WM_COMMAND，其中附带了控件通知码来区分控件。</li>\n</ul>\n<p><strong>CWnd 的派生类都可以接收到标准 Windows 消息、通知消息和命令消息。命令消息还可以由文档类等接收。</strong></p>\n<p><strong>用户自定义消息实际上就是用户定义一个宏作为消息，此宏的值应该大于等于 WM_USER，然后宏就可以跟系统消息一样使用，窗口类中可以定义它的处理函数。</strong></p>\n<h1 id=\"消息映射表\"><a class=\"markdownIt-Anchor\" href=\"#消息映射表\">#</a> 消息映射表</h1>\n<p>除了一些没有基类的类或 CObject 的直接派生类外，其他的类都可以自动生成消息映射表。</p>\n<p>消息映射表如下（CMainFrame.cpp）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">BEGIN_MESSAGE_MAP</span><span class=\"token punctuation\">(</span>CMainFrame<span class=\"token punctuation\">,</span> CFrameWndEx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">ON_WM_CREATE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ON_COMMAND</span><span class=\"token punctuation\">(</span>ID_VIEW_CUSTOMIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnViewCustomize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">ON_REGISTERED_MESSAGE</span><span class=\"token punctuation\">(</span>AFX_WM_CREATETOOLBAR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnToolbarCreateNew<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">ON_COMMAND_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">ON_UPDATE_COMMAND_UI_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnUpdateApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">ON_WM_SETTINGCHANGE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">END_MESSAGE_MAP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 <code>BEGIN_MESSAGE_MAP</code>  和 <code>END_MESSAGE_MAP</code>  之间的内容成为消息映射入口项。</p>\n<p>消息映射除了在 <code>CMainFrame</code>  的实现文件中添加消息映射表外，在类的定义文件 <code>MainFrm.h</code>  中还会添加一个宏调用： <code> DECLEAR_MESSAGE_MAP</code></p>\n<p>一般这个宏调用写在类定义的结尾处。</p>\n<h1 id=\"添加消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#添加消息处理函数\">#</a> 添加消息处理函数</h1>\n<ol>\n<li>\n<p>在类定义中加入消息处理函数的函数声明，以 <code>afx_msg</code>  打头。例如 MainFrm.h 中的声明：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>afx_msg <span class=\"token keyword\">int</span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>LPCREATESTRUCT lpCreateStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>afx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnViewCustomize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>afx_msg LRESULT <span class=\"token function\">OnToolbarCreateNew</span><span class=\"token punctuation\">(</span>WPARAM wp<span class=\"token punctuation\">,</span> LPARAM lp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>afx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnApplicationLook</span><span class=\"token punctuation\">(</span>UINT id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>afx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnUpdateApplicationLook</span><span class=\"token punctuation\">(</span>CCmdUI<span class=\"token operator\">*</span> pCmdUI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>afx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnSettingChange</span><span class=\"token punctuation\">(</span>UINT uFlags<span class=\"token punctuation\">,</span> LPCTSTR lpszSection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在类的消息映射表中添加该消息的消息映射入口项。例如 MainFrm.h 中的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_WM_CREATE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ON_COMMAND</span><span class=\"token punctuation\">(</span>ID_VIEW_CUSTOMIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnViewCustomize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ON_REGISTERED_MESSAGE</span><span class=\"token punctuation\">(</span>AFX_WM_CREATETOOLBAR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnToolbarCreateNew<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ON_COMMAND_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ON_UPDATE_COMMAND_UI_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnUpdateApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">ON_WM_SETTINGCHANGE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>在类的实现中添加消息处理函数的函数实现。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">CMainFrame</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>LPCREATESTRUCT lpCreateStruct<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>通过以上 3 个步骤后， <code>WM_CREATE</code>  等消息就可以在窗口类中被消息处理函数处理了。</p>\n<h1 id=\"各种windows消息的消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#各种windows消息的消息处理函数\">#</a> 各种 Windows 消息的消息处理函数</h1>\n<blockquote>\n<p>标准 Windows 消息。除 WM_COMMAND 外的 WM_开头的消息是标准消息。例如：WM_CREATE、WM_CLOSE。</p>\n</blockquote>\n<p>标准 Windows 消息的消息处理函数都与 WM_CREATE 消息类似。</p>\n<blockquote>\n<p>命令消息。WM_COMMAND，消息中附带了标志符 ID 来区分是来自哪个菜单、工具栏按钮或加速键的消息。</p>\n</blockquote>\n<p>命令消息的消息映射入口如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_COMMAND</span><span class=\"token punctuation\">(</span>ID_VIEW_CUSTOMIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnViewCustomize<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>消息为 <code>ID_VIEW_CUSTOMIZE</code></li>\n<li>消息处理函数为 <code>OnViewCustomize</code></li>\n</ul>\n<p>如果想用批量处理函数批量处理这些命令消息，则可以像 CMainFrame 消息映射表中的：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_COMMAND_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>值在 <code>ID_VIEW_APPLOOK_WIN_2000</code>  到 <code>ID_VIEW_APPLOOK_WINDOWS_7</code>  之间的菜单项等命令消息都由 CMainFrame 的 <code>OnApplicationLook</code>  函数处理。</li>\n<li>函数原型为 <code>afx_msg void OnApplicationLook(UINT id);</code></li>\n<li>参数 id 为用户操作的菜单项等的 ID</li>\n</ul>\n<blockquote>\n<p>通知消息。通知消息一般由列表框等子窗口发送给父窗口，消息名也是 WM_COMMAND，其中附带了控件通知码来区分控件。</p>\n</blockquote>\n<p>在操作列表框等控件时往往会给父窗口发送 <code>WM_NOTIFY</code>  通知消息。</p>\n<p><code>WM_NOTIFY</code>  消息的 <code>WPARAM</code>  参数为发送通知消息的控件的 ID； <code> LPARAM</code>  参数指向一个结构体，可能是 NMHDR 结构体，也可能是第一个元素为 NMHDR 结构体变量的其他结构体。</p>\n<p>NMHDR 结构体定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Typedef <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagNMHDR</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    HWND hwndFrom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT idFrom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    UINT code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>NMHDR<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>hwndFrom 为发送通知消息控件的句柄；</li>\n<li>idFrom 为控件 ID；</li>\n<li>code 为要处理的通知消息的通知码，例如 NM_CLICK</li>\n</ul>\n<p>通知消息的消息映射入口形式如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_NOTIFY</span><span class=\"token punctuation\">(</span>wNotifyCode<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> memberFxn<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>wNotifyCode 为要处理的通知消息通知码；</li>\n<li>id 为控件标识 ID；</li>\n<li>memberFxn 为此消息的消息处理函数。</li>\n</ul>\n<blockquote>\n<p>用户自定义消息</p>\n<ol>\n<li>定义消息宏</li>\n<li>在消息映射表中添加消息映射入口项</li>\n<li>在 MainFrm.h 中添加消息处理函数的函数声明</li>\n<li>在 MainFrm.cpp 中实现此函数</li>\n</ol>\n</blockquote>\n<h1 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/05/25/MFC%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6/",
            "url": "https://adventure-yx.github.io/2023/05/25/MFC%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6/",
            "title": "MFC 应用程序框架",
            "date_published": "2023-05-25T02:12:08.000Z",
            "content_html": "<h1 id=\"vs应用程序工程中文件的组成结构\"><a class=\"markdownIt-Anchor\" href=\"#vs应用程序工程中文件的组成结构\">#</a> VS 应用程序工程中文件的组成结构</h1>\n<p>如果已经以 Debug 方式编译链接过程序，则会在解决方案文件夹下和工程子文件夹下各有一个名为 “Debug” 的文件夹，而如果是 Release 方式编译则会有名为 “Release” 的文件夹。这两种编译方式将产生两种不同版本的可执行文件：</p>\n<ul>\n<li>\n<p>Debug 版本</p>\n<p>可执行文件中包含了用于调试的信息和代码。</p>\n</li>\n<li>\n<p>Release 版本</p>\n<p>没有调试信息，不能进行调试，但可执行文件较小。</p>\n</li>\n</ul>\n<p>工程中文件结构：</p>\n<ol>\n<li>\n<p>解决方案相关文件</p>\n<p>包括解决方案文件夹下的.sdf 文件、.sln 文件、.suo 文件和 ipch 文件夹。</p>\n<p>.sdf 文件和 ipch 目录一般与智能提示、错误提示、代码恢复和团队本地仓库有关。</p>\n<p>.sln 文件和.suo 文件为 MFC 自动生成的解决方案文件，它包含当前解决方案中的工程信息，存储解决方案的设置。</p>\n</li>\n<li>\n<p>工程相关文件</p>\n<p>包括工程文件夹下的.vcxproj 文件和.vcxproj.filters 文件。</p>\n<p>.vcxproj 文件是 MFC 生成的工程文件，它包含当前工程的设置和工程所包含的文件等信息。</p>\n<p>.vcxproj.filters 文件存放工程的虚拟目录信息，也就是在解决方案浏览器中的目录结构信息。</p>\n</li>\n<li>\n<p>应用程序头文件和源文件</p>\n<p>应用程序向导（MFC Application Wizard）会根据应用程序的类型（单文档、多文档或基于对话框的程序）自动生成一些头文件和源文件，这些文件是工程的主体部分，用于实现主框架、文档、视图等。</p>\n<ul>\n<li>HelloWorld.h：应用程序的主头文件。主要包含由 CWinAppEx 类派生的 CHelloWorldApp 类的声明，以及 CHelloWorldApp 类的全局对象 theApp 的声明。</li>\n<li>HelloWorld.cpp：应用程序的主源文件。主要包含 CHelloWorldApp 类的实现，CHelloWorldApp 类的全局对象 theApp 的声明。</li>\n<li>MainFrm.h 和 MainFrm.cpp：从 CFrameWndEx 类派生出 CMainFrame 类，用于创建主框架、菜单栏、工具栏、状态栏等。</li>\n<li>HelloWorldDoc.h 和 HelloWorldDoc.cpp：从 CDocument 类派生出 CHelloWorldDoc 文档类，包含一些用来初始化文档、串行化（保存和装入）文档和调试的成员函数。</li>\n<li>HelloWorldView.h 和 HelloWorldView.cpp：从 CView 类派生出 CHelloWorldView 视图类，用来显示和打印文档数据，包含了一些绘图和用于调试的成员函数。</li>\n<li>ClassView.h 和 ClassView.cpp：从 CDockablePane 类派生出 CClassView 类，用于实现应用程序左侧面板的 Class View。</li>\n<li>FlieView.h 和 FlieView.cpp：从 CDockablePane 类派生出 CFlieView 类，用于实现应用程序左侧面板的 Flie View。</li>\n<li>OutputWnd.h 和 OutputWnd.cpp：从 CDockablePane 类派生出 COutputWnd 类，用于实现应用程序下侧面板的 Output。</li>\n<li>PropertiesWnd.h 和 PropertiesWnd.cpp：从 CDockablePane 类派生出 CPropertiesWnd 类，用于实现应用程序右侧面板的 Properties。</li>\n<li>ViewTree.h 和 ViewTree.cpp：由 CTreeCtrl 类派生出 CViewTree 类，用于实现出现在 ClassView 和 FileView 中的树视图。</li>\n</ul>\n</li>\n<li>\n<p>资源文件</p>\n<p>一般使用 MFC 生成窗口程序都会有对话框、图标、菜单等资源，应用程序向导会生成资源相关文件：res 目录、HelloWorld.rc 文件和 Resource.h 文件。</p>\n<ul>\n<li>res 目录：工程文件夹下的 res 目录中含有应用程序默认图标、工具栏使用图标等图标文件。</li>\n<li>HelloWorld.rc：包含默认菜单定义、字符串表和加速键表，制定了默认的 About 对话框和应用程序默认图标文件等。</li>\n<li>Resource.h：含有各种资源的 ID 定义。</li>\n</ul>\n</li>\n<li>\n<p>预编译头文件</p>\n<p>几乎所有 MFC 程序的文件都要包含 afxwin.h 等文件（外部依赖项），如果每次都编译一次则会大大减慢编译速度。所以把常用的 MFC 头文件都放到了 stdafx.h 中，然后由 stdafx.cpp 包含 stdafx.h 文件，编译器对 stdafx.cpp 只编译一次，并生成编译后的预编译头 HelloWorld.pch（Precomplied Header Flie），大大提高了编译效率。</p>\n</li>\n<li>\n<p>编译链接生成的文件</p>\n<p>工程文件夹下的 Debug 和 Release 子文件夹中包含了编译链接时产生的中间文件。</p>\n<p>解决方案文件夹下的 Debug 和 Release 子文件夹中主要包含有应用程序的可执行文件。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"mfc应用程序框架分析\"><a class=\"markdownIt-Anchor\" href=\"#mfc应用程序框架分析\">#</a> MFC 应用程序框架分析</h1>\n<p>程序运行都有入口函数，Windows 应用程序的入口函数时 WinMain 函数，MFC 程序也是从 WinMain 函数开始的。</p>\n<ul>\n<li>MFC 应用程序，使用 MFC 库，应用程序框架开发。</li>\n<li>SDK 应用程序，不使用 MFC 库，直接用 Windows API 函数进行软件开发。</li>\n</ul>\n<h1 id=\"sdk应用程序\"><a class=\"markdownIt-Anchor\" href=\"#sdk应用程序\">#</a> SDK 应用程序</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span>    </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>LRESULT CALLBACK <span class=\"token function\">myWndProc</span><span class=\"token punctuation\">(</span>HWND hWindow<span class=\"token punctuation\">,</span> UINT msg<span class=\"token punctuation\">,</span> WPARAM wParam<span class=\"token punctuation\">,</span> LPARAM lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> WINAPI <span class=\"token function\">WinMain</span><span class=\"token punctuation\">(</span>HINSTANCE hInstance<span class=\"token punctuation\">,</span> HINSTANCE hPrevInstance<span class=\"token punctuation\">,</span> PSTR szCmdLine<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iCmdShow<span class=\"token punctuation\">)</span>      </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">static</span> TCHAR appName<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  WNDCLASSEX myWin<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>cbSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>myWin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> CS_HREDRAW <span class=\"token operator\">|</span> CS_VREDRAW<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>lpfnWndProc <span class=\"token operator\">=</span> myWndProc<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>cbClsExtra <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>cbWndExtra <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>hInstance <span class=\"token operator\">=</span> hInstance<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>hIcon <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>hIconSm  <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>hCursor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>hbrBackground <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HBRUSH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>COLOR_WINDOW <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>lpszMenuName <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  myWin<span class=\"token punctuation\">.</span>lpszClassName <span class=\"token operator\">=</span> appName<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">//Register      </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">RegisterClassEx</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>myWin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">const</span> HWND hWindow <span class=\"token operator\">=</span> <span class=\"token function\">CreateWindow</span><span class=\"token punctuation\">(</span>      </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    appName<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    appName<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    WS_OVERLAPPEDWINDOW<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    CW_USEDEFAULT<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    CW_USEDEFAULT<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    CW_USEDEFAULT<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    CW_USEDEFAULT<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    hInstance<span class=\"token punctuation\">,</span>      </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>hWindow<span class=\"token punctuation\">,</span>iCmdShow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token function\">UpdateWindow</span><span class=\"token punctuation\">(</span>hWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    MSG msg<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token function\">TranslateMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token function\">DispatchMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>      </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>msg<span class=\"token punctuation\">.</span>wParam<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span>      </pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span>      </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>LRESULT CALLBACK <span class=\"token function\">myWndProc</span><span class=\"token punctuation\">(</span>HWND hWindow<span class=\"token punctuation\">,</span> UINT msg<span class=\"token punctuation\">,</span> WPARAM wParam<span class=\"token punctuation\">,</span> LPARAM lParam<span class=\"token punctuation\">)</span>      </pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token operator\">==</span>WM_PAINT<span class=\"token punctuation\">)</span>      </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    PAINTSTRUCT ps<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">const</span> HDC hDC <span class=\"token operator\">=</span> <span class=\"token function\">BeginPaint</span><span class=\"token punctuation\">(</span>hWindow<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    RECT rect<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token function\">GetClientRect</span><span class=\"token punctuation\">(</span>hWindow<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">DrawText</span><span class=\"token punctuation\">(</span>hDC<span class=\"token punctuation\">,</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO WORLD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rect<span class=\"token punctuation\">,</span> DT_SINGLELINE <span class=\"token operator\">|</span> DT_CENTER <span class=\"token operator\">|</span> DT_VCENTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">EndPaint</span><span class=\"token punctuation\">(</span>hWindow<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span>      </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token operator\">==</span>WM_DESTROY<span class=\"token punctuation\">)</span>      </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token function\">PostQuitMessage</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span>      </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">DefWindowProc</span><span class=\"token punctuation\">(</span>hWindow<span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">,</span>wParam<span class=\"token punctuation\">,</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"程序运行流程\"><a class=\"markdownIt-Anchor\" href=\"#程序运行流程\">#</a> 程序运行流程</h2>\n<ol>\n<li>进入 WinMain 函数</li>\n<li>初始化 WNDCLASSEX，调用 RegisterClassEx 函数注册窗口类</li>\n<li>调用 ShowWindow 和 UpdateWindow 函数显示并更新窗口</li>\n<li>进入消息循环</li>\n</ol>\n<blockquote>\n<p>关于消息循环</p>\n<p>Windows 应用程序是消息驱动的，系统或用户让应用程序进行某项操作或完成某个任务时会发送消息，进入程序的消息队列，然后消息循环会将消息队列中的消息取出，交予相应的窗口过程处理。</p>\n<p>此程序的窗口过程函数就是 myWndProc 函数，窗口过程函数处理完消息就完成了某项操作或任务。本例是要显示 “HELLO WORLD” 字符串，UpdateWindow 函数会发送 WM_PAINT 消息，但是此消息不经过消息队列而是直接送到窗口过程处理，在窗口过程函数中最终绘制了 “HELLO WORLD” 字符串。</p>\n</blockquote>\n<h1 id=\"mfc应用程序\"><a class=\"markdownIt-Anchor\" href=\"#mfc应用程序\">#</a> MFC 应用程序</h1>\n<p>下面是 MFC 应用程序的运行流程，通过 MFC 库中代码进行分析：</p>\n<p>首先在 HelloWorld.cpp 中定义全局对象 theApp： <code>CHelloWorldApp theApp;</code> 。调用 CWinApp 和 CHelloWorldApp 的构造函数后，进入 WinMain 函数（位于 appmodul.cpp 中）。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">int</span> WINAPI   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">_tWinMain</span><span class=\"token punctuation\">(</span>HINSTANCE hInstance<span class=\"token punctuation\">,</span> HINSTANCE hPrevInstance<span class=\"token punctuation\">,</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _In_ LPTSTR lpCmdLine<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nCmdShow<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>suppress<span class=\"token operator\">:</span> <span class=\"token number\">4985</span><span class=\"token punctuation\">)</span>   </span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// call shared/exported WinMain   </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">AfxWinMain</span><span class=\"token punctuation\">(</span>hInstance<span class=\"token punctuation\">,</span> hPrevInstance<span class=\"token punctuation\">,</span> lpCmdLine<span class=\"token punctuation\">,</span> nCmdShow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>TCHAR.h</code>  中，有此定义： <code>#define _tWinMain  WinMain</code> ，所以这里的 <code>_tWinMain</code>  就是 <code>WinMain</code>  函数。它调用了 <code>AfxWinMain</code>  函数（位于 <code>WinMain.cpp</code>  中）。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>pp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> AFXAPI <span class=\"token function\">AfxWinMain</span><span class=\"token punctuation\">(</span>HINSTANCE hInstance<span class=\"token punctuation\">,</span> HINSTANCE hPrevInstance<span class=\"token punctuation\">,</span>LPTSTR lpCmdLine<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nCmdShow<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token comment\">// App global initializations (rare)   </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pApp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>pApp<span class=\"token operator\">-></span><span class=\"token function\">InitApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              <span class=\"token keyword\">goto</span> InitFailure<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pThread<span class=\"token operator\">-></span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token comment\">// Run 函数位于 THRDCORE.cpp 中，由此函数进入消息循环   </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       nReturnCode <span class=\"token operator\">=</span> pThread<span class=\"token operator\">-></span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略   </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token keyword\">return</span> nReturnCode<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面 InitInstance 函数的代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token class-name\">CTestApp</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略       </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       CSingleDocTemplate<span class=\"token operator\">*</span> pDocTemplate<span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       pDocTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CSingleDocTemplate</span><span class=\"token punctuation\">(</span>       </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              IDR_MAINFRAME<span class=\"token punctuation\">,</span>       </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              <span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CTestDoc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>       </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              <span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CMainFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// main SDI frame window       </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              <span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CTestView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pDocTemplate<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>             <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token function\">AddDocTemplate</span><span class=\"token punctuation\">(</span>pDocTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token comment\">// Parse command line for standard shell commands, DDE, file open       </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       CCommandLineInfo cmdInfo<span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token function\">ParseCommandLine</span><span class=\"token punctuation\">(</span>cmdInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token comment\">//ProcessShellCommand 位于 AppUI2.cpp 中，注册并创建窗口       </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ProcessShellCommand</span><span class=\"token punctuation\">(</span>cmdInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>             <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>       m_pMainWnd<span class=\"token operator\">-></span><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>SW_SHOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       m_pMainWnd<span class=\"token operator\">-></span><span class=\"token function\">UpdateWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>InitInstance</code>  中的 <code>ProcessShellCommand</code>  函数又调用了 <code>CMainFrame</code>  的 <code>LoadFrame</code>  函数注册并创建了窗口，执行完 <code>ProcessShellCommand</code>  函数以后，调用了 <code>m_pMainWnd</code>  的 <code>ShowWindow</code>  和 <code>UpdateWindow</code>  函数显示并更新框架窗口。这些与上面的 SDK 程序十分类似</p>\n<p>接下来该是消息循环了，上面的 <code>AfxWinMain</code>  函数中调用了 <code>pThread</code>  的 <code>Run</code>  函数（位于 <code>THRDCORE.cpp</code>  中），在 Run 中包含了消息循环。Run 函数的代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">CWinThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略       </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// phase2: pump messages while available       </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">do</span>      </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              <span class=\"token comment\">// pump message, but quit on WM_QUIT       </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">PumpMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                     <span class=\"token keyword\">return</span> <span class=\"token function\">ExitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              <span class=\"token comment\">// reset \"no idle\" state after pumping \"normal\" message       </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsIdleMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m_msgCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              <span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                     bIdle <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                     lIdleCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span>       </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PeekMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m_msgCur<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> PM_NOREMOVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略       </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span>       </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>BOOL <span class=\"token class-name\">CWinThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PumpMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span>     </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token function\">AfxInternalPumpMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>BOOL AFXAPI <span class=\"token function\">AfxInternalPumpMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       _AFX_THREAD_STATE <span class=\"token operator\">*</span>pState <span class=\"token operator\">=</span> <span class=\"token function\">AfxGetThreadState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pState<span class=\"token operator\">-></span>m_msgCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>          </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       <span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>             <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略       </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span>       </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略       </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pState<span class=\"token operator\">-></span>m_msgCur<span class=\"token punctuation\">.</span>message <span class=\"token operator\">!=</span> WM_KICKIDLE <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">AfxPreTranslateMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pState<span class=\"token operator\">-></span>m_msgCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>       <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>             <span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TranslateMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pState<span class=\"token operator\">-></span>m_msgCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>             <span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DispatchMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pState<span class=\"token operator\">-></span>m_msgCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span>     </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>       <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们看到 <code>PumpMessage</code>  中通过调用 <code>GetMessage</code> 、 <code>TranslateMessage</code> 、 <code>DispatchMessage</code>  等建立了消息循环并投递消息。</p>\n<p>窗口过程函数 <code>AfxWinProc</code>  形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LRESULT CALLBACK <span class=\"token function\">AfxWndProc</span><span class=\"token punctuation\">(</span>HWND hWnd<span class=\"token punctuation\">,</span>UINT nMsg<span class=\"token punctuation\">,</span>WPARAM wParam<span class=\"token punctuation\">,</span> LPARAM lParam<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      ……   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      CWnd<span class=\"token operator\">*</span>pWnd<span class=\"token operator\">=</span><span class=\"token class-name\">CWnd</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FromHandlePermanent</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">ReturnAfxCallWndProc</span><span class=\"token punctuation\">(</span>pWnd<span class=\"token punctuation\">,</span>hWnd<span class=\"token punctuation\">,</span>nMsg<span class=\"token punctuation\">,</span>wParam<span class=\"token punctuation\">,</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"sdk应用程序和mfc应用程序对比\"><a class=\"markdownIt-Anchor\" href=\"#sdk应用程序和mfc应用程序对比\">#</a> SDK 应用程序和 MFC 应用程序对比</h1>\n<p>运行流程是类似的，都是<strong>先进行初始化过程，再注册并创建窗口，然后显示、更新窗口，最后进入消息循环，消息都由窗口过程函数处理。</strong></p>\n<h1 id=\"mfc应用程序框架主要类之间的关系\"><a class=\"markdownIt-Anchor\" href=\"#mfc应用程序框架主要类之间的关系\">#</a> MFC 应用程序框架主要类之间的关系</h1>\n<p>自动生成的框架中比较重要的类包括：CHelloWorldApp、CMainFrame、CHelloWorldDoc 和 CHelloWorldView</p>\n<ul>\n<li><code>CHelloWorldApp</code>  类处理消息，将收到的消息分发给相应的对象。</li>\n<li><code>CMainFrame</code>  类是视图类 <code>CHelloWorldView</code>  的父窗口，CHelloWorldView 就显示在 <code>CMainFrame</code>  的客户区中。</li>\n<li>视图类 <code>CHelloWorldView</code>  用来显示文档类 <code>CHelloWorldDoc</code>  中的数据，并根据对视图类的操作修改文档类的数据。一个视图类只能跟一个文档类相联系，而一个文档类可以跟多个视图类相联系。</li>\n</ul>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        }
    ]
}