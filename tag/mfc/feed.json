{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"mfc\" tag",
    "description": "",
    "home_page_url": "https://adventure-yx.github.io",
    "items": [
        {
            "id": "https://adventure-yx.github.io/2023/06/28/MFC%E5%9B%BE%E5%BD%A2%E5%9B%BE%E5%83%8F/",
            "url": "https://adventure-yx.github.io/2023/06/28/MFC%E5%9B%BE%E5%BD%A2%E5%9B%BE%E5%83%8F/",
            "title": "MFC 图形图像",
            "date_published": "2023-06-28T02:12:08.000Z",
            "content_html": "<h1 id=\"cdc类及其屏幕绘图函数\"><a class=\"markdownIt-Anchor\" href=\"#cdc类及其屏幕绘图函数\">#</a> CDC 类及其屏幕绘图函数</h1>\n<p>CDC 类是一个设备上下文类。（Device Context）</p>\n<p>CDC 类提供了用来处理显示器或者打印机等设备上下文的成员函数，还有处理与窗口客户区关联的显示上下文的成员函数。使用 CDC 的成员函数可以进行所有的绘图操作，包括处理绘图工具、GDI 对象的选择、颜色和调色板的处理、获取和设置绘图属性、映射、窗口范围、坐标转换、剪切以及绘制直线、简单图形、椭圆和多边形等。另外，它还为文本输出、处理字体、使用打印机跳转和滚动等提供了成员函数。</p>\n<p>如上所述，CDC 类几乎封装了所有的 Windows GDI 函数，另外，MFC 中还有几个由 CDC 类派生的子类，包括 CWindowDC、CPaintDC、CClientDC、CMetaFileDC，它们用来进行一些特定的绘图操作。</p>\n<blockquote>\n<p>一般在使用完 CDC 对象要记得删除它，否则会有内存泄漏。很多情况下我们可以调用 <code>CWnd::GetDC()</code>  函数来获取设备上下文指针，即 CDC 指针，这个时候记得用完后调用 <code>CWnd::ReleaseDC()</code>  函数释放上下文。</p>\n</blockquote>\n<ul>\n<li>\n<p><code>HDC</code>  是 DC 的句柄，API 中的一个类似指针的数据类型。</p>\n</li>\n<li>\n<p><code>CDC</code>  是 MFC 的 DC 的一个类，设备上下文类都有一个成员变量 <code>m_nHdc</code> ，即 HDC 类型的句柄</p>\n</li>\n<li>\n<p><code>CPaintDC</code> ：封装 BeginPaint 和 EndPaint 两个 API 的调用</p>\n<ul>\n<li>用于响应窗口重绘消息 <code>WM_PAINT</code>  的绘图输出</li>\n<li>CPaintDC 在构造函数中调用 <code>BeginPaint()</code>  取得设备上下文，在析构函数中调用 <code>EndPaint()</code>  释放设备上下文。</li>\n<li><code>EndPaint()</code>  除了释放设备上下文外，还负责从消息队列中清除 <code>WM_PAINT</code>  消息。因此<strong>在处理窗口重绘时，必须使用 CPaintDC，否则 WM_PAINT 消息无法从消息队列中清除，将引起不断地窗口重绘</strong>。</li>\n<li>CPaintDC 也只能用在 WM_PAINT 消息处理中。</li>\n</ul>\n</li>\n<li>\n<p><code>CClientDC</code> ：客户区设备上下文，处理显示器描述表的相关的窗体客户区域。</p>\n<p>构造时自动调用 <code>GetDC</code>  函数，析构时自动调用 <code>ReleaseDC</code>  函数，一般应用于客户区窗口的绘制。</p>\n<p>当需要处理一个鼠标的单击，然后马上画出一个圆，不能等到下个 WM_PAINT 的消息到来才画图，而是马上，这时就需要 CClientDC 了，它可以在 <code>OnPaint</code>  的外面创建一个客户区 DC。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnLButtonDown</span> <span class=\"token punctuation\">(</span>UINT nFlags<span class=\"token punctuation\">,</span> CPoint ppoint<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    CRect rect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">GetClientRect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    CClientDC <span class=\"token function\">dc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">MoveTo</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">LineTo</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">MoveTo</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    dc<span class=\"token punctuation\">.</span><span class=\"token function\">LineTo</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>CWindowDC</code> ：处理显示器描述表相关的整个窗体区域，包括了框架和控件（子窗体）</p>\n<ul>\n<li>可在非客户区绘制图形，而 CClientDC，CPaintDC 只能在客户去绘制图形；</li>\n<li>坐标原点是在屏幕的左上角，而 CClientDC，CPaintDC 下坐标原点是在客户区的左上角；</li>\n<li>关联一特定窗口，允许开发者在目标窗口的任何一部分进行绘图包括边界与标题，这种 DC 同 <code>WM_NCPAINT</code>  消息一起发送。</li>\n</ul>\n</li>\n<li>\n<p><code>CMetaFileDC</code> ：与元文件相关的设备描述表关联。</p>\n</li>\n</ul>\n<h1 id=\"关于wm_paint事件为什么窗口不能立即重绘\"><a class=\"markdownIt-Anchor\" href=\"#关于wm_paint事件为什么窗口不能立即重绘\">#</a> 关于 WM_PAINT 事件（为什么窗口不能立即重绘）</h1>\n<p>系统会在多个不同的时机发送 WM_PAINT 消息：</p>\n<ul>\n<li>当第一次创建一个窗口时；</li>\n<li>当改变窗口的大小时；</li>\n<li>当把窗口从另一个窗口背后移出时；</li>\n<li>当最大化最小化窗口时等等</li>\n</ul>\n<p>这些动作都是由系统管理的，应用只是被动地接受该消息，在消息处理函数中进行绘制操作，大多数地时候应用也需要能够主动引发窗口中的绘制操作，比如当窗口显示的数据改变的时候，这一般是通过 <code>InvalidateRect()</code>  和 <code>InvalidateRgn()</code>  函数来完成的。 <code>InvalidateRect()</code>  和 <code>InvalidateRgn()</code>  把指定的区域加到窗口的 <code>Update Region</code>  中，当应用的消息队列没有其他消息时，如果窗口的 <code>Update Region</code>  不为空时，系统就会自动产生 WM_PAINT 消息。</p>\n<blockquote>\n<p>系统为什么不在调用 Invalidate 时发送 WM_PAINT 消息？又为什么要等到消息队列为空时才发送 WM_PAINT 消息？</p>\n</blockquote>\n<p>这是因为，系统把窗口中的绘制操作当作一种低优先级的操作，于是尽可能地推后做。不过这样也有利于提高绘制的效率：两个 WM_PAINT 消息之间通过 <code>InvalidateRect()</code>  和 <code>InvalidateRgn()</code>  函数使之失效的区域就会被累加起来，然后在一个 WM_PAINT 消息中一次的得到更新。不仅能避免多次重复地更新同一区域，也优化了应用的更新操作。像这种通过 <code>InvalidateRect()</code>  和 <code>InvalidateRgn()</code>  函数来使窗口区域无效，依赖于系统在合适的时机发送 WM_PAINT 消息的机制实际上是一种<strong>异步工作方式</strong>，也就是说，在无效化窗口区域和发送 WM_PAINT 消息之间是有延迟的。</p>\n<p>有时这种延迟并不是我们所期望的，这时我们当然可以在无效化窗口区域后利用 SendMessage 发送一条 WM_PAINT 消息来强制立即重绘，但不如使用 Windows GDI 为我们提供的更方便和更强大的函数： <code>UpdateWindow()</code>  和 <code>RedrawWindow()</code> 。</p>\n<p><code>UpdateWindow()</code>  会检查窗口的 Update Region，当其不为空时才发送 WM_PAINT 消息；</p>\n<p><code>RedrawWindow()</code>  则给我们更多的控制：是否重绘非客户区和背景，是否总是发送 WM_PAINT 消息而不管 Update Region 是否为空等。</p>\n<h1 id=\"cpaintdc与onpaint的使用\"><a class=\"markdownIt-Anchor\" href=\"#cpaintdc与onpaint的使用\">#</a> CPaintDC 与 OnPaint 的使用</h1>\n<h2 id=\"cbitmap-hbitmap-bitmap的区别\"><a class=\"markdownIt-Anchor\" href=\"#cbitmap-hbitmap-bitmap的区别\">#</a> CBitmap、HBITMAP、BITMAP 的区别</h2>\n<ul>\n<li>\n<p>BITMAP 是 C++ 中定义的位图结构体</p>\n<p>封装着 bitmap 的一些信息，定义了逻辑位图的高、宽、颜色格式以及位值。</p>\n<blockquote>\n<p>This structure defines the type, width, height, color format, and bit values of a bit map.</p>\n</blockquote>\n</li>\n<li>\n<p>HBITMAP 是 Windows 中使用的位图句柄</p>\n<p>相当于 bitmap 的指针。</p>\n<blockquote>\n<p>Handle to a bitmap.</p>\n<p>typedef HANDLE HBITMAP;</p>\n</blockquote>\n</li>\n<li>\n<p>CBitmap 是 MFC 封装的位图类</p>\n<blockquote>\n<p>Encapsulates a Windows graphics device interface(GDI) bitmap and provides member functions to manipulate the bitmap.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"三者之间的关系转换\"><a class=\"markdownIt-Anchor\" href=\"#三者之间的关系转换\">#</a> 三者之间的关系转换</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HBITMAP hBitmap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CBitmap bitmap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>BITMAP bm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 由 HBITMAP 得到关联的 CBtimap</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">Attach</span><span class=\"token punctuation\">(</span>hBitmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 得到 bm 指向的位图</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">GetBitmap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>bm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 由 CBitmap 得到相关的 HBITMAP</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>hBitmap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HBITMAP<span class=\"token punctuation\">)</span>bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">GetSafeHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"attach和detach\"><a class=\"markdownIt-Anchor\" href=\"#attach和detach\">#</a> Attach 和 Detach</h2>\n<p><code>Attach()</code>  是<strong>把一个 C++ 对象与一个 WINDOW 对象相关联</strong>，直到用 Detach () 把关联去掉。</p>\n<p>如果 Attach 了之后没有 Detach，则 C++ 对象销毁时 WINDOW 对象会跟着一起销毁。</p>\n<p>Attach 了以后，C<ins> 对象的指针和 WINDOWS 对象的 HWND 会有一个映射关系，其作用相当于直接用一个 C</ins> 对象去 Create 一个 WINDOWS 对象，例如 <code>CEdit edit;</code>   <code>edit.create()</code>  并且此映射是永久的，直到此对象销毁为止。</p>\n<blockquote>\n<p>如果用类似 <code>GetDlgItem()</code>  函数也可以返回一个指针，并可以强制转换。</p>\n<p><code>GetDlgItem()</code>  会到映射表里找，有两种映射表，一种是永久的，一种是临时的。</p>\n<p><strong>直接用 C++ 对象创建的 WINDOWS 对象或者是通过 Attach 的对象的映射关系都被放到永久表中，否则就在临时表中创建映射关系。</strong></p>\n<p>所以 <code>GetDlgItem()</code>  不推荐保存返回的指针，因为很难保证 WINDOWS 对象跟 C++ 对象的关联是否放在永久表中。如果映射是放在临时表中，那么在空闲时间会被自动删除。<strong>因为 Attach 完全是为了方便使用 MFC 类的成员函数去操纵 WINDOWS 对象。</strong></p>\n</blockquote>\n<h1 id=\"gdi对象之画笔cpen\"><a class=\"markdownIt-Anchor\" href=\"#gdi对象之画笔cpen\">#</a> GDI 对象之画笔 CPen</h1>\n<p>图形设备接口 GDI（Graphics Device Interface）</p>\n<p>在 MFC 中，CGdiObject 类是 GDI 对象的基类，CGdiObject 类有 6 个直接的派生类，GDI 对象主要也是这 6 个，分别是：CBitmap、CBrush、CFont、CPalette、CPen、CRgn。其中最常用的是画笔 CPen 和画刷 CBrush</p>\n<h1 id=\"gdi对象之画刷cbrush\"><a class=\"markdownIt-Anchor\" href=\"#gdi对象之画刷cbrush\">#</a> GDI 对象之画刷 CBrush</h1>\n<p>创建 Picture Control 控件，添加 CStatic 变量 mPicColor。创建 “选择颜色” 的按钮控件，添加事件响应函数，功能实现如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CBrushExampleDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedBtnColorSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tCOLORREF color <span class=\"token operator\">=</span> <span class=\"token function\">RGB</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 颜色对话框的初始颜色</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tCColorDialog <span class=\"token function\">colorDlg</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 构造颜色对话框</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tCRect rectPicture<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 图片控件的矩形区域坐标</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tCBrush newBrush<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 创建新画刷</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tCBrush <span class=\"token operator\">*</span>pOldBrush<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 旧画刷指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tCClientDC <span class=\"token function\">clientDC</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 构建客户区的设备上下文对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IDOK <span class=\"token operator\">==</span> colorDlg<span class=\"token punctuation\">.</span><span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">// 如果点击了颜色对话框的确定按钮，则执行下列操作。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// 获取颜色对话框中选择的颜色</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcolor <span class=\"token operator\">=</span> colorDlg<span class=\"token punctuation\">.</span><span class=\"token function\">GetColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// 用选择的颜色创建新画刷</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tnewBrush<span class=\"token punctuation\">.</span><span class=\"token function\">CreateSolidBrush</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 获取图片控件矩形区域屏幕坐标</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tmPicColor<span class=\"token punctuation\">.</span><span class=\"token function\">GetWindowRect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rectPicture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 将图片控件矩形区域的屏幕坐标转换为其父窗口即对话框的客户区坐标</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">ScreenToClient</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rectPicture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">// 选择新画刷，并保存旧画刷的指针</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tpOldBrush <span class=\"token operator\">=</span> clientDC<span class=\"token punctuation\">.</span><span class=\"token function\">SelectObject</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>newBrush<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 以新画刷为图片控件填充颜色</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tclientDC<span class=\"token punctuation\">.</span><span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span>rectPicture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">// 恢复旧画刷</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tclientDC<span class=\"token punctuation\">.</span><span class=\"token function\">SelectObject</span><span class=\"token punctuation\">(</span>pOldBrush<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token comment\">// 删除旧画刷</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tnewBrush<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>CClientDC 类是 CDC 类的派生类，它生成的设备上下文对应于窗口的客户区，另一个类 CWindowDC 类也是 CDC 类的派生类，它对应的则包括客户区和非客户区，也就是说，CClientDC 只能在客户区绘图，而 CWindowDC 可以在客户区和非客户区绘图。</p>\n<ul>\n<li>非客户区包括窗口中的标题栏、菜单栏、状态栏、滚动条边框等区域。</li>\n<li>客户区就是除去非客户区之外的主要工作区域</li>\n</ul>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/25/MFC%E6%96%87%E6%A1%A3%E8%A7%86%E5%9B%BE%E6%A1%86%E6%9E%B6/",
            "url": "https://adventure-yx.github.io/2023/06/25/MFC%E6%96%87%E6%A1%A3%E8%A7%86%E5%9B%BE%E6%A1%86%E6%9E%B6/",
            "title": "MFC 文档/视图框架",
            "date_published": "2023-06-25T00:50:08.000Z",
            "content_html": "<h1 id=\"文档视图框架\"><a class=\"markdownIt-Anchor\" href=\"#文档视图框架\">#</a> 文档 / 视图框架</h1>\n<p>MFC 向导自动生成的项目中包含 CxxxDoc 类，CxxxView 类和 CMainFrame 类。</p>\n<p>文档 / 视图结构是 MFC 提供的一种设计，它将数据的处理和显示分开，这样更便于对程序的维护和扩展。</p>\n<ul>\n<li>\n<p>文档</p>\n<p>文档对象用于管理和维护数据，包括保存数据，取出数据以及修改数据等操作，在数据被修改以后，文档可以通知其对应的所有视图更新显示。</p>\n</li>\n<li>\n<p>视图</p>\n<p>视图对象将文档中的数据可视化，负责从文档对象中取出数据显示给用户，并接受用户的输入和编辑，将数据的改变反映给文档对象。视图充当了文档和用户之间媒介的角色。</p>\n</li>\n<li>\n<p>框架</p>\n<p>一个文档可能有多个视图界面，这就需要有框架来管理。框架就是用来管理文档和视图的。框架窗口是应用程序的主窗口，应用程序执行时会先创建一个最顶层的框架窗口。视图窗口是没有菜单和边界的子窗口，它必须包含在框架窗口中，即置于框架窗口的客户区内。</p>\n</li>\n</ul>\n<h1 id=\"文档模板\"><a class=\"markdownIt-Anchor\" href=\"#文档模板\">#</a> 文档模板</h1>\n<p>文档模板中存放了文档、视图和框架相关的信息，应用程序通过文档模板创建文档对象，框架窗口对象和视图对象。另外，文档、视图、框架之间的关系也是文档模板来管理的。</p>\n<p>在 HelloWorld.cpp 中，CHelloWorldApp 应用程序类的成员函数 <code>CHelloWorldApp::InitInstance()</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token class-name\">CHelloWorldApp</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 注册应用程序的文档模板。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 文档模板将用作文档、框架窗口和视图之间的连接</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tCSingleDocTemplate<span class=\"token operator\">*</span> pDocTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tpDocTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CSingleDocTemplate</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tIDR_MAINFRAME<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CHelloWorldDoc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CMainFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 主 SDI 框架窗口</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>CHelloWorldView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pDocTemplate<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">AddDocTemplate</span><span class=\"token punctuation\">(</span>pDocTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在构造文档模板类 CSingleDocTemplate 的对象时，第一个参数是资源 ID:IDR_MAINFRAME，它包括框架窗口图标等，后面 3 个参数是 RUNTIME_CLASS 宏的调用，RUNTIME_CLASS 用于获取类的运行信息，文档模板可以根据这些动态创建信息来创建相应类的对象，即文档对象、框架窗口对象和视图对象。</p>\n<p>AddDocTemplate (pDocTemplate) 函数用来注册文档模板对象。</p>\n<h1 id=\"框架类-文档类-视图类\"><a class=\"markdownIt-Anchor\" href=\"#框架类-文档类-视图类\">#</a> 框架类、文档类、视图类</h1>\n<ul>\n<li>\n<p>CMainFrame 框架类继承于 CFrameWndEx 类，而 CFrameWndEx 类又继承于 CFrameWnd 类，CFrameWnd 类中用于管理文档和视图的成员函数有：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获得当前活动视图对象对应文档对象的指针，如果不存在返回 NULL</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">virtual</span> CDocument<span class=\"token operator\">*</span> <span class=\"token function\">GetActiveDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 获得当前活动视图对象的指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CView<span class=\"token operator\">*</span> <span class=\"token function\">GetActiveView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 设置活动视图。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 参数 pViewNew 为要激活的视图对象的指针。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 参数 bNotify 指定视图是否接受激活通知。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetActiveView</span><span class=\"token punctuation\">(</span>CView<span class=\"token operator\">*</span> pViewNew<span class=\"token punctuation\">,</span> BOLL bNotify <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>CHelloWorldDoc 文档类继承于 CDocument 类，主要成员函数有：</p>\n<pre><code class=\"language-cpp\">\n</code></pre>\n</li>\n<li>\n<p>CHelloWorldView 视图类继承于 CView 类，CView 类中与文档 / 视图结构相关的成员函数包括：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取视图关联的文档对象的指针，如果视图没有关联到文档上则返回 NULL</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CDocument<span class=\"token operator\">*</span> <span class=\"token function\">GetDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"各对象之间关系\"><a class=\"markdownIt-Anchor\" href=\"#各对象之间关系\">#</a> 各对象之间关系</h1>\n<p>涉及到的对象包括<strong>应用程序对象</strong>、<strong>文档模板对象</strong>、<strong>文档对象</strong>、<strong>视图对象</strong>和<strong>框架窗口对象</strong>。</p>\n<ol>\n<li>\n<p>应用程序对象保存了一个文档模板的列表。</p>\n<p>在任何对象中调用全局函数 <code>AfxGetApp()</code>  都可以获得应用程序对象的指针。通过调用 <code>CWinAppEx::GetFirstDocTemplatePosition()</code> 、 <code>CWinAppEx::GetNextDocTemplate()</code>  函数可以遍历所有的文档模板。</p>\n</li>\n<li>\n<p>文档模板对象用于维护文档、视图和框架窗口的映射关系，它包含一个已打开文档的列表。</p>\n<p>我们可以通过调用 CDocTemplate::GetFirstDocPosition ()、CDocTemplate::GetNextDoc () 来遍历该文档模板对应的所有文档。</p>\n</li>\n<li>\n<p>框架窗口对象中包含有指向当前活动视图对象的指针。</p>\n<p>AfxGetApp ()-&gt;m_pMainWnd 即为主框架窗口对象的指针，可以通过调用 CFrameWndEx::GetActiveView 来获取当前活动视图对象的指针，并且使用 CFrameWndEx::GetActiveDocument 函数获取当前活动视图对应的文档。</p>\n</li>\n<li>\n<p>文档对象中维护着该文档的视图列表，已经创建该文档的文档模板对象的指针。</p>\n<p>可以通过调用</p>\n</li>\n<li>\n<p>视图是框架窗口的子窗口，它保存有指向对应文档对象的指针。</p>\n<p>可以通过调用 CView::GetParentFrame 获取其所属的框架窗口对象的指针，调用 CView::GetDocument 获取该视图对应的文档对象的指针。</p>\n</li>\n</ol>\n<p>另外，在 MDI 多文档程序中，调用 CMDIFrameWnd::MDIGetActive 可以获取当前活动的 MDI 子窗口。</p>\n<h1 id=\"分割窗口和csplitterwnd类\"><a class=\"markdownIt-Anchor\" href=\"#分割窗口和csplitterwnd类\">#</a> 分割窗口和 CSplitterWnd 类</h1>\n<p>将一个窗口分割成多个窗口，每个窗口都包含视图。</p>\n<p>MFC 分割窗口：动态分割，静态分割。</p>\n<ul>\n<li>动态分割通常用于创建同一文档对应的多个视图，而且这些视图一般都是同一类型的视图，能够在用户编辑文档的不同部分时提供方便。动态分割窗口最多可以有两行两列。</li>\n<li>静态分割比较常见，窗口创建时分割的窗格就已经生成了，而且用户不能改变窗格的数量和顺序。静态分割窗口最多支持 16 行 16 列。通常静态分割的每个窗格中包含不同类的视图，当然也可以包含同一类的视图。</li>\n</ul>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/10/MFC%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B60/",
            "url": "https://adventure-yx.github.io/2023/06/10/MFC%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B60/",
            "title": "MFC 常用控件",
            "date_published": "2023-06-10T03:12:08.000Z",
            "content_html": "<h1 id=\"常用控件\"><a class=\"markdownIt-Anchor\" href=\"#常用控件\">#</a> 常用控件</h1>\n<p>控件的消息通知</p>\n<p>当控件有事件发生时，他会向父窗口发送通知消息。最常发生的事件就是鼠标单击了，此时控件会向父窗口发送 BN_CLICKED 消息，实际上也就是给父窗口发送 WM_COMMAND 消息，在 wParam 参数中包含有通知消息码（鼠标单击的通知消息码就是 BN_CLICKED）和控件 ID，IParam 参数中包含了控件的句柄。在 MFC 消息映射机制中，消息就是由三部分组成：消息值，wParam 参数，IParam 参数。</p>\n<p>控件消息映射宏的格式：</p>\n<p>ON_通知消息码 <code>(nID, memberFun)</code></p>\n<p>nID 参数是控件的 ID，memberFun 参数是消息处理函数名。</p>\n<p>例如 <code>ON_BN_CLICKED(IDC_PMAC_BUTTON, &amp;LoginDlg::OnBnClickedPmacButton)</code></p>\n<p>消息处理函数声明：</p>\n<p><code>afx_msg void memberFun();</code></p>\n<h2 id=\"静态文本框-static-text\"><a class=\"markdownIt-Anchor\" href=\"#静态文本框-static-text\">#</a> 静态文本框 Static Text</h2>\n<p>如果我们想在程序中<strong>动态创建静态文本框</strong>，而不是像前面那样直接从 Toolbox 中拖到对话框模板上，那么就需要使用 CStatic 类的成员函数 Create。Create 函数的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  LPCTSTR lpszText<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  DWORD dwStyle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> RECT<span class=\"token operator\">&amp;</span> rect<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  CWnd<span class=\"token operator\">*</span> pParentWnd<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  UINT nID <span class=\"token operator\">=</span> <span class=\"token number\">0xffff</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>lpszText：指定要在控件中显示的文字。如果为 NULL 则不会显示任何文字。</p>\n</li>\n<li>\n<p>dwStyle：指定静态控件的风格。静态文本框一般都是对话框或其他窗口的子窗口，而且是可见的，所以应该包含 WS_CHILD 和 WS_VISIBLE 风格，另外，MSDN 中说明，还可以为其设置 “static control styles” 中风格的任意组合。</p>\n<table>\n<thead>\n<tr>\n<th>SS_BITMAP</th>\n<th>一个位图将显示在静态控件中，Create 函数的 lpszText 参数字符串是资源文件中定义的位图名。此风格忽略宽度和高度参数，静态控件自动调整它的尺寸来适应位图</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SS_BLACKFRAME</td>\n<td>指定一个具有与窗口边界同色的框，默认为黑色</td>\n</tr>\n<tr>\n<td>SS_BLACKRECT</td>\n<td>指定一个具有与窗口边界同色的实矩形，默认为黑色</td>\n</tr>\n<tr>\n<td>SS_CENTER</td>\n<td>使显示的正文居中对齐，正文可以换行</td>\n</tr>\n<tr>\n<td>SS_GRAYFRAME</td>\n<td>指定一个具有与屏幕背景同色的边框</td>\n</tr>\n<tr>\n<td>SS_GRAYRECT</td>\n<td>指定一个具有与屏幕背景同色的实矩形</td>\n</tr>\n<tr>\n<td>SS_ICON</td>\n<td>使控件显示一个在资源中定义的图标，图标的名字由 Create 函数的 lpszText 参数指定，图标自动调整它的尺寸</td>\n</tr>\n<tr>\n<td>SS_LEFT</td>\n<td>左对齐正文，正文能回绕</td>\n</tr>\n<tr>\n<td>SS_LEFTNOWORDWRAP</td>\n<td>左对齐正文，正文不能回绕</td>\n</tr>\n<tr>\n<td>SS_NOTIFY</td>\n<td>使控件能向父窗口发送鼠标事件消息</td>\n</tr>\n<tr>\n<td>SS_RIGHT</td>\n<td>右对齐正文，可以回绕</td>\n</tr>\n<tr>\n<td>SS_SIMPLE</td>\n<td>使静态正文在运行时不能被改变并使正文显示在单行中</td>\n</tr>\n<tr>\n<td>SS_WHITEFRAME</td>\n<td>指定一个具有与窗口背景同色的框，默认为白色</td>\n</tr>\n<tr>\n<td>SS_WHITERECT</td>\n<td>指定一个具有与窗口背景同色的实心矩形，默认为白色</td>\n</tr>\n</tbody>\n</table>\n<p>我们在对话框模板添加静态文本框时，可以在静态文本框的属性页中设置它的风格，很多都与上面的风格是对应的，例如，Simple 属性就相当于 SS_SIMPLE 风格。</p>\n</li>\n<li>\n<p>rect：指定静态控件的位置和大小，它可以是 RECT 结构体类型，也可以是 CRect 类的对象。</p>\n</li>\n<li>\n<p>pParentWnd：指定静态控件的父窗口，通常是一个 CDialog 对象，不能是 NULL。</p>\n</li>\n<li>\n<p>nID：指定静态控件的 ID。</p>\n</li>\n</ul>\n<h3 id=\"cstatic类的成员函数\"><a class=\"markdownIt-Anchor\" href=\"#cstatic类的成员函数\">#</a> CStatic 类的成员函数</h3>\n<table>\n<thead>\n<tr>\n<th>GetBitmap</th>\n<th>获取由 SetBitmap 函数设置的位图的句柄</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GetCursor</td>\n<td>获取由 SetCurSor 设置的光标的句柄</td>\n</tr>\n<tr>\n<td>GetEnhMetaFile</td>\n<td>获取由 SetEnhMetaFile 设置的增强图元文件的句柄</td>\n</tr>\n<tr>\n<td>GetIcon</td>\n<td>获取由 SetIcon 设置的图标的句柄</td>\n</tr>\n<tr>\n<td>SetBitmap</td>\n<td>设置要在静态控件中显示的位图</td>\n</tr>\n<tr>\n<td>SetCursor</td>\n<td>设置要在静态控件中显示的光标图片</td>\n</tr>\n<tr>\n<td>SetEnhMetaFile</td>\n<td>设置要在静态控件中显示的增强图元文件</td>\n</tr>\n<tr>\n<td>SetIcon</td>\n<td>设置要在静态控件中显示的图标</td>\n</tr>\n</tbody>\n</table>\n<p>除了上述成员函数外，由于 CStatic 是 CWnd 的派生类，CWnd 的很多成员函数也可以使用，例如，GetWindowText、GetWindowRect、SetWindowText 等。</p>\n<h2 id=\"编辑框-edit-control\"><a class=\"markdownIt-Anchor\" href=\"#编辑框-edit-control\">#</a> 编辑框 Edit Control</h2>\n<h2 id=\"按钮控件-button-radio-button和check-box\"><a class=\"markdownIt-Anchor\" href=\"#按钮控件-button-radio-button和check-box\">#</a> 按钮控件 Button、Radio Button 和 Check Box</h2>\n<p>按钮控件包括：</p>\n<ul>\n<li>命令按钮（Button）</li>\n<li>单选按钮（Radio Button）</li>\n<li>复选框（Check Button）</li>\n</ul>\n<p>按钮控件会向父窗口发送通知消息，例如 <code>BN_CLICKED</code> 、 <code>BN_DOUBLECLICKED</code></p>\n<h3 id=\"按钮控件的创建\"><a class=\"markdownIt-Anchor\" href=\"#按钮控件的创建\">#</a> 按钮控件的创建</h3>\n<p>MFC 提供了 CButton 类封装按钮控件的所有操作。有两种创建方式：</p>\n<ul>\n<li>在对话框模板上直接添加按钮控件资源。</li>\n<li>通过 CButton 类的成员函数 Create 动态创建按钮。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Create 函数原型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tLPCTSTR lpszCaption<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    DWORD dwStyle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> RECT<span class=\"token operator\">&amp;</span> rect<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    CWnd<span class=\"token operator\">*</span> pParentWnd<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    UINT nID</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>lpszCaption：指定按钮控件显示的文本。</li>\n<li>dwStyle：指定按钮控件的风格，可以设置为以下按钮风格的任意组合\n<ul>\n<li>BS_CHECKBOX：指定在按钮右侧带有标题的选择框</li>\n<li>BS_AUTOCHECKBOX：同 BS_CHECKBOX，不过单击鼠标时按钮会自动反转</li>\n<li>BS_AUTORADIOBUTTON： 同 BS_RADIOBUTTON，不过单击鼠标时按钮会自动反转</li>\n<li>BS_AUTO3STATE ：同 BS_3STATE，不过单击按钮时会改变状态</li>\n<li>BS_DEFPUSHBUTTON：指定默认的命令按钮，这种按钮的周围有一个黑框，用户可以按回车键来快速选择该按钮</li>\n<li>BS_GROUPBOX：指定一个组框</li>\n<li>BS_LEFTTEXT：使控件的标题显示在按钮的左边</li>\n<li>BS_OWNERDRAW：指定一个自绘式按钮</li>\n<li>BS_PUSHBUTTON：指定一个命令按钮</li>\n<li>BS_RADIOBUTTON：指定一个单选按钮，在圆按钮的右边显示正文</li>\n<li>BS_3STATE：同 BS_CHECKBOX，不过控件有 3 种状态 — 选择、未选择和变灰</li>\n</ul>\n</li>\n</ul>\n<p>当然，除了以上列出的风格，一般还会为按钮设置 <code>WS_CHILD</code> 、 <code>WS_VISIBLE</code>  和 <code>WS_TABSTOP</code>  等风格，WS_TABSTOP 风格使按钮控件具有 tab 停止属性，即按 tab 键切换焦点控件时能够将焦点停在按钮控件上。创建一组单选按钮时，第一个按钮的风格应设置为 WS_CHILD|WS_VISIBLE|WS_TABSTOP|WS_GROUP|BS_AUTORADIOBUTTON，其他单选按钮的风格应为 WS_CHILD|WS_VISIBLE|BS_AUTORADIOBUTTON，不包含 WS_TABSTOP 和 WS_GROUP。</p>\n<p>在对话框模板上直接添加按钮控件时，它的属性中包含了上述风格，例如，复选框的 Tri_state 属性实际上代表的就是 BS_3STATE 风格。</p>\n<p>剩下的三个参数与静态文本框的 Create 函数中的相应参数类似</p>\n<h3 id=\"cbutton类的主要成员函数\"><a class=\"markdownIt-Anchor\" href=\"#cbutton类的主要成员函数\">#</a> CButton 类的主要成员函数</h3>\n<ul>\n<li>\n<p>HBITMAP SetBitmap(HBITMAP hBitmap);</p>\n<p>设置要在按钮中显示的位图，参数 nBitmap 为位图的句柄。返回值为按钮原来位图的句柄。</p>\n</li>\n<li>\n<p>HBITMAP GetBitmap() const;</p>\n<p>获取之前由 SetBitmap 函数设置的按钮的位图的句柄。</p>\n</li>\n<li>\n<p>void SetButtonStyle(UINT nStyle, BOOL bRedraw = TRUE);</p>\n<p>设置按钮风格，参数 nStyle 指定按钮的风格，bRedraw 指定按钮是否重绘，为 TRUE 则重绘，否则不重绘，默认为重绘。</p>\n</li>\n<li>\n<p>UINT GetButtonStyle() const;</p>\n<p>获取按钮控件的风格</p>\n</li>\n<li>\n<p>void SetCheck(int cCheck);</p>\n<p>设置按钮的选择状态，参数 nCheck 为 0 表示未选中状态，1 表示选中状态，2 表示不确定状态（仅用于复选框）</p>\n</li>\n<li>\n<p>int GetCheck() const;</p>\n<p>获取按钮的选择状态，返回值的意义同 SetCheck 函数的 nCheck 参数</p>\n</li>\n<li>\n<p>HCURSOR SetCursor(HCURSOR hCursor);</p>\n<p>设置要显示到按钮上的光标图，参数 hCursor 指定了光标的句柄。返回值为按钮原来光标的句柄。</p>\n</li>\n<li>\n<p>HCURSOR GetCursor();</p>\n<p>获取 SetCursor 设置的光标的句柄。</p>\n</li>\n<li>\n<p>HICON SetIcon(HICON hIcon);</p>\n<p>设置要在按钮上显示的图标。参数 hIcon 指定了图标的句柄，返回值为按钮原来图标的句柄。</p>\n</li>\n<li>\n<p>HICON GetIcon() const;</p>\n<p>获取 SetIcon 设置的图标的句柄。</p>\n</li>\n<li>\n<p>void SetState(BOOL bHighlight);</p>\n<p>设置按钮高亮状态，参数 bHighlight 指定按钮是否高亮显示，非 0 则为高亮，否则取消高亮显示状态。</p>\n</li>\n<li>\n<p>UINT GetState() const;</p>\n<p>获取按钮控件的选择状态、高亮状态和焦点状态。我们可以通过将返回值与各个掩码相与来获得各种状态值，掩码与对应的相与结果说明如下：</p>\n<ul>\n<li>掩码 0x0003：用来获取单选按钮或复选框的状态。相与结果为 0 表示未选中，1 表示被选中，2 表示不确定状态（仅用于复选框）。</li>\n<li>掩码 0x0004：用来判断按钮是否是高亮显示。相与结果为非 0 值表示按钮是高亮显示的。当单击按钮并按住鼠标左键时，按钮会呈高亮显示。</li>\n<li>掩码 0x0008：相与结果为非零值表示按钮拥有输入焦点。</li>\n</ul>\n</li>\n</ul>\n<p>下面再列出几个继承自 CWnd 类的成员函数，通过它们获取或设置按钮控件的状态非常方便，只需要知道按钮的 ID。</p>\n<ul>\n<li>\n<p>void CheckDlgButton(int nIDButton,UINT nCheck);</p>\n<p>用来设置按钮的选择状态。参数 nIDButton 指定了按钮的 ID。nCheck 的值为 0 表示按钮未被选择，为 1 表示按钮被选择，为 2 表示按钮处于不确定状态（仅用于复选框）。</p>\n</li>\n<li>\n<p>UINT IsDlgButtonChecked(int nIDButton) const;</p>\n<p>返回复选框或单选按钮的选择状态。返回值为 0 表示按钮未被选择，为 1 表示按钮被选择，为 2 表示按钮处于不确定状态（仅用于复选框）。</p>\n</li>\n<li>\n<p>void CheckRadioButton(int nIDFirstButton,int nIDLastButton,int nIDCheckButton);</p>\n<p>用来选择组中的一个单选按钮。参数 nIDFirstButton 指定了组中第一个按钮的 ID，nIDLastButton 指定了组中最后一个按钮的 ID，nIDCheckButton 指定了要选择的按钮的 ID。</p>\n</li>\n<li>\n<p>int GetCheckedRadioButton(int nIDFirstButton, int nIDLastButton);</p>\n<p>用来获得一组单选按钮中被选中按钮的 ID。参数 nIDFirstButton 说明了组中第一个按钮的 ID，nIDLastButton 说明了组中最后一个按钮的 ID。</p>\n</li>\n</ul>\n<p>​    另外，CWnd 类的成员函数 GetWindowText ()、SetWindowText () 等也可以用来获取或设置按钮中显示的文本。</p>\n<h2 id=\"列表框控件-listbox\"><a class=\"markdownIt-Anchor\" href=\"#列表框控件-listbox\">#</a> 列表框控件 ListBox</h2>\n<h2 id=\"组合框控件-combo-box\"><a class=\"markdownIt-Anchor\" href=\"#组合框控件-combo-box\">#</a> 组合框控件 Combo Box</h2>\n<h2 id=\"滚动条控件-scroll-bar\"><a class=\"markdownIt-Anchor\" href=\"#滚动条控件-scroll-bar\">#</a> 滚动条控件 Scroll Bar</h2>\n<h2 id=\"图片控件-picture-control\"><a class=\"markdownIt-Anchor\" href=\"#图片控件-picture-control\">#</a> 图片控件 Picture Control</h2>\n<h2 id=\"列表视图控件-list-control\"><a class=\"markdownIt-Anchor\" href=\"#列表视图控件-list-control\">#</a> 列表视图控件 List Control</h2>\n<h2 id=\"树形控件-tree-control\"><a class=\"markdownIt-Anchor\" href=\"#树形控件-tree-control\">#</a> 树形控件 Tree Control</h2>\n<h2 id=\"标签控件-tab-control\"><a class=\"markdownIt-Anchor\" href=\"#标签控件-tab-control\">#</a> 标签控件 Tab Control</h2>\n<h1 id=\"菜单与cmenu类\"><a class=\"markdownIt-Anchor\" href=\"#菜单与cmenu类\">#</a> 菜单与 CMenu 类</h1>\n<ul>\n<li>\n<p>下拉式菜单</p>\n<p>一般在窗口标题栏下面显示，通常是由主菜单栏、子菜单及子菜单中的菜单项和分割条组成。</p>\n</li>\n<li>\n<p>弹出式菜单</p>\n<p>一般通过单击鼠标右键显示，它的主菜单不可见，只显示子菜单。</p>\n</li>\n</ul>\n<p>菜单可以在 VS 的 Resource View 资源视图中直接创建编辑。打开资源视图中的 Menu 中 ID 为 IDR_MAINFRAME 的菜单资源。</p>\n<p>点击菜单栏中的某一项会弹出子菜单，子菜单中有多个菜单项和分割条。菜单项中有”…“表示点击后会弹出对话框。带下划线的表示热键</p>\n<h2 id=\"cmenu类主要成员函数\"><a class=\"markdownIt-Anchor\" href=\"#cmenu类主要成员函数\">#</a> CMenu 类主要成员函数</h2>\n<ul>\n<li>\n<p>BOOL LoadMenu(UINT nIDResource);</p>\n<p>加载菜单资源，并将其附加到 CMenu 对象上。参数 nIDResource 指定了要加载的菜单资源的 ID。如果菜单加载成功则返回 TRUE，否则返回 FALSE</p>\n</li>\n<li>\n<p>BOOL DeleteMenu(UINT nPosition, UINT nFlags);</p>\n<p>在菜单中删除一个菜单项。参数 nPosition 指定要删除的菜单项。参数 nFlags 就用来解释 nPosition 的意义，为 MF_BYCOMMAND 时说明 nPosition 表示菜单项的 ID，为 MF_BYPOSITION 时说明 nPosition 表示菜单项的位置，第一个菜单项的位置为 0。如果删除菜单项成功则返回 TRUE，否则返回 FALSE。</p>\n</li>\n<li>\n<p>BOOL TrackPopupMenu(UINT nFlags, int x, int y, CWnd* pWnd, LPCRECT IpRect = 0);</p>\n<p>用来在指定位置显示一个浮动的弹出式菜单。</p>\n</li>\n<li>\n<p>UINT CheckMenuItem(UINT nIDCheckItem, UINT nCheck);</p>\n<p>在弹出的菜单中增加选中标记或移除选中标记。参数 nIDCheckItem 指定要选中或取消选中的菜单项。</p>\n</li>\n<li>\n<p>UINT EnableMenuItem(UINT nIDEnableItem, UINT nEnable);</p>\n<p>激活、禁用菜单项或使其变灰。参数 nIDEnableItem 指定要激活、禁用或变灰的菜单项。参数 nEnable 指定操作的类型。可以是 MF_DISABLED、</p>\n</li>\n<li>\n<p>CMenu* GetSubMenu(int nPos) const;</p>\n</li>\n</ul>\n<h2 id=\"菜单消息\"><a class=\"markdownIt-Anchor\" href=\"#菜单消息\">#</a> 菜单消息</h2>\n<p>菜单主要能发送两种消息：COMMAND 消息和 UPDATE_COMMAND_UI 消息。</p>\n<ul>\n<li>\n<p>COMMAND 消息</p>\n<p>在菜单项被点击时发送该消息。</p>\n</li>\n<li>\n<p>UPDATE_COMMAND_UI 消息</p>\n<p>用来维护菜单项的各项状态，包括激活、禁用、变灰、选中、未选中等。在下拉菜单每次打开的时候，所有菜单项的此消息都会被发送出，如果所属类中为菜单项的该消息添加了处理函数，则执行相应函数更新菜单状态，如果菜单项没有此消息处理函数，也没有 COMMAND 消息的处理函数，那么它就会变灰。</p>\n</li>\n</ul>\n<h1 id=\"工具栏与ctoolbar类\"><a class=\"markdownIt-Anchor\" href=\"#工具栏与ctoolbar类\">#</a> 工具栏与 CToolBar 类</h1>\n<p>打开资源视图中的 ToolBar 中 ID 为 IDR_MAINFRAME 的工具栏资源。</p>\n<h1 id=\"状态栏与cstatusbar类\"><a class=\"markdownIt-Anchor\" href=\"#状态栏与cstatusbar类\">#</a> 状态栏与 CStatusBar 类</h1>\n<p>状态栏一般在窗口的最底部，用来显示各种状态。</p>\n<p>状态栏实际上也是一个窗口，一般分为几个窗格，每个窗格分别用来显示不同的信息和状态等，如菜单项和工具栏按钮的提示信息。</p>\n<p>用 MFC 向导生成的单文档或多文档程序都会自动创建状态栏，在结果界面中可以看到窗口底部有个状态栏，该状态栏被分为了几个窗格，分别用来显示菜单项和工具栏按钮的提示信息及 Caps Lock、Num Lock、Scroll Lock 键的状态。</p>\n<p><img data-src=\"image-20230529160507134.png\" alt=\"image-20230529160507134\"></p>\n<p>也可以自定义状态栏，加入新的提示信息或指示器。</p>\n<h2 id=\"cstatusbar类\"><a class=\"markdownIt-Anchor\" href=\"#cstatusbar类\">#</a> CStatusBar 类</h2>\n<p>MFC 为状态栏提供了 CStatusBar 类，封装了状态栏的属性和操作。</p>\n<p>CStatusBar 类的几个主要成员函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个状态栏</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span> pParentWnd<span class=\"token punctuation\">,</span> DWORD dwStyle <span class=\"token operator\">=</span> WS_CHILD<span class=\"token operator\">|</span>WS_VISIBLE<span class=\"token operator\">|</span>CBRS_BOTTOM<span class=\"token punctuation\">,</span> UINT nID <span class=\"token operator\">=</span> AFX_IDW_STATUS_BAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 pParentWnd 为状态栏父窗口指针。</li>\n<li>参数 dwStyle 为状态栏风格，除了标准 windows 风格外它还支持：\n<ul>\n<li>CBRS_TOP：位于框架窗口顶部</li>\n<li>CBRS_BOTTOM：位于框架窗口顶部</li>\n<li>CBRS_NOALIGN：父窗口大小改变时状态栏不会被重新定位</li>\n</ul>\n</li>\n<li>参数 nID 指定状态栏的 ID</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 为每个指示器设置显示文本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BOOL <span class=\"token function\">SetIndicators</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> UINT<span class=\"token operator\">*</span> IpIDArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nIDCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用 IpIDArray 数组中的对应元素为每个指示器设置一个 ID，然后加载每个 ID 代表的字符串，设置为这些指示器的显示文本。</p>\n<ul>\n<li>参数 IpIDArray 为指向一个 ID 数组的指针</li>\n<li>参数 nIDCount 为 IpIDArray 数组的元素个数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>UINT <span class=\"token function\">GetItemID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>获取由 nIndex 指定的指示器的 ID。</p>\n<ul>\n<li>参数 nIndex 为要获取 ID 的指示器索引</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString <span class=\"token function\">GetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>获取状态栏窗格中显示的文本。</p>\n<ul>\n<li>参数 nIndex 为要获取文本的窗格索引</li>\n<li>返回值为包含窗格文本的 CString 对象</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">SetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">,</span> LPCTSTR lpszNewText<span class=\"token punctuation\">,</span> BOOL bUpdate <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>设置状态窗格的显示文本。</p>\n<ul>\n<li>参数 nIndex 为要设置文本的窗格索引</li>\n<li>参数 lpszNewText 为指向新的窗格文本的指针</li>\n<li>参数 bUpdate 表示是否设置后立即更新显示</li>\n</ul>\n<h2 id=\"状态栏创建\"><a class=\"markdownIt-Anchor\" href=\"#状态栏创建\">#</a> 状态栏创建</h2>\n<p>在 MainFrm.h 中可以看到，CMainFrame 类的成员变量中创建状态栏使用的是 CMFCStatusBar 类对象。CMFCStatusBar 类和 CStatusBar 类用法类似，功能更加丰富。</p>\n<ol>\n<li>\n<p>构造一个 CMFCStatusBar 类的对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CMFCStatusBar     m_wndStatusBar<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>调用 CMFCStatusBar::Create 函数来创建状态栏窗口。</p>\n<p>在 CMainFrame::OnCreate 函数的实现中，可以找到 CMFCStatusBar::Create 函数的调用</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token function\">TRACE0</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未能创建状态栏\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 未能创建</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>调用 CMFCStatusBar::SetIndicators 函数为状态栏划分窗格，并为每个指示器设置显示文本。</p>\n<p>该函数需要一个 ID 数组的参数，在 MainFrm.cpp 中定义了如下一个窗格 ID 的数组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> UINT indicators<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tID_SEPARATOR<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// 状态行指示器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tID_INDICATOR_CAPS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tID_INDICATOR_NUM<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tID_INDICATOR_SCRL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>indicators 数组定义了状态栏窗格的划分信息。</p>\n<p>第一个元素一般为 ID_SEPARATOR，对应的窗格用来显示命令提示信息，后三项为指示器文本的字符 ID，可以根据这些 ID 在 String Table 字符串资源中找到相应的字符串。查找方法，在 Resource View 资源视图中，打开 String Table 字符串资源，可以看到 ID、Value 和 Caption 三列，ID 对应的 Caption 列文本就是要查找的字符串。</p>\n<p>划分窗格</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetIndicators</span><span class=\"token punctuation\">(</span>indicators<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>indicators<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>之后我们就可以通过 CMFCStatusBar::SetPaneText 设置窗格文本。</p>\n</li>\n</ol>\n<h2 id=\"状态栏应用实例-添加时间窗格\"><a class=\"markdownIt-Anchor\" href=\"#状态栏应用实例-添加时间窗格\">#</a> 状态栏应用实例 - 添加时间窗格</h2>\n<ol>\n<li>\n<p>在资源视图的 String Table 中添加新的字符串资源，ID 为 ID_INDICATOR_TIME，Caption 为 “00:00:00”。这是为了给时间的显示预留空间，因为状态栏会根据字符串的长度为相应的窗格确定缺省宽度。</p>\n</li>\n<li>\n<p>在 indicators 数组插入 ID_INDICATOR_TIME</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> UINT indicators<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tID_SEPARATOR<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// 状态行指示器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tID_INDICATOR_CAPS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tID_INDICATOR_NUM<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tID_INDICATOR_SCRL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tID_INDICATOR_TIME<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>要实时显示系统时间，就需要一个定时器，每秒钟更新一次时间显示。在 CMainFrame::OnCreate 函数中开启定时器</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">CMainFrame</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>LPCREATESTRUCT lpCreateStruct<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CFrameWndEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>lpCreateStruct<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 启动定时器，定时器 ID 为 1，定时时间为 1000ms</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 Class View 类视图中找到 CMainFrame 类，右键点击属性，然后在属性页中，点工具栏上的 Messages 消息按钮，显示出消息列表，找到 WM_TIMER 消息，添加其消息处理函数 <code>void CMainFrame::OnTimer(UINT_PTR nIDEvent)</code> ，并修改此函数实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMainFrame</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>UINT_PTR nIDEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加消息处理程序代码和 / 或调用默认值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tCString strTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 获取当前系统时间，并保存到 curTime</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tCTime curTime <span class=\"token operator\">=</span> <span class=\"token class-name\">CTime</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 格式化 curTime, 将字符串保存到 strTime</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstrTime <span class=\"token operator\">=</span> curTime<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%H:%M:%S\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 在状态栏的时间窗格中显示系统时间字符串</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tm_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> strTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token class-name\">CFrameWndEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>nIDEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试实现</p>\n</li>\n</ol>\n<h1 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/10/MFC%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6/",
            "url": "https://adventure-yx.github.io/2023/06/10/MFC%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6/",
            "title": "MFC 常用控件",
            "date_published": "2023-06-10T03:12:08.000Z",
            "content_html": "<h1 id=\"常用控件\"><a class=\"markdownIt-Anchor\" href=\"#常用控件\">#</a> 常用控件</h1>\n<p>控件的消息通知</p>\n<p>当控件有事件发生时，他会向父窗口发送通知消息。最常发生的事件就是鼠标单击了，此时控件会向父窗口发送 BN_CLICKED 消息，实际上也就是给父窗口发送 WM_COMMAND 消息，在 wParam 参数中包含有通知消息码（鼠标单击的通知消息码就是 BN_CLICKED）和控件 ID，IParam 参数中包含了控件的句柄。在 MFC 消息映射机制中，消息就是由三部分组成：消息值，wParam 参数，IParam 参数。</p>\n<p>控件消息映射宏的格式：</p>\n<p>ON_通知消息码 <code>(nID, memberFun)</code></p>\n<p>nID 参数是控件的 ID，memberFun 参数是消息处理函数名。</p>\n<p>例如 <code>ON_BN_CLICKED(IDC_PMAC_BUTTON, &amp;LoginDlg::OnBnClickedPmacButton)</code></p>\n<p>消息处理函数声明：</p>\n<p><code>afx_msg void memberFun();</code></p>\n<h2 id=\"静态文本框-static-text\"><a class=\"markdownIt-Anchor\" href=\"#静态文本框-static-text\">#</a> 静态文本框 Static Text</h2>\n<p>如果我们想在程序中<strong>动态创建静态文本框</strong>，而不是像前面那样直接从 Toolbox 中拖到对话框模板上，那么就需要使用 CStatic 类的成员函数 Create。Create 函数的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  LPCTSTR lpszText<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  DWORD dwStyle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> RECT<span class=\"token operator\">&amp;</span> rect<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  CWnd<span class=\"token operator\">*</span> pParentWnd<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  UINT nID <span class=\"token operator\">=</span> <span class=\"token number\">0xffff</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>lpszText：指定要在控件中显示的文字。如果为 NULL 则不会显示任何文字。</p>\n</li>\n<li>\n<p>dwStyle：指定静态控件的风格。静态文本框一般都是对话框或其他窗口的子窗口，而且是可见的，所以应该包含 WS_CHILD 和 WS_VISIBLE 风格，另外，MSDN 中说明，还可以为其设置 “static control styles” 中风格的任意组合。</p>\n<table>\n<thead>\n<tr>\n<th>SS_BITMAP</th>\n<th>一个位图将显示在静态控件中，Create 函数的 lpszText 参数字符串是资源文件中定义的位图名。此风格忽略宽度和高度参数，静态控件自动调整它的尺寸来适应位图</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SS_BLACKFRAME</td>\n<td>指定一个具有与窗口边界同色的框，默认为黑色</td>\n</tr>\n<tr>\n<td>SS_BLACKRECT</td>\n<td>指定一个具有与窗口边界同色的实矩形，默认为黑色</td>\n</tr>\n<tr>\n<td>SS_CENTER</td>\n<td>使显示的正文居中对齐，正文可以换行</td>\n</tr>\n<tr>\n<td>SS_GRAYFRAME</td>\n<td>指定一个具有与屏幕背景同色的边框</td>\n</tr>\n<tr>\n<td>SS_GRAYRECT</td>\n<td>指定一个具有与屏幕背景同色的实矩形</td>\n</tr>\n<tr>\n<td>SS_ICON</td>\n<td>使控件显示一个在资源中定义的图标，图标的名字由 Create 函数的 lpszText 参数指定，图标自动调整它的尺寸</td>\n</tr>\n<tr>\n<td>SS_LEFT</td>\n<td>左对齐正文，正文能回绕</td>\n</tr>\n<tr>\n<td>SS_LEFTNOWORDWRAP</td>\n<td>左对齐正文，正文不能回绕</td>\n</tr>\n<tr>\n<td>SS_NOTIFY</td>\n<td>使控件能向父窗口发送鼠标事件消息</td>\n</tr>\n<tr>\n<td>SS_RIGHT</td>\n<td>右对齐正文，可以回绕</td>\n</tr>\n<tr>\n<td>SS_SIMPLE</td>\n<td>使静态正文在运行时不能被改变并使正文显示在单行中</td>\n</tr>\n<tr>\n<td>SS_WHITEFRAME</td>\n<td>指定一个具有与窗口背景同色的框，默认为白色</td>\n</tr>\n<tr>\n<td>SS_WHITERECT</td>\n<td>指定一个具有与窗口背景同色的实心矩形，默认为白色</td>\n</tr>\n</tbody>\n</table>\n<p>我们在对话框模板添加静态文本框时，可以在静态文本框的属性页中设置它的风格，很多都与上面的风格是对应的，例如，Simple 属性就相当于 SS_SIMPLE 风格。</p>\n</li>\n<li>\n<p>rect：指定静态控件的位置和大小，它可以是 RECT 结构体类型，也可以是 CRect 类的对象。</p>\n</li>\n<li>\n<p>pParentWnd：指定静态控件的父窗口，通常是一个 CDialog 对象，不能是 NULL。</p>\n</li>\n<li>\n<p>nID：指定静态控件的 ID。</p>\n</li>\n</ul>\n<h3 id=\"cstatic类的成员函数\"><a class=\"markdownIt-Anchor\" href=\"#cstatic类的成员函数\">#</a> CStatic 类的成员函数</h3>\n<table>\n<thead>\n<tr>\n<th>GetBitmap</th>\n<th>获取由 SetBitmap 函数设置的位图的句柄</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GetCursor</td>\n<td>获取由 SetCurSor 设置的光标的句柄</td>\n</tr>\n<tr>\n<td>GetEnhMetaFile</td>\n<td>获取由 SetEnhMetaFile 设置的增强图元文件的句柄</td>\n</tr>\n<tr>\n<td>GetIcon</td>\n<td>获取由 SetIcon 设置的图标的句柄</td>\n</tr>\n<tr>\n<td>SetBitmap</td>\n<td>设置要在静态控件中显示的位图</td>\n</tr>\n<tr>\n<td>SetCursor</td>\n<td>设置要在静态控件中显示的光标图片</td>\n</tr>\n<tr>\n<td>SetEnhMetaFile</td>\n<td>设置要在静态控件中显示的增强图元文件</td>\n</tr>\n<tr>\n<td>SetIcon</td>\n<td>设置要在静态控件中显示的图标</td>\n</tr>\n</tbody>\n</table>\n<p>除了上述成员函数外，由于 CStatic 是 CWnd 的派生类，CWnd 的很多成员函数也可以使用，例如，GetWindowText、GetWindowRect、SetWindowText 等。</p>\n<h2 id=\"编辑框-edit-control\"><a class=\"markdownIt-Anchor\" href=\"#编辑框-edit-control\">#</a> 编辑框 Edit Control</h2>\n<h2 id=\"按钮控件-button-radio-button和check-box\"><a class=\"markdownIt-Anchor\" href=\"#按钮控件-button-radio-button和check-box\">#</a> 按钮控件 Button、Radio Button 和 Check Box</h2>\n<p>按钮控件包括：</p>\n<ul>\n<li>命令按钮（Button）</li>\n<li>单选按钮（Radio Button）</li>\n<li>复选框（Check Button）</li>\n</ul>\n<p>按钮控件会向父窗口发送通知消息，例如 <code>BN_CLICKED</code> 、 <code>BN_DOUBLECLICKED</code></p>\n<h3 id=\"按钮控件的创建\"><a class=\"markdownIt-Anchor\" href=\"#按钮控件的创建\">#</a> 按钮控件的创建</h3>\n<p>MFC 提供了 CButton 类封装按钮控件的所有操作。有两种创建方式：</p>\n<ul>\n<li>在对话框模板上直接添加按钮控件资源。</li>\n<li>通过 CButton 类的成员函数 Create 动态创建按钮。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Create 函数原型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tLPCTSTR lpszCaption<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    DWORD dwStyle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> RECT<span class=\"token operator\">&amp;</span> rect<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    CWnd<span class=\"token operator\">*</span> pParentWnd<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    UINT nID</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>lpszCaption：指定按钮控件显示的文本。</li>\n<li>dwStyle：指定按钮控件的风格，可以设置为以下按钮风格的任意组合\n<ul>\n<li>BS_CHECKBOX：指定在按钮右侧带有标题的选择框</li>\n<li>BS_AUTOCHECKBOX：同 BS_CHECKBOX，不过单击鼠标时按钮会自动反转</li>\n<li>BS_AUTORADIOBUTTON： 同 BS_RADIOBUTTON，不过单击鼠标时按钮会自动反转</li>\n<li>BS_AUTO3STATE ：同 BS_3STATE，不过单击按钮时会改变状态</li>\n<li>BS_DEFPUSHBUTTON：指定默认的命令按钮，这种按钮的周围有一个黑框，用户可以按回车键来快速选择该按钮</li>\n<li>BS_GROUPBOX：指定一个组框</li>\n<li>BS_LEFTTEXT：使控件的标题显示在按钮的左边</li>\n<li>BS_OWNERDRAW：指定一个自绘式按钮</li>\n<li>BS_PUSHBUTTON：指定一个命令按钮</li>\n<li>BS_RADIOBUTTON：指定一个单选按钮，在圆按钮的右边显示正文</li>\n<li>BS_3STATE：同 BS_CHECKBOX，不过控件有 3 种状态 — 选择、未选择和变灰</li>\n</ul>\n</li>\n</ul>\n<p>当然，除了以上列出的风格，一般还会为按钮设置 <code>WS_CHILD</code> 、 <code>WS_VISIBLE</code>  和 <code>WS_TABSTOP</code>  等风格，WS_TABSTOP 风格使按钮控件具有 tab 停止属性，即按 tab 键切换焦点控件时能够将焦点停在按钮控件上。创建一组单选按钮时，第一个按钮的风格应设置为 WS_CHILD|WS_VISIBLE|WS_TABSTOP|WS_GROUP|BS_AUTORADIOBUTTON，其他单选按钮的风格应为 WS_CHILD|WS_VISIBLE|BS_AUTORADIOBUTTON，不包含 WS_TABSTOP 和 WS_GROUP。</p>\n<p>在对话框模板上直接添加按钮控件时，它的属性中包含了上述风格，例如，复选框的 Tri_state 属性实际上代表的就是 BS_3STATE 风格。</p>\n<p>剩下的三个参数与静态文本框的 Create 函数中的相应参数类似</p>\n<h3 id=\"cbutton类的主要成员函数\"><a class=\"markdownIt-Anchor\" href=\"#cbutton类的主要成员函数\">#</a> CButton 类的主要成员函数</h3>\n<ul>\n<li>\n<p>HBITMAP SetBitmap(HBITMAP hBitmap);</p>\n<p>设置要在按钮中显示的位图，参数 nBitmap 为位图的句柄。返回值为按钮原来位图的句柄。</p>\n</li>\n<li>\n<p>HBITMAP GetBitmap() const;</p>\n<p>获取之前由 SetBitmap 函数设置的按钮的位图的句柄。</p>\n</li>\n<li>\n<p>void SetButtonStyle(UINT nStyle, BOOL bRedraw = TRUE);</p>\n<p>设置按钮风格，参数 nStyle 指定按钮的风格，bRedraw 指定按钮是否重绘，为 TRUE 则重绘，否则不重绘，默认为重绘。</p>\n</li>\n<li>\n<p>UINT GetButtonStyle() const;</p>\n<p>获取按钮控件的风格</p>\n</li>\n<li>\n<p>void SetCheck(int cCheck);</p>\n<p>设置按钮的选择状态，参数 nCheck 为 0 表示未选中状态，1 表示选中状态，2 表示不确定状态（仅用于复选框）</p>\n</li>\n<li>\n<p>int GetCheck() const;</p>\n<p>获取按钮的选择状态，返回值的意义同 SetCheck 函数的 nCheck 参数</p>\n</li>\n<li>\n<p>HCURSOR SetCursor(HCURSOR hCursor);</p>\n<p>设置要显示到按钮上的光标图，参数 hCursor 指定了光标的句柄。返回值为按钮原来光标的句柄。</p>\n</li>\n<li>\n<p>HCURSOR GetCursor();</p>\n<p>获取 SetCursor 设置的光标的句柄。</p>\n</li>\n<li>\n<p>HICON SetIcon(HICON hIcon);</p>\n<p>设置要在按钮上显示的图标。参数 hIcon 指定了图标的句柄，返回值为按钮原来图标的句柄。</p>\n</li>\n<li>\n<p>HICON GetIcon() const;</p>\n<p>获取 SetIcon 设置的图标的句柄。</p>\n</li>\n<li>\n<p>void SetState(BOOL bHighlight);</p>\n<p>设置按钮高亮状态，参数 bHighlight 指定按钮是否高亮显示，非 0 则为高亮，否则取消高亮显示状态。</p>\n</li>\n<li>\n<p>UINT GetState() const;</p>\n<p>获取按钮控件的选择状态、高亮状态和焦点状态。我们可以通过将返回值与各个掩码相与来获得各种状态值，掩码与对应的相与结果说明如下：</p>\n<ul>\n<li>掩码 0x0003：用来获取单选按钮或复选框的状态。相与结果为 0 表示未选中，1 表示被选中，2 表示不确定状态（仅用于复选框）。</li>\n<li>掩码 0x0004：用来判断按钮是否是高亮显示。相与结果为非 0 值表示按钮是高亮显示的。当单击按钮并按住鼠标左键时，按钮会呈高亮显示。</li>\n<li>掩码 0x0008：相与结果为非零值表示按钮拥有输入焦点。</li>\n</ul>\n</li>\n</ul>\n<p>下面再列出几个继承自 CWnd 类的成员函数，通过它们获取或设置按钮控件的状态非常方便，只需要知道按钮的 ID。</p>\n<ul>\n<li>\n<p>void CheckDlgButton(int nIDButton,UINT nCheck);</p>\n<p>用来设置按钮的选择状态。参数 nIDButton 指定了按钮的 ID。nCheck 的值为 0 表示按钮未被选择，为 1 表示按钮被选择，为 2 表示按钮处于不确定状态（仅用于复选框）。</p>\n</li>\n<li>\n<p>UINT IsDlgButtonChecked(int nIDButton) const;</p>\n<p>返回复选框或单选按钮的选择状态。返回值为 0 表示按钮未被选择，为 1 表示按钮被选择，为 2 表示按钮处于不确定状态（仅用于复选框）。</p>\n</li>\n<li>\n<p>void CheckRadioButton(int nIDFirstButton,int nIDLastButton,int nIDCheckButton);</p>\n<p>用来选择组中的一个单选按钮。参数 nIDFirstButton 指定了组中第一个按钮的 ID，nIDLastButton 指定了组中最后一个按钮的 ID，nIDCheckButton 指定了要选择的按钮的 ID。</p>\n</li>\n<li>\n<p>int GetCheckedRadioButton(int nIDFirstButton, int nIDLastButton);</p>\n<p>用来获得一组单选按钮中被选中按钮的 ID。参数 nIDFirstButton 说明了组中第一个按钮的 ID，nIDLastButton 说明了组中最后一个按钮的 ID。</p>\n</li>\n</ul>\n<p>​    另外，CWnd 类的成员函数 GetWindowText ()、SetWindowText () 等也可以用来获取或设置按钮中显示的文本。</p>\n<h2 id=\"列表框控件-listbox\"><a class=\"markdownIt-Anchor\" href=\"#列表框控件-listbox\">#</a> 列表框控件 ListBox</h2>\n<h2 id=\"组合框控件-combo-box\"><a class=\"markdownIt-Anchor\" href=\"#组合框控件-combo-box\">#</a> 组合框控件 Combo Box</h2>\n<h2 id=\"滚动条控件-scroll-bar\"><a class=\"markdownIt-Anchor\" href=\"#滚动条控件-scroll-bar\">#</a> 滚动条控件 Scroll Bar</h2>\n<h2 id=\"图片控件-picture-control\"><a class=\"markdownIt-Anchor\" href=\"#图片控件-picture-control\">#</a> 图片控件 Picture Control</h2>\n<h2 id=\"列表视图控件-list-control\"><a class=\"markdownIt-Anchor\" href=\"#列表视图控件-list-control\">#</a> 列表视图控件 List Control</h2>\n<h2 id=\"树形控件-tree-control\"><a class=\"markdownIt-Anchor\" href=\"#树形控件-tree-control\">#</a> 树形控件 Tree Control</h2>\n<h2 id=\"标签控件-tab-control\"><a class=\"markdownIt-Anchor\" href=\"#标签控件-tab-control\">#</a> 标签控件 Tab Control</h2>\n<h1 id=\"菜单与cmenu类\"><a class=\"markdownIt-Anchor\" href=\"#菜单与cmenu类\">#</a> 菜单与 CMenu 类</h1>\n<ul>\n<li>\n<p>下拉式菜单</p>\n<p>一般在窗口标题栏下面显示，通常是由主菜单栏、子菜单及子菜单中的菜单项和分割条组成。</p>\n</li>\n<li>\n<p>弹出式菜单</p>\n<p>一般通过单击鼠标右键显示，它的主菜单不可见，只显示子菜单。</p>\n</li>\n</ul>\n<p>菜单可以在 VS 的 Resource View 资源视图中直接创建编辑。打开资源视图中的 Menu 中 ID 为 IDR_MAINFRAME 的菜单资源。</p>\n<p>点击菜单栏中的某一项会弹出子菜单，子菜单中有多个菜单项和分割条。菜单项中有”…“表示点击后会弹出对话框。带下划线的表示热键</p>\n<h2 id=\"cmenu类主要成员函数\"><a class=\"markdownIt-Anchor\" href=\"#cmenu类主要成员函数\">#</a> CMenu 类主要成员函数</h2>\n<ul>\n<li>\n<p>BOOL LoadMenu(UINT nIDResource);</p>\n<p>加载菜单资源，并将其附加到 CMenu 对象上。参数 nIDResource 指定了要加载的菜单资源的 ID。如果菜单加载成功则返回 TRUE，否则返回 FALSE</p>\n</li>\n<li>\n<p>BOOL DeleteMenu(UINT nPosition, UINT nFlags);</p>\n<p>在菜单中删除一个菜单项。参数 nPosition 指定要删除的菜单项。参数 nFlags 就用来解释 nPosition 的意义，为 MF_BYCOMMAND 时说明 nPosition 表示菜单项的 ID，为 MF_BYPOSITION 时说明 nPosition 表示菜单项的位置，第一个菜单项的位置为 0。如果删除菜单项成功则返回 TRUE，否则返回 FALSE。</p>\n</li>\n<li>\n<p>BOOL TrackPopupMenu(UINT nFlags, int x, int y, CWnd* pWnd, LPCRECT IpRect = 0);</p>\n<p>用来在指定位置显示一个浮动的弹出式菜单。</p>\n</li>\n<li>\n<p>UINT CheckMenuItem(UINT nIDCheckItem, UINT nCheck);</p>\n<p>在弹出的菜单中增加选中标记或移除选中标记。参数 nIDCheckItem 指定要选中或取消选中的菜单项。</p>\n</li>\n<li>\n<p>UINT EnableMenuItem(UINT nIDEnableItem, UINT nEnable);</p>\n<p>激活、禁用菜单项或使其变灰。参数 nIDEnableItem 指定要激活、禁用或变灰的菜单项。参数 nEnable 指定操作的类型。可以是 MF_DISABLED、</p>\n</li>\n<li>\n<p>CMenu* GetSubMenu(int nPos) const;</p>\n</li>\n</ul>\n<h2 id=\"菜单消息\"><a class=\"markdownIt-Anchor\" href=\"#菜单消息\">#</a> 菜单消息</h2>\n<p>菜单主要能发送两种消息：COMMAND 消息和 UPDATE_COMMAND_UI 消息。</p>\n<ul>\n<li>\n<p>COMMAND 消息</p>\n<p>在菜单项被点击时发送该消息。</p>\n</li>\n<li>\n<p>UPDATE_COMMAND_UI 消息</p>\n<p>用来维护菜单项的各项状态，包括激活、禁用、变灰、选中、未选中等。在下拉菜单每次打开的时候，所有菜单项的此消息都会被发送出，如果所属类中为菜单项的该消息添加了处理函数，则执行相应函数更新菜单状态，如果菜单项没有此消息处理函数，也没有 COMMAND 消息的处理函数，那么它就会变灰。</p>\n</li>\n</ul>\n<h1 id=\"工具栏与ctoolbar类\"><a class=\"markdownIt-Anchor\" href=\"#工具栏与ctoolbar类\">#</a> 工具栏与 CToolBar 类</h1>\n<p>打开资源视图中的 ToolBar 中 ID 为 IDR_MAINFRAME 的工具栏资源。</p>\n<h1 id=\"状态栏与cstatusbar类\"><a class=\"markdownIt-Anchor\" href=\"#状态栏与cstatusbar类\">#</a> 状态栏与 CStatusBar 类</h1>\n<p>状态栏一般在窗口的最底部，用来显示各种状态。</p>\n<p>状态栏实际上也是一个窗口，一般分为几个窗格，每个窗格分别用来显示不同的信息和状态等，如菜单项和工具栏按钮的提示信息。</p>\n<p>用 MFC 向导生成的单文档或多文档程序都会自动创建状态栏，在结果界面中可以看到窗口底部有个状态栏，该状态栏被分为了几个窗格，分别用来显示菜单项和工具栏按钮的提示信息及 Caps Lock、Num Lock、Scroll Lock 键的状态。</p>\n<p><img data-src=\"image-20230529160507134.png\" alt=\"image-20230529160507134\"></p>\n<p>也可以自定义状态栏，加入新的提示信息或指示器。</p>\n<h2 id=\"cstatusbar类\"><a class=\"markdownIt-Anchor\" href=\"#cstatusbar类\">#</a> CStatusBar 类</h2>\n<p>MFC 为状态栏提供了 CStatusBar 类，封装了状态栏的属性和操作。</p>\n<p>CStatusBar 类的几个主要成员函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个状态栏</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span> pParentWnd<span class=\"token punctuation\">,</span> DWORD dwStyle <span class=\"token operator\">=</span> WS_CHILD<span class=\"token operator\">|</span>WS_VISIBLE<span class=\"token operator\">|</span>CBRS_BOTTOM<span class=\"token punctuation\">,</span> UINT nID <span class=\"token operator\">=</span> AFX_IDW_STATUS_BAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 pParentWnd 为状态栏父窗口指针。</li>\n<li>参数 dwStyle 为状态栏风格，除了标准 windows 风格外它还支持：\n<ul>\n<li>CBRS_TOP：位于框架窗口顶部</li>\n<li>CBRS_BOTTOM：位于框架窗口顶部</li>\n<li>CBRS_NOALIGN：父窗口大小改变时状态栏不会被重新定位</li>\n</ul>\n</li>\n<li>参数 nID 指定状态栏的 ID</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 为每个指示器设置显示文本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BOOL <span class=\"token function\">SetIndicators</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> UINT<span class=\"token operator\">*</span> IpIDArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nIDCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用 IpIDArray 数组中的对应元素为每个指示器设置一个 ID，然后加载每个 ID 代表的字符串，设置为这些指示器的显示文本。</p>\n<ul>\n<li>参数 IpIDArray 为指向一个 ID 数组的指针</li>\n<li>参数 nIDCount 为 IpIDArray 数组的元素个数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>UINT <span class=\"token function\">GetItemID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>获取由 nIndex 指定的指示器的 ID。</p>\n<ul>\n<li>参数 nIndex 为要获取 ID 的指示器索引</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString <span class=\"token function\">GetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>获取状态栏窗格中显示的文本。</p>\n<ul>\n<li>参数 nIndex 为要获取文本的窗格索引</li>\n<li>返回值为包含窗格文本的 CString 对象</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">SetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">,</span> LPCTSTR lpszNewText<span class=\"token punctuation\">,</span> BOOL bUpdate <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>设置状态窗格的显示文本。</p>\n<ul>\n<li>参数 nIndex 为要设置文本的窗格索引</li>\n<li>参数 lpszNewText 为指向新的窗格文本的指针</li>\n<li>参数 bUpdate 表示是否设置后立即更新显示</li>\n</ul>\n<h2 id=\"状态栏创建\"><a class=\"markdownIt-Anchor\" href=\"#状态栏创建\">#</a> 状态栏创建</h2>\n<p>在 MainFrm.h 中可以看到，CMainFrame 类的成员变量中创建状态栏使用的是 CMFCStatusBar 类对象。CMFCStatusBar 类和 CStatusBar 类用法类似，功能更加丰富。</p>\n<ol>\n<li>\n<p>构造一个 CMFCStatusBar 类的对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CMFCStatusBar     m_wndStatusBar<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>调用 CMFCStatusBar::Create 函数来创建状态栏窗口。</p>\n<p>在 CMainFrame::OnCreate 函数的实现中，可以找到 CMFCStatusBar::Create 函数的调用</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token function\">TRACE0</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未能创建状态栏\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 未能创建</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>调用 CMFCStatusBar::SetIndicators 函数为状态栏划分窗格，并为每个指示器设置显示文本。</p>\n<p>该函数需要一个 ID 数组的参数，在 MainFrm.cpp 中定义了如下一个窗格 ID 的数组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> UINT indicators<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tID_SEPARATOR<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// 状态行指示器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tID_INDICATOR_CAPS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tID_INDICATOR_NUM<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tID_INDICATOR_SCRL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>indicators 数组定义了状态栏窗格的划分信息。</p>\n<p>第一个元素一般为 ID_SEPARATOR，对应的窗格用来显示命令提示信息，后三项为指示器文本的字符 ID，可以根据这些 ID 在 String Table 字符串资源中找到相应的字符串。查找方法，在 Resource View 资源视图中，打开 String Table 字符串资源，可以看到 ID、Value 和 Caption 三列，ID 对应的 Caption 列文本就是要查找的字符串。</p>\n<p>划分窗格</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetIndicators</span><span class=\"token punctuation\">(</span>indicators<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>indicators<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>之后我们就可以通过 CMFCStatusBar::SetPaneText 设置窗格文本。</p>\n</li>\n</ol>\n<h2 id=\"状态栏应用实例-添加时间窗格\"><a class=\"markdownIt-Anchor\" href=\"#状态栏应用实例-添加时间窗格\">#</a> 状态栏应用实例 - 添加时间窗格</h2>\n<ol>\n<li>\n<p>在资源视图的 String Table 中添加新的字符串资源，ID 为 ID_INDICATOR_TIME，Caption 为 “00:00:00”。这是为了给时间的显示预留空间，因为状态栏会根据字符串的长度为相应的窗格确定缺省宽度。</p>\n</li>\n<li>\n<p>在 indicators 数组插入 ID_INDICATOR_TIME</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> UINT indicators<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tID_SEPARATOR<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// 状态行指示器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tID_INDICATOR_CAPS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tID_INDICATOR_NUM<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tID_INDICATOR_SCRL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tID_INDICATOR_TIME<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>要实时显示系统时间，就需要一个定时器，每秒钟更新一次时间显示。在 CMainFrame::OnCreate 函数中开启定时器</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">CMainFrame</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>LPCREATESTRUCT lpCreateStruct<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CFrameWndEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>lpCreateStruct<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 启动定时器，定时器 ID 为 1，定时时间为 1000ms</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 Class View 类视图中找到 CMainFrame 类，右键点击属性，然后在属性页中，点工具栏上的 Messages 消息按钮，显示出消息列表，找到 WM_TIMER 消息，添加其消息处理函数 <code>void CMainFrame::OnTimer(UINT_PTR nIDEvent)</code> ，并修改此函数实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMainFrame</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>UINT_PTR nIDEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加消息处理程序代码和 / 或调用默认值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tCString strTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 获取当前系统时间，并保存到 curTime</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tCTime curTime <span class=\"token operator\">=</span> <span class=\"token class-name\">CTime</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 格式化 curTime, 将字符串保存到 strTime</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstrTime <span class=\"token operator\">=</span> curTime<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%H:%M:%S\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 在状态栏的时间窗格中显示系统时间字符串</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tm_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> strTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token class-name\">CFrameWndEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>nIDEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试实现</p>\n</li>\n</ol>\n<h1 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/09/MFC%E5%B8%B8%E7%94%A8%E7%B1%BB/",
            "url": "https://adventure-yx.github.io/2023/06/09/MFC%E5%B8%B8%E7%94%A8%E7%B1%BB/",
            "title": "MFC 常用类",
            "date_published": "2023-06-09T02:12:08.000Z",
            "content_html": "<h1 id=\"mfc常用类cstring类\"><a class=\"markdownIt-Anchor\" href=\"#mfc常用类cstring类\">#</a> MFC 常用类：CString 类</h1>\n<p>CString 类提供了对字符串的便捷操作。</p>\n<blockquote>\n<p>CStringT 是一个操作可变长度字符串的模板类</p>\n<p>CStringT 模板类有三个实例：CString、CStringA 和 CStringW，分别提供对 TCHAR、char 和 wchar_t 字符类型的字符串的操作。</p>\n<ul>\n<li>char 类型定义的是 ANSI 字符</li>\n<li>wchar_t 类型定义的是 Unicode 字符</li>\n<li>TCHAR 类型取决于字符编码</li>\n</ul>\n</blockquote>\n<ol>\n<li>\n<p>CString 类的构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 将一个已经存在的 CString 对象 stringSrc 的内容拷贝到该 CString 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">CString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> CString<span class=\"token operator\">&amp;</span> stringSrc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CString <span class=\"token function\">str1</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.xxx.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将常量字符串拷贝到 str1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CString <span class=\"token function\">str2</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 将 str1 拷贝到 str2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 2. 将字符串 Ipch 中的前 nLength 个字符串拷贝到该 CString 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">CString</span><span class=\"token punctuation\">(</span>LPCTSTR Ipch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.xxx.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 构造的字符串对象内容为 “www”</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 3. 使用此函数构造的 CString 对象中将含有 nLength 个重复的 ch 字符。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">CString</span><span class=\"token punctuation\">(</span>TCHAR ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nLength <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'w'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t\t<span class=\"token comment\">//str 为 www</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 类的大小写转换及顺序转换函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将字符串中的所有大写字符转换为小写字符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString<span class=\"token operator\">&amp;</span> <span class=\"token function\">MakeLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 将字符串中的所有小写字符转换为大写字符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CString<span class=\"token operator\">&amp;</span> <span class=\"token function\">MakeUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 将字符串中的所有字符顺序颠倒</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>CString<span class=\"token operator\">&amp;</span> <span class=\"token function\">MakeReverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ZiFuChuan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">MakeLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">MakeUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">MakeReverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 对象的连接</p>\n<p>多个 CSstring 对象可以通过重载运算符 +，+= 实现连接</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"baidu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//\"baidu\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>str <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str <span class=\"token operator\">+</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//\"www.baidu.\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>str <span class=\"token operator\">+=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">//\"www.baidu.com\"</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 对象的比较</p>\n<ul>\n<li>\n<p>可以通过 ==、!=、&gt;、&lt;、&gt;=、&lt;= 等重载运算符实现；</p>\n</li>\n<li>\n<p>也可以通过 Compare 和 CompareNoCase 成员函数实现。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将该 CString 对象与 psz 字符比较，如果相等则返回 0，如果小于 psz 则返回小于 0，如果大于则返回大于 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Compare</span><span class=\"token punctuation\">(</span>PCXSTR psz<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 功能相同，但不区分大小写</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">CompareNoCase</span><span class=\"token punctuation\">(</span>PCXSTR psz<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>CString 对象字符串的提取操作</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 提取字符串左边 nCount 个字符的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">Left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 提取字符串右边 nCount 个字符的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CString <span class=\"token function\">Right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 3. 提取字符串中以索引 iFirst 位置开始的 nCount 个字符组成的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CString <span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> iFirst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 4. 提取字符串中以索引 iFirst 位置开始至字符串结尾的子字符串，并返回一个包含这个子字符串的拷贝的 CString 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>CString <span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> iFirst<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>CString str1 <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yigezifuchuan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>CString str2 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">Left</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// \"yig\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>str2 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// \"ige\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>str3 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">Mid</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// \"ifuchuan\"</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 对象字符串的查找操作</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 CString 对象字符串的 iStart 的索引位置开始，查找字符串 pszSub 或字符 ch 第一次出现的位置，如果没有找到则返回 - 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>PCXSTR pszSub<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>XCHAR ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 查找字符串 pszCharSet 中任意字符，返回第一次出现的位置，如果没有找到则返回 - 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">FindOneOf</span><span class=\"token punctuation\">(</span>PCXSTR pszCharSet<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 从字符串末尾开始查找指定的字符 ch，返回其位置，找不到则返回 - 1。尽管是从后向前查找，但是位置的索引还是要从开始算起</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">ReverseFind</span><span class=\"token punctuation\">(</span>XCHAR ch<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>CString str <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jizhuomi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> nIndex1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> nIndex2 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">FindOneOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mui\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> nIndex3 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">ReverseFind</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 7</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 类对象字符串的替换和删除</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString str <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jizhuomi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 用字符 chNEW 替换 chOLD，返回替换的字符个数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'j'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//str 为 \"jjzhuomj\", n1=2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 从字符串中删除 iIndex 位置开始的 nCount 个字符，返回删除操作后的字符串长度</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//str 为 \"jhuomj\", n2=6</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 删除字符串中所有由 chRemove 指定的字符，返回删除的字符个数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> n3 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token char\">'j'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//str 为 \"huom\", n3=2</span></pre></td></tr></table></figure></li>\n<li>\n<p>CString 类的格式化字符串方法</p>\n<p>使用 CString 类的 Format 成员函数可以将 int，short，long，float，double 等数据类型格式化为字符串对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">float</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2.3f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%d, b=%f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//str 为 \"a=1, b=2.300000\"</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"mfc常用类ctime类和ctimespan类\"><a class=\"markdownIt-Anchor\" href=\"#mfc常用类ctime类和ctimespan类\">#</a> MFC 常用类：CTime 类和 CTimeSpan 类</h1>\n<p>CTime 类的对象表示的时间基于格林威治标准时间（GMT）</p>\n<p>CTimeSpan 类的对象表示的是时间间隔。</p>\n<p>CTime 类和 CTimeSpan 类一般不会被继承使用，两者对象的大小都是 8 个字节。</p>\n<p>CTime 表示的日期上限是 3000 年 12 月 31 日，下限是 1970 年 1 月 1 日 12:00:00 AM GMT</p>\n<h2 id=\"ctime类的主要成员函数\"><a class=\"markdownIt-Anchor\" href=\"#ctime类的主要成员函数\">#</a> CTime 类的主要成员函数</h2>\n<h1 id=\"mfc常用类定时器timer\"><a class=\"markdownIt-Anchor\" href=\"#mfc常用类定时器timer\">#</a> MFC 常用类：定时器 Timer</h1>\n<p>定时器可以定时完成某项任务。使用定时器时，给系统传入一个时间间隔数据，然后系统就会在每个时间间隔后触发定时处理程序，实现周期性的自动操作。例如，我们可以在数据采集系统中，为定时器设置定时采集时间间隔为 1 小时，那么每隔 1 小时系统就会采集一次数据，可以在无人操作的情况下准确的尽心操作。</p>\n<ul>\n<li>MFC 的 CWnd 类提供的成员函数 SetTimer ()</li>\n<li>Windows API 函数 SetTimer ()</li>\n<li>CWnd 类的成员函数 SetTimer () 只能在 CWnd 类或其派生类中使用，而 API 函数 SetTimer () 没有这个限制</li>\n</ul>\n<h2 id=\"mfc定时器\"><a class=\"markdownIt-Anchor\" href=\"#mfc定时器\">#</a> MFC 定时器</h2>\n<h3 id=\"启动定时器\"><a class=\"markdownIt-Anchor\" href=\"#启动定时器\">#</a> 启动定时器</h3>\n<p>CWnd::SetTimer 的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>UINT_PTR <span class=\"token function\">SerTimer</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    UINT_PTR nIDEvent<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT nElapse<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>CALLBACK <span class=\"token operator\">*</span>lpfnTimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>HWND<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">,</span> UINT_PTR<span class=\"token punctuation\">,</span> DWORD<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 nIDEvent 指定一个非零的定时器 ID；</li>\n<li>参数 nElaspe 指定间隔时间，单位为毫秒；</li>\n<li>参数 lpfnTimer 指定一个回调函数的地址，如果该参数为 NULL，则 WM_TIMER 消息被发送到应用程序的消息队列，并被 CWnd 对象处理。</li>\n<li>如果此函数成功则返回一个新的定时器 ID，我们可以使用此 ID 通过 KillTimer 成员函数来销毁该定时器，如果函数失败则返回 0。</li>\n</ul>\n<blockquote>\n<p>通过 SetTimer 成员函数可以看出，<strong>处理定时事件可以有两种方式</strong>：</p>\n<ul>\n<li><strong>通过 WM_TIMER 消息的消息响应函数</strong></li>\n<li><strong>通过回调函数</strong></li>\n</ul>\n<p>如果要启动多个定时器，就要多次调用 SetTimer 成员函数，另外，在不同的 CWnd 中可以有 ID 相同的定时器，并不冲突。</p>\n</blockquote>\n<h3 id=\"为wm_timer消息添加消息处理函数或定义回调函数\"><a class=\"markdownIt-Anchor\" href=\"#为wm_timer消息添加消息处理函数或定义回调函数\">#</a> 为 WM_TIMER 消息添加消息处理函数，或定义回调函数</h3>\n<p>如果调用 CWnd::SetTimer 函数时最后一个参数为 NULL，则通过 WM_TIMER 的消息处理函数来处理定时事件。添加 WM_TIMER 消息的处理函数的方法是，在工程的 Class View 类视图中找到要添加定时器的类，点击右键，选择 Properties，显示其属性页，然后再属性页工具栏上点击 Message 按钮，下面列表就列出了所有消息，找到 WM_TIMER 消息，添加消息处理函数。添加后，cpp 文件中会出现</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">BEGIN_MESSAGE_MAP</span><span class=\"token punctuation\">(</span>CExampleDlg<span class=\"token punctuation\">,</span> CDialogEx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">ON_WM_TIMER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">END_MESSAGE_MAP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CExampleDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>UINT_PTR nIDEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">CDialogEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>nIDEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>之后可以在 OnTimer 函数中进行相应的处理。OnTimer 的参数 nIDEvent 为定时器 ID，即在 SetTimer 成员函数中指定的定时器 ID，如果有多个定时器，可以像以下处理：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CExampleDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>UINT_PTR nIDEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>nIDEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 如果收到 ID 为 1 的定时器的消息则调用 func1 函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 如果收到 ID 为 2 的定时器的消息则调用 func2 函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">CDialogEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>nIDEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果调用 CWnd::SetTimer 函数最后一个参数不为 NULL，则需要定义回调函数。回调函数的形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> CALLBACK EXPORT <span class=\"token function\">TimerProc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tHWND hWnd<span class=\"token punctuation\">,</span>\t<span class=\"token comment\">// handle of CWnd that called SetTimer</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT nMsg<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    UINT nIDEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    DWORD dwTime</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 hWnd 为调用 SetTimer 成员函数的 CWnd 对象的句柄，即拥有此定时器的窗口的句柄；</li>\n<li>参数 nMsg 为 WM_TIMER，而且总为 WM_TIMER</li>\n<li>参数 nIDEvent 为定时器 ID；</li>\n<li>参数 dwTime 为系统启动以来的毫秒数，即 GetTickCount () 函数的返回值。</li>\n</ul>\n<p>这样 CWnd::SetTimer 函数最后一个参数就可以为 TimeProc。</p>\n<blockquote>\n<p>回调函数的名称不一定为 TimeProc，可以取其他名字，但返回值类型、参数的类型和个数不能改变。</p>\n<p>回调函数为全局函数，需要写在使用他的位置前面，或者写在后面然后再使用之前声明。</p>\n</blockquote>\n<h3 id=\"销毁定时器\"><a class=\"markdownIt-Anchor\" href=\"#销毁定时器\">#</a> 销毁定时器</h3>\n<p>不再使用定时器时，可以销毁它。销毁定时器需要使用 CWnd 类的 KillTimer 成员函数，CWnd::KillTimer 函数原型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">KillTimer</span><span class=\"token punctuation\">(</span>UINT_PTR nIDEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数 nIDEvent 为要销毁的定时器的 ID，是调用 CWnd::SetTimer 函数时设置的定时器 ID。</p>\n<p>如果定时器被销毁则返回 TRUE，如果没有找到指定的定时器则返回 FALSE。</p>\n<p>如果要销毁多个定时器，则多次调用 KillTimer 函数，并分别传入要销毁的定时器 ID。</p>\n<h2 id=\"通过windows-api函数使用定时器\"><a class=\"markdownIt-Anchor\" href=\"#通过windows-api函数使用定时器\">#</a> 通过 Windows API 函数使用定时器</h2>\n<h3 id=\"启动定时器-2\"><a class=\"markdownIt-Anchor\" href=\"#启动定时器-2\">#</a> 启动定时器</h3>\n<p>Windows API 函数 SetTimer 原型如下</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>UINT_PTR <span class=\"token function\">SerTimer</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    HWND hWnd，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT_PTR nIDEvent<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    UINT nElapse<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    TIMERPROC lpTimerFunc</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 hWnd 为与定时器关联的窗口的句柄；</li>\n<li>参数 nIDEvent 为非零的定时器 ID。如果 hWnd 为 NULL 且还不存在 ID 为 nIDEvent 的定时器，那么 nIDEvent 参数被忽略，然后生成一个新的 ID 的定时器；如果 hWnd 指定的窗口已存在 ID 为 nIDEvent 的定时器，那么这个已存在的定时器被新的定时器所取代。</li>\n<li>参数 nElapse 和 lpTimerFunc 同 CWnd::SetTimer 函数。</li>\n</ul>\n<h3 id=\"为wm_timer消息添加消息处理函数或定义回调函数-2\"><a class=\"markdownIt-Anchor\" href=\"#为wm_timer消息添加消息处理函数或定义回调函数-2\">#</a> 为 WM_TIMER 消息添加消息处理函数，或定义回调函数</h3>\n<p>如果调用 SetTimer 函数时，最后一个参数为 NULL，我们需要自己为 WM_TIMER 消息添加处理函数。要注意的是，WM_TIMER 消息的附加数据 wParam 为定时器 ID，IParam 为回调函数的指针，如果回调用 SetTimer 时回调函数为 NULL，那么 IParam 也为 NULL。</p>\n<p>而如果调用 SetTimer 函数时最后一个参数不为 NULL，我们就需要定义回调函数。</p>\n<h3 id=\"销毁定时器-2\"><a class=\"markdownIt-Anchor\" href=\"#销毁定时器-2\">#</a> 销毁定时器</h3>\n<p>KillTimer API 函数原型</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">KillTimer</span><span class=\"token punctuation\">(</span>HWND hWnd<span class=\"token punctuation\">,</span> UINT_PTR uIDEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"mfc定时器应用实例\"><a class=\"markdownIt-Anchor\" href=\"#mfc定时器应用实例\">#</a> MFC 定时器应用实例</h2>\n<ol>\n<li>\n<p>创建项目，添加控件</p>\n</li>\n<li>\n<p>在 Dlg 类中添加两个成员变量，在构造函数中初始化</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">CTimerExampleDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CTimerExampleDlg</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span> pParent <span class=\"token comment\">/*=NULL*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">:</span> <span class=\"token function\">CDialogEx</span><span class=\"token punctuation\">(</span>CTimerExampleDlg<span class=\"token double-colon punctuation\">::</span>IDD<span class=\"token punctuation\">,</span> pParent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tm_hIcon <span class=\"token operator\">=</span> <span class=\"token function\">AfxGetApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">LoadIcon</span><span class=\"token punctuation\">(</span>IDR_MAINFRAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tmData1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tmData2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在对话框模板上双击 OK 按钮添加消息处理函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CTimerExampleDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 启动 ID 为 1 的定时器，定时时间为 1 秒</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 启动 ID 为 2 的定时器，定时时间为 2 秒</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//CDialogEx::OnOK();</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>为 WM_TIMER 消息添加处理函数的方法</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CTimerExampleDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>UINT_PTR nIDEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>nIDEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">// 如果 mData1 已经达到 10 则销毁 ID 为 1 的定时器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">==</span> mData1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token function\">KillTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">// 刷新编辑框 IDC_EDIT1 的显示</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token function\">SetDlgItemInt</span><span class=\"token punctuation\">(</span>IDC_EDIT1<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>mData1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">==</span> mData2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token function\">KillTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token function\">SetDlgItemInt</span><span class=\"token punctuation\">(</span>IDC_EDIT2<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>mData2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token class-name\">CDialogEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnTimer</span><span class=\"token punctuation\">(</span>nIDEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>运行程序</p>\n</li>\n</ol>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/02/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "url": "https://adventure-yx.github.io/2023/06/02/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "title": "字符集与VS中的字符处理",
            "date_published": "2023-06-02T07:12:08.000Z",
            "content_html": "<h1 id=\"字符集\"><a class=\"markdownIt-Anchor\" href=\"#字符集\">#</a> 字符集</h1>\n<ul>\n<li>\n<p>ASCII（American Standard Code for Information Interchange）</p>\n<p>一个字节（8bit）表示的字符编码，其中只用到了前 7 位，表示 127 个字符。</p>\n</li>\n<li>\n<p>ANSI 多字节字符集（American National Standard Institute）</p>\n<p>由字节数据的最高位判断：</p>\n<ul>\n<li>最高位为 0，代表是单字节，按照 ASCII 表进行编码</li>\n<li>最高位为 1，代表是本地化扩展字符，需要将相邻的两个字节组成一个整体，来进行码值求取，得到的码值对应的本地化字符集中可以得到相应的字符是什么。\n<ul>\n<li>简体中文系统下，ANSI 编码代表 GB2312 编码 (GBK 是 GB2312 的扩展，兼容 GB2312)</li>\n<li>繁体中文系统下，ANSI 编码代表 BIG5 编码</li>\n<li>日文系统下，ANSI 编码代表 JIS 编码</li>\n</ul>\n</li>\n<li>不同 ANSI 编码之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中。需要将不同的 ANSI 编码都转换成 UTF-8 编码，进而存储。</li>\n</ul>\n</li>\n<li>\n<p>Unicode 编码（Universal Multiple-Octet Coded Character Set，通用多八位编码字符集）</p>\n<p>国际组织制定的可以容纳世界上所有文字和字符的编码方案，使用定宽 2 个字节 <code>Ox0000-OxFFFF</code>  来表示一个字符。对于英文浪费了一个字节。</p>\n</li>\n<li>\n<p>UTF-8（8bit Unicode Transformation Format，8 位 Unicode 通用转换格式）</p>\n<p>UTF-8 是 Unicode 的实现方式之一，是一种针对 Unicode 的可变长度字符编码，使用 1-4 个字节进行编码</p>\n<p>对单字节字符，第一位为 0，后 7 位与 ASCII 码一致。</p>\n</li>\n<li>\n<p>UTF-16</p>\n<p>可变长度字符编码，将字符编码成 2 字节或者 4 字节</p>\n</li>\n<li>\n<p>UTF-32</p>\n<p>固定长度的编码，始终占用 4 字节。</p>\n</li>\n</ul>\n<h1 id=\"字符类型\"><a class=\"markdownIt-Anchor\" href=\"#字符类型\">#</a> 字符类型</h1>\n<ul>\n<li>\n<p><strong>char</strong></p>\n<p>字符型，单位是字节，占 8bit</p>\n</li>\n<li>\n<p><strong>wchar_t</strong></p>\n<p>宽字符，单位是双字节，占 16bit</p>\n<p>wchar_t 是 Unicode 定义的数据类型，定义在 <code>&lt;string.h&gt;</code>  中。在 ANSI 中使用 wchar_t 会报错，wchar_t 类型的字符是按 Unicode 的编码方式存储的。</p>\n<blockquote>\n<p>给 wchar_t 类型变量赋值时，要注意类型以及编码方式是否匹配。</p>\n<p><code>wchar_t *str = L&quot;aaabbb&quot;;</code></p>\n<p>str 是 wchar_t 类型，而 wchar_t 是 Unicode 数据类型，所以后面的字符串要用 L 指令转化为 Unicode 编码</p>\n</blockquote>\n</li>\n<li>\n<p><strong>TCHAR</strong></p>\n<p>TCHAR 是一个宏，并不是实际的某一个类型。当使用多字节字符集时，TCHAR 就是 char；当使用 Unicode 字符集时，TCHAR 就可以当作 wchar_t 来用。使用 TCHAR，编译器会根据我们字符集来进行相应的转化。TCHAR 定义在 &lt;tchar.h&gt; 中，使用要先包含头文件。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span>  <span class=\"token expression\">UNICODE</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">wchar_t</span> TCHAR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> TCHAR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>LPSTR</strong>：32bit 指针，指向一个字符串，每个字符占 1 个字节。相当于 <code>char*</code></p>\n</li>\n<li>\n<p><strong>LPCSTR</strong>：32bit 指针，指向一个常字符串，每个字符占 1 个字节。相当于 <code>const char*</code></p>\n</li>\n<li>\n<p><strong>LPTSTR</strong>：32bit 指针，指向一个字符串，每个字节可能占 1 个字节或 2 个字节，取决于 Unicode 是否定义。相当于 <code>tchar*</code></p>\n</li>\n<li>\n<p><strong>LPCTSTR</strong>：32bit 指针，指向一个常字符串，每个字节可能占 1 个字节或 2 个字节，取决于 Unicode 是否定义。相当于 <code>const tchar*</code></p>\n</li>\n<li>\n<p><strong>LPWSTR</strong>：32bit 指针，指向一个 Unicode 字符串的指针，每个字符占 2 字节。相当于 <code>wchar_t*</code></p>\n</li>\n<li>\n<p><strong>LPCWSTR</strong>：32bit 指针，指向一个 Unicode 常字符串的指针，每个字符占 2 字节。相当于 <code>const wchar_t*</code></p>\n</li>\n</ul>\n<h1 id=\"l指令\"><a class=\"markdownIt-Anchor\" href=\"#l指令\">#</a> L 指令</h1>\n<p>字符串前面加 L 表示该字符串是 Unicode 字符串，可以将 ANSI 字符串转换为 Unicode 字符串，就是每个字符占 2 个字节。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"_t宏\"><a class=\"markdownIt-Anchor\" href=\"#_t宏\">#</a> _T () 宏</h1>\n<p>_T (&quot;&quot;) 是一个宏定义在 tchar.h 下。</p>\n<p>_T () 或者 TEXT () 宏，可以把引号括起来的字符串，根据环境选择合适的编码方式。</p>\n<ul>\n<li>如果定义的是 Unicode，那么_T (“abc”) 就相当于 L&quot;abc&quot;，也就是宽字符；</li>\n<li>如果是多字节编码，那么英文采用单字节，汉字采用双字节；</li>\n<li>在 Unicode 环境下，要求 LPCWSTR 的地方不可以给一个 char*，而在多字节编码下可以。</li>\n</ul>\n<blockquote>\n<p>Windows 使用两种字符集 ANSI 和 UNICODE，前者就是通常使用的单字节方式，但这种方式处理中文这样的双字节字符不方便，容易出现半个汉字的情况。而后者是双字节，方便处理双字节字符。Windows NT 的所有与字符有关的函数都提供两种方式的版本，Windows 9x 只支持 ANSI 方式。</p>\n</blockquote>\n<ul>\n<li></li>\n</ul>\n<blockquote>\n<p>比如</p>\n<p><code>wchar_t Str[] = L&quot;Hello World!&quot;;</code>  是双字节存储字符串，_T 是与之适配的宏。</p>\n</blockquote>\n<p>当有 <code>#ifdef _UNICODE</code>  的时候，_T () 就是 L；</p>\n<p>当没有 <code>#ifdef _UNICODE</code>  的时候，_T () 就是 ANSI 的。</p>\n<h1 id=\"mfc中cstring和stdstring的转换\"><a class=\"markdownIt-Anchor\" href=\"#mfc中cstring和stdstring的转换\">#</a> MFC 中 CString 和 std::string 的转换</h1>\n<p>CString 实际是 CStringT，也就是模板类</p>\n<p>在 Unicode 环境下，实际是 CStringW</p>\n<p>在多字符集环境下，实际是 CStringA</p>\n<p>std::string 是多字符集环境下的</p>\n<h2 id=\"unicode环境下\"><a class=\"markdownIt-Anchor\" href=\"#unicode环境下\">#</a> Unicode 环境下</h2>\n<ul>\n<li>\n<p>CString 转换 std::string</p>\n<p>CString 实际是 CStringW，要转换为多字符集，需要进行转码。使用 WideCharToMultiByte 转换成多字符集，然后再构造 std::string</p>\n</li>\n<li>\n<p>std::string 转换 CString</p>\n<p>CStringT 模板类会自动做 char* 到 wchar_t * 的转码</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//CString -> std::string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">strCS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>USES_CONVERSION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">strS</span><span class=\"token punctuation\">(</span><span class=\"token function\">W2A</span><span class=\"token punctuation\">(</span>strCS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//std::string -> CString</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CString strCStemp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>strCStemp <span class=\"token operator\">=</span> strS<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 不能写在同一行</span></pre></td></tr></table></figure><h2 id=\"多字符集环境下\"><a class=\"markdownIt-Anchor\" href=\"#多字符集环境下\">#</a> 多字符集环境下</h2>\n<p>CString 就是 CStringA</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//CString -> std::string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">strCS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string str1 str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>str1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">GetBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CStringA<span class=\"token punctuation\">)</span>str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//std::string -> CString</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string strTemp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>CString str <span class=\"token operator\">=</span> strTemp<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// 可以写在一行</span></pre></td></tr></table></figure><h1 id=\"tixml写入配置文件时bool类型转stdstring\"><a class=\"markdownIt-Anchor\" href=\"#tixml写入配置文件时bool类型转stdstring\">#</a> TiXML 写入配置文件时 bool 类型转 std::string</h1>\n<p>定义：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token class-name\">DeviceConfigDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BoolToStr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> is<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> is <span class=\"token operator\">?</span> <span class=\"token string\">\"true\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pCheckSelfXRayConnect<span class=\"token operator\">-></span><span class=\"token function\">SetAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enabled\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">BoolToStr</span><span class=\"token punctuation\">(</span>isCheckSelfXRayConnect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/06/01/MFC%E5%AF%B9%E8%AF%9D%E6%A1%86/",
            "url": "https://adventure-yx.github.io/2023/06/01/MFC%E5%AF%B9%E8%AF%9D%E6%A1%86/",
            "title": "MFC 对话框",
            "date_published": "2023-06-01T01:12:08.000Z",
            "content_html": "<h1 id=\"创建对话框\"><a class=\"markdownIt-Anchor\" href=\"#创建对话框\">#</a> 创建对话框</h1>\n<p><img data-src=\"image-20230525105517622.png\" alt=\"\"></p>\n<ol>\n<li>创建对话框资源，添加控件。</li>\n<li>创建对话框类，添加控件变量，添加控件的消息处理函数。</li>\n</ol>\n<blockquote>\n<p>添加控件变量时，类的成员变量一般以 m 开头，标识它是一个成员变量。</p>\n</blockquote>\n<h1 id=\"对话框类的数据交换和检验\"><a class=\"markdownIt-Anchor\" href=\"#对话框类的数据交换和检验\">#</a> 对话框类的数据交换和检验</h1>\n<p>在程序运行界面中，用户往往会改变控件的属性，例如在编辑框中输入字符串，或者改变组合框中的选中项，又或者改变复选框的选中状态等。</p>\n<p><strong>控件的属性改变后，MFC 会相应的修改控件关联变量的值</strong>。这种同步的改变是通过<strong> MFC 为对话框类自动生成的成员函数 DoDataExchange () 函数</strong>实现的，这也叫做<strong>对话框的数据交换和检验机制</strong>。</p>\n<p>为三个编辑框添加了变量之后，在 <code>AdditionTestDlg.cpp</code>  中 <code>CAdditionTestDlg::DoDataExchange()</code>  函数的函数体中多了三条 <code>DDX_Text</code>  调用语句。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DoDataExchange</span><span class=\"token punctuation\">(</span>CDataExchange<span class=\"token operator\">*</span> pDX<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 处理 MFC 默认的数据交换</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">CDialogEx</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DoDataExchange</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 处理控件 IDC_SUMMAND_EDIT 和变量 m_editSummand 之间的数据交换</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">DDX_Text</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">,</span> IDC_SUMMAND_EDIT<span class=\"token punctuation\">,</span> m_editSummand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 处理控件 IDC_ADDEND_EDIT 和变量 m_editAddend 之间的数据交换</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">DDX_Text</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">,</span> IDC_ADDEND_EDIT<span class=\"token punctuation\">,</span> m_editAddend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 处理控件 IDC_SUM_EDIT 和变量 m_editSum 之间的数据交换</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">DDX_Text</span><span class=\"token punctuation\">(</span>pDX<span class=\"token punctuation\">,</span> IDC_SUM_EDIT<span class=\"token punctuation\">,</span> m_editSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>数据交换机制</strong>：</p>\n<p>如果在程序运行界面中输入被加数，通过 <code>CAdditionTestDlg</code>  的 <code>DoDataExchange()</code>  函数可以将输入的值保存到 <code>m_editSummand</code>  变量中；反之，如果程序运行中修改了变量 <code>m_editSummand</code>  的值，则通过 <code>CAdditionTestDlg</code>  的 <code>DoDataExchange()</code>  函数也可以将新的变量值显示到被加数的编辑框中。</p>\n<p><strong>但这种数据交换机制中，DoDataExchange () 函数并不是自动调用的，而是需要我们在程序中调用 CDialogEx::UpdateData () 函数，由 UpdateData () 再去自动调用 DoDataExchange ()</strong></p>\n</blockquote>\n<p><code>CDialogEx::UpdateData()</code>  函数原型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>BOOL bSaveAndValidate <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>bSaveAndValidate</code>  用于指示数据传输的方向， <code>TRUE</code>  表示从控件传给变量， <code>FALSE</code>  表示从变量传给控件。默认为 <code>TRUE</code> ，从控件传给变量。</li>\n<li>返回值表示操作是否成功。</li>\n</ul>\n<h1 id=\"为对话框控件添加消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#为对话框控件添加消息处理函数\">#</a> 为对话框控件添加消息处理函数</h1>\n<h2 id=\"预处理器afx_design_time\"><a class=\"markdownIt-Anchor\" href=\"#预处理器afx_design_time\">#</a> 预处理器 AFX_DESIGN_TIME</h2>\n<pre><code class=\"language-CPP\">#ifdef AFX_DESIGN_TIME\n\tenum &#123; IDD = IDD_LOGIN_DIALOG &#125;;\n#endif\n</code></pre>\n<p>类向导使用它来将对话框 ID（ <code>IDD_LOGIN_DIALOG</code> ）映射到对话框类（派生自 CDialogEx）</p>\n<p>删除掉这部分，程序可以正常编译，但类向导不能再正常工作，无法读取到类中的成员函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 旧版本的 Visual Studio 中，对话框类的构造函数如下：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CAdditionTestDlg</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span> pParent <span class=\"token comment\">/*=NULL*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token operator\">:</span> <span class=\"token function\">CDialogEx</span><span class=\"token punctuation\">(</span>CAdditionTestDlg<span class=\"token double-colon punctuation\">::</span>IDD<span class=\"token punctuation\">,</span> pParent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span>        </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//CAdditionTestDlg::IDD 编译时实际使用了符号，没有 #ifdef AFX_DESIGN_TIME</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 新版本的 Visual Studio 中，对话框类的构造函数如下：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">LoginDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">LoginDlg</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span> pParent <span class=\"token comment\">/*=nullptr*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token operator\">:</span> <span class=\"token function\">CDialogEx</span><span class=\"token punctuation\">(</span>IDD_LOGIN_DIALOG<span class=\"token punctuation\">,</span> pParent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">AFX_DESIGN_TIME</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span> IDD <span class=\"token operator\">=</span> IDD_LOGIN_DIALOG <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h2 id=\"添加消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#添加消息处理函数\">#</a> 添加消息处理函数</h2>\n<ul>\n<li>\n<p>使用类向导添加消息处理函数</p>\n<p><img data-src=\"image-20230525133212478.png\" alt=\"image-20230525133212478\"></p>\n</li>\n<li>\n<p>通过资源视图 “Add Event Handler…” 添加消息处理函数</p>\n<p>在按钮控件上点击右键进入</p>\n<p><img data-src=\"image-20230525133538866.png\" alt=\"image-20230525133538866\"></p>\n</li>\n<li>\n<p>在控件的属性视图中添加消息处理函数</p>\n<p><img data-src=\"image-20230525133733319.png\" alt=\"image-20230525133733319\"></p>\n</li>\n<li>\n<p>双击控件添加消息处理函数</p>\n<p>最直接最简单的方法，双击 “计算” 按钮，MFC 会自动为其在 CAdditionDlg 类中添加 <code>BN_CLICKED</code>  消息的处理函数 <code>OnBnClickedAddButton()</code></p>\n</li>\n</ul>\n<h2 id=\"在消息处理函数中添加自定义功能\"><a class=\"markdownIt-Anchor\" href=\"#在消息处理函数中添加自定义功能\">#</a> 在消息处理函数中添加自定义功能</h2>\n<p>添加消息处理函数之后，得到一个空的 <code>OnBnClickedAddButton()</code>  函数的函数体，要实现我们想要的功能，还需要在函数体中加入自定义功能代码。</p>\n<p>要实现加法功能：获取被加数和加数的数值，然后计算他们的和并显示到和的编辑框里。函数体为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedAddButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加控件通知处理程序代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 将各控件中的数据保存到相应的位置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 将被加数和加数的和赋值给 m_editSum</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tm_editSum <span class=\"token operator\">=</span> m_editSummand <span class=\"token operator\">+</span> m_editAddend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 根据各变量的值更新相应的控件。和编辑框会显示 m_editSum 的值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"设置控件的tab顺序\"><a class=\"markdownIt-Anchor\" href=\"#设置控件的tab顺序\">#</a> 设置控件的 Tab 顺序</h2>\n<ul>\n<li>Ctrl+D</li>\n<li>主菜单 -&gt;format-&gt;tab order</li>\n</ul>\n<h1 id=\"模态与非模态对话框及其弹出过程\"><a class=\"markdownIt-Anchor\" href=\"#模态与非模态对话框及其弹出过程\">#</a> 模态与非模态对话框及其弹出过程</h1>\n<ul>\n<li>\n<p>模态对话框</p>\n<p>弹出后，本应用程序其他窗口不再接受用户输入，只有该对话框相应用户输入，在对他进行操作退出后，其他窗口才能继续与用户交互。</p>\n</li>\n<li>\n<p>非模态对话框</p>\n<p>弹出后，本应用程序其他窗口仍能相应用户输入。非模态对话框一般用来显示提示信息等。</p>\n</li>\n<li>\n<p><strong>对话框是怎么弹出的？</strong></p>\n<p>应用程序 App 类实例的初始化工作由 <code>CAdditionTestApp::InitInstance()</code>  实现</p>\n<p>其中后半段有定义对话框对象并弹出对话框：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CAdditionTestDlg dlg<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 定义对话框类 CAdditionDlg dlg</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tm_pMainWnd <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dlg<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 将 dlg 设置为主窗口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tINT_PTR nResponse <span class=\"token operator\">=</span> dlg<span class=\"token punctuation\">.</span><span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 弹出对话框 dlg，并将 DoModal 函数返回值（退出时点击按钮的 ID）赋值给 nResponse</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nResponse <span class=\"token operator\">==</span> IDOK<span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 判断返回值是否为 OK 按钮（其 ID 为 IDOK，已删除）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">// TODO: “确定” 来关闭对话框的代码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nResponse <span class=\"token operator\">==</span> IDCANCEL<span class=\"token punctuation\">)</span>\t\t\t\t\t\t<span class=\"token comment\">// 判断返回值是否为 Cancel 按钮（其 ID 为 IDCANCEL，退出按钮）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// TODO: “取消” 来关闭对话框的代码</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>弹出对话框比较关键的一个函数，就是对话框类的<strong> DoModal () 函数</strong>。</p>\n<p><code>CDialog::DoModal()</code>  函数的原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">virtual</span> INT_PTR <span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>返回值：整数值，指定了传递给 <code>CDialog::EndDialog</code> （该函数用于关闭对话框）的 <code>nResult</code>  参数值。如果不能创建对话框，则返回 <code>-1</code> ；如果出现其他错误，则返回 <code>IDABORT</code></li>\n<li>调用了它对话框就会弹出，<strong>返回值是退出对话框时所点的按钮的 ID</strong>，比如，点击 “退出” 按钮，那么 <code>DoModal</code>  返回值就是 <code>IDCANCEL</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"添加模态对话框并弹出它\"><a class=\"markdownIt-Anchor\" href=\"#添加模态对话框并弹出它\">#</a> 添加模态对话框并弹出它</h2>\n<ol>\n<li>\n<p>右键资源文件中 “Dialog” 文件夹，插入 Dialog，创建一个新的对话框模板</p>\n<p>设置 ID 为 <code>IDD_TIP_DIALOG</code> ，Caption 为 “提示 “</p>\n</li>\n<li>\n<p>在对话框模板上右键选择 Add Class… 添加对话框类</p>\n<p>设置 &quot;class name&quot; 为 CTipDlg，在 Solution Explorer 中生成 TipDlg.h 和 TipDlg.cpp.</p>\n</li>\n<li>\n<p>要在点” 计算 “按钮之后弹出此提示对话框，那么就要在” 计算 “按钮的消息处理函数 <code>OnBnClickedAddButton()</code>  中访问提示对话框类。所以为了访问 CTipDlg 类，在 AdditionTestDlg.cpp 中包含 CTipDlg 的头文件 <code>#include &quot;TipDlg.h&quot;</code></p>\n</li>\n<li>\n<p>修改 <code>OnBnClickedAddButton()</code>  的函数体，在所有代码之前，构造 CTipDlg 类的对象 tipDlg，并通过语句 <code>tipDlg.DoModal();</code>  弹出对话框，最后判断 <code>DoModal()</code>  函数的返回值是 <code>IDOK</code>  还是 <code>IDCANCEL</code>  来确定是否继续进行计算。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedAddButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 用于保存 DoModal 函数的返回值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tINT_PTR nRes<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 构造对话框类 CTipDlg 的实例</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tCTipDlg tipDlg<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 弹出对话框</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tnRes <span class=\"token operator\">=</span> tipDlg<span class=\"token punctuation\">.</span><span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 判断对话框退出后返回值是否为 IDCANCEL，如果是则 return, 否则继续向下执行</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IDCANCEL <span class=\"token operator\">==</span> nRes<span class=\"token punctuation\">)</span>\t\t\t\t\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 将各控件中的数据保存到相应的位置</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 将被加数和加数的和赋值给 m_editSum</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tm_editSum <span class=\"token operator\">=</span> m_editSummand <span class=\"token operator\">+</span> m_editAddend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 根据各变量的值更新相应的控件。和编辑框会显示 m_editSum 的值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试</p>\n</li>\n</ol>\n<h2 id=\"添加非模态对话框并显示\"><a class=\"markdownIt-Anchor\" href=\"#添加非模态对话框并显示\">#</a> 添加非模态对话框并显示</h2>\n<p>非模态对话框显示后，程序其他窗口仍然能正常运行，可以响应用户输入，还可以相互切换。</p>\n<p>实际上，模态和非模态对话框在创建对话框资源和生成对话框类上是没有区别的。</p>\n<p>需要修改的是，对话框类实例的创建和显示，也就是在 <code>CAdditionTestDlg::OnBnClickedAddButton()</code>  函数体中添加的对话框显示代码。具体步骤：</p>\n<ol>\n<li>\n<p>在 AdditionTestDlg.h 中包含 CTipDlg 头文件并定义 CTipDlg 类型的指针成员变量。</p>\n<p>删除 <code>AdditionTestDlg.cpp</code>  中包含的 <code>#include &quot;TipDlg.h&quot;</code> ，而在 <code>AdditionTestDlg.h</code>  中包含 <code>#include &quot;TipDlg.h&quot;</code> ，因为我们要在 <code>AdditionTestDlg.h</code>  中定义 CTipDlg 类型的指针变量，所以要先包含它的头文件；然后在 <code>AdditionTestDlg.h</code>  中为 CAdditionTestDlg 类添加 private 成员变量 <code>CTipDlg *m_pTipDlg;</code></p>\n</li>\n<li>\n<p>在 <code>CAdditionTestDlg</code>  类的狗在函数中初始化成员变量 <code>m_pTipDlg(NULL)</code></p>\n</li>\n<li>\n<p>修改 <code>CAdditionTestDlg::OnBnClickedAddButton()</code>  函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnBnClickedAddButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加控件通知处理程序代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 模态对话框</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tINT_PTR nRes;\t\t\t\t\t\t\t// 用于保存 DoModal 函数的返回值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tCTipDlg tipDlg;\t\t\t\t\t\t\t// 构造对话框类 CTipDlg 的实例</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tnRes = tipDlg.DoModal ();\t\t\t\t// 弹出对话框</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tif (IDCANCEL == nRes)\t\t\t\t\t// 判断对话框退出后返回值是否为 IDCANCEL，如果是则 return, 否则继续向下执行</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\treturn;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 非模态对话框</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 动态创建对话框</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_pTipDlg <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 创建非模态对话框实例</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tm_pTipDlg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CTipDlg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tm_pTipDlg<span class=\"token operator\">-></span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>IDD_TIP_DIALOG<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 显示非模态对话框</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tm_pTipDlg<span class=\"token operator\">-></span><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>SW_SHOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 将各控件中的数据保存到相应的位置</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 将被加数和加数的和赋值给 m_editSum</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tm_editSum <span class=\"token operator\">=</span> m_editSummand <span class=\"token operator\">+</span> m_editAddend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 根据各变量的值更新相应的控件。和编辑框会显示 m_editSum 的值</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>因为此对话框实例是动态创建的，所以需要手动删除动态对象来销毁对话框。我们在 CAdditionTestDlg 类的析构函数中添加删除代码。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">CAdditionTestDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">CAdditionTestDlg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 如果非模态对话框已经创建则删除它</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_pTipDlg <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span> m_pTipDlg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试。</p>\n</li>\n</ol>\n<h1 id=\"属性页对话框及其相关类\"><a class=\"markdownIt-Anchor\" href=\"#属性页对话框及其相关类\">#</a> 属性页对话框及其相关类</h1>\n<p>右键点属性弹出的对话框，通过标签切换各个界面。</p>\n<p>主要用到的类：CPropertyPage 类和 CPropertySheet 类。</p>\n<ul>\n<li>\n<p>CPropertyPage 类</p>\n<p>CPropertyPage 类继承自 CDialog 类，它被用于处理某单个属性页，所以要为每个属性页都创建一个继承自 CPropertyPage 类的子类</p>\n<ul>\n<li>\n<p>构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 第一个是没有任何参数的构造函数。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">CPropertyPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 第二个构造函数中，参数 nIDTemplate 是属性页的对话框资源 ID，参数 nIDCaption 是属性页对话框选项卡的标题所用字符串资源的 ID，若设为 0，则选项卡标题就使用该属性页的对话框资源的标题。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">CPropertyPage</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tUINT nIDTemplate<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    UINT nIDCaption <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    DWORD dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROPSHEETPAGE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 第三个构造函数中，参数 lpszTemplateName 为属性页的对话框资源的名称字符串，不能为 NULL。参数 nIDCaption 同上。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">CPropertyPage</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tLPCTSTR lpszTemplateName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    UINT nIDCaption <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    DWORD dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROPSHEETPAGE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>CancelToClose()</code>  函数</p>\n<p>在模态属性页对话框的属性页进行了某不可恢复的操作后，使用 <code>CancelToClose()</code>  函数将 “OK” 按钮改为 “Close” 按钮，并禁用 “Cancel” 按钮。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CancelToClose</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>SetModified()</code>  函数</p>\n<p>调用此函数可激活或禁用 “Apply” 按钮，函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetModified</span><span class=\"token punctuation\">(</span>BOOL bChanged <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>可重载函数</p>\n<p>CPropertyPage 类提供了一些消息处理函数，来响应属性页对话框的各种消息。我们重载这些消息处理函数，就可以自定义对属性页对话框操作的处理。可重载的消息处理函数包括：</p>\n<ul>\n<li><code>OnApply</code> ：处理属性页的 “Apply” 按钮被单击的消息</li>\n<li><code>OnCancel</code> ：处理属性页的 “Cancel” 按钮被单击的消息</li>\n<li><code>OnKillActive</code> ：处理属性页当前活动状态被切换的消息，常用于数据验证</li>\n<li><code>OnOK</code> ：处理属性页的 “OK” 按钮、“Apply” 按钮或者 “Close” 按钮被单击的消息</li>\n<li><code>OnQueryCancel</code> ：处理属性页的 “Cancel” 按钮被单击前发出的消息</li>\n<li><code>OnReset</code> ：处理属性页的 “Reset” 按钮被单击的消息</li>\n<li><code>OnSetActive</code> ：处理属性页被切换为当前活动页的消息</li>\n<li><code>OnWizardBack</code> ：处理属性页的 “Back” 按钮被单击的消息，仅在向导对话框中有效</li>\n<li><code>OnWizardFinish</code> ：处理属性页的 “Finish” 按钮被单击的消息，仅在向导对话框中有效</li>\n<li><code>OnWizardNext</code> ：处理属性页的 “Next” 按钮被单击的消息，仅在向导对话框中有效</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>CPropertySheet</code>  类</p>\n<p><code>CPropertySheet</code>  类继承自 <code>CWnd</code>  类，它是属性表类，负责加载、打开或删除属性页，并可以在属性页对话框中切换属性页，和对话框类似有模态和非模态两种。</p>\n<ul>\n<li>\n<p>构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">CPropertySheet</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">CPropertySheet</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    UINT nIDCaption<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    CWnd<span class=\"token operator\">*</span> pParentWnd <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    UINT iSelectPage <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">CPropertySheet</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    LPCTSTR pszCaption<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    CWnd<span class=\"token operator\">*</span> pParentWnd <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    UINT iSelectPage <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>nIDCaption</code> ：标题的字符串资源的 ID。</li>\n<li>参数 <code>pParentWnd</code> ：属性页对话框的父窗口，若设为 NULL，则父窗口为应用程序的主窗口。</li>\n<li>参数 <code>iSelectPage</code> ：初始状态时，活动属性页的索引，默认为第一个添加到属性表的属性页。</li>\n<li>参数 <code>pszCaption</code> ：标题字符串。</li>\n</ul>\n</li>\n<li>\n<p><code>GetActiveIndex()</code>  函数</p>\n<p>获取当前活动属性页的索引。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">GetActiveIndex</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>返回值：当前活动属性页的索引。</li>\n</ul>\n</li>\n<li>\n<p><code>GetActivePage()</code>  函数</p>\n<p>获取当前活动属性页对象。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CPropertyPage<span class=\"token operator\">*</span> <span class=\"token function\">GetActivePage</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>返回值：当前活动属性页对象的指针。</li>\n</ul>\n</li>\n<li>\n<p><code>GetPage()</code>  函数</p>\n<p>获取某个属性页对象。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CPropertyPage<span class=\"token operator\">*</span> <span class=\"token function\">GetPage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nPage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>nPage</code> ：目标属性页的索引。</li>\n<li>返回值：目标属性页对象的指针。</li>\n</ul>\n</li>\n<li>\n<p><code>GetPageCount()</code>  函数</p>\n<p>获取属性页的数量。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">GetPageCount</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>GetPageIndex()</code>  函数</p>\n<p>获取某属性页在属性页对话框中的索引。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">GetPageIndex</span><span class=\"token punctuation\">(</span>CPropertyPage<span class=\"token operator\">*</span> pPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>pPage</code> ：要获取索引的属性页对象的指针。</li>\n<li>返回值：属性页对象在属性页对话框中的索引。</li>\n</ul>\n</li>\n<li>\n<p><code>SetActivePage()</code>  函数</p>\n<p>设置某个属性页为活动属性页。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">SetActivePage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>BOOL <span class=\"token function\">SetActivePage</span><span class=\"token punctuation\">(</span>CPropertyPage<span class=\"token operator\">*</span> pPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>nPage</code> ：要设置为活动属性页的索引。</li>\n<li>参数 <code>pPage</code> ：要设置为活动属性页的对象指针。</li>\n</ul>\n</li>\n<li>\n<p><code>SetWizardButtons()</code>  函数</p>\n<p>在向导对话框上启用或禁用 Back、Next 或 Finish 按钮，应在调用 DoModal 之前调用此函数。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetWizardButtons</span><span class=\"token punctuation\">(</span>DWORD dwFlags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数 <code>dwFlags</code> ：设置向导按钮的外观和功能属性。可以是以下值的组合：</p>\n<ul>\n<li>PSWIZB_BACK          启用 “Back” 按钮，如果不包含此值则禁用 “Back” 按钮。</li>\n<li>PSWIZB_NEXT          启用 “Next” 按钮，如果不包含此值则禁用 “Next” 按钮。</li>\n<li>PSWIZB_FINISH         启用 “Finish” 按钮。</li>\n<li>PSWIZB_DISABLEDFINISH  显示禁用的 “Finish” 按钮。</li>\n</ul>\n</li>\n<li>\n<p><code>SetWizardMode()</code>  函数</p>\n<p>设置属性页对话框为向导对话框模式，应在调用 DoModal 之前调用此函数。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetWizardMode</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>SetTitle()</code>  函数</p>\n<p>设置属性对话框的标题。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetTitle</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    LPCTSTR lpszText<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT nStyle <span class=\"token operator\">=</span> <span class=\"token number\">0</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>参数 <code>lpszText</code> ：标题字符串。</p>\n</li>\n<li>\n<p>参数 <code>nStyle</code> ：指定属性表标题的风格。应当为 0 或 PSH_PROPTITLE。如果设为 PSH_PROPTITLE，则单词 “Properties” 会出现在指定标题之后。</p>\n<p>例如， <code>SetTitle(&quot;Simple&quot;,PSH_PROPTITLE)</code>  这种调用会使得属性表标题为 “Simple Properties”。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>AddPage()</code>  函数</p>\n<p>为属性对话框添加新的属性页。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddPage</span><span class=\"token punctuation\">(</span>CPropertyPage <span class=\"token operator\">*</span>pPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数 <code>pPage</code> ：要添加的新的属性页的对象指针。</p>\n</li>\n<li>\n<p><code>PressButton()</code>  函数</p>\n<p>模拟按下某指定的按钮。函数原型为</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PressButton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数 <code>nButton</code> ：要模拟按下的按钮，它可以是下列值之一：</p>\n<ul>\n<li>PSBTN_BACK  选择 “Back” 按钮。</li>\n<li>PSBTN_NEXT  选择 “Next” 按钮。</li>\n<li>PSBTN_FINISH  选择 “Finish” 按钮。</li>\n<li>PSBTN_OK  选择 “OK” 按钮。</li>\n<li>PSBTN_APPLYNOW  选择 “Apply” 按钮。</li>\n<li>PSBTN_CANCEL  选择 “Cancel” 按钮。</li>\n<li>PSBTN_HELP  选择 “帮助” 按钮。</li>\n</ul>\n</li>\n<li>\n<p><code>RemovePage()</code>  函数</p>\n<p>删除某属性页。函数原型为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemovePage</span><span class=\"token punctuation\">(</span>CPropertyPage <span class=\"token operator\">*</span>pPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemovePage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>pPage</code> ：要删除的属性页的对象指针。</li>\n<li>参数 <code>nPage</code> ：要删除的属性页的索引。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"向导对话框\"><a class=\"markdownIt-Anchor\" href=\"#向导对话框\">#</a> 向导对话框</h1>\n<h1 id=\"消息对话框\"><a class=\"markdownIt-Anchor\" href=\"#消息对话框\">#</a> 消息对话框</h1>\n<h1 id=\"文件对话框\"><a class=\"markdownIt-Anchor\" href=\"#文件对话框\">#</a> 文件对话框</h1>\n<h1 id=\"字体对话框\"><a class=\"markdownIt-Anchor\" href=\"#字体对话框\">#</a> 字体对话框</h1>\n<h1 id=\"颜色对话框\"><a class=\"markdownIt-Anchor\" href=\"#颜色对话框\">#</a> 颜色对话框</h1>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/05/26/MFC%E6%B6%88%E6%81%AF%E6%98%A0%E5%B0%84%E6%9C%BA%E5%88%B6/",
            "url": "https://adventure-yx.github.io/2023/05/26/MFC%E6%B6%88%E6%81%AF%E6%98%A0%E5%B0%84%E6%9C%BA%E5%88%B6/",
            "title": "MFC 消息映射机制",
            "date_published": "2023-05-26T02:12:08.000Z",
            "content_html": "<h1 id=\"mfc消息映射机制\"><a class=\"markdownIt-Anchor\" href=\"#mfc消息映射机制\">#</a> MFC 消息映射机制</h1>\n<p><strong>Windows 应用程序是消息驱动的</strong>。在 MFC 软件开发中，界面操作或者线程之间通信都会用到消息，<strong>通过对消息的处理实现相应的操作</strong>。比较典型的过程是，用户操作窗口，然后有消息产生，送给窗口的消息处理函数处理，对用户的操作做出响应。</p>\n<h1 id=\"什么是消息\"><a class=\"markdownIt-Anchor\" href=\"#什么是消息\">#</a> 什么是消息</h1>\n<p>窗口消息一般由三个部分组成：</p>\n<ul>\n<li>一个无符号整数，是消息值；</li>\n<li>消息附带的 WPARAM 类型的参数；</li>\n<li>消息附带的 LPARAM 类型的参数。</li>\n</ul>\n<p>实际一般所说的是狭义上的消息值，也就是一个无符号整数，经常被定义为宏。</p>\n<h1 id=\"什么是消息映射机制\"><a class=\"markdownIt-Anchor\" href=\"#什么是消息映射机制\">#</a> 什么是消息映射机制</h1>\n<p>MFC 使用一种消息映射机制来处理消息，在应用程序框架中的表现就是，<strong>一个消息与消息处理函数 —— 对应的消息映射表，以及消息处理函数的声明和实现等代码</strong>。</p>\n<p>当窗口收到消息时，会到消息映射表中查找该消息对应的消息处理函数，然后由消息处理函数进行相应的处理。</p>\n<p>SDK 编程时需要在窗口过程中 —— 判断消息值进行相应的处理，相比之下 MFC 的消息映射机制要方便好用的多。</p>\n<h1 id=\"windows消息分类\"><a class=\"markdownIt-Anchor\" href=\"#windows消息分类\">#</a> Windows 消息分类</h1>\n<p>Windows 消息分为<strong>系统消息</strong>和<strong>用户自定义消息</strong>。系统消息有三种：</p>\n<ul>\n<li><strong>标准 Windows 消息</strong>。除 WM_COMMAND 外的 WM_开头的消息是标准消息。例如：WM_CREATE、WM_CLOSE。</li>\n<li><strong>命令消息</strong>。WM_COMMAND，消息中附带了标志符 ID 来区分是来自哪个菜单、工具栏按钮或加速键的消息。</li>\n<li><strong>通知消息</strong>。通知消息一般由列表框等子窗口发送给父窗口，消息名也是 WM_COMMAND，其中附带了控件通知码来区分控件。</li>\n</ul>\n<p><strong>CWnd 的派生类都可以接收到标准 Windows 消息、通知消息和命令消息。命令消息还可以由文档类等接收。</strong></p>\n<p><strong>用户自定义消息实际上就是用户定义一个宏作为消息，此宏的值应该大于等于 WM_USER，然后宏就可以跟系统消息一样使用，窗口类中可以定义它的处理函数。</strong></p>\n<h1 id=\"消息映射表\"><a class=\"markdownIt-Anchor\" href=\"#消息映射表\">#</a> 消息映射表</h1>\n<p>除了一些没有基类的类或 CObject 的直接派生类外，其他的类都可以自动生成消息映射表。</p>\n<p>消息映射表如下（CMainFrame.cpp）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">BEGIN_MESSAGE_MAP</span><span class=\"token punctuation\">(</span>CMainFrame<span class=\"token punctuation\">,</span> CFrameWndEx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">ON_WM_CREATE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ON_COMMAND</span><span class=\"token punctuation\">(</span>ID_VIEW_CUSTOMIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnViewCustomize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">ON_REGISTERED_MESSAGE</span><span class=\"token punctuation\">(</span>AFX_WM_CREATETOOLBAR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnToolbarCreateNew<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">ON_COMMAND_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">ON_UPDATE_COMMAND_UI_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnUpdateApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">ON_WM_SETTINGCHANGE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">END_MESSAGE_MAP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 <code>BEGIN_MESSAGE_MAP</code>  和 <code>END_MESSAGE_MAP</code>  之间的内容成为消息映射入口项。</p>\n<p>消息映射除了在 <code>CMainFrame</code>  的实现文件中添加消息映射表外，在类的定义文件 <code>MainFrm.h</code>  中还会添加一个宏调用： <code> DECLEAR_MESSAGE_MAP</code></p>\n<p>一般这个宏调用写在类定义的结尾处。</p>\n<h1 id=\"添加消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#添加消息处理函数\">#</a> 添加消息处理函数</h1>\n<ol>\n<li>\n<p>在类定义中加入消息处理函数的函数声明，以 <code>afx_msg</code>  打头。例如 MainFrm.h 中的声明：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>afx_msg <span class=\"token keyword\">int</span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>LPCREATESTRUCT lpCreateStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>afx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnViewCustomize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>afx_msg LRESULT <span class=\"token function\">OnToolbarCreateNew</span><span class=\"token punctuation\">(</span>WPARAM wp<span class=\"token punctuation\">,</span> LPARAM lp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>afx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnApplicationLook</span><span class=\"token punctuation\">(</span>UINT id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>afx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnUpdateApplicationLook</span><span class=\"token punctuation\">(</span>CCmdUI<span class=\"token operator\">*</span> pCmdUI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>afx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnSettingChange</span><span class=\"token punctuation\">(</span>UINT uFlags<span class=\"token punctuation\">,</span> LPCTSTR lpszSection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在类的消息映射表中添加该消息的消息映射入口项。例如 MainFrm.h 中的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_WM_CREATE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ON_COMMAND</span><span class=\"token punctuation\">(</span>ID_VIEW_CUSTOMIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnViewCustomize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ON_REGISTERED_MESSAGE</span><span class=\"token punctuation\">(</span>AFX_WM_CREATETOOLBAR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnToolbarCreateNew<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ON_COMMAND_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ON_UPDATE_COMMAND_UI_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnUpdateApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">ON_WM_SETTINGCHANGE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>在类的实现中添加消息处理函数的函数实现。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">CMainFrame</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>LPCREATESTRUCT lpCreateStruct<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>通过以上 3 个步骤后， <code>WM_CREATE</code>  等消息就可以在窗口类中被消息处理函数处理了。</p>\n<h1 id=\"各种windows消息的消息处理函数\"><a class=\"markdownIt-Anchor\" href=\"#各种windows消息的消息处理函数\">#</a> 各种 Windows 消息的消息处理函数</h1>\n<blockquote>\n<p>标准 Windows 消息。除 WM_COMMAND 外的 WM_开头的消息是标准消息。例如：WM_CREATE、WM_CLOSE。</p>\n</blockquote>\n<p>标准 Windows 消息的消息处理函数都与 WM_CREATE 消息类似。</p>\n<blockquote>\n<p>命令消息。WM_COMMAND，消息中附带了标志符 ID 来区分是来自哪个菜单、工具栏按钮或加速键的消息。</p>\n</blockquote>\n<p>命令消息的消息映射入口如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_COMMAND</span><span class=\"token punctuation\">(</span>ID_VIEW_CUSTOMIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnViewCustomize<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>消息为 <code>ID_VIEW_CUSTOMIZE</code></li>\n<li>消息处理函数为 <code>OnViewCustomize</code></li>\n</ul>\n<p>如果想用批量处理函数批量处理这些命令消息，则可以像 CMainFrame 消息映射表中的：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_COMMAND_RANGE</span><span class=\"token punctuation\">(</span>ID_VIEW_APPLOOK_WIN_2000<span class=\"token punctuation\">,</span> ID_VIEW_APPLOOK_WINDOWS_7<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainFrame<span class=\"token double-colon punctuation\">::</span>OnApplicationLook<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>值在 <code>ID_VIEW_APPLOOK_WIN_2000</code>  到 <code>ID_VIEW_APPLOOK_WINDOWS_7</code>  之间的菜单项等命令消息都由 CMainFrame 的 <code>OnApplicationLook</code>  函数处理。</li>\n<li>函数原型为 <code>afx_msg void OnApplicationLook(UINT id);</code></li>\n<li>参数 id 为用户操作的菜单项等的 ID</li>\n</ul>\n<blockquote>\n<p>通知消息。通知消息一般由列表框等子窗口发送给父窗口，消息名也是 WM_COMMAND，其中附带了控件通知码来区分控件。</p>\n</blockquote>\n<p>在操作列表框等控件时往往会给父窗口发送 <code>WM_NOTIFY</code>  通知消息。</p>\n<p><code>WM_NOTIFY</code>  消息的 <code>WPARAM</code>  参数为发送通知消息的控件的 ID； <code> LPARAM</code>  参数指向一个结构体，可能是 NMHDR 结构体，也可能是第一个元素为 NMHDR 结构体变量的其他结构体。</p>\n<p>NMHDR 结构体定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Typedef <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagNMHDR</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    HWND hwndFrom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT idFrom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    UINT code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>NMHDR<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>hwndFrom 为发送通知消息控件的句柄；</li>\n<li>idFrom 为控件 ID；</li>\n<li>code 为要处理的通知消息的通知码，例如 NM_CLICK</li>\n</ul>\n<p>通知消息的消息映射入口形式如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ON_NOTIFY</span><span class=\"token punctuation\">(</span>wNotifyCode<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> memberFxn<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>wNotifyCode 为要处理的通知消息通知码；</li>\n<li>id 为控件标识 ID；</li>\n<li>memberFxn 为此消息的消息处理函数。</li>\n</ul>\n<blockquote>\n<p>用户自定义消息</p>\n<ol>\n<li>定义消息宏</li>\n<li>在消息映射表中添加消息映射入口项</li>\n<li>在 MainFrm.h 中添加消息处理函数的函数声明</li>\n<li>在 MainFrm.cpp 中实现此函数</li>\n</ol>\n</blockquote>\n<h1 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "C++",
                "MFC"
            ]
        }
    ]
}