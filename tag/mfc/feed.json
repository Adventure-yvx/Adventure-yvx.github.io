{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"mfc\" tag",
    "description": "",
    "home_page_url": "https://adventure-yx.github.io",
    "items": [
        {
            "id": "https://adventure-yx.github.io/2023/06/02/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "url": "https://adventure-yx.github.io/2023/06/02/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/",
            "title": "字符集与VS中的字符处理",
            "date_published": "2023-06-02T07:12:08.000Z",
            "content_html": "<h1 id=\"字符集\"><a class=\"markdownIt-Anchor\" href=\"#字符集\">#</a> 字符集</h1>\n<ul>\n<li>\n<p>ASCII（American Standard Code for Information Interchange）</p>\n<p>一个字节（8bit）表示的字符编码，其中只用到了前 7 位，表示 127 个字符。</p>\n</li>\n<li>\n<p>ANSI 多字节字符集（American National Standard Institute）</p>\n<p>由字节数据的最高位判断：</p>\n<ul>\n<li>最高位为 0，代表是单字节，按照 ASCII 表进行编码</li>\n<li>最高位为 1，代表是本地化扩展字符，需要将相邻的两个字节组成一个整体，来进行码值求取，得到的码值对应的本地化字符集中可以得到相应的字符是什么。\n<ul>\n<li>简体中文系统下，ANSI 编码代表 GB2312 编码 (GBK 是 GB2312 的扩展，兼容 GB2312)</li>\n<li>繁体中文系统下，ANSI 编码代表 BIG5 编码</li>\n<li>日文系统下，ANSI 编码代表 JIS 编码</li>\n</ul>\n</li>\n<li>不同 ANSI 编码之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中。需要将不同的 ANSI 编码都转换成 UTF-8 编码，进而存储。</li>\n</ul>\n</li>\n<li>\n<p>Unicode 编码（Universal Multiple-Octet Coded Character Set，通用多八位编码字符集）</p>\n<p>国际组织制定的可以容纳世界上所有文字和字符的编码方案，使用定宽 2 个字节 <code>Ox0000-OxFFFF</code>  来表示一个字符。对于英文浪费了一个字节。</p>\n</li>\n<li>\n<p>UTF-8（8bit Unicode Transformation Format，8 位 Unicode 通用转换格式）</p>\n<p>UTF-8 是 Unicode 的实现方式之一，是一种针对 Unicode 的可变长度字符编码，使用 1-4 个字节进行编码</p>\n<p>对单字节字符，第一位为 0，后 7 位与 ASCII 码一致。</p>\n</li>\n<li>\n<p>UTF-16</p>\n<p>可变长度字符编码，将字符编码成 2 字节或者 4 字节</p>\n</li>\n<li>\n<p>UTF-32</p>\n<p>固定长度的编码，始终占用 4 字节。</p>\n</li>\n</ul>\n<h1 id=\"字符类型\"><a class=\"markdownIt-Anchor\" href=\"#字符类型\">#</a> 字符类型</h1>\n<ul>\n<li>\n<p><strong>char</strong></p>\n<p>字符型，单位是字节，占 8bit</p>\n</li>\n<li>\n<p><strong>wchar_t</strong></p>\n<p>宽字符，单位是双字节，占 16bit</p>\n<p>wchar_t 是 Unicode 定义的数据类型，定义在 <code>&lt;string.h&gt;</code>  中。在 ANSI 中使用 wchar_t 会报错，wchar_t 类型的字符是按 Unicode 的编码方式存储的。</p>\n<blockquote>\n<p>给 wchar_t 类型变量赋值时，要注意类型以及编码方式是否匹配。</p>\n<p><code>wchar_t *str = L&quot;aaabbb&quot;;</code></p>\n<p>str 是 wchar_t 类型，而 wchar_t 是 Unicode 数据类型，所以后面的字符串要用 L 指令转化为 Unicode 编码</p>\n</blockquote>\n</li>\n<li>\n<p><strong>TCHAR</strong></p>\n<p>TCHAR 是一个宏，并不是实际的某一个类型。当使用多字节字符集时，TCHAR 就是 char；当使用 Unicode 字符集时，TCHAR 就可以当作 wchar_t 来用。使用 TCHAR，编译器会根据我们字符集来进行相应的转化。TCHAR 定义在 &lt;tchar.h&gt; 中，使用要先包含头文件。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span>  <span class=\"token expression\">UNICODE</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">wchar_t</span> TCHAR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> TCHAR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>LPSTR</strong>：32bit 指针，指向一个字符串，每个字符占 1 个字节。相当于 <code>char*</code></p>\n</li>\n<li>\n<p><strong>LPCSTR</strong>：32bit 指针，指向一个常字符串，每个字符占 1 个字节。相当于 <code>const char*</code></p>\n</li>\n<li>\n<p><strong>LPTSTR</strong>：32bit 指针，指向一个字符串，每个字节可能占 1 个字节或 2 个字节，取决于 Unicode 是否定义。相当于 <code>tchar*</code></p>\n</li>\n<li>\n<p><strong>LPCTSTR</strong>：32bit 指针，指向一个常字符串，每个字节可能占 1 个字节或 2 个字节，取决于 Unicode 是否定义。相当于 <code>const tchar*</code></p>\n</li>\n<li>\n<p><strong>LPWSTR</strong>：32bit 指针，指向一个 Unicode 字符串的指针，每个字符占 2 字节。相当于 <code>wchar_t*</code></p>\n</li>\n<li>\n<p><strong>LPCWSTR</strong>：32bit 指针，指向一个 Unicode 常字符串的指针，每个字符占 2 字节。相当于 <code>const wchar_t*</code></p>\n</li>\n</ul>\n<h1 id=\"l指令\"><a class=\"markdownIt-Anchor\" href=\"#l指令\">#</a> L 指令</h1>\n<p>字符串前面加 L 表示该字符串是 Unicode 字符串，可以将 ANSI 字符串转换为 Unicode 字符串，就是每个字符占 2 个字节。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"_t宏\"><a class=\"markdownIt-Anchor\" href=\"#_t宏\">#</a> _T () 宏</h1>\n<p>_T (&quot;&quot;) 是一个宏定义在 tchar.h 下。</p>\n<p>_T () 或者 TEXT () 宏，可以把引号括起来的字符串，根据环境选择合适的编码方式。</p>\n<ul>\n<li>如果定义的是 Unicode，那么_T (“abc”) 就相当于 L&quot;abc&quot;，也就是宽字符；</li>\n<li>如果是多字节编码，那么英文采用单字节，汉字采用双字节；</li>\n<li>在 Unicode 环境下，要求 LPCWSTR 的地方不可以给一个 char*，而在多字节编码下可以。</li>\n</ul>\n<blockquote>\n<p>Windows 使用两种字符集 ANSI 和 UNICODE，前者就是通常使用的单字节方式，但这种方式处理中文这样的双字节字符不方便，容易出现半个汉字的情况。而后者是双字节，方便处理双字节字符。Windows NT 的所有与字符有关的函数都提供两种方式的版本，Windows 9x 只支持 ANSI 方式。</p>\n</blockquote>\n<ul>\n<li></li>\n</ul>\n<blockquote>\n<p>比如</p>\n<p><code>wchar_t Str[] = L&quot;Hello World!&quot;;</code>  是双字节存储字符串，_T 是与之适配的宏。</p>\n</blockquote>\n<p>当有 <code>#ifdef _UNICODE</code>  的时候，_T () 就是 L；</p>\n<p>当没有 <code>#ifdef _UNICODE</code>  的时候，_T () 就是 ANSI 的。</p>\n<h1 id=\"mfc中cstring和stdstring的转换\"><a class=\"markdownIt-Anchor\" href=\"#mfc中cstring和stdstring的转换\">#</a> MFC 中 CString 和 std::string 的转换</h1>\n<p>CString 实际是 CStringT，也就是模板类</p>\n<p>在 Unicode 环境下，实际是 CStringW</p>\n<p>在多字符集环境下，实际是 CStringA</p>\n<p>std::string 是多字符集环境下的</p>\n<h2 id=\"unicode环境下\"><a class=\"markdownIt-Anchor\" href=\"#unicode环境下\">#</a> Unicode 环境下</h2>\n<ul>\n<li>\n<p>CString 转换 std::string</p>\n<p>CString 实际是 CStringW，要转换为多字符集，需要进行转码。使用 WideCharToMultiByte 转换成多字符集，然后再构造 std::string</p>\n</li>\n<li>\n<p>std::string 转换 CString</p>\n<p>CStringT 模板类会自动做 char* 到 wchar_t * 的转码</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//CString -> std::string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">strCS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>USES_CONVERSION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">strS</span><span class=\"token punctuation\">(</span><span class=\"token function\">W2A</span><span class=\"token punctuation\">(</span>strCS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//std::string -> CString</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CString strCStemp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>strCStemp <span class=\"token operator\">=</span> strS<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 不能写在同一行</span></pre></td></tr></table></figure><h2 id=\"多字符集环境下\"><a class=\"markdownIt-Anchor\" href=\"#多字符集环境下\">#</a> 多字符集环境下</h2>\n<p>CString 就是 CStringA</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//CString -> std::string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString <span class=\"token function\">strCS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string str1 str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>str1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">GetBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CStringA<span class=\"token punctuation\">)</span>str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//std::string -> CString</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string strTemp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>CString str <span class=\"token operator\">=</span> strTemp<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// 可以写在一行</span></pre></td></tr></table></figure><h1 id=\"tixml写入配置文件时bool类型转stdstring\"><a class=\"markdownIt-Anchor\" href=\"#tixml写入配置文件时bool类型转stdstring\">#</a> TiXML 写入配置文件时 bool 类型转 std::string</h1>\n<p>定义：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token class-name\">DeviceConfigDlg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BoolToStr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> is<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> is <span class=\"token operator\">?</span> <span class=\"token string\">\"true\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pCheckSelfXRayConnect<span class=\"token operator\">-></span><span class=\"token function\">SetAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enabled\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">BoolToStr</span><span class=\"token punctuation\">(</span>isCheckSelfXRayConnect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "MFC"
            ]
        }
    ]
}