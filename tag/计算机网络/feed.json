{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"计算机网络\" tag",
    "description": "",
    "home_page_url": "https://adventure-yx.github.io",
    "items": [
        {
            "id": "https://adventure-yx.github.io/2023/04/18/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/",
            "url": "https://adventure-yx.github.io/2023/04/18/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/",
            "title": "C++网络编程",
            "date_published": "2023-04-18T15:07:30.000Z",
            "content_html": "<h1 id=\"套接字socket\"><a class=\"markdownIt-Anchor\" href=\"#套接字socket\">#</a> 套接字 socket</h1>\n<h2 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h2>\n<ul>\n<li>\n<p>局域网和广域网</p>\n<ul>\n<li>局域网：局域网将一定区域内的各种计算机、外部设备和数据库连接起来形成计算机通信的私有网络。</li>\n<li>广域网：又称广域网、外网、公网。是连接不同地区局域网或城域网计算机通信的远程公共网络。</li>\n</ul>\n</li>\n<li>\n<p>IP（Internet Protocol）：本质是一个整形数，用于表示计算机在网络中的地址。IP 协议版本有两个：IPv4 和 IPv6</p>\n<ul>\n<li>\n<p>IPv4（Internet Protocol version4）：</p>\n<ul>\n<li>使用一个 32 位的整形数描述一个 IP 地址，4 个字节，int 型</li>\n<li>也可以使用一个点分十进制字符串描述这个 IP 地址： 192.168.247.135</li>\n<li>分成了 4 份，每份 1 字节，8bit（char），最大值为 255</li>\n<li>0.0.0.0 是最小的 IP 地址</li>\n<li>255.255.255.255 是最大的 IP 地址</li>\n<li>按照 IPv4 协议计算，可以使用的 IP 地址共有 232 个</li>\n</ul>\n</li>\n<li>\n<p>IPv6（Internet Protocol version6）：</p>\n<ul>\n<li>使用一个 128 位的整形数描述一个 IP 地址，16 个字节</li>\n<li>也可以使用一个字符串描述这个 IP 地址：2001:0db8:3c4d:0015:0000:0000:1a2f:1a2b</li>\n<li>分成了 8 份，每份 2 字节，每一部分以 16 进制的方式表示</li>\n<li>按照 IPv6 协议计算，可以使用的 IP 地址共有 2128 个</li>\n</ul>\n</li>\n<li>\n<p>查看 IP 地址</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># linux</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">ifconfig</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># windows</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ ipconfig</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 测试网络是否畅通</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 主机 a: 192.168.1.11</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 当前主机: 192.168.1.12</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>$ <span class=\"token function\">ping</span> <span class=\"token number\">192.168</span>.1.11     <span class=\"token comment\"># 测试是否可用连接局域网</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>$ <span class=\"token function\">ping</span> www.baidu.com    <span class=\"token comment\"># 测试是否可用连接外网</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 特殊的 IP 地址: 127.0.0.1  ==> 和本地的 IP 地址是等价的</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 假设当前电脑没有联网，就没有 IP 地址，又要做网络测试，可用使用 127.0.0.1 进行本地测试</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>端口</p>\n<p>端口的作用是定位到主机上的某一个进程，通过这个端口进程就可以接受到对应的网络数据了。</p>\n<blockquote>\n<p>比如：在电脑上运行了微信和 QQ, 小明通过客户端给我的的微信发消息，电脑上的微信就收到了消息，为什么？</p>\n<p>运行在电脑上的微信和 QQ 都绑定了不同的端口<br>\n通过 IP 地址可以定位到某一台主机，通过端口就可以定位到主机上的某一个进程<br>\n通过指定的 IP 和端口，发送数据的时候对端就能接受到数据了</p>\n</blockquote>\n<p>端口也是一个整形数  <code>unsigned short</code>  ，一个 16 位整形数，有效端口的取值范围是：0 ~ 65535 (0 ~ 216-1)</p>\n<blockquote>\n<p>提问：计算机中所有的进程都需要关联一个端口吗，一个端口可以被重复使用吗？</p>\n<p>不需要，如果这个进程不需要网络通信，那么这个进程就不需要绑定端口的</p>\n<p>一个端口只能给某一个进程使用，多个进程不能同时使用同一个端口</p>\n</blockquote>\n</li>\n<li>\n<p>OSI/ISO 网络分层模型</p>\n<p>OSI（Open System Interconnect），即开放式系统互联。 一般都叫 OSI 参考模型，是 ISO（国际标准化组织组织）在 1985 年研究的网络互联模型。</p>\n<table>\n\t<tr>\n\t    <th colspan=\"3\">计算机网络分层模型</th>\n\t</tr >\n\t<tr>\n\t    <td >OSI七层网络模型</td>\n\t    <td>TCP/IP四层概念模型</td>\n\t    <td>对应网络协议</td>  \n\t</tr >\n\t<tr >\n\t    <td>应用层（Application）</td>\n\t    <td rowspan=\"3\">应用层</td>\n\t    <td>HTTP、TFTP、FTP、NFS、WAIS、SMTP</td>\n\t</tr>\n\t<tr>\n\t    <td>表示层（Presentation）</td>\n        <td>Telnet、Rlogin、SNMP、Gopher</td>\n\t</tr>\n\t<tr>\n\t    <td>会话层（Session）</td>\n        <td>SMTP、DNS</td>\n\t</tr>\n\t<tr>\n\t    <td>传输层（Transport）</td>\n\t    <td>传输层</td>\n       \t<td>TCP、UDP</td>\n\t</tr>\n\t<tr>\n       \t<td>网络层（Network）</td>\n\t    <td>网络层</td>\n       \t<td>IP、ICMP、ARP、RARP、AKP、UUCP</td>\n\t</tr>\n\t<tr>\n\t    <td>数据链路层(Data Link)</td>\n\t    <td rowspan=\"2\">网络接口层</td>\n       <td>FDDI、Ethernet、Arpanet、PDN、SLIP、PPP</td>\n\t</tr>\n\t<tr>\n\t    <td>物理层(Physical)</td>\n\t    <td>IEEE802.1A、IEEE802.2-IEEE802.11</td>\n\t</tr>\n</table>\n<ul>\n<li>\n<p>物理层</p>\n<p>负责最后将信息编码成电流脉冲或其它信号用于网上传输</p>\n</li>\n<li>\n<p>数据链路层</p>\n<p>数据链路层通过物理网络链路供数据传输。<br>\n规定了 0 和 1 的分包形式，确定了网络数据包的形式；</p>\n</li>\n<li>\n<p>网络层</p>\n<p>网络层负责在源和终点之间建立连接；<br>\n此处需要确定计算机的位置，通过 IPv4，IPv6 格式的 IP 地址来找到对应的主机</p>\n</li>\n<li>\n<p>传输层</p>\n<p>传输层向高层提供可靠的端到端的网络数据流服务。<br>\n每一个应用程序都会在网卡注册一个端口号，该层就是端口与端口的通信</p>\n</li>\n<li>\n<p>会话层</p>\n<p>会话层建立、管理和终止表示层与实体之间的通信会话；<br>\n建立一个连接（自动的手机信息、自动的网络寻址）;</p>\n</li>\n<li>\n<p>表示层:</p>\n<p>对应用层数据编码和转化，确保以一个系统应用层发送的信息 可以被另一个系统应用层识别；</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"image-20230510234343879.png\" alt=\"image-20230510234343879\"></p>\n<h2 id=\"网络协议\"><a class=\"markdownIt-Anchor\" href=\"#网络协议\">#</a> 网络协议</h2>\n<p>网络协议指的是计算机网络中互相通信的对等实体之间交换信息时所必须遵守的规则的集合。一般系统网络协议包括五个部分：通信环境，传输服务，词汇表，信息的编码格式，时序、规则和过程。先来通过下面几幅图了解一下常用的网络协议的格式：</p>\n<ul>\n<li>TCP 协议 -&gt; 传输层协议</li>\n<li>UDP 协议 -&gt; 传输层协议</li>\n<li>IP 协议 -&gt; 网络层协议</li>\n<li>以太网帧协议 -&gt; 网络接口层协议</li>\n</ul>\n<p>数据的封装</p>\n<p>在网络通信的时候，程序猿需要负责的应用层数据的处理 (最上层)</p>\n<ul>\n<li>应用层的数据可以使用某些协议进行封装，也可以不封装</li>\n<li>程序猿需要调用发送数据的接口函数，将数据发送出去</li>\n<li>程序猿调用的 API 做底层数据处理\n<ul>\n<li>传输层使用传输层协议打包数据</li>\n<li>网络层使用网络层协议打包数据</li>\n<li>网络接口层使用网络接口层协议打包数据</li>\n<li>数据被发送到 internet</li>\n</ul>\n</li>\n<li>接收端接收到发送端的数据\n<ul>\n<li>程序猿调用接收数据的函数接收数据</li>\n<li>调用的 API 做相关的底层处理:\n<ul>\n<li>网络接口层拆包 ==&gt; 网络层的包</li>\n<li>网络层拆包 ==&gt; 网络层的包</li>\n<li>传输层拆包 ==&gt; 传输层数据</li>\n</ul>\n</li>\n<li>如果应用层也使用了协议对数据进行了封装，数据的包的解析需要程序猿做</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"socket编程\"><a class=\"markdownIt-Anchor\" href=\"#socket编程\">#</a> socket 编程</h2>\n<p>Socket 套接字由远景研究规划局（Advanced Research Projects Agency, ARPA）资助加里福尼亚大学伯克利分校的一个研究组研发。其目的是将 TCP/IP 协议相关软件移植到 UNIX 类系统中。设计者开发了一个接口，以便应用程序能简单地调用该接口通信。这个接口不断完善，最终形成了 Socket 套接字。Linux 系统采用了 Socket 套接字，因此，Socket 接口就被广泛使用，到现在已经成为事实上的标准。与套接字相关的函数被包含在头文件  <code>sys/socket.h</code>  中。</p>\n<p>socket 直译插座，通过上面的描述可以得知，套接字对应程序猿来说就是一套网络通信的接口，使用这套接口就可以完成网络通信。网络通信的主体主要分为两部分：客户端和服务器端。在客户端和服务器通信的时候需要频繁提到三个概念：IP、端口、通信数据，下面介绍一下需要注意的一些细节问题。</p>\n<h3 id=\"字节序\"><a class=\"markdownIt-Anchor\" href=\"#字节序\">#</a> 字节序</h3>\n<p>在各种计算机体系结构中，对于字节、字等的存储机制有所不同，因而引发了计算机通信领域中一个很重要的问题，即通信双方交流的信息单元（比特、字节、字、双字等等）应该以什么样的顺序进行传送。如果不达成一致的规则，通信双方将无法进行正确的编 / 译码从而导致通信失败。</p>\n<p>字节序，顾名思义字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序，也就是说对于单字符来说是没有字节序问题的，字符串是单字符的集合，因此字符串也没有字节序问题。</p>\n<p>目前在各种体系的计算机中通常采用的字节存储机制主要有两种：Big-Endian 和 Little-Endian，下面先从字节序说起。</p>\n<ul>\n<li>Little-Endian -&gt; 主机字节序 (小端)\n<ul>\n<li>数据的低位字节存储到内存的低地址位，数据的高位字节存储到内存的高地址位</li>\n<li>我们使用的 PC 机，数据的存储默认使用的是小端</li>\n</ul>\n</li>\n<li>Big-Endian -&gt; 网络字节序 (大端)\n<ul>\n<li>数据的低位字节存储到内存的高地址位，数据的高位字节存储到内存的低地址位</li>\n<li>套接字通信过程中操作的数据都是大端存储的，包括：接收 / 发送的数据、IP 地址、端口。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ip地址转换\"><a class=\"markdownIt-Anchor\" href=\"#ip地址转换\">#</a> IP 地址转换</h3>\n<h3 id=\"sockaddr-数据结构\"><a class=\"markdownIt-Anchor\" href=\"#sockaddr-数据结构\">#</a> sockaddr 数据结构</h3>\n<h3 id=\"套接字函数\"><a class=\"markdownIt-Anchor\" href=\"#套接字函数\">#</a> 套接字函数</h3>\n<h1 id=\"tcp通信流程\"><a class=\"markdownIt-Anchor\" href=\"#tcp通信流程\">#</a> TCP 通信流程</h1>\n<p>TCP 是一个<strong>面向连接的</strong>，<strong>安全的</strong>，<strong>流式传输协议</strong>，这个协议是一个传输层协议。</p>\n<ul>\n<li>面向连接：是一个双向连接，通过三次握手完成，断开连接需要通过四次挥手完成。</li>\n<li>安全：tcp 通信过程中，会对发送的每一数据包都会进行校验，如果发现数据丢失，会自动重传</li>\n<li>流式传输：发送端和接收端处理数据的速度，数据的量都可以不一致</li>\n</ul>\n<p><img data-src=\"tcp.jpg\" alt=\"img\"></p>\n<h2 id=\"服务器端通信流程\"><a class=\"markdownIt-Anchor\" href=\"#服务器端通信流程\">#</a> 服务器端通信流程</h2>\n<ol>\n<li>\n<p>创建用于监听的套接字，这个套接字是一个文件描述符 (监听的)</p>\n<p><code>int lfd = socket();</code></p>\n</li>\n<li>\n<p>将得到的监听的文件描述符和本地的 IP 端口进行绑定</p>\n<p><code>bind();</code></p>\n</li>\n<li>\n<p>设置监听 (成功之后开始监听，监听的是客户端的连接)</p>\n<p><code>listen();</code></p>\n</li>\n<li>\n<p>等待并接受客户端的连接请求，建立新的连接，会得到一个新的文件描述符 (通信的)，没有新连接请求就阻塞</p>\n<p><code>int cfd = accept();</code></p>\n</li>\n<li>\n<p>通信，读写操作默认都是阻塞的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>断开连接，关闭套接字</p>\n<p><code>close();</code></p>\n</li>\n</ol>\n<blockquote>\n<p>在 tcp 的服务器端，有两类文件描述符</p>\n<ul>\n<li>监听的文件描述符\n<ul>\n<li>只需要有一个</li>\n<li>不负责和客户端通信，负责检测客户端的连接请求，检测到之后调用 accept 就可以建立新的连接</li>\n</ul>\n</li>\n<li>通信的文件描述符\n<ul>\n<li>负责和建立连接的客户端通信</li>\n<li>如果有 N 个客户端和服务器建立了新的连接，通信的文件描述符就有 N 个，每个客户端和服务器都对应一个通信的文件描述符</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><img data-src=\"1558084711685.png\" alt=\"1558084711685\"></p>\n<ul>\n<li>文件描述符对应的内存结构：\n<ul>\n<li>一个文件文件描述符对应两块内存，一块内存是读缓冲区，一块内存是写缓冲区</li>\n<li>读数据：通过文件描述符将内存中的数据读出，这块内存称之为读缓冲区</li>\n<li>写数据：通过文件描述符将数据写入到某块内存中，这块内存称之为写缓冲区</li>\n</ul>\n</li>\n<li>监听的文件描述符:\n<ul>\n<li>客户端的连接请求会发送到服务器端监听的文件描述符的读缓冲区中</li>\n<li>读缓冲区中有数据，说明有新的客户端连接</li>\n<li>调用 accept () 函数，这个函数会检测监听文件描述符的读缓冲区\n<ul>\n<li>检测不到数据，该函数阻塞</li>\n<li>如果检测到数据，解除阻塞，新的连接建立</li>\n</ul>\n</li>\n<li>通信的文件描述符:\n<ul>\n<li>客户端和服务器端都有通信的文件描述符</li>\n<li>发送数据：调用函数 write () /send ()，数据进入到内核中\n<ul>\n<li>数据并没有被发送出去，而是将数据写入到了通信的文件描述符对应的写缓冲区中</li>\n<li>内核检测到通信的文件描述符写缓冲区中有数据，内核会将数据发送到网络中</li>\n</ul>\n</li>\n<li>接收数据：调用的函数 read () /recv (), 从内核读数据\n<ul>\n<li>数据如何进入到内核程序猿不需要处理，数据进入到通信的文件描述符的读缓冲区中</li>\n<li>数据进入到内核，必须使用通信的文件描述符，将数据从读缓冲区中读出即可</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>基于 tcp 的服务器端通信代码:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// server.c</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 1. 创建监听的套接字</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> lfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 2. 将 socket () 返回值和本地的 IP 端口绑定到一起</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 大端端口</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// INADDR_ANY 代表本机的所有 IP, 假设有三个网卡就有三个 IP 地址</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 这个宏可以代表任意一个 IP 地址</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 这个宏一般用于本地的绑定操作</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 这个宏的值为 0 == 0.0.0.0</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//    inet_pton(AF_INET, \"192.168.237.131\", &amp;addr.sin_addr.s_addr);</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 3. 设置监听</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 4. 阻塞等待并接受客户端连接</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> cliaddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">int</span> clilen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cliaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>cliaddr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>clilen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 打印客户端的地址信息</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">char</span> ip<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端的IP地址: %s, 端口: %d\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>           <span class=\"token function\">inet_ntop</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cliaddr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>           <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>cliaddr<span class=\"token punctuation\">.</span>sin_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 5. 和客户端通信</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端say: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len  <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端断开了连接...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"客户端的通信流程\"><a class=\"markdownIt-Anchor\" href=\"#客户端的通信流程\">#</a> 客户端的通信流程</h2>\n<blockquote>\n<p>在单线程的情况下客户端通信的文件描述符有一个，没有监听的文件描述符</p>\n</blockquote>\n<ol>\n<li>\n<p>创建一个通信的套接字</p>\n<p><code>int cfd = socket();</code></p>\n</li>\n<li>\n<p>连接服务器，需要知道服务器绑定的 IP 和端口</p>\n<p><code>connect();</code></p>\n</li>\n<li>\n<p>通信</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>断开连接，关闭文件描述符 (套接字)</p>\n<p><code>close();</code></p>\n</li>\n</ol>\n<p>基于 tcp 通信的客户端通信代码:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// client.c</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 1. 创建通信的套接字</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 2. 连接服务器</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 大端端口</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token string\">\"192.168.237.131\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 3. 和服务器端通信</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"你好, 服务器...%d\\n\"</span><span class=\"token punctuation\">,</span> number<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器say: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len  <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器断开了连接...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 每隔 1s 发送一条数据</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"tcp协议介绍\"><a class=\"markdownIt-Anchor\" href=\"#tcp协议介绍\">#</a> TCP 协议介绍</h2>\n<p>TCP 协议是一个安全的、面向连接的、流式传输协议，所谓的面向连接就是三次握手，对于程序猿来说只需要在客户端调用 connect () 函数，三次握手就自动进行了。先通过下图看一下 TCP 协议的格式，然后再介绍三次握手的具体流程。</p>\n<h2 id=\"tcp三次握手\"><a class=\"markdownIt-Anchor\" href=\"#tcp三次握手\">#</a> TCP 三次握手</h2>\n<h2 id=\"tcp四次挥手\"><a class=\"markdownIt-Anchor\" href=\"#tcp四次挥手\">#</a> TCP 四次挥手</h2>\n<h2 id=\"流量控制\"><a class=\"markdownIt-Anchor\" href=\"#流量控制\">#</a> 流量控制</h2>\n<h2 id=\"tcp状态转换\"><a class=\"markdownIt-Anchor\" href=\"#tcp状态转换\">#</a> TCP 状态转换</h2>\n<h1 id=\"服务器并发\"><a class=\"markdownIt-Anchor\" href=\"#服务器并发\">#</a> 服务器并发</h1>\n<h1 id=\"tcp-数据粘包的处理\"><a class=\"markdownIt-Anchor\" href=\"#tcp-数据粘包的处理\">#</a> TCP 数据粘包的处理</h1>\n<h1 id=\"套接字通信类的封装\"><a class=\"markdownIt-Anchor\" href=\"#套接字通信类的封装\">#</a> 套接字通信类的封装</h1>\n<h1 id=\"io-多路复用之-select\"><a class=\"markdownIt-Anchor\" href=\"#io-多路复用之-select\">#</a> IO 多路复用之 select</h1>\n<h1 id=\"io-多路复用之-poll\"><a class=\"markdownIt-Anchor\" href=\"#io-多路复用之-poll\">#</a> IO 多路复用之 poll</h1>\n<h1 id=\"io-多路复用之-epoll\"><a class=\"markdownIt-Anchor\" href=\"#io-多路复用之-epoll\">#</a> IO 多路复用之 epoll</h1>\n",
            "tags": [
                "C++",
                "Linux",
                "计算机网络"
            ]
        }
    ]
}