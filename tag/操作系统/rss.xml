<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title> • Posts by &#34;操作系统&#34; tag</title>
        <link>https://adventure-yx.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Wed, 15 Mar 2023 17:56:33 +0800</pubDate>
        <lastBuildDate>Wed, 15 Mar 2023 17:56:33 +0800</lastBuildDate>
        <category>C++</category>
        <category>Boost</category>
        <category>DataBase</category>
        <category>Qt</category>
        <category>QML</category>
        <category>MFC</category>
        <category>XML</category>
        <category>debug</category>
        <category>Linux</category>
        <category>计算机网络</category>
        <category>设计模式</category>
        <category>操作系统</category>
        <category>STL</category>
        <category>算法</category>
        <item>
            <guid isPermalink="true">https://adventure-yx.github.io/2023/03/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%8D%97%E5%A4%A72023%EF%BC%89/</guid>
            <title>操作系统（南大2023）</title>
            <link>https://adventure-yx.github.io/2023/03/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%8D%97%E5%A4%A72023%EF%BC%89/</link>
            <category>Linux</category>
            <category>操作系统</category>
            <pubDate>Wed, 15 Mar 2023 17:56:33 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;南京大学 2023《操作系统：设计与实现》- 蒋炎岩&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVh4NHkxVjdKWg==&#34;&gt;https://www.bilibili.com/video/BV1Xx4y1V7JZ&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;操作系统概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作系统概述&#34;&gt;#&lt;/a&gt; 操作系统概述&lt;/h1&gt;
&lt;h2 id=&#34;什么是操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是操作系统&#34;&gt;#&lt;/a&gt; 什么是操作系统？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Operating System: A body of software, in fact, that is responsible for making it easy to run programs(even allowing you to seemingly run many at the same time), allowing programs to share memory, enabling programs to interact with devices, and other fun stuff like that.     ——《OSTEP》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;操作系统发展历程：……&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;今天的操作系统：通过 “虚拟化硬件” 资源为程序运行提供服务的软件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更复杂的的处理器和内存
&lt;ul&gt;
&lt;li&gt;非对称对处理器（ARM big.LITTLE；Intel P/E-cores）&lt;/li&gt;
&lt;li&gt;Non-uniform Memory Access (NUMA)&lt;/li&gt;
&lt;li&gt;更多的硬件机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更多的设备和资源
&lt;ul&gt;
&lt;li&gt;网卡、SSD、GPU、FPGA……&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;复杂的应用需求和应用环境
&lt;ul&gt;
&lt;li&gt;服务器、个人电脑、智能手机、手环、IoT……&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;理解操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#理解操作系统&#34;&gt;#&lt;/a&gt; 理解操作系统&lt;/h2&gt;
&lt;p&gt;三个根本问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;操作系统服务谁？
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;程序 = 状态机&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;本课程涉及：多线程 Linux 应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作系统为程序提供什么服务？（设计 / 应用视角）
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作系统 = 对象 + API&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;本课程涉及：POSIX + 部分 Linux 特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何实现操作系统提供的服务（实现 / 硬件视角）？
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作系统 = C 程序&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;完成初始化后就成为 interrupt/trap/fault handler&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;本课程涉及：xv6，自制迷你操作系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;应用视角的操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#应用视角的操作系统&#34;&gt;#&lt;/a&gt; 应用视角的操作系统&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;背景回顾&lt;/strong&gt;：操作系统有三条主线：“软件 (应用)”、“硬件 (计算机)”、“操作系统 (软件直接访问硬件带来麻烦太多而引入的中间件)”。想要理解操作系统，对操作系统的服务对象 (应用程序) 有精确的理解是必不可少的。&lt;/p&gt;
&lt;p&gt;操作系统 = 对象 + API (应用视角 / 设计) = C 程序 (硬件视角 / 实现)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本讲内容&lt;/strong&gt;：指令序列和高级语言的状态机模型；回答以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是软件 (程序)？&lt;/li&gt;
&lt;li&gt;如何在操作系统上构造最小 / 一般 / 图形界面应用程序？&lt;/li&gt;
&lt;li&gt;什么是编译器？编译器把一段程序翻译成什么样的指令序列才算 “正确”？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是程序源代码视角&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是程序源代码视角&#34;&gt;#&lt;/a&gt; 什么是程序（源代码视角）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;C 程序的状态机模型&lt;/strong&gt;（语义，semantics）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状态 = 堆 + 栈&lt;/li&gt;
&lt;li&gt;初始状态 = main 的第一条语句&lt;/li&gt;
&lt;li&gt;迁移 = 执行一条简单语句
&lt;ul&gt;
&lt;li&gt;任何 C 程序都可以改写成 “非复合语句” 的 C 代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这还只是粗浅的理解&lt;/p&gt;
&lt;p&gt;任何真正的理解都应该落实到可以执行的代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;状态 = stack frame 的列表（每个 frame 有 PC）+ 全局变量&lt;/li&gt;
&lt;li&gt;初始状态 = main (argc, argv), 全局变量初始化&lt;/li&gt;
&lt;li&gt;迁移 = 执行 top stack frame PC 的语句；PC++（PC 是计数器，存下一条指令地址）
&lt;ul&gt;
&lt;li&gt;函数调用 = push frame (frame.PC = 入口)&lt;/li&gt;
&lt;li&gt;函数返回 = pop frame&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C 语言程序是由很多栈帧组成的，每次函数调用创建一个新的栈帧&lt;/p&gt;
&lt;p&gt;应用：将任何递归程序就地转为非递归（还是一样的 call ()，但放入不同的 frame）&lt;/p&gt;
&lt;h2 id=&#34;什么是程序二进制代码视角&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是程序二进制代码视角&#34;&gt;#&lt;/a&gt; 什么是程序（二进制代码视角）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;状态 = 内存 M + 寄存器 R&lt;/li&gt;
&lt;li&gt;初始状态&lt;/li&gt;
&lt;li&gt;迁移 = 执行一条指令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作系统上的程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的指令都只能&lt;strong&gt;计算&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;deterministic: mov, add, sub, call…&lt;/li&gt;
&lt;li&gt;non-deterministic: rdrand …&lt;/li&gt;
&lt;li&gt;但这些指令甚至都无法使程序停下来（NEMU：加条 trap 指令）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一条特殊的指令：调用操作系统 &lt;code&gt;syscall&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;把（M,R）完全交给操作系统，任其修改&lt;/li&gt;
&lt;li&gt;实现与操作系统中的其它对象交互
&lt;ul&gt;
&lt;li&gt;读写文件 / 操作系统状态（例如把文件内容写入 M）&lt;/li&gt;
&lt;li&gt;改变进程（运行中状态机）的状态，例如创建进程 / 销毁自己&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;程序 = 计算 + syscall&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何在程序的两个视角之间切换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何在程序的两个视角之间切换&#34;&gt;#&lt;/a&gt; 如何在程序的两个视角之间切换&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;编译器&lt;/strong&gt;：源代码 S（状态机） → 二进制代码 C（状态机）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mtext&gt;（&lt;/mtext&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mtext&gt;）&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;C = complie（S）
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;操作系统中的一般程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作系统中的一般程序&#34;&gt;#&lt;/a&gt; 操作系统中的一般程序&lt;/h2&gt;
&lt;p&gt;系统中常见的应用程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Core Utilities(coreutils)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;standard programs for text and file manipulation&lt;/li&gt;
&lt;li&gt;系统中安装的是 GNU Coreutils&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统 / 工具程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bash, binutils, apt, ip, ssh, vim, tmux, jdk, python, …&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他应用程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器、音乐播放器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题 (1)：一个普通的、人畜无害的 Hello World C 程序执行的第一条指令在哪里？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gdb a.out&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;gdb&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; start&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;main () 之前发生了什么？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ld-linux-x86-64.so&lt;/code&gt;  加载了 libc&lt;/p&gt;
&lt;p&gt;之后 libc 完成了自己的初始化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RTFM: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9odXJkL2dsaWJjL3N0YXJ0dXAuaHRtbA==&#34;&gt;libc startup&lt;/span&gt; on Hurd&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main()&lt;/code&gt;  的开始 / 结束并不是整个程序的开始 / 结束&lt;/li&gt;
&lt;li&gt;例子：hello-goodbye.c&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题 (2)：main 执行之前、执行中、执行后，发生了哪些操作系统 API 调用？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In general, trace refers to the process of following &lt;em&gt;anything&lt;/em&gt; from the beginning to the end. For example, the  &lt;code&gt;traceroute&lt;/code&gt;  command follows each of the network hops as your computer connects to another computer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这门课中很重要的工具：strace&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;system call trace&lt;/li&gt;
&lt;li&gt;理解程序运行时使用的系统调用
&lt;ul&gt;
&lt;li&gt;demo:  &lt;code&gt;strace ./hello-goodbye&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在这门课中，你能理解 strace 的输出并在你自己的操作系统里实现相当一部分系统调用 (mmap, execve, …)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;本质上，所有程序都和 Hello World 类似&lt;/p&gt;
&lt;p&gt;程序 = 状态机 = 计算 → syscall → 计算 →&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被操作系统加载
&lt;ul&gt;
&lt;li&gt;通过另一个进程执行 execve 设置为初始状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;状态机执行
&lt;ul&gt;
&lt;li&gt;进程管理：fork, execve, exit, …&lt;/li&gt;
&lt;li&gt;文件 / 设备管理：open, close, read, write, …&lt;/li&gt;
&lt;li&gt;存储管理：mmap, brk, …&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;直到 _exit (exit_group) 退出&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;(初学者对这一点会感到有一点惊讶)&lt;/p&gt;
&lt;p&gt;说好的浏览器、游戏、杀毒软件、病毒呢？都是这些 API 吗&lt;/p&gt;
&lt;p&gt;Yes! - 这些 API 就是操作系统的全部&lt;/p&gt;
&lt;p&gt;编译器 (gcc)，代表其他工具程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主要的系统调用：execve, read, write&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;strace&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; gcc a.c&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;(gcc 会启动其他进程)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以管道给编辑器  &lt;code&gt;vim -&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编辑器里还可以  &lt;code&gt;%!grep&lt;/code&gt;  (细节 / 技巧)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;图形界面程序 (xedit)，代表其他图形界面程序 (例如 vscode)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主要的系统调用：poll, recvmsg, writev&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;strace&lt;/span&gt; xedit&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;图形界面程序和 X-Window 服务器按照 X11 协议通信&lt;/li&gt;
&lt;li&gt;虚拟机中的 xedit 将 X11 命令通过 ssh (X11 forwarding) 转发到 Host&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;本次课回答的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: 到底什么是 “程序”？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序 = 状态机&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源代码 &lt;em&gt;S&lt;/em&gt;: 状态迁移 = 执行语句&lt;/li&gt;
&lt;li&gt;二进制代码 &lt;em&gt;C&lt;/em&gt;: 状态迁移 = 执行指令&lt;/li&gt;
&lt;li&gt;编译器 C = compile (S)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用视角的操作系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;就是一条 syscall 指令&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算机系统不存在玄学；一切都建立在确定的机制上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解操作系统的重要工具：gcc, binutils, gdb, strace&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;硬件视角的操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#硬件视角的操作系统&#34;&gt;#&lt;/a&gt; 硬件视角的操作系统&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;本讲内容&lt;/strong&gt;：计算机硬件的状态机模型；回答以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是计算机硬件？&lt;/li&gt;
&lt;li&gt;计算机硬件和程序员之间是如何约定的？&lt;/li&gt;
&lt;li&gt;听说操作系统也是程序。那到底是鸡生蛋还是蛋生鸡？&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;状态机复习&lt;/p&gt;
&lt;p&gt;数字逻辑电路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状态 = 寄存器保存的值（flip-flop）&lt;/li&gt;
&lt;li&gt;初始状态 = RESET (implementation dependent)&lt;/li&gt;
&lt;li&gt;迁移 = 组合逻辑电路计算寄存器下一周期的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;数字系统本身是状态机&lt;/p&gt;
&lt;p&gt;所有的程序都是运行在数字系统上的，&lt;strong&gt;程序也是状态机&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;调试理论与实践&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#调试理论与实践&#34;&gt;#&lt;/a&gt; 调试理论与实践&lt;/h1&gt;
&lt;h2 id=&#34;调试理论&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#调试理论&#34;&gt;#&lt;/a&gt; 调试理论&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;本讲内容&lt;/strong&gt;：调试理论：Fault, Error 和 Failure；GDB 使用技巧。&lt;/p&gt;
&lt;p&gt;“软件” 的两层含义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人类需求在信息世界的投影
&lt;ul&gt;
&lt;li&gt;理解错需求 → bug&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计算过程的精确 (数学) 描述
&lt;ul&gt;
&lt;li&gt;实现错误 → bug&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调试 (debugging)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;已知程序有 bug，如何找到？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;调试困难的根本原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为 bug 的触发经历了漫长的过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求 → 设计 → 代码 (状态机) → Fault (bug) → Error (程序状态错) → Failure
&lt;ul&gt;
&lt;li&gt;我们只能观测到 failure (可观测的结果错)&lt;/li&gt;
&lt;li&gt;我们可以检查状态的正确性 (但非常费时)&lt;/li&gt;
&lt;li&gt;无法预知 bug 在哪里 (每一行 “看起来” 都挺对的)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;调试理论：如果我们能判定任意程序状态的正确性，那么给定一个 failure，我们可以通过二分查找定位到第一个 error 的状态，此时的代码就是 fault (bug)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;调试理论：推论&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为什么我们喜欢 “单步调试”？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从一个假定正确的状态出发&lt;/li&gt;
&lt;li&gt;每个语句的行为有限，容易判定是否是 error&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么调试理论看起来很没用？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;因为判定程序状态的正确性非常困难&lt;/p&gt;
&lt;p&gt;(是否在调试 DP 题 / 图论算法时陷入时间黑洞？)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际中的调试：观察状态机执行 (trace) 的某个侧面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缩小错误状态 (error) 可能产生的位置&lt;/li&gt;
&lt;li&gt;作出适当的假设&lt;/li&gt;
&lt;li&gt;再进行细粒度的定位和诊断&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;最重要的两个工具&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;printf → 自定义 log 的 trace
&lt;ul&gt;
&lt;li&gt;灵活可控、能快速定位问题大概位置、适用于大型软件&lt;/li&gt;
&lt;li&gt;无法精确定位、大量的 logs 管理起来比较麻烦&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gdb → 指令 / 语句级 trace
&lt;ul&gt;
&lt;li&gt;精确、指令级定位、任意查看程序内部状态&lt;/li&gt;
&lt;li&gt;耗费大量时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调试理论给了大家在遇到 “任何问题” 时候 self-check 的列表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是怎样的程序 (状态机) 在运行？&lt;/li&gt;
&lt;li&gt;我们遇到了怎样的 failure？&lt;/li&gt;
&lt;li&gt;我们能从状态机的运行中从易到难得到什么信息？&lt;/li&gt;
&lt;li&gt;如何二分检查这些信息和 error 之间的关联？&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;编程基本准则回顾&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编程基本准则回顾&#34;&gt;#&lt;/a&gt; 编程基本准则：回顾&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Programs are meant to be read by humans (AIs) and only incidentally for computers to execute. — &lt;em&gt;D. E. Knuth&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(程序首先是拿给人读的，其次才是被机器执行。)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好的程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不言自明：能知道是做什么的 (specification)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因此代码风格很重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不言自证：能确认代码和 specification 一致&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因此代码中的逻辑流很重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人类新纪元的评判标准&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AI 是否能正确理解 / 维护你的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;调试理论的最重要应用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#调试理论的最重要应用&#34;&gt;#&lt;/a&gt; 调试理论的最重要应用&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;写好读、易验证的代码&lt;/p&gt;
&lt;p&gt;在代码中添加更多的断言 (assertions)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;断言的意义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把代码中隐藏的 specification 写出来
&lt;ul&gt;
&lt;li&gt;Fault → Error (靠测试)&lt;/li&gt;
&lt;li&gt;Error → Failure (靠断言)
&lt;ul&gt;
&lt;li&gt;Error 暴露的越晚，越难调试&lt;/li&gt;
&lt;li&gt;追溯导致 assert failure 的变量值 (slice) 通常可以快速定位到 bug&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;gdb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gdb&#34;&gt;#&lt;/a&gt; GDB&lt;/h2&gt;
&lt;h1 id=&#34;python-建模操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#python-建模操作系统&#34;&gt;#&lt;/a&gt; Python 建模操作系统&lt;/h1&gt;
&lt;h1 id=&#34;并发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并发&#34;&gt;#&lt;/a&gt; = 并发 =&lt;/h1&gt;
&lt;h1 id=&#34;多处理器编程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多处理器编程&#34;&gt;#&lt;/a&gt; 多处理器编程&lt;/h1&gt;
&lt;h2 id=&#34;并发-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并发-2&#34;&gt;#&lt;/a&gt; 并发&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Concurrent: existing, happening, or done &lt;em&gt;at the same time&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In computer science, concurrency refers to the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, without affecting the final outcome. (Wikipedia)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;操作系统作为 “状态机的管理者”，引入了共享的状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带来了并发&lt;/li&gt;
&lt;li&gt;(操作系统是最早的并发程序)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Tprint&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sys_write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#39;&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; name &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;AB&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        sys_spawn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Tprint&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;使用 model checker 绘制状态图&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;多线程共享内存并发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;线程：共享内存的执行流&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行流拥有独立的堆栈 / 寄存器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简化的线程 API (thread.h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spawn(fn)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;创建一个入口函数是 &lt;code&gt;fn&lt;/code&gt;  的线程，并立即开始执行
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;void fn(int tid) &amp;#123; ... &amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;参数  &lt;code&gt;tid&lt;/code&gt;  从 1 开始编号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;行为： &lt;code&gt;sys_spawn(fn, tid)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;等待所有运行线程的返回 (也可以不调用)&lt;/li&gt;
&lt;li&gt;行为： &lt;code&gt;while (done != T) sys_sched()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多处理器编程：一个 API 搞定&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;thread.h&#34;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Ta&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Tb&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;b&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Ta&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Tb&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;这个程序可以利用系统中的多处理器
&lt;ul&gt;
&lt;li&gt;操作系统会自动把线程放置在不同的处理器上&lt;/li&gt;
&lt;li&gt;CPU 使用率超过了 100%&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原子性互斥&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原子性互斥&#34;&gt;#&lt;/a&gt; 原子性 (互斥)&lt;/h2&gt;
&lt;h2 id=&#34;执行顺序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#执行顺序&#34;&gt;#&lt;/a&gt; 执行顺序&lt;/h2&gt;
&lt;h2 id=&#34;处理器间的可见性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#处理器间的可见性&#34;&gt;#&lt;/a&gt; 处理器间的可见性&lt;/h2&gt;
&lt;h1 id=&#34;并发控制基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并发控制基础&#34;&gt;#&lt;/a&gt; 并发控制基础&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;背景回顾&lt;/strong&gt;：虽然 “线程库” 入门简单，但多处理器编程 + 编译优化会给我们带来很多意想不到的惊喜。在编写多线程程序时，必须放弃许多对顺序程序编程时的基本假设，这也是并发编程困难的原因。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本讲内容&lt;/strong&gt;：并发编程困难不代表我们只能摆烂 —— 我们还可以创造出新的手段，帮助我们编写正确的并发程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互斥问题和 Peterson 算法&lt;/li&gt;
&lt;li&gt;Peterson 算法的正确性和模型检验&lt;/li&gt;
&lt;li&gt;Peterson 算法在现代多处理器系统上的实现&lt;/li&gt;
&lt;li&gt;实现并发控制的硬件和编译器机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;peterson算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#peterson算法&#34;&gt;#&lt;/a&gt; Peterson 算法&lt;/h2&gt;
&lt;p&gt;在共享内容上实现互斥&lt;/p&gt;
&lt;h2 id=&#34;模型验证model-checker&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#模型验证model-checker&#34;&gt;#&lt;/a&gt; 模型验证 (model checker)&lt;/h2&gt;
&lt;h2 id=&#34;原子指令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原子指令&#34;&gt;#&lt;/a&gt; 原子指令&lt;/h2&gt;
&lt;p&gt;并发编程困难的解决：普通的变量读写在编译器 + 处理器的双重优化下行为变得复杂&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;retry&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;locked &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; UNLOCK&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;goto&lt;/span&gt; retry&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  locked &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; LOCK&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;解决方法：编译器和硬件共同提供不可优化、不可打断的指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“原子指令” + compiler barrier&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;并发控制互斥&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并发控制互斥&#34;&gt;#&lt;/a&gt; 并发控制：互斥&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;背景回顾&lt;/strong&gt;：互斥 (Peterson 算法)：为了掌控并发程序的复杂行为，使程序退回到 “串行执行” 的 lock &amp;amp; unlock。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本讲内容&lt;/strong&gt;：现代多处理器系统上的互斥实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互斥问题的定义和假设&lt;/li&gt;
&lt;li&gt;自旋锁&lt;/li&gt;
&lt;li&gt;互斥锁和 Futex&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;review：并发编程（理解并发的工具）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程 = 人 (大脑能完成局部存储和计算)&lt;/li&gt;
&lt;li&gt;共享内存 = 物理世界 (物理世界天生并行)&lt;/li&gt;
&lt;li&gt;一切都是状态机 (debugger &amp;amp; model checker)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;互斥问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#互斥问题&#34;&gt;#&lt;/a&gt; 互斥问题&lt;/h2&gt;
&lt;p&gt;互斥 (mutual exclusion)，“互相排斥”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;实现  &lt;code&gt;lock_t&lt;/code&gt;  数据结构和  &lt;code&gt;lock/unlock&lt;/code&gt;  API:&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;lock_t&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;lock_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;lk&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;lock_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;lk&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;一把 “排他性” 的锁 —— 对于锁对象  &lt;code&gt;lk&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果某个线程持有锁，则其他线程的  &lt;code&gt;lock&lt;/code&gt;  不能返回 (Safety)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在多个线程执行  &lt;code&gt;lock&lt;/code&gt;  时，至少有一个可以返回 (Liveness)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能&lt;strong&gt;正确处理处理器乱序、宽松内存模型和编译优化&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;并发控制同步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并发控制同步&#34;&gt;#&lt;/a&gt; 并发控制：同步&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;背景回顾&lt;/strong&gt;：我们已经了解如何通过 “不可优化、保证顺序” 的原子指令实现自旋锁，以及借助操作系统 (系统调用) 实现线程的睡眠，从而不致于出现 CPU 空转的浪费。然而，互斥并不总是能满足多个并发线程协作完成任务的需求，例如大家试着在完成 Minilab 时应该已经遇到了一些困难。如何能便捷地让共享内存的线程协作以共同完成计算任务？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本讲内容&lt;/strong&gt;：并发控制：同步&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步问题的定义&lt;/li&gt;
&lt;li&gt;生产者 - 消费者问题&lt;/li&gt;
&lt;li&gt;条件变量&lt;/li&gt;
&lt;li&gt;信号量&lt;/li&gt;
&lt;li&gt;信号量适合解决什么问题&lt;/li&gt;
&lt;li&gt;哲学家吃饭问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;同步问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#同步问题&#34;&gt;#&lt;/a&gt; 同步问题&lt;/h2&gt;
&lt;p&gt;同步 (Synchronization)：两个或两个以上随时间变化的量在变化过程中保持一定的相对关系。&lt;/p&gt;
&lt;h1 id=&#34;真实世界的并发编程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#真实世界的并发编程&#34;&gt;#&lt;/a&gt; 真实世界的并发编程&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;背景回顾&lt;/strong&gt;：我们已经掌握了多种并发控制技术：自旋锁、互斥锁、条件变量、信号量。我们已经可以实现共享内存系统上的任意并发 / 并行计算。然而，大家也在使用这些 “底层” 并发控制时发现使用的困难。那么，真实世界的程序员是怎么实现并发程序的？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本讲内容&lt;/strong&gt;：(本节为科普) 并发编程模型与底层同步机制的封装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高性能计算中的并行编程 (embarrassingly parallel 的数值计算)&lt;/li&gt;
&lt;li&gt;数据中心中的并发编程 (协程、Goroutine 和 channel)&lt;/li&gt;
&lt;li&gt;人工智能时代的分布式机器学习 (GPU 和 Parameter Server)&lt;/li&gt;
&lt;li&gt;用户身边的并发编程 (Web 和异步编程)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;并发-bugs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并发-bugs&#34;&gt;#&lt;/a&gt; 并发 Bugs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;常见的并发 bugs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;死锁&lt;/li&gt;
&lt;li&gt;数据竞争&lt;/li&gt;
&lt;li&gt;原子性和顺序违反&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;并发-bug-的应对&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并发-bug-的应对&#34;&gt;#&lt;/a&gt; 并发 Bug 的应对&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;背景回顾&lt;/strong&gt;：我们在编写并发程序时，难免会遇到死锁、数据竞争、原子性 / 顺序违反等类型的并发 bugs。即便我们知道它们的定义和触发条件，直接在编程时消灭它们依然是十分困难的。以数据竞争为例，它的定义貌似简单：两个线程同时访问同一内存地址，并且至少有一个是写。但 “访问内存” 则可能出其不意 —— 例如 ret 指令和栈上数据的修改产生的数据竞争。那么，我们应该如何应对这些并发 bugs？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本讲内容&lt;/strong&gt;：&lt;strong&gt;一节真正的 “编程” 课&lt;/strong&gt;：如何正确地 (并发) 编程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lock ordering&lt;/li&gt;
&lt;li&gt;防御性编程&lt;/li&gt;
&lt;li&gt;运行时检查&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;多处理器系统与中断机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多处理器系统与中断机制&#34;&gt;#&lt;/a&gt; 多处理器系统与中断机制&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;背景回顾&lt;/strong&gt;：我们已经了解并发编程实践需要的几乎全部内容 —— 线程、内存模型、互斥、同步和并发 bugs 的应对。但我们一直是在简化的线程模型 (thread.h) 上讲解的。但我们还没有回答一个关键问题：线程到底在计算机硬件上是如何实现的？即便系统中只有一个处理器，我们依然可以创建很多并发执行的线程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本讲内容&lt;/strong&gt;：操作系统内核实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多处理器和中断&lt;/li&gt;
&lt;li&gt;AbstractMachine API&lt;/li&gt;
&lt;li&gt;50 行实现嵌入式操作系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;虚拟化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#虚拟化&#34;&gt;#&lt;/a&gt; = 虚拟化 =&lt;/h1&gt;
&lt;h1 id=&#34;操作系统上的进程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作系统上的进程&#34;&gt;#&lt;/a&gt; 操作系统上的进程&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;背景回顾&lt;/strong&gt;：有关状态机、并发和中断的讨论给我们真正理解操作系统奠定了基础，现在我们正式进入操作系统和应用程序的 “边界” 了。让我们把视角回到单线程应用程序，即 “执行计算指令和系统调用指令的状态机”，开始对操作系统和进程的讨论。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本讲内容&lt;/strong&gt;：操作系统上的进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程、进程和操作系统&lt;/li&gt;
&lt;li&gt;UNIX/Linux 进程管理 API&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程process线程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程process线程&#34;&gt;#&lt;/a&gt; 进程（Process）&amp;amp; 线程（）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;进程映像（静态）由程序段，数据段和进程控制块 (PCB) 组成&lt;/p&gt;
&lt;p&gt;进程（动态）是具有独立功能的程序在一个数据集合上运行的过程&lt;/p&gt;
&lt;p&gt;进程是系统进行资源分配基本单位，线程是处理机分配的基本单元。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;进程状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行态&lt;/li&gt;
&lt;li&gt;就绪态&lt;/li&gt;
&lt;li&gt;阻塞态&lt;/li&gt;
&lt;li&gt;创建态&lt;/li&gt;
&lt;li&gt;结束态&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;线程即 “轻量型进程”，他是一个基本的 CPU 执行单元，是程序执行流的最小单元。&lt;/p&gt;
&lt;p&gt;线程由线程 ID、程序计数器、寄存器集合和堆栈组成。&lt;/p&gt;
&lt;p&gt;线程自己不拥有资源，和同一进程的其他线程共享进程的所有资源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;引入进程的目的是更好地使多道程序并发执行，提高资源利用率和系统吞吐量；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;引入线程的目的是减小程序在并发执行时所付出的时空开销，提高操作系统的并发性能。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;linux-操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux-操作系统&#34;&gt;#&lt;/a&gt; Linux 操作系统&lt;/h1&gt;
&lt;h1 id=&#34;进程的地址空间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程的地址空间&#34;&gt;#&lt;/a&gt; 进程的地址空间&lt;/h1&gt;
&lt;h1 id=&#34;系统调用和-unix-shell&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#系统调用和-unix-shell&#34;&gt;#&lt;/a&gt; 系统调用和 UNIX Shell&lt;/h1&gt;
&lt;h1 id=&#34;c-标准库的实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c-标准库的实现&#34;&gt;#&lt;/a&gt; C 标准库的实现&lt;/h1&gt;
&lt;h1 id=&#34;可执行文件的加载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可执行文件的加载&#34;&gt;#&lt;/a&gt; 可执行文件的加载&lt;/h1&gt;
&lt;h1 id=&#34;处理器调度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#处理器调度&#34;&gt;#&lt;/a&gt; 处理器调度&lt;/h1&gt;
&lt;h1 id=&#34;进程-线程与系统调用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程-线程与系统调用&#34;&gt;#&lt;/a&gt; 进程、线程与系统调用&lt;/h1&gt;
&lt;h1 id=&#34;持久化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#持久化&#34;&gt;#&lt;/a&gt; = 持久化 =&lt;/h1&gt;
&lt;h1 id=&#34;存储设备原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#存储设备原理&#34;&gt;#&lt;/a&gt; 存储设备原理&lt;/h1&gt;
&lt;h1 id=&#34;输入输出设备&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#输入输出设备&#34;&gt;#&lt;/a&gt; 输入输出设备&lt;/h1&gt;
&lt;h1 id=&#34;设备驱动程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#设备驱动程序&#34;&gt;#&lt;/a&gt; 设备驱动程序&lt;/h1&gt;
&lt;h1 id=&#34;文件系统-api&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件系统-api&#34;&gt;#&lt;/a&gt; 文件系统 API&lt;/h1&gt;
&lt;h1 id=&#34;fat-和-unix-文件系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fat-和-unix-文件系统&#34;&gt;#&lt;/a&gt; FAT 和 UNIX 文件系统&lt;/h1&gt;
&lt;h1 id=&#34;持久数据的可靠性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#持久数据的可靠性&#34;&gt;#&lt;/a&gt; 持久数据的可靠性&lt;/h1&gt;
 ]]></description>
        </item>
    </channel>
</rss>
