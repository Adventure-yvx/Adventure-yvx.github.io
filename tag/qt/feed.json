{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"qt\" tag",
    "description": "",
    "home_page_url": "https://adventure-yx.github.io",
    "items": [
        {
            "id": "https://adventure-yx.github.io/2023/03/26/QML&QtQuick/",
            "url": "https://adventure-yx.github.io/2023/03/26/QML&QtQuick/",
            "title": "QML & Qt Quick",
            "date_published": "2023-03-26T02:12:08.000Z",
            "content_html": "<h1 id=\"qml-基础\"><a class=\"markdownIt-Anchor\" href=\"#qml-基础\">#</a> QML 基础</h1>\n<p>QML（Qt Meta Language，Qt 元语言）是一个用来描述应用程序界面的<strong>声明式</strong>脚本语言。QML 具有良好的易读性，它以可视化组件及其交互和相互关联的方式来描述界面，使组件能在动态行为中互相连接，并支持在一个用户界面上很方便的复用和定制组件。</p>\n<p>Qt Quick 是 Qt 为 QML 提供的一套标准类库，由 QML 标准类型和功能组成，包括可视化类型、交互类型、动画类型、模型和视图、粒子系统和渲染效果等，编程时只需要一条 import 语句，就能访问所有这些功能。使用 Qt Quick，能够很容易地用 QML 构建出高品质、流畅的 UI 界面，从而开发出具有视觉吸引力的应用程序。</p>\n<h2 id=\"基本语法\"><a class=\"markdownIt-Anchor\" href=\"#基本语法\">#</a> 基本语法</h2>\n<ul>\n<li><code>import</code>  语句导入一个模块。Qt6 可以不写版本号，自动加载最高版本模块。</li>\n<li>每个 QML 文件都需要有一个唯一的根元素（像 HTML 一样</li>\n<li>元素声明形式： <code>type&#123;  &#125;</code></li>\n<li>元素属性： <code>name:value</code></li>\n<li>QML 文档中的任意元素可以通过使用其 id 进行访问</li>\n<li>元素可以嵌套，父元素可以有子元素。子元素可以使用 parent 关键字访问父元素。</li>\n</ul>\n",
            "tags": [
                "C++",
                "Qt",
                "QML"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/03/12/QtStudy/",
            "url": "https://adventure-yx.github.io/2023/03/12/QtStudy/",
            "title": "Qt Study",
            "date_published": "2023-03-12T15:12:16.000Z",
            "content_html": "<h1 id=\"qt-核心机制\"><a class=\"markdownIt-Anchor\" href=\"#qt-核心机制\">#</a> Qt 核心机制</h1>\n<h2 id=\"元对象系统\"><a class=\"markdownIt-Anchor\" href=\"#元对象系统\">#</a> 元对象系统</h2>\n<p>Qt 元对象系统提供了对象间的通信机制（信号和槽）、运行时类型信息和动态属性系统的支持，是标准 <code>C++</code>  的一个扩展，它使 Qt 能够更好的实现 GUI 用户图形界面编程。Qt 的元对象系统不支持 C++ 模板。</p>\n<p>Qt 元对象系统基于以下三个事实：</p>\n<ul>\n<li>基类 <code>QObject</code> ：任何需要使用元对象系统功能的类必须继承自 <code>QObject</code> 。 <code>QObject</code>  是 Qt 中最基本的类，是所有 Qt 对象的基类。</li>\n<li><code>Q_OBJECT</code>  宏： <code>Q_OBJECT</code>  宏必须出现在类的私有声明区，用于启动元对象的特性。</li>\n<li>元对象编译器（moc, Meta-Object Compiler）：为 <code>QObject</code>  子类实现元对象特性提供必要的代码实现。（将 Qt 对 C<ins> 的语法拓展编译还原为 ** 标准 C</ins> 代码 **）</li>\n</ul>\n<h2 id=\"对象树\"><a class=\"markdownIt-Anchor\" href=\"#对象树\">#</a> 对象树</h2>\n<p>什么是 Qt 对象：定义一个类，继承于  <code>QObject</code>  ，因此而产生的对象叫 Qt 对象</p>\n<ul>\n<li>对象通过对象树的形式组织。</li>\n<li>对象树主要用来内存回收，对象树之间不一定是继承关系</li>\n<li>Qt 对象间可以存在父子关系\n<ul>\n<li>每一个对象都保存有它所有子对象的指针</li>\n<li>每一个对象都有一个指向其父对象的指针</li>\n<li>可以使用 <code>findChild()</code>  或 <code>findChildren()</code>  查找对象的子对象。</li>\n</ul>\n</li>\n<li>当指定 Qt 对象的父对象时，该对象将自动将自己添加到父对象的 <code>children()</code>  列表中\n<ul>\n<li>其父对象会在<strong>子对象链表</strong>中加入该对象的指针</li>\n<li>该对象会保存指向其父对象的指针</li>\n</ul>\n</li>\n<li>当 Qt 对象被销毁时\n<ul>\n<li>将自己从父对象的 Children List 移除</li>\n<li>将自己的 Children List 中的所有对象销毁</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"信号和槽\"><a class=\"markdownIt-Anchor\" href=\"#信号和槽\">#</a> 信号和槽</h2>\n<ul>\n<li>\n<p>信号（signal）和槽（slot）是 Qt 自行定义的一种通信机制，实现对象之间的数据交互。</p>\n</li>\n<li>\n<p>当用户或系统触发了一个动作，导致某个控件的状态发生了改变，该控件就会发射一个信号，即调用其<strong>类中一个特定的成员函数（信号）</strong>，同时还能携带有必要的参数。</p>\n</li>\n<li>\n<p>槽函数与普通成员函数没有太多区别，差别在于其功能。槽函数更多体现为对某种特定信号的处理，可以将槽和其他对象信号建立连接，这样当发射信号时，槽函数能将被触发和执行，进而来完成机体功能。</p>\n</li>\n<li>\n<p>信号的定义</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">XX</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Q_OBJECT   <span class=\"token comment\">// 宏，moc 链接工具，元对象编译器，处理 QT 语法扩展，还原成标准 c++ 代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">signal_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 信号函数，只需声明，不能写定义。QT 语法扩展，普通 C++ 无法编译</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>槽的定义</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">XX</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">slot_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 槽函数可以连接到某个信号上，当信号被发射时，槽函数将被触发和执行。另外槽函数可以当作普通成员函数使用。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>信号和槽的链接</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QObject<span class=\"token operator\">*</span> sender<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 信号发送对象指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                 <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> signal<span class=\"token punctuation\">,</span> \t\t<span class=\"token comment\">// 要发送的的信号函数，可以使用 “SIGNAL (..)” 宏进行类型转换</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                 <span class=\"token keyword\">const</span> QObject<span class=\"token operator\">*</span> receiver<span class=\"token punctuation\">,</span> \t<span class=\"token comment\">// 信号的接收对象指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 要执行的槽函数，使用 “SLOT (..)” 宏进行类型转换</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t\t\t\t\t\t\t <span class=\"token comment\">// 信号函数连同参数类型转换为 const char*</span></pre></td></tr></table></figure></li>\n<li>\n<p>实例：</p>\n<ul>\n<li>按钮点击时发送信号：clicked ()</li>\n<li>实现标签关闭功能：close ()</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    QApplication <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    MainWindow w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    w<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">640</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 创建标签控件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    QLabel <span class=\"token function\">label</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是标签\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    label<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 创建按钮空间，栈创建，系统自动销毁</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    QPushButton <span class=\"token function\">btn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是按钮\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    btn<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    QPushButton <span class=\"token function\">btn2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"退出\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    btn2<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    w<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 点击按钮关闭标签</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>btn<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">clicked</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>label<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 增加退出按钮，实现退出应用程序</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>btn2<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">clicked</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                     <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    \t\t\t  <span class=\"token comment\">//&amp;a, SLOT(closeAllWindows())</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    \t\t\t  <span class=\"token comment\">//&amp;w, SLOT(close())</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>信号和槽连接的语法要求与应用</p>\n<ul>\n<li>\n<p>信号和槽参数要一致</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//error</span></pre></td></tr></table></figure></li>\n<li>\n<p>可以带有缺省参数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>信号函数参数可以多于槽函数，多于参数将被忽略</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>信号和槽函数（一对多）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B1<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B2<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>信号和槽函数（多对一）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A1<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A2<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>两个信号直接连接，信号级联</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A1<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> A2<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>实例：创建滑块（QSlider）和选值框（QSpinBox），通过信号和槽的机制，保持同步运行</p>\n<ul>\n<li>QSlider\n<ul>\n<li><code>void setRange(int min, int max);//设置滑动范围</code></li>\n<li><code>void setValue(int)[slot];//设置当前位置</code></li>\n<li><code>void valueChange(int value)[signal];//滑动时发送信号</code></li>\n</ul>\n</li>\n<li>QSpinBox\n<ul>\n<li><code>void setRange(int min, int max);//设置数值改变范围</code></li>\n<li><code>void setValue(int)[slot];//设置当前数值</code></li>\n<li><code>void valueChange(int value)[signal];//选值框数值改变时发送信号</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>QDialog parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    parent<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 创建水平滑块</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    QSlider <span class=\"token function\">slider</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>Horizontal<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    slider<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    slider<span class=\"token punctuation\">.</span><span class=\"token function\">setRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 创建选值框</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    QSpinBox <span class=\"token function\">spin</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    spin<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">220</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    spin<span class=\"token punctuation\">.</span><span class=\"token function\">setRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 滑块滑动让选值框数值改变</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>slider<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">valueChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                     <span class=\"token operator\">&amp;</span>spin<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 选值框数值改变让滑块随之滑动</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>spin<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">valueChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                     <span class=\"token operator\">&amp;</span>slider<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    parent<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>案例：获取系统时间</p>\n</li>\n<li>\n<p>案例：实现计算器</p>\n</li>\n<li>\n<p>通过 Qt designer 重构计算器案例</p>\n<ul>\n<li>\n<p>使用转换器 (uic)，将 calculatordialog.ui (xml) 转换为 ui_calcculatordialog.h (c++)</p>\n<p><code>uic calculatordialog.ui -o ui_calcculatordialog.h</code></p>\n<p>(不手动转换，makefile 中也会进行转化)</p>\n</li>\n<li>\n<p>使用 ui_calculatordialog.h 里面已经自动生成的界面相关代码，完成代码编写</p>\n<ol>\n<li>通过继承方式，将界面代码继承过来直接使用</li>\n<li>通过组合方式，添加一个界面类的成员变量 (ui)，再通过该成员访问界面相关的代码，实际开发中，推荐使用这种方法。</li>\n</ol>\n</li>\n<li>\n<p>构建、测试</p>\n</li>\n</ul>\n</li>\n<li>\n<p>案例：登录对话框</p>\n</li>\n</ul>\n<h2 id=\"qobject基类\"><a class=\"markdownIt-Anchor\" href=\"#qobject基类\">#</a> QObject 基类</h2>\n<h2 id=\"qt中使用到的设计模式\"><a class=\"markdownIt-Anchor\" href=\"#qt中使用到的设计模式\">#</a> Qt 中使用到的设计模式</h2>\n<ol>\n<li>\n<p>单例模式</p>\n<p>qApp 宏返回指向 QApplication 的单例</p>\n<p>特点：单例模式确保一个类只有一个实例，并提供全局访问点。这样可以避免在系统中出现多个相同的对象，从而提高系统的性能和可维护性。</p>\n<p>应用场景：单例模式常用于需要全局访问的对象，比如说日志记录器、数据库连接池等。</p>\n<p>说明：常见用法是把类的构造函数设为私有，然后提供一个类的静态函数来获取单例对象</p>\n<p>如下代码，通过宏 aApp 返回 instance。可以看到，类 QCoreApplication 的构造函数是 private。</p>\n<p>时间和空间：懒汉式是典型的时间换出空间。饿汉式是典型的空间换时间。<br>\n线程安全：不加同步的懒汉式的线程不安全的。饿汉式是线程安全的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">qApp</span> <span class=\"token expression\"><span class=\"token class-name\">QCoreApplication</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Q_CORE_EXPORT</span> QCoreApplication</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">QT_NO_QOBJECT</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QObject</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">QT_NO_QOBJECT</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Q_PROPERTY</span><span class=\"token punctuation\">(</span>QString applicationName READ applicationName WRITE setApplicationName NOTIFY applicationNameChanged<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">Q_PROPERTY</span><span class=\"token punctuation\">(</span>QString applicationVersion READ applicationVersion WRITE setApplicationVersion NOTIFY applicationVersionChanged<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">Q_PROPERTY</span><span class=\"token punctuation\">(</span>QString organizationName READ organizationName WRITE setOrganizationName NOTIFY organizationNameChanged<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Q_PROPERTY</span><span class=\"token punctuation\">(</span>QString organizationDomain READ organizationDomain WRITE setOrganizationDomain NOTIFY organizationDomainC</pre></td></tr></table></figure></li>\n<li>\n<p>工厂模式</p>\n<ul>\n<li>创建一个新的类，可以将这个类称之为工厂类。对于简单工厂模式来说，需要的工厂类只有一个。</li>\n<li>在这个工厂类中添加一个公共的成员函数，通过这个函数来创建我们需要的对象，关于这个函数一般将其称之为工厂函数。</li>\n<li>关于使用，首先创建一个工厂类对象，然后通过这个对象调用工厂函数，这样就可以生产出一个指定类型的实例对象了。</li>\n</ul>\n</li>\n<li>\n<p>原型模式（Prototype Pattern）</p>\n<p>特点：原型模式通过复制现有的对象来创建新的对象。这样可以避免重复创建对象，从而提高系统的性能。</p>\n<p>应用场景：原型模式常用于创建复杂对象，尤其是当对象的创建过程很耗时、耗资源时。比如说，一个复杂的对象需要从数据库中读取数据并进行计算，这时可以使用原型模式来避免重复读取数据库，提高系统的性能。</p>\n<p>说明：一般用法就是在类里定义一个 clone 方法，用来创建新的对象</p>\n<p><strong>原型模式重点在于重载 operator = ()</strong>，实现拷贝构造实现快速生成一个当前类的副本目标<br>\n经常用在 class 拷贝，貌似好像没有怎么实现过，因为都是传 Class 地址。这个模式实现的可能就只有 Qt 中的 QString class 还有带有拷贝构造的容器类型</p>\n</li>\n<li>\n<p>反射模式</p>\n<p>反射就是指对象成员的自我说明。 Qt 元对象模式就是反射模式。QObject 拥有 QMetaObject、QMetaProperty 类就能实现反射模式。</p>\n</li>\n<li>\n<p>命令模式</p>\n<p>命令模式：把操作封装成具有公共执行接口的对象。这样就可以把操作放到一个队列中，可以实现取消已经执行的操作。 Qt 中 QUndoCommand、QRunnable、QAction 可以看成是命令模式。</p>\n<p>命令模式将一个请求封装成一个对象，从而可以对请求进行参数化、队列化、记录日志等操作。这样可以使得系统更加灵活、可扩展。</p>\n<p>应用场景：命令模式常用于需要将请求进行参数化、队列化、记录日志等操作的情况下。比如说，一个系统需要对多个操作进行记录，这时可以使用命令模式来记录每个操作。</p>\n<p>说明：命令模式实现了请求发送者和接收者之间的解耦，请求发送者把操作所需的信息封装成一个对象发给接收者，接收者不需要知道它具体怎么操作，只需要调用某个固定的方法就可以完成请求。</p>\n</li>\n<li>\n<p>观察者模式</p>\n<p>观察者模式（又被称为发布 - 订阅（Publish/Subscribe）模式，属于行为型模式的一种，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。 Qt 中事件循环、信号和槽、视图模型都可以视为观察者模式。其实事件循环是真正的观察者模式，信号和槽由事件实现、视图模型由信号和槽实现。</p>\n</li>\n<li>\n<p>组合模式</p>\n<p>Qt 中由 QObject 实现的父子类就是组合模式。</p>\n<p>特点：组合模式将对象组合成树形结构，并以统一的方式处理这些对象。这样可以使得系统更加灵活、可扩展。</p>\n<p>应用场景：组合模式常用于处理复杂的层次结构，比如说文件系统、GUI 界面等。在这些系统中，通常需要对不同的对象进行统一处理，比如遍历、增加、删除等，这时可以使用组合模式来处理这些对象。</p>\n<p>说明：Qt 中的 QWidget 就用到了组合模式，每一个控件都由 QWidget 或其派生类派生，它们之间存在着树状的层级关系，并且都有一些共有的方法，比如 QPaintEvent，setParent，move，resize 等。</p>\n</li>\n</ol>\n<h1 id=\"qt-模板库-工具类及控件\"><a class=\"markdownIt-Anchor\" href=\"#qt-模板库-工具类及控件\">#</a> Qt 模板库、工具类及控件</h1>\n<h1 id=\"qt-窗口\"><a class=\"markdownIt-Anchor\" href=\"#qt-窗口\">#</a> Qt 窗口</h1>\n<ul>\n<li>\n<p>创建控件时，可以指定停靠在某个父窗口上面，这时控件将作为子窗口被束缚在其父窗口的内部，并伴随父窗口一起移动、隐藏、显示和关闭；否则该控件将作为独立窗口显示在屏幕上，且游离于其他窗口之外。</p>\n</li>\n<li>\n<p>QWidget 及其子类的对象可以作为其他控件的父窗口</p>\n</li>\n<li>\n<p>常用的父窗口类有如下三个：</p>\n<ul>\n<li>QWidget</li>\n<li>QMainWindow（主窗口）//QWidget 的直接子类</li>\n<li>QDialog（对话框）//QWidget 的直接子类</li>\n</ul>\n</li>\n<li>\n<p>父窗口的析构函数会自动销毁其所有的子窗口对象，因此即使子窗口对象是通过 new 操作符动态创建的，可以不显式的执行 delete 操作，而且不用担心内存泄漏的问题，只要保证父窗口对象被正确销毁，其子窗口也将随之被销毁。</p>\n</li>\n<li>\n<p>设置窗口的位置和大小</p>\n<ul>\n<li>void move(int x, int y);</li>\n<li>void resize(int w, int h);</li>\n</ul>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMainWindow></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QWidget></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QApplication></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QLabel></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDialog></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QPushButton></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    QApplication <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    MainWindow w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    w<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">640</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 创建标签控件</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    QLabel <span class=\"token function\">label</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是标签\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    label<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 创建按钮空间，栈创建，系统自动销毁</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    QPushButton <span class=\"token function\">btn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是按钮\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    btn<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    btn<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 堆创建，new 对象如果指定了父窗口指针，可以不写 delete，随父窗口销毁</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    QPushButton<span class=\"token operator\">*</span> btn2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QPushButton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我也是按钮\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    btn2<span class=\"token operator\">-></span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    btn2<span class=\"token operator\">-></span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    w<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li></li>\n</ul>\n<h1 id=\"qt-事件处理机制\"><a class=\"markdownIt-Anchor\" href=\"#qt-事件处理机制\">#</a> Qt 事件处理机制</h1>\n<h2 id=\"什么是事件\"><a class=\"markdownIt-Anchor\" href=\"#什么是事件\">#</a> 什么是事件</h2>\n<ul>\n<li>\n<p>在 Qt 中，是以事件驱动 UI 工具集，包括信号和槽都依赖于 Qt 的事件处理机制。</p>\n</li>\n<li>\n<p>通常事件是由窗口系统或者 Qt 自身产生的，用以响应所发生的各类事情，比如用户按下并释放了键盘或者鼠标、窗口因缩放而需要重绘、定时器到期而应有的动作。</p>\n</li>\n<li>\n<p>事件比信号更原始，一个下压式按钮，首先感受到的是鼠标事件，在进行必要的处理以产生按钮下沉继而弹起的视觉效果之后，才会发射 clicked () 信号</p>\n<p>按钮 -&gt; 事件 emit clicked ()-&gt; 信号 clicked ()-&gt; 槽 onClicked ()</p>\n</li>\n</ul>\n<h2 id=\"如何处理事件\"><a class=\"markdownIt-Anchor\" href=\"#如何处理事件\">#</a> 如何处理事件</h2>\n<ul>\n<li>\n<p>Qt 中，事件被封装成对象，所有的事件对象类型都继承自抽象类 QEvent</p>\n</li>\n<li>\n<p>当事件发生时，首先被调用的是 QObject 类中的虚函数 event ()，其参数 (QEvent) 标识了具体的事件类型。</p>\n</li>\n<li>\n<p>在 Qt 桌面应用（Qt Widgets Application）开发中，QWidget 类覆盖了其基类中的 event () 虚函数，并根据具体事件调用具体事件处理函数：</p>\n<ul>\n<li><code>void QWidget::mousePressEvent(QMouseEvent* e);//鼠标按下事件</code></li>\n<li><code>void QWidget::mouseReleaseEvent(QMouseEvent* e);//鼠标释放事件</code></li>\n<li><code>void QWidget::mouseMoveEvent(QMouseEvent* e);//鼠标移动事件</code></li>\n<li><code>void QWidget::paintEvent(QPaintEvent* e);//绘图事件</code></li>\n</ul>\n</li>\n<li>\n<p>所有的事件处理函数都是虚函数，可以被 QWidget 的子类覆盖，以提供针对不同窗口控件类型事件处理，控件的使用者所关心的往往是定义什么样的槽处理什么样的信号，而控件的实现者更关心覆盖哪些事件处理函数。</p>\n</li>\n<li>\n<p>如果程序员希望在窗口中自定义的处理时间，可以继承 QWidget 或者其子类，比如 QDialog、QMainWindow，在自定义的窗口子类中重写事件处理函数，当相应事件被触发时会利用多态的语法机制，所执行到的事件处理函数，将是子类中重写的版本，从而实现程序员想要的事件处理效果。</p>\n</li>\n</ul>\n<h2 id=\"绘图事件\"><a class=\"markdownIt-Anchor\" href=\"#绘图事件\">#</a> 绘图事件</h2>\n<ul>\n<li>通过绘图事件，可以实现自定义的图像绘制，当有下列情况之一发生时，将触发窗口的绘制事件，即 QWidget 类的 paintEvent () 虚函数会被调用：\n<ul>\n<li>窗口被创建以后第一次显示出来</li>\n<li>窗口由隐藏状态转变为可见状态</li>\n<li>窗口由最小化状态转变为正常或最大化状态</li>\n<li>窗口因尺寸大小的变化需要呈现更多的内容</li>\n<li>QWidget 类的 update ()/repaint () 成员函数被调用</li>\n</ul>\n</li>\n<li>如果希望在自己的窗口中显示某个图像，在 QWidget 的窗口子类中可以重写绘图事件函数 paintEvent，在其中可以用 QPainter（Qt 二位图形引擎）实现指定的图像绘制、渲染等操作。</li>\n<li>案例：基于资源的图片浏览器</li>\n</ul>\n<h2 id=\"定时器事件\"><a class=\"markdownIt-Anchor\" href=\"#定时器事件\">#</a> 定时器事件</h2>\n<ul>\n<li>Qt 通过两套机制为应用程序提供定时功能\n<ul>\n<li>定时器事件，由 QObject 提供</li>\n<li>定时器信号，由 QTimer 提供</li>\n</ul>\n</li>\n<li>通过定时器事件实现定时器\n<ul>\n<li><code> int QObjectL::startTimer(int interval);</code>  启动定时器，以后每隔 interval 毫秒触发一次定时器事件，返回定时器 ID</li>\n<li><code> void QObject::timerEvent(QTimerEvent* )[virtual];//定时器事件处理函数</code></li>\n<li><code> void QObject::killTimer(int id);//关闭参数id所标识的定时器</code></li>\n</ul>\n</li>\n<li>案例：基于定时器的摇奖机</li>\n</ul>\n<h2 id=\"鼠标和键盘事件\"><a class=\"markdownIt-Anchor\" href=\"#鼠标和键盘事件\">#</a> 鼠标和键盘事件</h2>\n<p>鼠标事件</p>\n<ul>\n<li>QWidget 类定义了以下虚函数提供对鼠标事件的处理，其参数 QMouseEvent 描述了鼠标事件的细节，如引发事件的鼠标按键、鼠标所在的位置等\n<ul>\n<li><code> virtual void mousePressEvent(QMouseEvent* e);//鼠标按下</code></li>\n<li><code> virtual void mouseReleaseEvent(QMouseEvent* e);//鼠标释放</code></li>\n<li><code> virtual void mouseDoubleClickEvent(QMouseEvent* e);//鼠标双击</code></li>\n<li><code> virtual void mouseMoveEvent(QMouseEvent* e);//鼠标移动</code></li>\n</ul>\n</li>\n<li>案例：鼠标测试，通过鼠标左键拖拽 label 方块移动</li>\n</ul>\n<p>键盘事件</p>\n<h1 id=\"qt-模型视图结构\"><a class=\"markdownIt-Anchor\" href=\"#qt-模型视图结构\">#</a> Qt 模型 / 视图结构</h1>\n<p>MVC 设计模式是起源于 Smalltalk 的一种与用户界面相关的设计模式。通过使用此模式，可以有效地分离数据和用户界面。</p>\n<p>MVC 设计模式包括三个元素：</p>\n<ul>\n<li>表示数据的模型（Model）</li>\n<li>表示用户界面的视图（View）</li>\n<li>定义了用户在界面上操作的控制器（Controller）</li>\n</ul>\n<p>Qt 中将视图和控制器部件结合在一起，使得框架更为简洁。为了灵活的处理用户输入，Qt 框架引入了代理（delegate）。通过使用代理，能够自定义数据条目（item）的显示和编辑方式。</p>\n<p>Qt 的模型 / 视图结构分为三部分</p>\n<ul>\n<li>\n<p><strong>模型（Model）</strong></p>\n<p>模型与数据源通信，并为其他部件提供接口；</p>\n</li>\n<li>\n<p><strong>视图（View）</strong></p>\n<p>视图从模型中获得用来引用数据条目的模型索引 (Model Index)。</p>\n</li>\n<li>\n<p><strong>代理（Delegate）</strong></p>\n<p>在视图中，代理负责绘制数据条目，当编辑条目时，代理和模型直接进行通信。</p>\n</li>\n</ul>\n<p>Model/View/Delegate 之间通过信号和槽进行通信，关系如下：</p>\n<ul>\n<li>数据发生改变时，模型发出信号通知视图。</li>\n<li>用户对界面进行操作，视图发出信号。</li>\n<li>代理发出信号告知模型和视图编辑器目前的状态。</li>\n</ul>\n<p><img data-src=\"image-20230405120120465.png\" alt=\"image-20230405120120465\"></p>\n<h1 id=\"qt-数据库\"><a class=\"markdownIt-Anchor\" href=\"#qt-数据库\">#</a> Qt 数据库</h1>\n<ul>\n<li>\n<p>数据库是指以一定方式存储在一起，能为多个用户共享，具有尽可能小的冗余特性，是与应用程序彼此独立的数据集合。</p>\n</li>\n<li>\n<p>商业数据库</p>\n<ul>\n<li>甲骨文 Oracle</li>\n<li>微软 Sqlserver</li>\n<li>IBM 的 DB2</li>\n</ul>\n</li>\n<li>\n<p>非商业数据库</p>\n<ul>\n<li>甲骨文 Mysql</li>\n<li>开源的 SQLite</li>\n</ul>\n</li>\n<li>\n<p>SQLite 是一个轻量级的开源数据库，源代码完全公开不受版权限制，实现了自给自足的、无服务器、零配置的 SQL 数据库引擎，也是最广泛使用的关系型数据库</p>\n</li>\n<li>\n<p>SQLite 引擎不是程序与之通信的独立进程，而是以静态库或共享库的方式连接到程序中，而不同于客户 - 服务器数据库连接方式，所以主要的使用方法是在编程语言内的直接 API 调用，当前主流编程语言都提供了 sqlite 操作的 API 接口</p>\n</li>\n<li>\n<p>SQLite 在资源消耗、实时性和可操作性有着出色的表现，整个数据库（定义、表、索引和数据本身）都在宿主主机上，存储在一个单一的文件中，通常 SQLite 的工作是在开始一个事物的时候，锁定整个数据文件而实现的。</p>\n</li>\n<li>\n<p>SQLite 主要特性</p>\n<ul>\n<li>无服务器的</li>\n<li>可以不用配置，安装和管理十分简单</li>\n<li>数据库存储在一个单一的跨平台的磁盘文件</li>\n<li>轻量级，完全配置时小于 400KiB，省略可选功能配置时小于 250KiB</li>\n<li>自给自足不需要外部依赖</li>\n<li>支持 SQL92 标准的大多数查询语言的功能</li>\n<li>事务兼容 ACID，允许从多个进程或线程安全访问</li>\n</ul>\n</li>\n<li>\n<p>sqlite3 常用命令</p>\n<ul>\n<li><code> .help</code></li>\n<li><code> .database  //查看数据库的名字和对应的文件名</code></li>\n<li><code> .open xxx.db</code></li>\n<li><code> .table    //查看数据表的名字</code></li>\n<li><code> .schema  //查看数据表创建时信息</code></li>\n<li><code> .mode   //设置显示模式，如tab/list/column/csv</code></li>\n<li><code> .nullvalue  //设置空白字段显示的字符串</code></li>\n<li><code> .header on  //显示数据表的表头</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"基于qt框架实现学生成绩管理系统\"><a class=\"markdownIt-Anchor\" href=\"#基于qt框架实现学生成绩管理系统\">#</a> 基于 Qt 框架实现学生成绩管理系统</h1>\n<h1 id=\"qt-网络编程\"><a class=\"markdownIt-Anchor\" href=\"#qt-网络编程\">#</a> Qt 网络编程</h1>\n<p><img data-src=\"https://subingwen.cn/linux/socket/ip%E5%9B%9B%E5%B1%82%E5%8D%8F%E8%AE%AE%E6%A8%A1%E5%9E%8B.png\" alt=\"img\"></p>\n<ul>\n<li>物理层：负责最后将信息编码成电流脉冲或其它信号用于网上传输</li>\n<li>数据链路层:<br>\n 数据链路层通过物理网络链路供数据传输。<br>\n规定了 0 和 1 的分包形式，确定了网络数据包的形式；</li>\n<li>网络层<br>\n网络层负责在源和终点之间建立连接；<br>\n此处需要确定计算机的位置，通过 IPv4，IPv6 格式的 IP 地址来找到对应的主机</li>\n<li>传输层<br>\n传输层向高层提供可靠的端到端的网络数据流服务。<br>\n每一个应用程序都会在网卡注册一个端口号，该层就是端口与端口的通信</li>\n<li>会话层<br>\n会话层建立、管理和终止表示层与实体之间的通信会话；<br>\n建立一个连接（自动的手机信息、自动的网络寻址）;</li>\n<li>表示层:<br>\n 对应用层数据编码和转化，确保以一个系统应用层发送的信息 可以被另一个系统应用层识别；</li>\n</ul>\n<p>TCP 通信流程</p>\n<p>TCP 是一个面向连接的，安全的，流式传输协议，这个协议是一个传输层协议。</p>\n<ul>\n<li>面向连接：是一个双向连接，通过三次握手完成，断开连接需要通过四次挥手完成。</li>\n<li>安全：tcp 通信过程中，会对发送的每一数据包都会进行校验，如果发现数据丢失，会自动重传</li>\n<li>流式传输：发送端和接收端处理数据的速度，数据的量都可以不一致</li>\n</ul>\n<p>服务器端通信流程</p>\n<ol>\n<li>\n<p>创建用于监听的套接字，这个套接字是一个文件描述符 (监听的)</p>\n<p><code>int lfd = socket();</code></p>\n</li>\n<li>\n<p>将得到的监听的文件描述符和本地的 IP 端口进行绑定</p>\n<p><code>bind();</code></p>\n</li>\n<li>\n<p>设置监听 (成功之后开始监听，监听的是客户端的连接)</p>\n<p><code>listen();</code></p>\n</li>\n<li>\n<p>等待并接受客户端的连接请求，建立新的连接，会得到一个新的文件描述符 (通信的)，没有新连接请求就阻塞</p>\n<p><code>int cfd = accept();</code></p>\n</li>\n<li>\n<p>通信，读写操作默认都是阻塞的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>断开连接，关闭套接字</p>\n<p><code>close();</code></p>\n</li>\n</ol>\n<blockquote>\n<p>在 tcp 的服务器端，有两类文件描述符</p>\n<p>监听的文件描述符<br>\n只需要有一个<br>\n不负责和客户端通信，负责检测客户端的连接请求，检测到之后调用 accept 就可以建立新的连接<br>\n通信的文件描述符<br>\n负责和建立连接的客户端通信<br>\n如果有 N 个客户端和服务器建立了新的连接，通信的文件描述符就有 N 个，每个客户端和服务器都对应一个通信的文件描述符</p>\n</blockquote>\n<p>客户端的通信流程</p>\n<p>在单线程的情况下客户端通信的文件描述符有一个，没有监听的文件描述符</p>\n<ol>\n<li>\n<p>创建一个通信的套接字</p>\n<p><code>int cfd = socket();</code></p>\n</li>\n<li>\n<p>连接服务器，需要知道服务器绑定的 IP 和端口</p>\n<p><code>connect();</code></p>\n</li>\n<li>\n<p>通信</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>断开连接，关闭文件描述符 (套接字)</p>\n<p><code>close();</code></p>\n</li>\n</ol>\n<h2 id=\"套接字\"><a class=\"markdownIt-Anchor\" href=\"#套接字\">#</a> 套接字</h2>\n<p>在标准 C++ 没有提供专门用于套接字通信的类，所以只能使用操作系统提供的基于 C 的 API 函数，基于这些 C 的 API 函数我们也可以封装自己的 C++ 类。</p>\n<p>但是 Qt 就不一样了，它是 C++ 的一个框架并且里边提供了用于套接字通信的类（TCP、UDP）这样就使得我们的操作变得更加简单了（当然，在 Qt 中使用标准 C 的 API 进行套接字通信也是完全没有问题的）。下面，给大家讲一下如果使用相关类的进行 TCP 通信。</p>\n<p>使用 Qt 提供的类进行基于 TCP 的套接字通信需要用到两个类：</p>\n<ul>\n<li>QTcpServer：服务器类，用于监听客户端连接以及和客户端建立连接。</li>\n<li>QTcpSocket：通信的套接字类，客户端、服务器端都需要使用。</li>\n</ul>\n<p>这两个套接字通信类都属于网络模块 network。</p>\n<h2 id=\"qtcpserve\"><a class=\"markdownIt-Anchor\" href=\"#qtcpserve\">#</a> QTcpServe</h2>\n<p>QTcpServer 类用于监听客户端连接以及和客户端建立连接，在使用之前先介绍一下这个类提供的一些常用 API 函数：</p>\n<ul>\n<li>\n<p>构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">QTcpServer</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> Q_NULLPTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>给监听的套接字设置监听</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QHostAddress <span class=\"token operator\">&amp;</span>address <span class=\"token operator\">=</span> QHostAddress<span class=\"token double-colon punctuation\">::</span>Any<span class=\"token punctuation\">,</span> quint16 port <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 判断当前对象是否在监听，是返回 true，没有监听返回 false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">isListening</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 如果当前对象正在监听返回监听的服务器地址信息，否则返回 QHostAddress::Null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>QHostAddress <span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">serverAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 如果服务器正在侦听连接，则返回服务器的端口；否则返回 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>quint16 <span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">serverPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr></table></figure><p>参数：</p>\n<ul>\n<li>address：通过类 QHostAddress 可以封装 IPv4、IPv6 格式的 IP 地址，QHostAddress::Any 表示自动绑定</li>\n<li>port：如果指定为 0 表示随机绑定一个可用端口。使用时要指定一个端口</li>\n</ul>\n<p>返回值：</p>\n<ul>\n<li>绑定成功返回 true，失败返回 false</li>\n</ul>\n</li>\n<li>\n<p>得到和客户端建立连接之后用于通信的 QTcpSocket 套接字对象，它是 QTcpServer 的一个子对象，当 QTcpServer 对象析构的时候会自动析构这个子对象，当然也可自己手动析构，建议用完之后自己手动析构这个通信的 QTcpSocket 对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>QTcpSocket <span class=\"token operator\">*</span><span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">nextPendingConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>阻塞等待客户端发起的连接请求，不推荐在单线程程序中使用，建议使用非阻塞方式处理新连接，即使用信号 newConnection () 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">waitForNewConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> msec <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token operator\">*</span>timedOut <span class=\"token operator\">=</span> Q_NULLPTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数：</p>\n<ul>\n<li>msec：指定阻塞的最大时长，单位为毫秒（ms）</li>\n<li>timeout：传出参数，如果操作超时 timeout 为 true，没有超时 timeout 为 false</li>\n</ul>\n</li>\n<li>\n<p>信号</p>\n<ul>\n<li>\n<p>当接受新连接导致错误时，将发射如下信号。socketError 参数描述了发生的错误相关的信息。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>signal<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">acceptError</span><span class=\"token punctuation\">(</span>QAbstractSocket<span class=\"token double-colon punctuation\">::</span>SocketError socketError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>每次有新连接可用时都会发出 newConnection () 信号。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>signal<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"qtcpsocket\"><a class=\"markdownIt-Anchor\" href=\"#qtcpsocket\">#</a> QTcpSocket</h2>\n<p>QTcpSocket 是一个套接字通信类，不管是客户端还是服务器端都需要使用。在 Qt 中发送和接收数据也属于 IO 操作（网络 IO），先来看一下这个类的继承关系：</p>\n<p><img data-src=\"https://subingwen.cn/qt/socket-tcp/image-20210512174459252.png\" alt=\"image-20210512174459252\"></p>\n<ul>\n<li>\n<p>构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QTcpSocket</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">QTcpSocket</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> Q_NULLPTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>连接服务器，需要指定服务器端绑定的 IP 和端口信息。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QAbstractSocket</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connectToHost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QString <span class=\"token operator\">&amp;</span>hostName<span class=\"token punctuation\">,</span> quint16 port<span class=\"token punctuation\">,</span> OpenMode openMode <span class=\"token operator\">=</span> ReadWrite<span class=\"token punctuation\">,</span> NetworkLayerProtocol protocol <span class=\"token operator\">=</span> AnyIPProtocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QAbstractSocket</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connectToHost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QHostAddress <span class=\"token operator\">&amp;</span>address<span class=\"token punctuation\">,</span> quint16 port<span class=\"token punctuation\">,</span> OpenMode openMode <span class=\"token operator\">=</span> ReadWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 Qt 中不管调用读操作函数接收数据，还是调用写函数发送数据，操作的对象都是本地的由 Qt 框架维护的一块内存。因此，调用了发送函数数据不一定会马上被发送到网络中，调用了接收函数也不是直接从网络中接收数据，关于底层的相关操作是不需要使用者来维护的。</p>\n</li>\n<li>\n<p>接收数据</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 指定可接收的最大字节数 maxSize 的数据到指针 data 指向的内存中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>qint64 <span class=\"token class-name\">QIODevice</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span> qint64 maxSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 指定可接收的最大字节数 maxSize，返回接收的字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>QByteArray <span class=\"token class-name\">QIODevice</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>qint64 maxSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 将当前可用操作数据全部读出，通过返回值返回读出的字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>QByteArray <span class=\"token class-name\">QIODevice</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>发送数据</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 发送指针 data 指向的内存中的 maxSize 个字节的数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>qint64 <span class=\"token class-name\">QIODevice</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span> qint64 maxSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 发送指针 data 指向的内存中的数据，字符串以 \\0 作为结束标记</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>qint64 <span class=\"token class-name\">QIODevice</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 发送参数指定的字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>qint64 <span class=\"token class-name\">QIODevice</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QByteArray <span class=\"token operator\">&amp;</span>byteArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"描述qt下tcp通信的整个流程\"><a class=\"markdownIt-Anchor\" href=\"#描述qt下tcp通信的整个流程\">#</a> 描述 Qt 下 Tcp 通信的整个流程</h2>\n<p>具体解释 ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy93d3cuY25ibG9ncy5jb20veXV3ZWlmZW5nL3AvOTM4Mjg0MS5odG1s\">https://www.cnblogs.com/yuweifeng/p/9382841.html</span></p>\n<p>QT 如果要进行<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3NlYXJjaD9xPSVFNyVCRCU5MSVFNyVCQiU5QyVFNyVCQyU5NiVFNyVBOCU4QiZhbXA7c2VhcmNoX3NvdXJjZT1FbnRpdHkmYW1wO2h5YnJpZF9zZWFyY2hfc291cmNlPUVudGl0eSZhbXA7aHlicmlkX3NlYXJjaF9leHRyYT0lN0IlMjJzb3VyY2VUeXBlJTIyJTNBJTIyYXJ0aWNsZSUyMiUyQyUyMnNvdXJjZUlkJTIyJTNBJTIyNjExNzM1MzMyJTIyJTdE\">网络编程</span>首先需要在.pro 中添加如下代码：QT += network</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3NlYXJjaD9xPSVFNiU5QyU4RCVFNSU4QSVBMSVFNSU5OSVBOCVFNyVBQiVBRiZhbXA7c2VhcmNoX3NvdXJjZT1FbnRpdHkmYW1wO2h5YnJpZF9zZWFyY2hfc291cmNlPUVudGl0eSZhbXA7aHlicmlkX3NlYXJjaF9leHRyYT0lN0IlMjJzb3VyY2VUeXBlJTIyJTNBJTIyYXJ0aWNsZSUyMiUyQyUyMnNvdXJjZUlkJTIyJTNBJTIyNjExNzM1MzMyJTIyJTdE\">服务器端</span>:<br>\n\\1. 创建用于监听的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3NlYXJjaD9xPSVFNSVBNSU5NyVFNiU4RSVBNSVFNSVBRCU5NyZhbXA7c2VhcmNoX3NvdXJjZT1FbnRpdHkmYW1wO2h5YnJpZF9zZWFyY2hfc291cmNlPUVudGl0eSZhbXA7aHlicmlkX3NlYXJjaF9leHRyYT0lN0IlMjJzb3VyY2VUeXBlJTIyJTNBJTIyYXJ0aWNsZSUyMiUyQyUyMnNvdXJjZUlkJTIyJTNBJTIyNjExNzM1MzMyJTIyJTdE\">套接字</span><br>\n \\2. 给套接字设置监听<br>\n \\3. 如果有连接到来，监听的套接字会发出信号 newConnected<br>\n\\4. 接收连接，通过 nextPendingConnection () 函数，返回一个 QTcpSocket 类型的套接字对象 (用于通信)<br>\n\\5. 使用用于通信的套接字对象通信<br>\n 1&gt;. 发送数据: write<br>\n2&gt;. 接收数据: readAll/read<br>\n 客户端:<br>\n\\1. 创建用于通信的套接字<br>\n \\2. 连接服务器: connectToHost<br>\n\\3. 连接成功与服务器通信<br>\n 1&gt;. 发送数据: write<br>\n2&gt;. 接收数据: readAll/read</p>\n<h2 id=\"描述qt下udp通信的整个流程\"><a class=\"markdownIt-Anchor\" href=\"#描述qt下udp通信的整个流程\">#</a> 描述 QT 下 udp 通信的整个流程</h2>\n<p>QT 下 udp 通信服务器端和客户端的关系是对等的，做的处理也是一样的.<br>\n\\1. 创建套接字对象<br>\n \\2. 如果需要接收数据，必须绑定端口<br>\n \\3. 发送数据: writeDatagram<br>\n\\4. 接收数据: readDatagram</p>\n<h1 id=\"qt-多线程\"><a class=\"markdownIt-Anchor\" href=\"#qt-多线程\">#</a> Qt 多线程</h1>\n<p>在进行桌面应用程序开发的时候， 假设应用程序在某些情况下需要处理比较复杂的逻辑， 如果只有一个线程去处理，就会导致窗口卡顿，无法处理用户的相关操作。这种情况下就需要使用多线程，其中<strong>一个线程处理窗口事件，其他线程进行逻辑运算，多个线程各司其职，不仅可以提高用户体验还可以提升程序的执行效率。</strong></p>\n<p>在 qt 中使用了多线程，有些事项是需要额外注意的：</p>\n<ul>\n<li>默认的线程在 Qt 中称之为窗口 (ui) 线程，也叫主线程，负责<strong>窗口事件处理</strong>或者<strong>窗口控件数据的更新</strong>。</li>\n<li>子线程负责<strong>后台的业务逻辑处理</strong>，子线程中不能对窗口对象做任何操作，这些事情需要交给窗口线程处理。</li>\n<li>主线程和子线程之间如果要进行数据的传递，需要使用 Qt 中的信号槽机制。</li>\n</ul>\n<h2 id=\"线程类qthread\"><a class=\"markdownIt-Anchor\" href=\"#线程类qthread\">#</a> 线程类 QThread</h2>\n<p>Qt 中提供了一个线程类，通过这个类就可以创建子线程了，Qt 中一共提供了两种创建子线程的方式，后边会依次介绍其使用方式。先来看一下这个类中提供的一些常用 API 函数：</p>\n<h3 id=\"常用公共成员函数\"><a class=\"markdownIt-Anchor\" href=\"#常用公共成员函数\">#</a> 常用公共成员函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// QThread 类常用 API</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">QThread</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> Q_NULLPTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 判断线程中的任务是不是处理完毕了</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">isFinished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 判断子线程是不是在执行任务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// Qt 中的线程可以设置优先级</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 得到当前线程的优先级</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Priority <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setPriority</span><span class=\"token punctuation\">(</span>Priority priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>优先级<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>IdlePriority         <span class=\"token operator\">--</span><span class=\"token operator\">></span> 最低的优先级</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>LowestPriority</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>LowPriority</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>NormalPriority</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>HighPriority</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>HighestPriority</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>TimeCriticalPriority <span class=\"token operator\">--</span><span class=\"token operator\">></span> 最高的优先级</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>InheritPriority      <span class=\"token operator\">--</span><span class=\"token operator\">></span> 子线程和其父线程的优先级相同<span class=\"token punctuation\">,</span> 默认是这个</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 退出线程，停止底层的事件循环</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 退出线程的工作函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> returnCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 调用线程退出函数之后，线程不会马上退出因为当前任务有可能还没有完成，调回用这个函数是</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 等待任务完成，然后退出线程，一般情况下会在 exit () 后边调用这个函数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> time <span class=\"token operator\">=</span> ULONG_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"信号槽\"><a class=\"markdownIt-Anchor\" href=\"#信号槽\">#</a> 信号槽</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 和调用 exit () 效果是一样的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 代用这个函数之后，再调用 wait () 函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>slot<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 启动子线程</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>slot<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>Priority priority <span class=\"token operator\">=</span> InheritPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 线程退出，可能是会马上终止线程，一般情况下不使用这个函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>slot<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">terminate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 线程中执行的任务完成了，发出该信号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 任务函数中的处理逻辑执行完毕了</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>signal<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">finished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 开始工作之前发出这个信号，一般不使用</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>signal<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">started</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"静态函数\"><a class=\"markdownIt-Anchor\" href=\"#静态函数\">#</a> 静态函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回一个指向管理当前执行线程的 QThread 的指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> QThread <span class=\"token operator\">*</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 返回可以在系统上运行的理想线程数 == 和当前电脑的 CPU 核心数相同</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">idealThreadCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 线程休眠函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">msleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> msecs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 单位：毫秒</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> secs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 单位：秒</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> usecs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 单位：微秒</span></pre></td></tr></table></figure><h3 id=\"任务处理函数\"><a class=\"markdownIt-Anchor\" href=\"#任务处理函数\">#</a> 任务处理函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 子线程要处理什么任务，需要写到 run () 中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">protected</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个 run () 是一个虚函数，如果想让创建的子线程执行某个任务，需要写一个子类让其继承 QThread，并且在子类中重写父类的 run () 方法，函数体就是对应的任务处理流程。另外，这个函数是一个受保护的成员函数，不能够在类的外部调用，如果想要让线程执行这个函数中的业务流程，需要通过当前线程对象调用槽函数 start () 启动子线程，当子线程被启动，这个 run () 函数也就在线程内部被调用了。</p>\n<h2 id=\"线程使用方式1\"><a class=\"markdownIt-Anchor\" href=\"#线程使用方式1\">#</a> 线程使用方式 1</h2>\n<ul>\n<li>\n<p>需要创建一个线程类的子类，让其继承 QT 中的线程类 QThread</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QThread</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>重写父类的 run () 方法，在该函数内部编写子线程要处理的具体的业务流程</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QThread</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在主线程中创建子线程对象，new 一个就可以了</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MyThread <span class=\"token operator\">*</span> subThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MyThread<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>启动子线程，调用 start () 方法</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>subThread<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>不能在类的外部调用 run () 方法启动子线程，在外部调用 start () 相当于让 run () 开始运行</p>\n</li>\n</ul>\n<p>当子线程别创建出来之后，父子线程之间的通信可以通过信号槽的方式，注意事项:</p>\n<ul>\n<li>在 Qt 中在子线程中不要操作程序中的窗口类型对象，不允许，如果操作了程序就挂了</li>\n<li>只有主线程才能操作程序中的窗口对象，默认的线程就是主线程，自己创建的就是子线程</li>\n</ul>\n<p>这种在程序中添加子线程的方式是非常简单的，但是也有弊端，假设要在一个子线程中处理多个任务，所有的处理逻辑都需要写到 run () 函数中，这样该函数中的处理逻辑就会变得非常混乱，不太容易维护。</p>\n<h2 id=\"线程使用方式2\"><a class=\"markdownIt-Anchor\" href=\"#线程使用方式2\">#</a> 线程使用方式 2</h2>\n<p>Qt 提供的第二种线程的创建方式弥补了第一种方式的缺点，用起来更加灵活，但是这种方式写起来会相对复杂一些，其具体操作步骤如下：</p>\n<ul>\n<li>\n<p>创建一个新的类，让这个类从 QObject 派生</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWork</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在这个类中添加一个公共的成员函数，函数体就是我们要子线程中执行的业务逻辑</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWork</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 函数名自己指定，叫什么都可以，参数可以根据实际需求添加</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">working</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在主线程中创建一个 QThread 对象，这就是子线程的对象</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>QThread<span class=\"token operator\">*</span> sub <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QThread<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在主线程中创建工作的类对象（千万不要指定给创建的对象指定父对象）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MyWork<span class=\"token operator\">*</span> work <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MyWork</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MyWork<span class=\"token operator\">*</span> work <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MyWork<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// ok</span></pre></td></tr></table></figure></li>\n<li>\n<p>将 MyWork 对象移动到创建的子线程对象中，需要调用 QObject 类提供的 moveToThread () 方法。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// void QObject::moveToThread(QThread *targetThread);</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 如果给 work 指定了父对象，这个函数调用就失败了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 提示： QObject::moveToThread: Cannot move objects with a parent</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>work<span class=\"token operator\">-></span><span class=\"token function\">moveToThread</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 移动到子线程中工作</span></pre></td></tr></table></figure></li>\n<li>\n<p>启动子线程，调用 start (), 这时候线程启动了，但是移动到线程中的对象并没有工作</p>\n</li>\n<li>\n<p>调用 MyWork 类对象的工作函数，让这个函数开始执行，这时候是在移动到的那个子线程中运行的</p>\n</li>\n</ul>\n<p>使用这种多线程方式，假设有多个不相关的业务流程需要被处理，那么就可以创建多个类似于 MyWork 的类，将业务流程放多类的公共成员函数中，然后将这个业务类的实例对象移动到对应的子线程中 moveToThread () 就可以了，这样可以让编写的程序更加灵活，可读性更强，更易于维护。</p>\n<h2 id=\"线程资源释放\"><a class=\"markdownIt-Anchor\" href=\"#线程资源释放\">#</a> 线程资源释放</h2>\n<h2 id=\"qt线程池\"><a class=\"markdownIt-Anchor\" href=\"#qt线程池\">#</a> Qt 线程池</h2>\n<h3 id=\"线程池的原理\"><a class=\"markdownIt-Anchor\" href=\"#线程池的原理\">#</a> 线程池的原理</h3>\n<p>我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题：如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p>\n<p>那么有没有一种办法使得线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务呢？</p>\n<p>线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。线程池线程都是后台线程。每个线程都使用默认的堆栈大小，以默认的优先级运行，并处于多线程单元中。如果某个线程在托管代码中空闲（如正在等待某个事件）, 则线程池将插入另一个辅助线程来使所有处理器保持繁忙。如果所有线程池线程都始终保持繁忙，但队列中包含挂起的工作，则线程池将在一段时间后创建另一个辅助线程但线程的数目永远不会超过最大值。超过最大值的线程可以排队，但他们要等到其他线程完成后才启动。</p>\n<p>在各个编程语言的语种中都有线程池的概念，并且很多语言中直接提供了线程池，作为程序猿直接使用就可以了，下面给大家介绍一下线程池的实现原理：</p>\n<p>线程池的组成主要分为 3 个部分，这三部分配合工作就可以得到一个完整的线程池：</p>\n<ul>\n<li>\n<p>任务队列，存储需要处理的任务，由工作的线程来处理这些任务</p>\n<ul>\n<li>通过线程池提供的 API 函数，将一个待处理的任务添加到任务队列，或者从任务队列中删除</li>\n<li>已处理的任务会被从任务队列中删除</li>\n<li>线程池的使用者，也就是调用线程池函数往任务队列中添加任务的线程就是生产者线程</li>\n</ul>\n</li>\n<li>\n<p>工作的线程（任务队列任务的消费者） ，N 个</p>\n<ul>\n<li>线程池中维护了一定数量的工作线程，他们的作用是是不停的读任务队列，从里边取出任务并处理</li>\n<li>工作的线程相当于是任务队列的消费者角色，</li>\n<li>如果任务队列为空，工作的线程将会被阻塞 (使用条件变量 / 信号量阻塞)</li>\n<li>如果阻塞之后有了新的任务，由生产者将阻塞解除，工作线程开始工作</li>\n</ul>\n</li>\n<li>\n<p>管理者线程（不处理任务队列中的任务），1 个</p>\n<p>它的任务是周期性的对任务队列中的任务数量以及处于忙状态的工作线程个数进行检测</p>\n<ul>\n<li>当任务过多的时候，可以适当的创建一些新的工作线程</li>\n<li>当任务过少的时候，可以适当的销毁一些工作的线程</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://subingwen.cn/qt/threadpool/R9c00030b842edb1ae3d6a2b286e53916\" alt=\"查看源图像\"></p>\n<h3 id=\"qrunnable\"><a class=\"markdownIt-Anchor\" href=\"#qrunnable\">#</a> QRunnable</h3>\n<p>在 Qt 中使用线程池需要先创建任务，<strong>添加到线程池中的每一个任务都需要是一个 QRunnable 类型</strong>，因此在程序中需要创建子类继承 QRunnable 这个类，然后重写 run () 方法，在这个函数中编写要在线程池中执行的任务，并将这个子类对象传递给线程池，这样任务就可以被线程池中的某个工作的线程处理掉了。</p>\n<p>QRunnable 类 常用函数不多，主要是设置任务对象传给线程池后，是否需要自动析构。</p>\n<pre><code class=\"language-c++\">// 在子类中必须要重写的函数, 里边是任务的处理流程\n[pure virtual] void QRunnable::run();\n\n// 参数设置为 true: 这个任务对象在线程池中的线程中处理完毕, 这个任务对象就会自动销毁\n// 参数设置为 false: 这个任务对象在线程池中的线程中处理完毕, 对象需要程序猿手动销毁\nvoid QRunnable::setAutoDelete(bool autoDelete);\n// 获取当前任务对象的析构方式,返回true-&gt;自动析构, 返回false-&gt;手动析构\nbool QRunnable::autoDelete() const;\n</code></pre>\n<p>创建一个要添加到线程池中的任务类，处理方式如下：</p>\n<pre><code class=\"language-c++\">class MyWork : public QObject, public QRunnable\n&#123;\n    Q_OBJECT\npublic:\n    explicit MyWork(QObject *parent = nullptr)\n    &#123;\n        // 任务执行完毕,该对象自动销毁\n        setAutoDelete(true);\n    &#125;\n    ~MyWork();\n\n    void run() override&#123;&#125;\n&#125;\n</code></pre>\n<p>在上面的示例中 MyWork 类是一个多重继承，如果需要在这个任务中使用 Qt 的信号槽机制进行数据的传递就必须继承 QObject 这个类，如果不使用信号槽传递数据就可以不继承了，只继承 QRunnable 即可。</p>\n<pre><code class=\"language-c++\">class MyWork :public QRunnable\n&#123;\n    Q_OBJECT\npublic:\n    explicit MyWork()\n    &#123;\n        // 任务执行完毕,该对象自动销毁\n        setAutoDelete(true);\n    &#125;\n    ~MyWork();\n\n    void run() override&#123;&#125;\n&#125;\n</code></pre>\n<h3 id=\"qthreadpool\"><a class=\"markdownIt-Anchor\" href=\"#qthreadpool\">#</a> QThreadPool</h3>\n<p>Qt 中的 QThreadPool 类管理了一组 QThreads, 里边还维护了一个任务队列。QThreadPool 管理和回收各个 QThread 对象，以帮助减少使用线程的程序中的线程创建成本。每个 Qt 应用程序都有一个全局 QThreadPool 对象，可以通过调用 globalInstance () 来访问它。也可以单独创建一个 QThreadPool 对象使用。</p>\n<p>线程池常用的 API 函数如下：</p>\n<pre><code class=\"language-c++\">// 获取和设置线程中的最大线程个数\nint maxThreadCount() const;\nvoid setMaxThreadCount(int maxThreadCount);\n\n// 给线程池添加任务, 任务是一个 QRunnable 类型的对象\n// 如果线程池中没有空闲的线程了, 任务会放到任务队列中, 等待线程处理\nvoid QThreadPool::start(QRunnable * runnable, int priority = 0);\n// 如果线程池中没有空闲的线程了, 直接返回值, 任务添加失败, 任务不会添加到任务队列中\nbool QThreadPool::tryStart(QRunnable * runnable);\n\n// 线程池中被激活的线程的个数(正在工作的线程个数)\nint QThreadPool::activeThreadCount() const;\n\n// 尝试性的将某一个任务从线程池的任务队列中删除, 如果任务已经开始执行就无法删除了\nbool QThreadPool::tryTake(QRunnable *runnable);\n// 将线程池中的任务队列里边没有开始处理的所有任务删除, 如果已经开始处理了就无法通过该函数删除了\nvoid QThreadPool::clear();\n\n// 在每个Qt应用程序中都有一个全局的线程池对象, 通过这个函数直接访问这个对象\nstatic QThreadPool * QThreadPool::globalInstance();\n</code></pre>\n<p>一般情况下，我们不需要在 Qt 程序中创建线程池对象，直接使用 Qt 为每个应用程序提供的线程池全局对象即可。得到线程池对象之后，调用 start () 方法就可以将一个任务添加到线程池中，这个任务就可以被线程池内部的线程池处理掉了，使用线程池比自己创建线程的这种多种多线程方式更加简单和易于维护。</p>\n<h1 id=\"基于qt框架实现网络聊天室项目\"><a class=\"markdownIt-Anchor\" href=\"#基于qt框架实现网络聊天室项目\">#</a> 基于 Qt 框架实现网络聊天室项目</h1>\n<p>服务器：基于 TCP 协议创建服务器</p>\n",
            "tags": [
                "C++",
                "Qt"
            ]
        }
    ]
}