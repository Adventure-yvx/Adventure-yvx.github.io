{
    "version": "https://jsonfeed.org/version/1",
    "title": "null",
    "description": "",
    "home_page_url": "https://adventure-yx.github.io",
    "items": [
        {
            "id": "https://adventure-yx.github.io/2023/04/02/C++11/",
            "url": "https://adventure-yx.github.io/2023/04/02/C++11/",
            "title": "C++11",
            "date_published": "2023-04-02T12:10:08.000Z",
            "content_html": "<h1 id=\"安全性智能指针\"><a class=\"markdownIt-Anchor\" href=\"#安全性智能指针\">#</a> 安全性 —— 智能指针</h1>\n<p><strong>内存泄漏</strong>：由于疏忽或错误导致的程序未能释放已经不再使用的内存。</p>\n<p>进一步解释：</p>\n<ul>\n<li>\n<p>并非指内存从物理上消失，而是指程序在运行过程中，由于疏忽或错误而失去了对该内存的控制，从而造成了内存的浪费。</p>\n</li>\n<li>\n<p>常指堆内存泄漏，因为堆是动态分配的，而且是用户来控制的，如果使用不当，会产生内存泄漏。</p>\n</li>\n<li>\n<p>使用 malloc、calloc、realloc、new 等分配内存时，使用完后要调用相应的 free 或 delete 释放内存，否则这块内存就会造成内存泄漏。</p>\n</li>\n<li>\n<p>指针重新赋值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p <span class=\"token operator\">=</span> np<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>开始时，指针 p 和 p1 分别指向一块内存空间，但指针 p 被重新赋值，导致 p 初始时指向的那块内存空间无法找到，从而发生了内存泄漏。</p>\n</li>\n</ul>\n<p>解决内存泄漏最有效的方法是使用<strong>智能指针（smart pointer）</strong>。</p>\n<p>智能指针是存储指向动态分配（堆）对象指针的类，用于生存期的控制，能够确保在<strong>离开指针所在作用域时，自动地销毁动态分配的对象</strong>，防止内存泄露。</p>\n<p>智能指针的核心实现技术是<strong>引用计数</strong>，每使用它一次，内部引用计数加 1，每析构一次内部的引用计数减 1，减为 0 时，删除所指向的堆内存。</p>\n<p>C++11 中提供了三种智能指针，使用这些智能指针时需要引用头文件 <code> &lt;memory&gt;</code> :</p>\n<ul>\n<li><code> std::shared_ptr</code> ：共享的智能指针</li>\n<li><code> std::unique_ptr</code> ：独占的智能指针</li>\n<li><code> std::weak_ptr</code> ：弱引用的智能指针，它不共享指针，不能操作资源，是用来监视 <code>shared_ptr</code>  的。</li>\n</ul>\n<h2 id=\"共享智能指针shared_ptr\"><a class=\"markdownIt-Anchor\" href=\"#共享智能指针shared_ptr\">#</a> 共享智能指针（shared_ptr）</h2>\n<h3 id=\"shared_ptr的初始化\"><a class=\"markdownIt-Anchor\" href=\"#shared_ptr的初始化\">#</a> shared_ptr 的初始化</h3>\n<p>共享智能指针是指<strong>多个智能指针可以同时管理同一块有效的内存</strong>，共享智能指针  <code>shared_ptr</code>  是一个<strong>模板类</strong>，如果要进行初始化有三种方式：</p>\n<ul>\n<li>构造函数</li>\n<li><code>std::make_shared</code>  辅助函数</li>\n<li>reset 方法</li>\n</ul>\n<p>共享智能指针对象初始化完毕之后就指向了要管理的那块堆内存，如果想要查看当前有多少个智能指针同时管理着这块内存可以使用共享智能指针提供的一个成员函数 use_count，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 管理当前对象的 shared_ptr 实例数量，或若无被管理对象则为 0。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"通过构造函数初始化\"><a class=\"markdownIt-Anchor\" href=\"#通过构造函数初始化\">#</a> 通过构造函数初始化</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//shared_ptr&lt;T> 类模板中，提供了多种实用的构造函数，语法格式如下:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> 智能指针名字<span class=\"token punctuation\">(</span>创建堆内存<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 使用智能指针管理一块 int 型的堆内存</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr1管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 使用智能指针管理一块字符数组对应的堆内存</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token function\">ptr2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr2管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 创建智能指针对象，不管理任何内存</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr3管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 创建智能指针对象，初始化为空</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr4</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr4管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ptr1管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ptr2管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ptr3管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ptr4管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><blockquote>\n<p>如果智能指针被初始化了一块有效内存，那么这块内存的引用计数 + 1，如果智能指针没有被初始化或者被初始化为 nullptr 空指针，引用计数不会 + 1。另外，不要使用一个原始指针初始化多个 shared_ptr。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//error, 编译不会报错，运行会出错</span></pre></td></tr></table></figure><h3 id=\"通过拷贝和移动构造函数初始化\"><a class=\"markdownIt-Anchor\" href=\"#通过拷贝和移动构造函数初始化\">#</a> 通过拷贝和移动构造函数初始化</h3>\n<p>当一个智能指针被初始化之后，就可以通过这个智能指针初始化其他新对象。在创建新对象的时候，对应的拷贝构造函数或者移动构造函数就被自动调用了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 使用智能指针管理一块 int 型的堆内存，内部引用计数为 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr1管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 调用拷贝构造函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr2</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr2管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr3 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr3管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 调用移动构造函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr4</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr4管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr5 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr5管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr5<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ptr1管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ptr2管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ptr3管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ptr4管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ptr5管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr></table></figure><blockquote>\n<p>如果使用拷贝的方式初始化共享智能指针对象，这两个对象会同时管理同一块堆内存，堆内存对应的引用计数也会增加；如果使用移动的方式初始智能指针对象，只是转让了内存的所有权，管理内存的对象并不会增加，因此内存的引用计数不会变化。</p>\n</blockquote>\n<h3 id=\"通过-stdmake_shared-初始化\"><a class=\"markdownIt-Anchor\" href=\"#通过-stdmake_shared-初始化\">#</a> 通过 std::make_shared 初始化</h3>\n<p>通过 C++ 提供的 std::make_shared () 就可以完成内存对象的创建并将其初始化给智能指针，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">make_shared</span><span class=\"token punctuation\">(</span> Args<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>T</code> ：模板参数的数据类型</li>\n<li><code>Args&amp;&amp;... args</code>  ：要初始化的数据，如果是通过 make_shared 创建对象，需按照构造函数的参数列表指定</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"construct Test...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"construct Test, x = \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"construct Test, str = \"</span> <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"destruct Test ...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 使用智能指针管理一块 int 型的堆内存，内部引用计数为 1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr1管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr2管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span> ptr3 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr3管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span> ptr4 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr_test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr4管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>使用 std::make_shared () 模板函数可以完成内存地址的创建，并将最终得到的内存地址传递给共享智能指针对象管理。如果申请的内存是普通类型，通过函数的（）可完成地址的初始化，如果要创建一个类对象，函数的（）内部需要指定构造对象需要的参数，也就是类构造函数的参数。</p>\n</blockquote>\n<h3 id=\"通过-reset-方法初始化\"><a class=\"markdownIt-Anchor\" href=\"#通过-reset-方法初始化\">#</a> 通过 reset 方法初始化</h3>\n<p>共享智能指针类提供的 std::shared_ptr::reset 方法函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span> Y<span class=\"token operator\">*</span> ptr <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Deleter</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span> Y<span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">,</span> Deleter d <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Deleter</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Alloc</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span> Y<span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">,</span> Deleter d<span class=\"token punctuation\">,</span> Alloc alloc <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>ptr：指向要取得所有权的对象的指针</li>\n<li>d：指向要取得所有权的对象的指针</li>\n<li>aloc：内部存储所用的分配器</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 使用智能指针管理一块 int 型的堆内存，内部引用计数为 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr3 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr4 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr1管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr2管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr3管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr4管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr1管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr2管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr3管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr4管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    ptr5<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr5管理的内存引用计数: \"</span> <span class=\"token operator\">&lt;&lt;</span> ptr5<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ptr1管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ptr2管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ptr3管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ptr4管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ptr1管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ptr2管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ptr3管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ptr4管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ptr5管理的内存引用计数<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><blockquote>\n<p>对于一个未初始化的共享智能指针，可以通过 reset 方法来初始化，当智能指针中有值的时候，调用 reset 会使引用计数减 1。</p>\n</blockquote>\n<h3 id=\"获取原始指针\"><a class=\"markdownIt-Anchor\" href=\"#获取原始指针\">#</a> 获取原始指针</h3>\n<h2 id=\"独占智能指针unique_ptr\"><a class=\"markdownIt-Anchor\" href=\"#独占智能指针unique_ptr\">#</a> 独占智能指针（unique_ptr）</h2>\n<h3 id=\"unique_ptr的初始化\"><a class=\"markdownIt-Anchor\" href=\"#unique_ptr的初始化\">#</a> unique_ptr 的初始化</h3>\n<p>std::unique_ptr 是一个独占型的智能指针，它不允许其他的智能指针共享其内部的指针，可以通过它的构造函数初始化一个独占智能指针对象，但是不允许通过赋值将一个 unique_ptr 赋值给另一个 unique_ptr。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过构造函数初始化对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//error, 不允许将一个 unique_ptr 赋值给另一个 unique_ptr</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>std::unique_ptr 不允许复制，但是可以通过函数返回给其他的 std::unique_ptr，还可以通过  <code>std::move</code>  来转移给其他的 std::unique_ptr，这样原始指针的所有权就被转移了，这个原始指针还是被独占的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">unique_ptr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 通过构造函数初始化</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 通过转移所有权的方式初始化</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr3 <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>unique_ptr 独占智能指针类也有一个 reset 方法，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span> pointer ptr <span class=\"token operator\">=</span> <span class=\"token function\">pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用 reset 方法可以让 unique_ptr 解除对原始内存的管理，也可以用来初始化一个独占的智能指针。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ptr1<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 解除对原始内存的管理</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t <span class=\"token comment\">// 重新指定智能指针管理的原始内存</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果想要获取独占智能指针管理的原始地址，可以调用 get () 方法，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pointer <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 得到内存地址中存储的实际数值 250</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"删除器\"><a class=\"markdownIt-Anchor\" href=\"#删除器\">#</a> 删除器</h3>\n<p>unique_ptr 指定删除器和 shared_ptr 指定删除器是有区别的，unique_ptr 指定删除器的时候需要确定删除器的类型，所以不能像 shared_ptr 那样直接指定删除器，举例说明：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">using</span> func_ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> func_ptr<span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的代码中第 7 行，func_ptr 的类型和 lambda 表达式的类型是一致的。在 lambda 表达式没有捕获任何变量的情况下是正确的，如果捕获了变量，编译时则会报错：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">using</span> func_ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> func_ptr<span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的代码中错误原因是这样的，在 lambda 表达式没有捕获任何外部变量时，可以直接转换为函数指针，一旦捕获了就无法转换了，如果想要让编译器成功通过编译，那么需要使用可调用对象包装器来处理声明的函数指针：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">using</span> func_ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"弱引用智能指针weak_ptr\"><a class=\"markdownIt-Anchor\" href=\"#弱引用智能指针weak_ptr\">#</a> 弱引用智能指针（weak_ptr）</h2>\n<p>弱引用智能指针 std::weak_ptr 可以看做是 shared_ptr 的助手，它不管理 shared_ptr 内部的指针。std::weak_ptr 没有重载操作符 * 和 -&gt;，因为它不共享指针，不能操作资源，所以它的构造不会增加引用计数，析构也不会减少引用计数，它的主要作用就是作为一个旁观者监视 shared_ptr 中管理的资源是否存在。</p>\n<h3 id=\"初始化\"><a class=\"markdownIt-Anchor\" href=\"#初始化\">#</a> 初始化</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 默认构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token function\">weak_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 拷贝构造</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">weak_ptr</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> weak_ptr<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">U</span><span class=\"token operator\">></span> <span class=\"token function\">weak_ptr</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> weak_ptr<span class=\"token operator\">&lt;</span>U<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 通过 shared_ptr 对象构造</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">U</span><span class=\"token operator\">></span> <span class=\"token function\">weak_ptr</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> shared_ptr<span class=\"token operator\">&lt;</span>U<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 C++11 中，weak_ptr 的初始化可以通过以上提供的构造函数来完成初始化，具体使用方法如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp1<span class=\"token punctuation\">;</span>    \t<span class=\"token comment\">// 构造了一个空 weak_ptr 对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">wp2</span><span class=\"token punctuation\">(</span>wp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 通过一个空 weak_ptr 对象构造了另一个空 weak_ptr 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">wp3</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 通过一个 shared_ptr 对象构造了一个可用的 weak_ptr 实例对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp4<span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    wp4 <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 隐式类型转换，通过一个 shared_ptr 对象构造了一个可用的 weak_ptr 实例对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    wp5 <span class=\"token operator\">=</span> wp3<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 通过一个 weak_ptr 对象构造了一个可用的 weak_ptr 实例对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"其他常用方法\"><a class=\"markdownIt-Anchor\" href=\"#其他常用方法\">#</a> 其他常用方法</h3>\n<h4 id=\"use_count\"><a class=\"markdownIt-Anchor\" href=\"#use_count\">#</a> use_count()</h4>\n<p>通过调用 std::weak_ptr 类提供的 use_count () 方法可以获得当前所观测资源的引用计数，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数返回所监测的资源的引用计数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>修改一下上面的测试程序，添加打印资源引用计数的代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">wp2</span><span class=\"token punctuation\">(</span>wp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">wp3</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    wp4 <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    wp5 <span class=\"token operator\">=</span> wp3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use_count: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wp1: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wp2: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wp3: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wp4: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wp5: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp5<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 输出：</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>use_count<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>wp1<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>wp2<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>wp3<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>wp4<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>wp5<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>通过打印的结果可以知道，虽然弱引用智能指针 wp3、wp4、wp5 监测的资源是同一个，但是它的引用计数并没有发生任何的变化，也进一步证明了 weak_ptr 只是监测资源，并不管理资源。</p>\n<h4 id=\"expired\"><a class=\"markdownIt-Anchor\" href=\"#expired\">#</a> expired()</h4>\n<p>通过调用 std::weak_ptr 类提供的 expired () 方法来判断观测的资源是否已经被释放，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回 true 表示资源已经被释放，返回 false 表示资源没有被释放</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数使用方法如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">shared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">weak</span><span class=\"token punctuation\">(</span>shared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1. weak \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>weak<span class=\"token punctuation\">.</span><span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"is not\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" expired\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    shared<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"2. weak \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>weak<span class=\"token punctuation\">.</span><span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"is not\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" expired\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 输出：</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">1.</span> weak is <span class=\"token operator\">not</span> expired</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">2.</span> weak is expired</pre></td></tr></table></figure><p>weak_ptr 监测的就是 shared_ptr 管理的资源，当共享智能指针调用 shared.reset (); 之后管理的资源被释放，因此 weak.expired () 函数的结果返回 true，表示监测的资源已经不存在了。</p>\n<h4 id=\"lock\"><a class=\"markdownIt-Anchor\" href=\"#lock\">#</a> lock()</h4>\n<p>通过调用 std::weak_ptr 类提供的 lock () 方法来获取管理所监测资源的 shared_ptr 对象，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span>element_type<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数的使用方法如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> sp1<span class=\"token punctuation\">,</span> sp2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    sp1 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    wp <span class=\"token operator\">=</span> sp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    sp2 <span class=\"token operator\">=</span> wp<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use_count: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    sp1<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use_count: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    sp1 <span class=\"token operator\">=</span> wp<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use_count: \"</span> <span class=\"token operator\">&lt;&lt;</span> wp<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*sp1: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>sp1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*sp2: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>sp2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 输出：</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>use_count<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>use_count<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>use_count<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">*</span>sp1<span class=\"token operator\">:</span> <span class=\"token number\">520</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">*</span>sp2<span class=\"token operator\">:</span> <span class=\"token number\">520</span></pre></td></tr></table></figure><ul>\n<li>sp2 = wp.lock (); 通过调用 lock () 方法得到一个用于管理 weak_ptr 对象所监测的资源的共享智能指针对象，使用这个对象初始化 sp2，此时所监测资源的引用计数为 2</li>\n<li>sp1.reset (); 共享智能指针 sp1 被重置，weak_ptr 对象所监测的资源的引用计数减 1</li>\n<li>sp1 = wp.lock ();sp1 重新被初始化，并且管理的还是 weak_ptr 对象所监测的资源，因此引用计数加 1</li>\n<li>共享智能指针对象 sp1 和 sp2 管理的是同一块内存，因此最终打印的内存中的结果是相同的，都是 520</li>\n</ul>\n<h4 id=\"reset\"><a class=\"markdownIt-Anchor\" href=\"#reset\">#</a> reset()</h4>\n<p>通过调用 std::weak_ptr 类提供的 reset () 方法来清空对象，使其不监测任何资源，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数的使用方法如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">wp</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1. wp \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>wp<span class=\"token punctuation\">.</span><span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"is not\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" expired\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    wp<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"2. wp \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>wp<span class=\"token punctuation\">.</span><span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"is not\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" expired\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">1.</span> wp is <span class=\"token operator\">not</span> expired</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">2.</span> wp is expired</pre></td></tr></table></figure><h3 id=\"返回管理this的shared_ptr\"><a class=\"markdownIt-Anchor\" href=\"#返回管理this的shared_ptr\">#</a> 返回管理 this 的 shared_ptr</h3>\n<h3 id=\"解决循环引用问题\"><a class=\"markdownIt-Anchor\" href=\"#解决循环引用问题\">#</a> 解决循环引用问题</h3>\n<h1 id=\"多线程\"><a class=\"markdownIt-Anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<p><code>C++11</code>  之前，C++ 语言没有对并发编程提供语言级别的支持，这使得我们在编写可移植的并发程序时，存在诸多的不便。 <code>C++11</code>  中增加了线程以及线程相关的类，很方便地支持了并发编程，使得编写的多线程程序的可移植性得到了很大的提高。</p>\n<h2 id=\"处理日期和时间的-chrono-库\"><a class=\"markdownIt-Anchor\" href=\"#处理日期和时间的-chrono-库\">#</a> 处理日期和时间的 chrono 库</h2>\n<p>C++11 中提供了日期和时间相关的库 chrono，通过 chrono 库可以很方便地处理日期和时间，为程序的开发提供了便利。chrono 库主要包含三种类型的类： <code>时间间隔duration</code> 、 <code>时钟clocks</code> 、 <code>时间点time point</code> 。</p>\n<h3 id=\"时间间隔-duration\"><a class=\"markdownIt-Anchor\" href=\"#时间间隔-duration\">#</a> 时间间隔 duration</h3>\n<p>duration 表示一段时间间隔，用来记录时间长度，可以表示几秒、几分钟、几个小时的时间间隔。</p>\n<p><strong>duration 类的原型</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义于头文件 &lt;chrono></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rep</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Period</span> <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>ratio<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">duration</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>Rep</code> ：这是一个数值类型，表示时钟数（周期）的类型（默认为整型）。</p>\n</li>\n<li>\n<p><code>Period</code> ：表示时钟的周期，它的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义于头文件 &lt;ratio></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>intmax_t Num<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>intmax_t Denom <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ratio</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>ratio</code>  类表示每个时钟周期的秒数，其中第一个模板参数  <code>Num</code>  代表分子， <code>Denom</code>  代表分母，该分母值默认为 1，因此，<strong>ratio 代表的是一个分子除以分母的数值</strong>，比如：ratio&lt;2&gt; 代表一个时钟周期是 2 秒，ratio&lt;60 &gt; 代表一分钟，ratio&lt;60<em>60&gt; 代表一个小时，ratio&lt;60</em>60*24&gt; 代表一天。而 ratio&lt;1,1000&gt; 代表的是 1/1000 秒，也就是 1 毫秒，ratio&lt;1,1000000 &gt; 代表一微秒，ratio&lt;1,1000000000 &gt; 代表一纳秒。</p>\n<p>为了方便使用，在标准库中定义了一些常用的时间间隔，比如：时、分、秒、毫秒、微秒、纳秒，它们都位于 chrono 命名空间下，定义如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>纳秒：std::chrono::nanoseconds</td>\n<td>duration&lt;Rep*/* 至少 64 位的有符号整数类型 <em>/</em>, std::nano&gt;</td>\n</tr>\n<tr>\n<td>微秒：std::chrono::microseconds</td>\n<td>duration&lt;Rep*/* 至少 55 位的有符号整数类型 <em>/</em>, std::micro&gt;</td>\n</tr>\n<tr>\n<td>毫秒：std::chrono::milliseconds</td>\n<td>duration&lt;Rep*/* 至少 45 位的有符号整数类型 <em>/</em>, std::milli&gt;</td>\n</tr>\n<tr>\n<td>秒： std::chrono::seconds</td>\n<td>duration&lt;Rep*/* 至少 35 位的有符号整数类型 <em>/</em>&gt;</td>\n</tr>\n<tr>\n<td>分钟：std::chrono::minutes</td>\n<td>duration&lt;Rep*/* 至少 29 位的有符号整数类型 <em>/</em>, std::ratio&lt;60&gt;&gt;</td>\n</tr>\n<tr>\n<td>小时：std::chrono::hours</td>\n<td>duration&lt;Rep*/* 至少 23 位的有符号整数类型 <em>/</em>, std::ratio&lt;3600&gt;&gt;</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><strong>duration 类的构造函数</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">duration</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> duration<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2. 通过指定时钟周期的类型来构造对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rep2</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">explicit</span> <span class=\"token function\">duration</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> Rep2<span class=\"token operator\">&amp;</span> r <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 3. 通过指定时钟周期类型，和时钟周期长度来构造对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rep2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Period2</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token function\">duration</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> duration<span class=\"token operator\">&lt;</span>Rep2<span class=\"token punctuation\">,</span>Period2<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> d <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>为了更加方便的进行 duration 对象之间的操作，类内部进行了操作符重载：</p>\n<table>\n<thead>\n<tr>\n<th>操作符重载</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>operator=</td>\n<td>赋值内容 (公开成员函数)</td>\n</tr>\n<tr>\n<td>operator+<br/>operator-</td>\n<td>实现一元 + 和一元 - (公开成员函数)</td>\n</tr>\n<tr>\n<td>operator++<br/>operator++(int)<br/>operator–<br/>operator–(int)</td>\n<td>递增或递减周期计数 (公开成员函数)</td>\n</tr>\n<tr>\n<td>operator+=<br/>operator-=<br/>operator*=<br/>operator/=<br/>operator%=</td>\n<td>实现二个时长间的复合赋值 (公开成员函数)</td>\n</tr>\n</tbody>\n</table>\n<p>duration 类还提供了获取时间间隔的时钟周期数的方法 count ()，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">constexpr</span> rep <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>duration 类的使用</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;chrono></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>hours <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 一小时</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>milliseconds ms<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 3 毫秒</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>duration<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> ratio<span class=\"token operator\">&lt;</span><span class=\"token number\">1000</span><span class=\"token operator\">>></span> <span class=\"token function\">ks</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 3000 秒</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// chrono::duration&lt;int, ratio&lt;1000>> d3(3.5);  // error</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>duration<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token function\">dd</span><span class=\"token punctuation\">(</span><span class=\"token number\">6.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 6.6 秒</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 使用小数表示时钟周期的次数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>duration<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>ratio<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token operator\">>></span> <span class=\"token function\">hz</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"时间点-time-point\"><a class=\"markdownIt-Anchor\" href=\"#时间点-time-point\">#</a> 时间点 time point</h3>\n<p>chrono 库中提供了一个表示时间点的类  <code>time_point</code> ，该类的定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义于头文件 &lt;chrono></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Duration</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">Clock</span><span class=\"token double-colon punctuation\">::</span>duration</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">time_point</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>它被实现成如同存储一个 Duration 类型的自 Clock 的纪元起始开始的时间间隔的值，通过这个类最终可以得到时间中的某一个时间点。</p>\n<ul>\n<li>Clock：此时间点在此时钟上计量</li>\n<li>Duration：用于计量从纪元起时间的 std::chrono::duration 类型</li>\n</ul>\n<p><strong>time_point 类的构造函数</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 构造一个以新纪元 (epoch，即：1970.1.1) 作为值的对象，需要和时钟类一起使用，不能单独使用该无参构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">time_point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2. 构造一个对象，表示一个时间点，其中 d 的持续时间从 epoch 开始，需要和时钟类一起使用，不能单独使用该构造函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">time_point</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> duration<span class=\"token operator\">&amp;</span> d <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 3. 拷贝构造函数，构造与 t 相同时间点的对象，使用的时候需要指定模板参数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Duration2</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">time_point</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> time_point<span class=\"token operator\">&lt;</span>Clock<span class=\"token punctuation\">,</span>Duration2<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> t <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"时钟-clocks\"><a class=\"markdownIt-Anchor\" href=\"#时钟-clocks\">#</a> 时钟 clocks</h3>\n<p>chrono 库中提供了获取当前的系统时间的时钟类，包含的时钟一共有三种：</p>\n<ul>\n<li><code>system_clock</code> ：系统的时钟，系统的时钟可以修改，甚至可以网络对时，因此使用系统时间计算时间差可能不准。</li>\n<li><code>steady_clock</code> ：是固定的时钟，相当于秒表。开始计时后，时间只会增长并且不能修改，适合用于记录程序耗时</li>\n<li><code>high_resolution_clock</code> ：和时钟类  <code>steady_clock</code>  是等价的（是它的别名）。</li>\n</ul>\n<p>在这些时钟类的内部有  <code>time_point</code> 、 <code>duration</code> 、 <code>Rep</code> 、 <code>Period</code>  等信息，基于这些信息来获取当前时间，以及实现  <code>time_t</code>  和  <code>time_point</code>  之间的相互转换。</p>\n<h4 id=\"system_clock\"><a class=\"markdownIt-Anchor\" href=\"#system_clock\">#</a> system_clock</h4>\n<h4 id=\"steady_clock\"><a class=\"markdownIt-Anchor\" href=\"#steady_clock\">#</a> steady_clock</h4>\n<h4 id=\"high_resolution_clock\"><a class=\"markdownIt-Anchor\" href=\"#high_resolution_clock\">#</a> high_resolution_clock</h4>\n<h3 id=\"转换函数\"><a class=\"markdownIt-Anchor\" href=\"#转换函数\">#</a> 转换函数</h3>\n<h4 id=\"duration_cast\"><a class=\"markdownIt-Anchor\" href=\"#duration_cast\">#</a> duration_cast</h4>\n<h4 id=\"time_point_cast\"><a class=\"markdownIt-Anchor\" href=\"#time_point_cast\">#</a> time_point_cast</h4>\n<h2 id=\"线程类-thread\"><a class=\"markdownIt-Anchor\" href=\"#线程类-thread\">#</a> 线程类 thread</h2>\n<p>C++11 中提供的线程类叫做  <code>std::thread</code> ，基于这个类创建一个新的线程非常的简单，只需要提供线程函数或者函数对象即可，并且可以同时指定线程函数的参数。这个类提供的一些常用 API：</p>\n<h3 id=\"构造函数\"><a class=\"markdownIt-Anchor\" href=\"#构造函数\">#</a> 构造函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 默认构造函，构造一个线程对象，在这个线程中不执行任何处理动作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 移动构造函数，将 other 的线程所有权转移给新的 thread 对象。之后 other 不再表示执行线程。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span> thread<span class=\"token operator\">&amp;&amp;</span> other <span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 创建线程对象，并在该线程中执行函数 f 中的业务逻辑，args 是要传递给函数 f 的参数。任务函数 f 的可选类型有很多，普通函数，类成员函数，匿名函数，仿函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">thread</span><span class=\"token punctuation\">(</span> Function<span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">,</span> Args<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 使用 =delete 显示删除拷贝构造，不允许线程对象之间的拷贝</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> thread<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"公共成员函数\"><a class=\"markdownIt-Anchor\" href=\"#公共成员函数\">#</a> 公共成员函数</h3>\n<h3 id=\"get_id\"><a class=\"markdownIt-Anchor\" href=\"#get_id\">#</a> get_id()</h3>\n<p>应用程序启动之后默认只有一个线程，这个线程一般称之为<strong>主线程或父线程</strong>，通过线程类创建出的线程一般称之为<strong>子线程</strong>，每个被创建出的线程实例都对应一个线程 ID，这个 ID 是唯一的，可以通过这个 ID 来区分和识别各个已经存在的线程实例，这个获取线程 ID 的函数叫做  <code>get_id()</code> ，函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>thread<span class=\"token double-colon punctuation\">::</span>id <span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>示例程序：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;chrono></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> string str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"子线程: i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"num: \"</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>             <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", str: \"</span> <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"子线程: i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"主线程的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    thread <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i love you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    thread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>func1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t 的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t1的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上面的示例程序中有一个 bug，在主线程中依次创建出两个子线程，打印两个子线程的线程 ID，最后主线程执行完毕就退出了（主线程就是执行 main () 函数的那个线程）。默认情况下，主线程销毁时会将与其关联的两个子线程也一并销毁，但是这时有可能子线程中的任务还没有执行完毕，最后也就得不到我们想要的结果了。</p>\n</blockquote>\n<p>当启动了一个线程（创建了一个 thread 对象）之后，在这个线程结束的时候 <code>std::terminate ()</code> ，我们如何去回收线程所使用的资源呢？thread 库给我们两种选择：</p>\n<ul>\n<li>加入式 <code>join()</code></li>\n<li>分离式 <code>detach()</code></li>\n</ul>\n<p>另外，我们必须要在线程对象销毁之前在二者之间作出选择，否则程序运行期间就会有 bug 产生。</p>\n<h3 id=\"join\"><a class=\"markdownIt-Anchor\" href=\"#join\">#</a> join()</h3>\n<p><code>join()</code>  字面意思是连接一个线程，意味着主动地等待线程的终止（线程阻塞）。在某个线程中通过子线程对象调用  <code>join()</code>  函数，调用这个函数的线程被阻塞，但是子线程对象中的任务函数会继续执行，当任务执行完毕之后  <code>join()</code>  会清理当前子线程中的相关资源然后返回，同时，调用该函数的线程解除阻塞继续向下执行。</p>\n<p>再次强调，我们一定要搞清楚这个函数阻塞的是哪一个线程，函数在哪个线程中被执行，那么函数就阻塞哪个线程。该函数的函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>有了这样一个线程阻塞函数之后，就可以解决在上面测试程序中的 bug 了，** 如果要阻塞主线程的执行，只需要在主线程中通过子线程对象调用这个方法即可，当调用这个方法的子线程对象中的任务函数执行完毕之后，主线程的阻塞也就随之解除了。** 修改之后的示例代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"主线程的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    thread <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i love you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    thread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>func1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t 的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t1的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当主线程运行到第八行 t.join ();，根据子线程对象 t 的任务函数 func () 的执行情况，主线程会做如下处理：</p>\n<ul>\n<li>如果任务函数 func () 还没执行完毕，主线程阻塞，直到任务执行完毕，主线程解除阻塞，继续向下运行</li>\n<li>如果任务函数 func () 已经执行完毕，主线程不会阻塞，继续向下运行</li>\n</ul>\n<p>同样，第 9 行的代码亦如此。</p>\n<h3 id=\"detach\"><a class=\"markdownIt-Anchor\" href=\"#detach\">#</a> detach()</h3>\n<p><code>detach()</code>  函数的作用是进行线程分离，分离主线程和创建出的子线程。在线程分离之后，主线程退出也会一并销毁创建出的所有子线程，在主线程退出之前，它可以脱离主线程继续独立的运行，任务执行完毕之后，这个子线程会自动释放自己占用的系统资源。该函数函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>线程分离函数没有参数也没有返回值，只需要在线程成功之后，通过线程对象调用该函数即可，继续将上面的测试程序修改一下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"主线程的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    thread <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i love you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    thread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>func1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t 的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程t1的线程ID: \"</span> <span class=\"token operator\">&lt;&lt;</span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    t<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 让主线程休眠，等待子线程执行完毕</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep_for</span><span class=\"token punctuation\">(</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注意事项：线程分离函数 detach () 不会阻塞线程，子线程和主线程分离之后，在主线程中就不能再对这个子线程做任何控制了，比如：通过 join () 阻塞主线程等待子线程中的任务执行完毕，或者调用 get_id () 获取子线程的线程 ID。有利就有弊，鱼和熊掌不可兼得，建议使用 join ()。</p>\n</blockquote>\n<h3 id=\"joinable\"><a class=\"markdownIt-Anchor\" href=\"#joinable\">#</a> joinable()</h3>\n<p>joinable () 函数用于判断主线程和子线程是否处理关联（连接）状态，一般情况下，二者之间的关系处于关联状态，该函数返回一个布尔类型：</p>\n<ul>\n<li>返回值为 true：主线程和子线程之间有关联（连接）关系</li>\n<li>返回值为 false：主线程和子线程之间没有关联（连接）关系<br>\n C++</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">joinable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"operator\"><a class=\"markdownIt-Anchor\" href=\"#operator\">#</a> operator=</h3>\n<p><strong>线程中的资源是不能被复制的</strong>，因此通过 = 操作符进行赋值操作最终并不会得到两个完全相同的对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// move (1)\t</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>thread<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>thread<span class=\"token operator\">&amp;&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// copy [deleted] (2)\t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>thread<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> other<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过以上 = 操作符的重载声明可以得知：</p>\n<ul>\n<li>如果 other 是一个右值，会进行资源所有权的转移</li>\n<li>如果 other 不是右值，禁止拷贝，该函数被显示删除（=delete），不可用</li>\n</ul>\n<h3 id=\"静态函数\"><a class=\"markdownIt-Anchor\" href=\"#静态函数\">#</a> 静态函数</h3>\n<p>thread 线程类还提供了一个静态方法，用于<strong>获取当前计算机的 CPU 核心数</strong>，根据这个结果在程序中创建出数量相等的线程，<strong>每个线程独自占有一个 CPU 核心，这些线程就不用分时复用 CPU 时间片，此时程序的并发效率是最高的。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">unsigned</span> <span class=\"token function\">hardware_concurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">hardware_concurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"CPU number: \"</span> <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"线程命名空间-this_thread\"><a class=\"markdownIt-Anchor\" href=\"#线程命名空间-this_thread\">#</a> 线程命名空间 this_thread</h2>\n<h2 id=\"call_once-函数\"><a class=\"markdownIt-Anchor\" href=\"#call_once-函数\">#</a> call_once 函数</h2>\n<h2 id=\"线程同步之互斥锁-mutex\"><a class=\"markdownIt-Anchor\" href=\"#线程同步之互斥锁-mutex\">#</a> 线程同步之互斥锁 mutex</h2>\n<h2 id=\"线程同步之条件变量\"><a class=\"markdownIt-Anchor\" href=\"#线程同步之条件变量\">#</a> 线程同步之条件变量</h2>\n<h2 id=\"线程同步之原子变量-atomic\"><a class=\"markdownIt-Anchor\" href=\"#线程同步之原子变量-atomic\">#</a> 线程同步之原子变量 atomic</h2>\n<h2 id=\"线程异步\"><a class=\"markdownIt-Anchor\" href=\"#线程异步\">#</a> 线程异步</h2>\n<h1 id=\"易学和易用性\"><a class=\"markdownIt-Anchor\" href=\"#易学和易用性\">#</a> 易学和易用性</h1>\n<h2 id=\"lambda表达式\"><a class=\"markdownIt-Anchor\" href=\"#lambda表达式\">#</a> lambda 表达式</h2>\n<h2 id=\"指针空值类型-nullptr\"><a class=\"markdownIt-Anchor\" href=\"#指针空值类型-nullptr\">#</a> 指针空值类型 - nullptr</h2>\n<h2 id=\"自动类型推导\"><a class=\"markdownIt-Anchor\" href=\"#自动类型推导\">#</a> 自动类型推导</h2>\n<h2 id=\"基于范围的-for-循环\"><a class=\"markdownIt-Anchor\" href=\"#基于范围的-for-循环\">#</a> 基于范围的 for 循环</h2>\n<h1 id=\"稳定性和兼容性\"><a class=\"markdownIt-Anchor\" href=\"#稳定性和兼容性\">#</a> 稳定性和兼容性</h1>\n<h2 id=\"noexcept\"><a class=\"markdownIt-Anchor\" href=\"#noexcept\">#</a> noexcept</h2>\n<h2 id=\"类成员的快速初始化\"><a class=\"markdownIt-Anchor\" href=\"#类成员的快速初始化\">#</a> 类成员的快速初始化</h2>\n<h2 id=\"数值类型和字符串之间的转换\"><a class=\"markdownIt-Anchor\" href=\"#数值类型和字符串之间的转换\">#</a> 数值类型和字符串之间的转换</h2>\n<h2 id=\"模板的优化\"><a class=\"markdownIt-Anchor\" href=\"#模板的优化\">#</a> 模板的优化</h2>\n<h2 id=\"final-和-override\"><a class=\"markdownIt-Anchor\" href=\"#final-和-override\">#</a> final 和 override</h2>\n<h2 id=\"超长整形-long-long\"><a class=\"markdownIt-Anchor\" href=\"#超长整形-long-long\">#</a> 超长整形 long long</h2>\n<h2 id=\"静态断言-static_assert\"><a class=\"markdownIt-Anchor\" href=\"#静态断言-static_assert\">#</a> 静态断言 static_assert</h2>\n<h2 id=\"原始字面量\"><a class=\"markdownIt-Anchor\" href=\"#原始字面量\">#</a> 原始字面量</h2>\n<h1 id=\"通用性能提升\"><a class=\"markdownIt-Anchor\" href=\"#通用性能提升\">#</a> 通用性能提升</h1>\n<h2 id=\"常量表达式修饰符-constexpr\"><a class=\"markdownIt-Anchor\" href=\"#常量表达式修饰符-constexpr\">#</a> 常量表达式修饰符 - constexpr</h2>\n<h2 id=\"委托构造函数和继承构造函数\"><a class=\"markdownIt-Anchor\" href=\"#委托构造函数和继承构造函数\">#</a> 委托构造函数和继承构造函数</h2>\n<h2 id=\"右值引用\"><a class=\"markdownIt-Anchor\" href=\"#右值引用\">#</a> 右值引用</h2>\n<h2 id=\"转移和完美转发\"><a class=\"markdownIt-Anchor\" href=\"#转移和完美转发\">#</a> 转移和完美转发</h2>\n<h2 id=\"列表初始化\"><a class=\"markdownIt-Anchor\" href=\"#列表初始化\">#</a> 列表初始化</h2>\n<h2 id=\"using-的使用\"><a class=\"markdownIt-Anchor\" href=\"#using-的使用\">#</a> using 的使用</h2>\n<h2 id=\"可调用对象包装器-绑定器\"><a class=\"markdownIt-Anchor\" href=\"#可调用对象包装器-绑定器\">#</a> 可调用对象包装器、绑定器</h2>\n<h2 id=\"pod-类型\"><a class=\"markdownIt-Anchor\" href=\"#pod-类型\">#</a> POD 类型</h2>\n<h2 id=\"默认函数控制-default-与-delete\"><a class=\"markdownIt-Anchor\" href=\"#默认函数控制-default-与-delete\">#</a> 默认函数控制 =default 与 =delete</h2>\n<h2 id=\"扩展的-friend-语法\"><a class=\"markdownIt-Anchor\" href=\"#扩展的-friend-语法\">#</a> 扩展的 friend 语法</h2>\n<h2 id=\"强类型枚举\"><a class=\"markdownIt-Anchor\" href=\"#强类型枚举\">#</a> 强类型枚举</h2>\n<h2 id=\"非受限联合体\"><a class=\"markdownIt-Anchor\" href=\"#非受限联合体\">#</a> 非受限联合体</h2>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/03/26/QML&QtQuick/",
            "url": "https://adventure-yx.github.io/2023/03/26/QML&QtQuick/",
            "title": "QML & Qt Quick",
            "date_published": "2023-03-26T02:12:08.000Z",
            "content_html": "<h1 id=\"qml-基础\"><a class=\"markdownIt-Anchor\" href=\"#qml-基础\">#</a> QML 基础</h1>\n<p>QML（Qt Meta Language，Qt 元语言）是一个用来描述应用程序界面的<strong>声明式</strong>脚本语言。QML 具有良好的易读性，它以可视化组件及其交互和相互关联的方式来描述界面，使组件能在动态行为中互相连接，并支持在一个用户界面上很方便的复用和定制组件。</p>\n<p>Qt Quick 是 Qt 为 QML 提供的一套标准类库，由 QML 标准类型和功能组成，包括可视化类型、交互类型、动画类型、模型和视图、粒子系统和渲染效果等，编程时只需要一条 import 语句，就能访问所有这些功能。使用 Qt Quick，能够很容易地用 QML 构建出高品质、流畅的 UI 界面，从而开发出具有视觉吸引力的应用程序。</p>\n<h2 id=\"基本语法\"><a class=\"markdownIt-Anchor\" href=\"#基本语法\">#</a> 基本语法</h2>\n<ul>\n<li><code>import</code>  语句导入一个模块。Qt6 可以不写版本号，自动加载最高版本模块。</li>\n<li>每个 QML 文件都需要有一个唯一的根元素（像 HTML 一样</li>\n<li>元素声明形式： <code>type&#123;  &#125;</code></li>\n<li>元素属性： <code>name:value</code></li>\n<li>QML 文档中的任意元素可以通过使用其 id 进行访问</li>\n<li>元素可以嵌套，父元素可以有子元素。子元素可以使用 parent 关键字访问父元素。</li>\n</ul>\n",
            "tags": [
                "C++",
                "Qt",
                "QML"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/03/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "url": "https://adventure-yx.github.io/2023/03/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "title": "设计模式",
            "date_published": "2023-03-20T12:10:48.000Z",
            "content_html": "",
            "tags": [
                "C++",
                "设计模式"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/03/12/QtStudy/",
            "url": "https://adventure-yx.github.io/2023/03/12/QtStudy/",
            "title": "Qt Study",
            "date_published": "2023-03-12T15:12:16.000Z",
            "content_html": "<h1 id=\"qt-核心\"><a class=\"markdownIt-Anchor\" href=\"#qt-核心\">#</a> Qt 核心</h1>\n<h2 id=\"元对象系统\"><a class=\"markdownIt-Anchor\" href=\"#元对象系统\">#</a> 元对象系统</h2>\n<p>Qt 元对象系统提供了对象间的通信机制（信号和槽）、运行时类型信息和动态属性系统的支持，是标准 <code>C++</code>  的一个扩展，它使 Qt 能够更好的实现 GUI 用户图形界面编程。Qt 的元对象系统不支持 C++ 模板。</p>\n<p>Qt 元对象系统基于以下三个事实：</p>\n<ul>\n<li>基类 <code>QObject</code> ：任何需要使用元对象系统功能的类必须继承自 <code>QObject</code> 。 <code>QObject</code>  是 <code>Qt</code>  中最基本的类，是所有 <code>Qt</code>  对象的基类。</li>\n<li>Q_OBJECT 宏：Q_OBJECT 宏必须出现在类的私有声明区，用于启动元对象的特性。</li>\n<li>元对象编译器（moc, Meta-Object Compiler）：为 <code>QObject</code>  子类实现元对象特性提供必要的代码实现。（将 <code>Qt</code>  对 <code>C++</code>  的语法拓展编译还原标准 C++ 代码）</li>\n</ul>\n<h2 id=\"对象树\"><a class=\"markdownIt-Anchor\" href=\"#对象树\">#</a> 对象树</h2>\n<p>什么是 Qt 对象：定义一个类，继承于  <code>QObject</code>  ，因此而产生的对象叫 Qt 对象</p>\n<ul>\n<li>对象通过对象树的形式组织。</li>\n<li>对象树主要用来内存回收，对象树之间不一定是继承关系</li>\n<li>Qt 对象间可以存在父子关系\n<ul>\n<li>每一个对象都保存有它所有子对象的指针</li>\n<li>每一个对象都有一个指向其父对象的指针</li>\n<li>可以使用 <code>findChild()</code>  或 <code>findChildren()</code>  查找对象的子对象。</li>\n</ul>\n</li>\n<li>当指定 Qt 对象的父对象时，该对象将自动将自己添加到父对象的 <code>children()</code>  列表中\n<ul>\n<li>其父对象会在<strong>子对象链表</strong>中加入该对象的指针</li>\n<li>该对象会保存指向其父对象的指针</li>\n</ul>\n</li>\n<li>当 Qt 对象被销毁时\n<ul>\n<li>将自己从父对象的 Children List 移除</li>\n<li>将自己的 Children List 中的所有对象销毁</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"信号和槽\"><a class=\"markdownIt-Anchor\" href=\"#信号和槽\">#</a> 信号和槽</h2>\n<ul>\n<li>\n<p>信号（signal）和槽（slot）是 Qt 自行定义的一种通信机制，实现对象之间的数据交互。</p>\n</li>\n<li>\n<p>当用户或系统触发了一个动作，导致某个控件的状态发生了改变，该控件就会发射一个信号，即调用其<strong>类中一个特定的成员函数（信号）</strong>，同时还能携带有必要的参数。</p>\n</li>\n<li>\n<p>槽函数与普通成员函数没有太多区别，差别在于其功能。槽函数更多体现为对某种特定信号的处理，可以将槽和其他对象信号建立连接，这样当发射信号时，槽函数能将被触发和执行，进而来完成机体功能。</p>\n</li>\n<li>\n<p>信号的定义</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">XX</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Q_OBJECT   <span class=\"token comment\">// 宏，moc 链接工具，元对象编译器，处理 QT 语法扩展，还原成标准 c++ 代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">signal_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 信号函数，只需声明，不能写定义。QT 语法扩展，普通 C++ 无法编译</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>槽的定义</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">XX</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">slot_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 槽函数可以连接到某个信号上，当信号被发射时，槽函数将被触发和执行。另外槽函数可以当作普通成员函数使用。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>信号和槽的链接</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QObject<span class=\"token operator\">*</span> sender<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 信号发送对象指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                 <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> signal<span class=\"token punctuation\">,</span> \t\t<span class=\"token comment\">// 要发送的的信号函数，可以使用 “SIGNAL (..)” 宏进行类型转换</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                 <span class=\"token keyword\">const</span> QObject<span class=\"token operator\">*</span> receiver<span class=\"token punctuation\">,</span> \t<span class=\"token comment\">// 信号的接收对象指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 要执行的槽函数，使用 “SLOT (..)” 宏进行类型转换</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t\t\t\t\t\t\t <span class=\"token comment\">// 信号函数连同参数类型转换为 const char*</span></pre></td></tr></table></figure></li>\n<li>\n<p>实例：</p>\n<ul>\n<li>按钮点击时发送信号：clicked ()</li>\n<li>实现标签关闭功能：close ()</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    QApplication <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    MainWindow w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    w<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">640</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 创建标签控件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    QLabel <span class=\"token function\">label</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是标签\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    label<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 创建按钮空间，栈创建，系统自动销毁</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    QPushButton <span class=\"token function\">btn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是按钮\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    btn<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    QPushButton <span class=\"token function\">btn2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"退出\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    btn2<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    w<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 点击按钮关闭标签</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>btn<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">clicked</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>label<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 增加退出按钮，实现退出应用程序</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>btn2<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">clicked</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                     <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    \t\t\t  <span class=\"token comment\">//&amp;a, SLOT(closeAllWindows())</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    \t\t\t  <span class=\"token comment\">//&amp;w, SLOT(close())</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>信号和槽连接的语法要求与应用</p>\n<ul>\n<li>\n<p>信号和槽参数要一致</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//error</span></pre></td></tr></table></figure></li>\n<li>\n<p>可以带有缺省参数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>信号函数参数可以多于槽函数，多于参数将被忽略</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>信号和槽函数（一对多）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B1<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B2<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>信号和槽函数（多对一）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A1<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A2<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>两个信号直接连接，信号级联</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>A1<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">sigfun1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> A2<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">slotfun2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>实例：创建滑块（QSlider）和选值框（QSpinBox），通过信号和槽的机制，保持同步运行</p>\n<ul>\n<li>QSlider\n<ul>\n<li><code>void setRange(int min, int max);//设置滑动范围</code></li>\n<li><code>void setValue(int)[slot];//设置当前位置</code></li>\n<li><code>void valueChange(int value)[signal];//滑动时发送信号</code></li>\n</ul>\n</li>\n<li>QSpinBox\n<ul>\n<li><code>void setRange(int min, int max);//设置数值改变范围</code></li>\n<li><code>void setValue(int)[slot];//设置当前数值</code></li>\n<li><code>void valueChange(int value)[signal];//选值框数值改变时发送信号</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>QDialog parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    parent<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 创建水平滑块</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    QSlider <span class=\"token function\">slider</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>Horizontal<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    slider<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    slider<span class=\"token punctuation\">.</span><span class=\"token function\">setRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 创建选值框</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    QSpinBox <span class=\"token function\">spin</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    spin<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">220</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    spin<span class=\"token punctuation\">.</span><span class=\"token function\">setRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 滑块滑动让选值框数值改变</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>slider<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">valueChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                     <span class=\"token operator\">&amp;</span>spin<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 选值框数值改变让滑块随之滑动</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>spin<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">valueChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                     <span class=\"token operator\">&amp;</span>slider<span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    parent<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>案例：获取系统时间</p>\n</li>\n<li>\n<p>案例：实现计算器</p>\n</li>\n<li>\n<p>通过 Qt designer 重构计算器案例</p>\n<ul>\n<li>\n<p>使用转换器 (uic)，将 calculatordialog.ui (xml) 转换为 ui_calcculatordialog.h (c++)</p>\n<p><code>uic calculatordialog.ui -o ui_calcculatordialog.h</code></p>\n<p>(不手动转换，makefile 中也会进行转化)</p>\n</li>\n<li>\n<p>使用 ui_calculatordialog.h 里面已经自动生成的界面相关代码，完成代码编写</p>\n<ol>\n<li>通过继承方式，将界面代码继承过来直接使用</li>\n<li>通过组合方式，添加一个界面类的成员变量 (ui)，再通过该成员访问界面相关的代码，实际开发中，推荐使用这种方法。</li>\n</ol>\n</li>\n<li>\n<p>构建、测试</p>\n</li>\n</ul>\n</li>\n<li>\n<p>案例：登录对话框</p>\n</li>\n</ul>\n<h2 id=\"qobject基类\"><a class=\"markdownIt-Anchor\" href=\"#qobject基类\">#</a> QObject 基类</h2>\n<h2 id=\"qt中使用到的设计模式\"><a class=\"markdownIt-Anchor\" href=\"#qt中使用到的设计模式\">#</a> Qt 中使用到的设计模式</h2>\n<ol>\n<li>\n<p>单例模式</p>\n<p>qApp 宏返回指向 QApplication 的单例</p>\n<p>特点：单例模式确保一个类只有一个实例，并提供全局访问点。这样可以避免在系统中出现多个相同的对象，从而提高系统的性能和可维护性。</p>\n<p>应用场景：单例模式常用于需要全局访问的对象，比如说日志记录器、数据库连接池等。</p>\n<p>说明：常见用法是把类的构造函数设为私有，然后提供一个类的静态函数来获取单例对象</p>\n<p>如下代码，通过宏 aApp 返回 instance。可以看到，类 QCoreApplication 的构造函数是 private。</p>\n<p>时间和空间：懒汉式是典型的时间换出空间。饿汉式是典型的空间换时间。<br>\n线程安全：不加同步的懒汉式的线程不安全的。饿汉式是线程安全的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">qApp</span> <span class=\"token expression\"><span class=\"token class-name\">QCoreApplication</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Q_CORE_EXPORT</span> QCoreApplication</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">QT_NO_QOBJECT</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QObject</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">QT_NO_QOBJECT</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Q_PROPERTY</span><span class=\"token punctuation\">(</span>QString applicationName READ applicationName WRITE setApplicationName NOTIFY applicationNameChanged<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">Q_PROPERTY</span><span class=\"token punctuation\">(</span>QString applicationVersion READ applicationVersion WRITE setApplicationVersion NOTIFY applicationVersionChanged<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">Q_PROPERTY</span><span class=\"token punctuation\">(</span>QString organizationName READ organizationName WRITE setOrganizationName NOTIFY organizationNameChanged<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Q_PROPERTY</span><span class=\"token punctuation\">(</span>QString organizationDomain READ organizationDomain WRITE setOrganizationDomain NOTIFY organizationDomainC</pre></td></tr></table></figure></li>\n<li>\n<p>工厂模式</p>\n<ul>\n<li>创建一个新的类，可以将这个类称之为工厂类。对于简单工厂模式来说，需要的工厂类只有一个。</li>\n<li>在这个工厂类中添加一个公共的成员函数，通过这个函数来创建我们需要的对象，关于这个函数一般将其称之为工厂函数。</li>\n<li>关于使用，首先创建一个工厂类对象，然后通过这个对象调用工厂函数，这样就可以生产出一个指定类型的实例对象了。</li>\n</ul>\n</li>\n<li>\n<p>原型模式（Prototype Pattern）</p>\n<p>特点：原型模式通过复制现有的对象来创建新的对象。这样可以避免重复创建对象，从而提高系统的性能。</p>\n<p>应用场景：原型模式常用于创建复杂对象，尤其是当对象的创建过程很耗时、耗资源时。比如说，一个复杂的对象需要从数据库中读取数据并进行计算，这时可以使用原型模式来避免重复读取数据库，提高系统的性能。</p>\n<p>说明：一般用法就是在类里定义一个 clone 方法，用来创建新的对象</p>\n<p><strong>原型模式重点在于重载 operator = ()</strong>，实现拷贝构造实现快速生成一个当前类的副本目标<br>\n经常用在 class 拷贝，貌似好像没有怎么实现过，因为都是传 Class 地址。这个模式实现的可能就只有 Qt 中的 QString class 还有带有拷贝构造的容器类型</p>\n</li>\n<li>\n<p>反射模式</p>\n<p>反射就是指对象成员的自我说明。 Qt 元对象模式就是反射模式。QObject 拥有 QMetaObject、QMetaProperty 类就能实现反射模式。</p>\n</li>\n<li>\n<p>命令模式</p>\n<p>命令模式：把操作封装成具有公共执行接口的对象。这样就可以把操作放到一个队列中，可以实现取消已经执行的操作。 Qt 中 QUndoCommand、QRunnable、QAction 可以看成是命令模式。</p>\n<p>命令模式将一个请求封装成一个对象，从而可以对请求进行参数化、队列化、记录日志等操作。这样可以使得系统更加灵活、可扩展。</p>\n<p>应用场景：命令模式常用于需要将请求进行参数化、队列化、记录日志等操作的情况下。比如说，一个系统需要对多个操作进行记录，这时可以使用命令模式来记录每个操作。</p>\n<p>说明：命令模式实现了请求发送者和接收者之间的解耦，请求发送者把操作所需的信息封装成一个对象发给接收者，接收者不需要知道它具体怎么操作，只需要调用某个固定的方法就可以完成请求。</p>\n</li>\n<li>\n<p>观察者模式</p>\n<p>观察者模式（又被称为发布 - 订阅（Publish/Subscribe）模式，属于行为型模式的一种，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。 Qt 中事件循环、信号和槽、视图模型都可以视为观察者模式。其实事件循环是真正的观察者模式，信号和槽由事件实现、视图模型由信号和槽实现。</p>\n</li>\n<li>\n<p>组合模式</p>\n<p>Qt 中由 QObject 实现的父子类就是组合模式。</p>\n<p>特点：组合模式将对象组合成树形结构，并以统一的方式处理这些对象。这样可以使得系统更加灵活、可扩展。</p>\n<p>应用场景：组合模式常用于处理复杂的层次结构，比如说文件系统、GUI 界面等。在这些系统中，通常需要对不同的对象进行统一处理，比如遍历、增加、删除等，这时可以使用组合模式来处理这些对象。</p>\n<p>说明：Qt 中的 QWidget 就用到了组合模式，每一个控件都由 QWidget 或其派生类派生，它们之间存在着树状的层级关系，并且都有一些共有的方法，比如 QPaintEvent，setParent，move，resize 等。</p>\n</li>\n</ol>\n<h1 id=\"qt-模板库-工具类及控件\"><a class=\"markdownIt-Anchor\" href=\"#qt-模板库-工具类及控件\">#</a> Qt 模板库、工具类及控件</h1>\n<h1 id=\"qt-窗口\"><a class=\"markdownIt-Anchor\" href=\"#qt-窗口\">#</a> Qt 窗口</h1>\n<ul>\n<li>\n<p>创建控件时，可以指定停靠在某个父窗口上面，这时控件将作为子窗口被束缚在其父窗口的内部，并伴随父窗口一起移动、隐藏、显示和关闭；否则该控件将作为独立窗口显示在屏幕上，且游离于其他窗口之外。</p>\n</li>\n<li>\n<p>QWidget 及其子类的对象可以作为其他控件的父窗口</p>\n</li>\n<li>\n<p>常用的父窗口类有如下三个：</p>\n<ul>\n<li>QWidget</li>\n<li>QMainWindow（主窗口）//QWidget 的直接子类</li>\n<li>QDialog（对话框）//QWidget 的直接子类</li>\n</ul>\n</li>\n<li>\n<p>父窗口的析构函数会自动销毁其所有的子窗口对象，因此即使子窗口对象是通过 new 操作符动态创建的，可以不显式的执行 delete 操作，而且不用担心内存泄漏的问题，只要保证父窗口对象被正确销毁，其子窗口也将随之被销毁。</p>\n</li>\n<li>\n<p>设置窗口的位置和大小</p>\n<ul>\n<li>void move(int x, int y);</li>\n<li>void resize(int w, int h);</li>\n</ul>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMainWindow></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QWidget></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QApplication></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QLabel></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDialog></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QPushButton></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    QApplication <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    MainWindow w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    w<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">640</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 创建标签控件</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    QLabel <span class=\"token function\">label</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是标签\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    label<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 创建按钮空间，栈创建，系统自动销毁</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    QPushButton <span class=\"token function\">btn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是按钮\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    btn<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    btn<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 堆创建，new 对象如果指定了父窗口指针，可以不写 delete，随父窗口销毁</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    QPushButton<span class=\"token operator\">*</span> btn2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QPushButton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我也是按钮\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    btn2<span class=\"token operator\">-></span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    btn2<span class=\"token operator\">-></span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    w<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li></li>\n</ul>\n<h1 id=\"qt-事件处理机制\"><a class=\"markdownIt-Anchor\" href=\"#qt-事件处理机制\">#</a> Qt 事件处理机制</h1>\n<h2 id=\"什么是事件\"><a class=\"markdownIt-Anchor\" href=\"#什么是事件\">#</a> 什么是事件</h2>\n<ul>\n<li>\n<p>在 Qt 中，是以事件驱动 UI 工具集，包括信号和槽都依赖于 Qt 的事件处理机制。</p>\n</li>\n<li>\n<p>通常事件是由窗口系统或者 Qt 自身产生的，用以响应所发生的各类事情，比如用户按下并释放了键盘或者鼠标、窗口因缩放而需要重绘、定时器到期而应有的动作。</p>\n</li>\n<li>\n<p>事件比信号更原始，一个下压式按钮，首先感受到的是鼠标事件，在进行必要的处理以产生按钮下沉继而弹起的视觉效果之后，才会发射 clicked () 信号</p>\n<p>按钮 -&gt; 事件 emit clicked ()-&gt; 信号 clicked ()-&gt; 槽 onClicked ()</p>\n</li>\n</ul>\n<h2 id=\"如何处理事件\"><a class=\"markdownIt-Anchor\" href=\"#如何处理事件\">#</a> 如何处理事件</h2>\n<ul>\n<li>\n<p>Qt 中，事件被封装成对象，所有的事件对象类型都继承自抽象类 QEvent</p>\n</li>\n<li>\n<p>当事件发生时，首先被调用的是 QObject 类中的虚函数 event ()，其参数 (QEvent) 标识了具体的事件类型。</p>\n</li>\n<li>\n<p>在 Qt 桌面应用（Qt Widgets Application）开发中，QWidget 类覆盖了其基类中的 event () 虚函数，并根据具体事件调用具体事件处理函数：</p>\n<ul>\n<li><code>void QWidget::mousePressEvent(QMouseEvent* e);//鼠标按下事件</code></li>\n<li><code>void QWidget::mouseReleaseEvent(QMouseEvent* e);//鼠标释放事件</code></li>\n<li><code>void QWidget::mouseMoveEvent(QMouseEvent* e);//鼠标移动事件</code></li>\n<li><code>void QWidget::paintEvent(QPaintEvent* e);//绘图事件</code></li>\n</ul>\n</li>\n<li>\n<p>所有的事件处理函数都是虚函数，可以被 QWidget 的子类覆盖，以提供针对不同窗口控件类型事件处理，控件的使用者所关心的往往是定义什么样的槽处理什么样的信号，而控件的实现者更关心覆盖哪些事件处理函数。</p>\n</li>\n<li>\n<p>如果程序员希望在窗口中自定义的处理时间，可以继承 QWidget 或者其子类，比如 QDialog、QMainWindow，在自定义的窗口子类中重写事件处理函数，当相应事件被触发时会利用多态的语法机制，所执行到的事件处理函数，将是子类中重写的版本，从而实现程序员想要的事件处理效果。</p>\n</li>\n</ul>\n<h2 id=\"绘图事件\"><a class=\"markdownIt-Anchor\" href=\"#绘图事件\">#</a> 绘图事件</h2>\n<ul>\n<li>通过绘图事件，可以实现自定义的图像绘制，当有下列情况之一发生时，将触发窗口的绘制事件，即 QWidget 类的 paintEvent () 虚函数会被调用：\n<ul>\n<li>窗口被创建以后第一次显示出来</li>\n<li>窗口由隐藏状态转变为可见状态</li>\n<li>窗口由最小化状态转变为正常或最大化状态</li>\n<li>窗口因尺寸大小的变化需要呈现更多的内容</li>\n<li>QWidget 类的 update ()/repaint () 成员函数被调用</li>\n</ul>\n</li>\n<li>如果希望在自己的窗口中显示某个图像，在 QWidget 的窗口子类中可以重写绘图事件函数 paintEvent，在其中可以用 QPainter（Qt 二位图形引擎）实现指定的图像绘制、渲染等操作。</li>\n<li>案例：基于资源的图片浏览器</li>\n</ul>\n<h2 id=\"定时器事件\"><a class=\"markdownIt-Anchor\" href=\"#定时器事件\">#</a> 定时器事件</h2>\n<ul>\n<li>Qt 通过两套机制为应用程序提供定时功能\n<ul>\n<li>定时器事件，由 QObject 提供</li>\n<li>定时器信号，由 QTimer 提供</li>\n</ul>\n</li>\n<li>通过定时器事件实现定时器\n<ul>\n<li><code> int QObjectL::startTimer(int interval);</code>  启动定时器，以后每隔 interval 毫秒触发一次定时器事件，返回定时器 ID</li>\n<li><code> void QObject::timerEvent(QTimerEvent* )[virtual];//定时器事件处理函数</code></li>\n<li><code> void QObject::killTimer(int id);//关闭参数id所标识的定时器</code></li>\n</ul>\n</li>\n<li>案例：基于定时器的摇奖机</li>\n</ul>\n<h2 id=\"鼠标和键盘事件\"><a class=\"markdownIt-Anchor\" href=\"#鼠标和键盘事件\">#</a> 鼠标和键盘事件</h2>\n<p>鼠标事件</p>\n<ul>\n<li>QWidget 类定义了以下虚函数提供对鼠标事件的处理，其参数 QMouseEvent 描述了鼠标事件的细节，如引发事件的鼠标按键、鼠标所在的位置等\n<ul>\n<li><code> virtual void mousePressEvent(QMouseEvent* e);//鼠标按下</code></li>\n<li><code> virtual void mouseReleaseEvent(QMouseEvent* e);//鼠标释放</code></li>\n<li><code> virtual void mouseDoubleClickEvent(QMouseEvent* e);//鼠标双击</code></li>\n<li><code> virtual void mouseMoveEvent(QMouseEvent* e);//鼠标移动</code></li>\n</ul>\n</li>\n<li>案例：鼠标测试，通过鼠标左键拖拽 label 方块移动</li>\n</ul>\n<p>键盘事件</p>\n<h1 id=\"qt-模型视图结构\"><a class=\"markdownIt-Anchor\" href=\"#qt-模型视图结构\">#</a> Qt 模型 / 视图结构</h1>\n<p>MVC 设计模式是起源于 Smalltalk 的一种与用户界面相关的设计模式。通过使用此模式，可以有效地分离数据和用户界面。</p>\n<p>MVC 设计模式包括三个元素：</p>\n<ul>\n<li>表示数据的模型（Model）</li>\n<li>表示用户界面的视图（View）</li>\n<li>定义了用户在界面上操作的控制器（Controller）</li>\n</ul>\n<p>Qt 中将视图和控制器部件结合在一起，使得框架更为简洁。为了灵活的处理用户输入，Qt 框架引入了代理（delegate）。通过使用代理，能够自定义数据条目（item）的显示和编辑方式。</p>\n<p>Qt 的模型 / 视图结构分为三部分</p>\n<ul>\n<li>\n<p><strong>模型（Model）</strong></p>\n<p>模型与数据源通信，并为其他部件提供接口；</p>\n</li>\n<li>\n<p><strong>视图（View）</strong></p>\n<p>视图从模型中获得用来引用数据条目的模型索引 (Model Index)。</p>\n</li>\n<li>\n<p><strong>代理（Delegate）</strong></p>\n<p>在视图中，代理负责绘制数据条目，当编辑条目时，代理和模型直接进行通信。</p>\n</li>\n</ul>\n<p>Model/View/Delegate 之间通过信号和槽进行通信，关系如下：</p>\n<ul>\n<li>数据发生改变时，模型发出信号通知视图。</li>\n<li>用户对界面进行操作，视图发出信号。</li>\n<li>代理发出信号告知模型和视图编辑器目前的状态。</li>\n</ul>\n<p><img data-src=\"image-20230405120120465.png\" alt=\"image-20230405120120465\"></p>\n<h1 id=\"qt-数据库\"><a class=\"markdownIt-Anchor\" href=\"#qt-数据库\">#</a> Qt 数据库</h1>\n<ul>\n<li>\n<p>数据库是指以一定方式存储在一起，能为多个用户共享，具有尽可能小的冗余特性，是与应用程序彼此独立的数据集合。</p>\n</li>\n<li>\n<p>商业数据库</p>\n<ul>\n<li>甲骨文 Oracle</li>\n<li>微软 Sqlserver</li>\n<li>IBM 的 DB2</li>\n</ul>\n</li>\n<li>\n<p>非商业数据库</p>\n<ul>\n<li>甲骨文 Mysql</li>\n<li>开源的 SQLite</li>\n</ul>\n</li>\n<li>\n<p>SQLite 是一个轻量级的开源数据库，源代码完全公开不受版权限制，实现了自给自足的、无服务器、零配置的 SQL 数据库引擎，也是最广泛使用的关系型数据库</p>\n</li>\n<li>\n<p>SQLite 引擎不是程序与之通信的独立进程，而是以静态库或共享库的方式连接到程序中，而不同于客户 - 服务器数据库连接方式，所以主要的使用方法是在编程语言内的直接 API 调用，当前主流编程语言都提供了 sqlite 操作的 API 接口</p>\n</li>\n<li>\n<p>SQLite 在资源消耗、实时性和可操作性有着出色的表现，整个数据库（定义、表、索引和数据本身）都在宿主主机上，存储在一个单一的文件中，通常 SQLite 的工作是在开始一个事物的时候，锁定整个数据文件而实现的。</p>\n</li>\n<li>\n<p>SQLite 主要特性</p>\n<ul>\n<li>无服务器的</li>\n<li>可以不用配置，安装和管理十分简单</li>\n<li>数据库存储在一个单一的跨平台的磁盘文件</li>\n<li>轻量级，完全配置时小于 400KiB，省略可选功能配置时小于 250KiB</li>\n<li>自给自足不需要外部依赖</li>\n<li>支持 SQL92 标准的大多数查询语言的功能</li>\n<li>事务兼容 ACID，允许从多个进程或线程安全访问</li>\n</ul>\n</li>\n<li>\n<p>sqlite3 常用命令</p>\n<ul>\n<li><code> .help</code></li>\n<li><code> .database  //查看数据库的名字和对应的文件名</code></li>\n<li><code> .open xxx.db</code></li>\n<li><code> .table    //查看数据表的名字</code></li>\n<li><code> .schema  //查看数据表创建时信息</code></li>\n<li><code> .mode   //设置显示模式，如tab/list/column/csv</code></li>\n<li><code> .nullvalue  //设置空白字段显示的字符串</code></li>\n<li><code> .header on  //显示数据表的表头</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"基于qt框架实现学生成绩管理系统\"><a class=\"markdownIt-Anchor\" href=\"#基于qt框架实现学生成绩管理系统\">#</a> 基于 Qt 框架实现学生成绩管理系统</h1>\n<h1 id=\"qt-网络编程\"><a class=\"markdownIt-Anchor\" href=\"#qt-网络编程\">#</a> Qt 网络编程</h1>\n<p><img data-src=\"https://subingwen.cn/linux/socket/ip%E5%9B%9B%E5%B1%82%E5%8D%8F%E8%AE%AE%E6%A8%A1%E5%9E%8B.png\" alt=\"img\"></p>\n<ul>\n<li>物理层：负责最后将信息编码成电流脉冲或其它信号用于网上传输</li>\n<li>数据链路层:<br>\n 数据链路层通过物理网络链路供数据传输。<br>\n规定了 0 和 1 的分包形式，确定了网络数据包的形式；</li>\n<li>网络层<br>\n网络层负责在源和终点之间建立连接；<br>\n此处需要确定计算机的位置，通过 IPv4，IPv6 格式的 IP 地址来找到对应的主机</li>\n<li>传输层<br>\n传输层向高层提供可靠的端到端的网络数据流服务。<br>\n每一个应用程序都会在网卡注册一个端口号，该层就是端口与端口的通信</li>\n<li>会话层<br>\n会话层建立、管理和终止表示层与实体之间的通信会话；<br>\n建立一个连接（自动的手机信息、自动的网络寻址）;</li>\n<li>表示层:<br>\n 对应用层数据编码和转化，确保以一个系统应用层发送的信息 可以被另一个系统应用层识别；</li>\n</ul>\n<p>TCP 通信流程</p>\n<p>TCP 是一个面向连接的，安全的，流式传输协议，这个协议是一个传输层协议。</p>\n<ul>\n<li>面向连接：是一个双向连接，通过三次握手完成，断开连接需要通过四次挥手完成。</li>\n<li>安全：tcp 通信过程中，会对发送的每一数据包都会进行校验，如果发现数据丢失，会自动重传</li>\n<li>流式传输：发送端和接收端处理数据的速度，数据的量都可以不一致</li>\n</ul>\n<p>服务器端通信流程</p>\n<ol>\n<li>\n<p>创建用于监听的套接字，这个套接字是一个文件描述符 (监听的)</p>\n<p><code>int lfd = socket();</code></p>\n</li>\n<li>\n<p>将得到的监听的文件描述符和本地的 IP 端口进行绑定</p>\n<p><code>bind();</code></p>\n</li>\n<li>\n<p>设置监听 (成功之后开始监听，监听的是客户端的连接)</p>\n<p><code>listen();</code></p>\n</li>\n<li>\n<p>等待并接受客户端的连接请求，建立新的连接，会得到一个新的文件描述符 (通信的)，没有新连接请求就阻塞</p>\n<p><code>int cfd = accept();</code></p>\n</li>\n<li>\n<p>通信，读写操作默认都是阻塞的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>断开连接，关闭套接字</p>\n<p><code>close();</code></p>\n</li>\n</ol>\n<blockquote>\n<p>在 tcp 的服务器端，有两类文件描述符</p>\n<p>监听的文件描述符<br>\n只需要有一个<br>\n不负责和客户端通信，负责检测客户端的连接请求，检测到之后调用 accept 就可以建立新的连接<br>\n通信的文件描述符<br>\n负责和建立连接的客户端通信<br>\n如果有 N 个客户端和服务器建立了新的连接，通信的文件描述符就有 N 个，每个客户端和服务器都对应一个通信的文件描述符</p>\n</blockquote>\n<p>客户端的通信流程</p>\n<p>在单线程的情况下客户端通信的文件描述符有一个，没有监听的文件描述符</p>\n<ol>\n<li>\n<p>创建一个通信的套接字</p>\n<p><code>int cfd = socket();</code></p>\n</li>\n<li>\n<p>连接服务器，需要知道服务器绑定的 IP 和端口</p>\n<p><code>connect();</code></p>\n</li>\n<li>\n<p>通信</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>断开连接，关闭文件描述符 (套接字)</p>\n<p><code>close();</code></p>\n</li>\n</ol>\n<h2 id=\"套接字\"><a class=\"markdownIt-Anchor\" href=\"#套接字\">#</a> 套接字</h2>\n<p>在标准 C++ 没有提供专门用于套接字通信的类，所以只能使用操作系统提供的基于 C 的 API 函数，基于这些 C 的 API 函数我们也可以封装自己的 C++ 类。</p>\n<p>但是 Qt 就不一样了，它是 C++ 的一个框架并且里边提供了用于套接字通信的类（TCP、UDP）这样就使得我们的操作变得更加简单了（当然，在 Qt 中使用标准 C 的 API 进行套接字通信也是完全没有问题的）。下面，给大家讲一下如果使用相关类的进行 TCP 通信。</p>\n<p>使用 Qt 提供的类进行基于 TCP 的套接字通信需要用到两个类：</p>\n<ul>\n<li>QTcpServer：服务器类，用于监听客户端连接以及和客户端建立连接。</li>\n<li>QTcpSocket：通信的套接字类，客户端、服务器端都需要使用。</li>\n</ul>\n<p>这两个套接字通信类都属于网络模块 network。</p>\n<h2 id=\"qtcpserve\"><a class=\"markdownIt-Anchor\" href=\"#qtcpserve\">#</a> QTcpServe</h2>\n<p>QTcpServer 类用于监听客户端连接以及和客户端建立连接，在使用之前先介绍一下这个类提供的一些常用 API 函数：</p>\n<ul>\n<li>\n<p>构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">QTcpServer</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> Q_NULLPTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>给监听的套接字设置监听</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QHostAddress <span class=\"token operator\">&amp;</span>address <span class=\"token operator\">=</span> QHostAddress<span class=\"token double-colon punctuation\">::</span>Any<span class=\"token punctuation\">,</span> quint16 port <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 判断当前对象是否在监听，是返回 true，没有监听返回 false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">isListening</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 如果当前对象正在监听返回监听的服务器地址信息，否则返回 QHostAddress::Null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>QHostAddress <span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">serverAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 如果服务器正在侦听连接，则返回服务器的端口；否则返回 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>quint16 <span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">serverPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr></table></figure><p>参数：</p>\n<ul>\n<li>address：通过类 QHostAddress 可以封装 IPv4、IPv6 格式的 IP 地址，QHostAddress::Any 表示自动绑定</li>\n<li>port：如果指定为 0 表示随机绑定一个可用端口。使用时要指定一个端口</li>\n</ul>\n<p>返回值：</p>\n<ul>\n<li>绑定成功返回 true，失败返回 false</li>\n</ul>\n</li>\n<li>\n<p>得到和客户端建立连接之后用于通信的 QTcpSocket 套接字对象，它是 QTcpServer 的一个子对象，当 QTcpServer 对象析构的时候会自动析构这个子对象，当然也可自己手动析构，建议用完之后自己手动析构这个通信的 QTcpSocket 对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>QTcpSocket <span class=\"token operator\">*</span><span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">nextPendingConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>阻塞等待客户端发起的连接请求，不推荐在单线程程序中使用，建议使用非阻塞方式处理新连接，即使用信号 newConnection () 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">waitForNewConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> msec <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token operator\">*</span>timedOut <span class=\"token operator\">=</span> Q_NULLPTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数：</p>\n<ul>\n<li>msec：指定阻塞的最大时长，单位为毫秒（ms）</li>\n<li>timeout：传出参数，如果操作超时 timeout 为 true，没有超时 timeout 为 false</li>\n</ul>\n</li>\n<li>\n<p>信号</p>\n<ul>\n<li>\n<p>当接受新连接导致错误时，将发射如下信号。socketError 参数描述了发生的错误相关的信息。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>signal<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">acceptError</span><span class=\"token punctuation\">(</span>QAbstractSocket<span class=\"token double-colon punctuation\">::</span>SocketError socketError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>每次有新连接可用时都会发出 newConnection () 信号。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>signal<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QTcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"qtcpsocket\"><a class=\"markdownIt-Anchor\" href=\"#qtcpsocket\">#</a> QTcpSocket</h2>\n<p>QTcpSocket 是一个套接字通信类，不管是客户端还是服务器端都需要使用。在 Qt 中发送和接收数据也属于 IO 操作（网络 IO），先来看一下这个类的继承关系：</p>\n<p><img data-src=\"https://subingwen.cn/qt/socket-tcp/image-20210512174459252.png\" alt=\"image-20210512174459252\"></p>\n<ul>\n<li>\n<p>构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">QTcpSocket</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">QTcpSocket</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> Q_NULLPTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>连接服务器，需要指定服务器端绑定的 IP 和端口信息。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QAbstractSocket</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connectToHost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QString <span class=\"token operator\">&amp;</span>hostName<span class=\"token punctuation\">,</span> quint16 port<span class=\"token punctuation\">,</span> OpenMode openMode <span class=\"token operator\">=</span> ReadWrite<span class=\"token punctuation\">,</span> NetworkLayerProtocol protocol <span class=\"token operator\">=</span> AnyIPProtocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QAbstractSocket</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connectToHost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QHostAddress <span class=\"token operator\">&amp;</span>address<span class=\"token punctuation\">,</span> quint16 port<span class=\"token punctuation\">,</span> OpenMode openMode <span class=\"token operator\">=</span> ReadWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 Qt 中不管调用读操作函数接收数据，还是调用写函数发送数据，操作的对象都是本地的由 Qt 框架维护的一块内存。因此，调用了发送函数数据不一定会马上被发送到网络中，调用了接收函数也不是直接从网络中接收数据，关于底层的相关操作是不需要使用者来维护的。</p>\n</li>\n<li>\n<p>接收数据</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 指定可接收的最大字节数 maxSize 的数据到指针 data 指向的内存中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>qint64 <span class=\"token class-name\">QIODevice</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span> qint64 maxSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 指定可接收的最大字节数 maxSize，返回接收的字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>QByteArray <span class=\"token class-name\">QIODevice</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>qint64 maxSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 将当前可用操作数据全部读出，通过返回值返回读出的字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>QByteArray <span class=\"token class-name\">QIODevice</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>发送数据</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 发送指针 data 指向的内存中的 maxSize 个字节的数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>qint64 <span class=\"token class-name\">QIODevice</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span> qint64 maxSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 发送指针 data 指向的内存中的数据，字符串以 \\0 作为结束标记</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>qint64 <span class=\"token class-name\">QIODevice</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 发送参数指定的字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>qint64 <span class=\"token class-name\">QIODevice</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QByteArray <span class=\"token operator\">&amp;</span>byteArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"描述qt下tcp通信的整个流程\"><a class=\"markdownIt-Anchor\" href=\"#描述qt下tcp通信的整个流程\">#</a> 描述 Qt 下 Tcp 通信的整个流程</h2>\n<p>具体解释 ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy93d3cuY25ibG9ncy5jb20veXV3ZWlmZW5nL3AvOTM4Mjg0MS5odG1s\">https://www.cnblogs.com/yuweifeng/p/9382841.html</span></p>\n<p>QT 如果要进行<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3NlYXJjaD9xPSVFNyVCRCU5MSVFNyVCQiU5QyVFNyVCQyU5NiVFNyVBOCU4QiZhbXA7c2VhcmNoX3NvdXJjZT1FbnRpdHkmYW1wO2h5YnJpZF9zZWFyY2hfc291cmNlPUVudGl0eSZhbXA7aHlicmlkX3NlYXJjaF9leHRyYT0lN0IlMjJzb3VyY2VUeXBlJTIyJTNBJTIyYXJ0aWNsZSUyMiUyQyUyMnNvdXJjZUlkJTIyJTNBJTIyNjExNzM1MzMyJTIyJTdE\">网络编程</span>首先需要在.pro 中添加如下代码：QT += network</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3NlYXJjaD9xPSVFNiU5QyU4RCVFNSU4QSVBMSVFNSU5OSVBOCVFNyVBQiVBRiZhbXA7c2VhcmNoX3NvdXJjZT1FbnRpdHkmYW1wO2h5YnJpZF9zZWFyY2hfc291cmNlPUVudGl0eSZhbXA7aHlicmlkX3NlYXJjaF9leHRyYT0lN0IlMjJzb3VyY2VUeXBlJTIyJTNBJTIyYXJ0aWNsZSUyMiUyQyUyMnNvdXJjZUlkJTIyJTNBJTIyNjExNzM1MzMyJTIyJTdE\">服务器端</span>:<br>\n\\1. 创建用于监听的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3NlYXJjaD9xPSVFNSVBNSU5NyVFNiU4RSVBNSVFNSVBRCU5NyZhbXA7c2VhcmNoX3NvdXJjZT1FbnRpdHkmYW1wO2h5YnJpZF9zZWFyY2hfc291cmNlPUVudGl0eSZhbXA7aHlicmlkX3NlYXJjaF9leHRyYT0lN0IlMjJzb3VyY2VUeXBlJTIyJTNBJTIyYXJ0aWNsZSUyMiUyQyUyMnNvdXJjZUlkJTIyJTNBJTIyNjExNzM1MzMyJTIyJTdE\">套接字</span><br>\n \\2. 给套接字设置监听<br>\n \\3. 如果有连接到来，监听的套接字会发出信号 newConnected<br>\n\\4. 接收连接，通过 nextPendingConnection () 函数，返回一个 QTcpSocket 类型的套接字对象 (用于通信)<br>\n\\5. 使用用于通信的套接字对象通信<br>\n 1&gt;. 发送数据: write<br>\n2&gt;. 接收数据: readAll/read<br>\n 客户端:<br>\n\\1. 创建用于通信的套接字<br>\n \\2. 连接服务器: connectToHost<br>\n\\3. 连接成功与服务器通信<br>\n 1&gt;. 发送数据: write<br>\n2&gt;. 接收数据: readAll/read</p>\n<h2 id=\"描述qt下udp通信的整个流程\"><a class=\"markdownIt-Anchor\" href=\"#描述qt下udp通信的整个流程\">#</a> 描述 QT 下 udp 通信的整个流程</h2>\n<p>QT 下 udp 通信服务器端和客户端的关系是对等的，做的处理也是一样的.<br>\n\\1. 创建套接字对象<br>\n \\2. 如果需要接收数据，必须绑定端口<br>\n \\3. 发送数据: writeDatagram<br>\n\\4. 接收数据: readDatagram</p>\n<h1 id=\"qt-多线程\"><a class=\"markdownIt-Anchor\" href=\"#qt-多线程\">#</a> Qt 多线程</h1>\n<p>在进行桌面应用程序开发的时候， 假设应用程序在某些情况下需要处理比较复杂的逻辑， 如果只有一个线程去处理，就会导致窗口卡顿，无法处理用户的相关操作。这种情况下就需要使用多线程，其中<strong>一个线程处理窗口事件，其他线程进行逻辑运算，多个线程各司其职，不仅可以提高用户体验还可以提升程序的执行效率。</strong></p>\n<p>在 qt 中使用了多线程，有些事项是需要额外注意的：</p>\n<ul>\n<li>默认的线程在 Qt 中称之为窗口 (ui) 线程，也叫主线程，负责<strong>窗口事件处理</strong>或者<strong>窗口控件数据的更新</strong>。</li>\n<li>子线程负责<strong>后台的业务逻辑处理</strong>，子线程中不能对窗口对象做任何操作，这些事情需要交给窗口线程处理。</li>\n<li>主线程和子线程之间如果要进行数据的传递，需要使用 Qt 中的信号槽机制。</li>\n</ul>\n<h2 id=\"线程类qthread\"><a class=\"markdownIt-Anchor\" href=\"#线程类qthread\">#</a> 线程类 QThread</h2>\n<p>Qt 中提供了一个线程类，通过这个类就可以创建子线程了，Qt 中一共提供了两种创建子线程的方式，后边会依次介绍其使用方式。先来看一下这个类中提供的一些常用 API 函数：</p>\n<h3 id=\"常用公共成员函数\"><a class=\"markdownIt-Anchor\" href=\"#常用公共成员函数\">#</a> 常用公共成员函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// QThread 类常用 API</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">QThread</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> Q_NULLPTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 判断线程中的任务是不是处理完毕了</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">isFinished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 判断子线程是不是在执行任务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// Qt 中的线程可以设置优先级</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 得到当前线程的优先级</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Priority <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setPriority</span><span class=\"token punctuation\">(</span>Priority priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>优先级<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>IdlePriority         <span class=\"token operator\">--</span><span class=\"token operator\">></span> 最低的优先级</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>LowestPriority</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>LowPriority</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>NormalPriority</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>HighPriority</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>HighestPriority</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>TimeCriticalPriority <span class=\"token operator\">--</span><span class=\"token operator\">></span> 最高的优先级</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>InheritPriority      <span class=\"token operator\">--</span><span class=\"token operator\">></span> 子线程和其父线程的优先级相同<span class=\"token punctuation\">,</span> 默认是这个</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 退出线程，停止底层的事件循环</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 退出线程的工作函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> returnCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 调用线程退出函数之后，线程不会马上退出因为当前任务有可能还没有完成，调回用这个函数是</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 等待任务完成，然后退出线程，一般情况下会在 exit () 后边调用这个函数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> time <span class=\"token operator\">=</span> ULONG_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"信号槽\"><a class=\"markdownIt-Anchor\" href=\"#信号槽\">#</a> 信号槽</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 和调用 exit () 效果是一样的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 代用这个函数之后，再调用 wait () 函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>slot<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 启动子线程</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>slot<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>Priority priority <span class=\"token operator\">=</span> InheritPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 线程退出，可能是会马上终止线程，一般情况下不使用这个函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>slot<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">terminate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 线程中执行的任务完成了，发出该信号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 任务函数中的处理逻辑执行完毕了</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>signal<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">finished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 开始工作之前发出这个信号，一般不使用</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>signal<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">started</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"静态函数\"><a class=\"markdownIt-Anchor\" href=\"#静态函数\">#</a> 静态函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回一个指向管理当前执行线程的 QThread 的指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> QThread <span class=\"token operator\">*</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 返回可以在系统上运行的理想线程数 == 和当前电脑的 CPU 核心数相同</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">idealThreadCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 线程休眠函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">msleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> msecs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 单位：毫秒</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> secs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 单位：秒</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> usecs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 单位：微秒</span></pre></td></tr></table></figure><h3 id=\"任务处理函数\"><a class=\"markdownIt-Anchor\" href=\"#任务处理函数\">#</a> 任务处理函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 子线程要处理什么任务，需要写到 run () 中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">protected</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个 run () 是一个虚函数，如果想让创建的子线程执行某个任务，需要写一个子类让其继承 QThread，并且在子类中重写父类的 run () 方法，函数体就是对应的任务处理流程。另外，这个函数是一个受保护的成员函数，不能够在类的外部调用，如果想要让线程执行这个函数中的业务流程，需要通过当前线程对象调用槽函数 start () 启动子线程，当子线程被启动，这个 run () 函数也就在线程内部被调用了。</p>\n<h2 id=\"线程使用方式1\"><a class=\"markdownIt-Anchor\" href=\"#线程使用方式1\">#</a> 线程使用方式 1</h2>\n<ul>\n<li>\n<p>需要创建一个线程类的子类，让其继承 QT 中的线程类 QThread</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QThread</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>重写父类的 run () 方法，在该函数内部编写子线程要处理的具体的业务流程</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QThread</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在主线程中创建子线程对象，new 一个就可以了</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MyThread <span class=\"token operator\">*</span> subThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MyThread<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>启动子线程，调用 start () 方法</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>subThread<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>不能在类的外部调用 run () 方法启动子线程，在外部调用 start () 相当于让 run () 开始运行</p>\n</li>\n</ul>\n<p>当子线程别创建出来之后，父子线程之间的通信可以通过信号槽的方式，注意事项:</p>\n<ul>\n<li>在 Qt 中在子线程中不要操作程序中的窗口类型对象，不允许，如果操作了程序就挂了</li>\n<li>只有主线程才能操作程序中的窗口对象，默认的线程就是主线程，自己创建的就是子线程</li>\n</ul>\n<p>这种在程序中添加子线程的方式是非常简单的，但是也有弊端，假设要在一个子线程中处理多个任务，所有的处理逻辑都需要写到 run () 函数中，这样该函数中的处理逻辑就会变得非常混乱，不太容易维护。</p>\n<h2 id=\"线程使用方式2\"><a class=\"markdownIt-Anchor\" href=\"#线程使用方式2\">#</a> 线程使用方式 2</h2>\n<p>Qt 提供的第二种线程的创建方式弥补了第一种方式的缺点，用起来更加灵活，但是这种方式写起来会相对复杂一些，其具体操作步骤如下：</p>\n<ul>\n<li>\n<p>创建一个新的类，让这个类从 QObject 派生</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWork</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在这个类中添加一个公共的成员函数，函数体就是我们要子线程中执行的业务逻辑</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWork</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 函数名自己指定，叫什么都可以，参数可以根据实际需求添加</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">working</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在主线程中创建一个 QThread 对象，这就是子线程的对象</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>QThread<span class=\"token operator\">*</span> sub <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QThread<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在主线程中创建工作的类对象（千万不要指定给创建的对象指定父对象）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MyWork<span class=\"token operator\">*</span> work <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MyWork</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MyWork<span class=\"token operator\">*</span> work <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MyWork<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// ok</span></pre></td></tr></table></figure></li>\n<li>\n<p>将 MyWork 对象移动到创建的子线程对象中，需要调用 QObject 类提供的 moveToThread () 方法。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// void QObject::moveToThread(QThread *targetThread);</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 如果给 work 指定了父对象，这个函数调用就失败了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 提示： QObject::moveToThread: Cannot move objects with a parent</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>work<span class=\"token operator\">-></span><span class=\"token function\">moveToThread</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 移动到子线程中工作</span></pre></td></tr></table></figure></li>\n<li>\n<p>启动子线程，调用 start (), 这时候线程启动了，但是移动到线程中的对象并没有工作</p>\n</li>\n<li>\n<p>调用 MyWork 类对象的工作函数，让这个函数开始执行，这时候是在移动到的那个子线程中运行的</p>\n</li>\n</ul>\n<p>使用这种多线程方式，假设有多个不相关的业务流程需要被处理，那么就可以创建多个类似于 MyWork 的类，将业务流程放多类的公共成员函数中，然后将这个业务类的实例对象移动到对应的子线程中 moveToThread () 就可以了，这样可以让编写的程序更加灵活，可读性更强，更易于维护。</p>\n<h2 id=\"线程资源释放\"><a class=\"markdownIt-Anchor\" href=\"#线程资源释放\">#</a> 线程资源释放</h2>\n<h2 id=\"qt线程池\"><a class=\"markdownIt-Anchor\" href=\"#qt线程池\">#</a> Qt 线程池</h2>\n<h3 id=\"线程池的原理\"><a class=\"markdownIt-Anchor\" href=\"#线程池的原理\">#</a> 线程池的原理</h3>\n<p>我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题：如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p>\n<p>那么有没有一种办法使得线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务呢？</p>\n<p>线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。线程池线程都是后台线程。每个线程都使用默认的堆栈大小，以默认的优先级运行，并处于多线程单元中。如果某个线程在托管代码中空闲（如正在等待某个事件）, 则线程池将插入另一个辅助线程来使所有处理器保持繁忙。如果所有线程池线程都始终保持繁忙，但队列中包含挂起的工作，则线程池将在一段时间后创建另一个辅助线程但线程的数目永远不会超过最大值。超过最大值的线程可以排队，但他们要等到其他线程完成后才启动。</p>\n<p>在各个编程语言的语种中都有线程池的概念，并且很多语言中直接提供了线程池，作为程序猿直接使用就可以了，下面给大家介绍一下线程池的实现原理：</p>\n<p>线程池的组成主要分为 3 个部分，这三部分配合工作就可以得到一个完整的线程池：</p>\n<ul>\n<li>\n<p>任务队列，存储需要处理的任务，由工作的线程来处理这些任务</p>\n<ul>\n<li>通过线程池提供的 API 函数，将一个待处理的任务添加到任务队列，或者从任务队列中删除</li>\n<li>已处理的任务会被从任务队列中删除</li>\n<li>线程池的使用者，也就是调用线程池函数往任务队列中添加任务的线程就是生产者线程</li>\n</ul>\n</li>\n<li>\n<p>工作的线程（任务队列任务的消费者） ，N 个</p>\n<ul>\n<li>线程池中维护了一定数量的工作线程，他们的作用是是不停的读任务队列，从里边取出任务并处理</li>\n<li>工作的线程相当于是任务队列的消费者角色，</li>\n<li>如果任务队列为空，工作的线程将会被阻塞 (使用条件变量 / 信号量阻塞)</li>\n<li>如果阻塞之后有了新的任务，由生产者将阻塞解除，工作线程开始工作</li>\n</ul>\n</li>\n<li>\n<p>管理者线程（不处理任务队列中的任务），1 个</p>\n<p>它的任务是周期性的对任务队列中的任务数量以及处于忙状态的工作线程个数进行检测</p>\n<ul>\n<li>当任务过多的时候，可以适当的创建一些新的工作线程</li>\n<li>当任务过少的时候，可以适当的销毁一些工作的线程</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://subingwen.cn/qt/threadpool/R9c00030b842edb1ae3d6a2b286e53916\" alt=\"查看源图像\"></p>\n<h3 id=\"qrunnable\"><a class=\"markdownIt-Anchor\" href=\"#qrunnable\">#</a> QRunnable</h3>\n<p>在 Qt 中使用线程池需要先创建任务，<strong>添加到线程池中的每一个任务都需要是一个 QRunnable 类型</strong>，因此在程序中需要创建子类继承 QRunnable 这个类，然后重写 run () 方法，在这个函数中编写要在线程池中执行的任务，并将这个子类对象传递给线程池，这样任务就可以被线程池中的某个工作的线程处理掉了。</p>\n<p>QRunnable 类 常用函数不多，主要是设置任务对象传给线程池后，是否需要自动析构。</p>\n<pre><code class=\"language-c++\">// 在子类中必须要重写的函数, 里边是任务的处理流程\n[pure virtual] void QRunnable::run();\n\n// 参数设置为 true: 这个任务对象在线程池中的线程中处理完毕, 这个任务对象就会自动销毁\n// 参数设置为 false: 这个任务对象在线程池中的线程中处理完毕, 对象需要程序猿手动销毁\nvoid QRunnable::setAutoDelete(bool autoDelete);\n// 获取当前任务对象的析构方式,返回true-&gt;自动析构, 返回false-&gt;手动析构\nbool QRunnable::autoDelete() const;\n</code></pre>\n<p>创建一个要添加到线程池中的任务类，处理方式如下：</p>\n<pre><code class=\"language-c++\">class MyWork : public QObject, public QRunnable\n&#123;\n    Q_OBJECT\npublic:\n    explicit MyWork(QObject *parent = nullptr)\n    &#123;\n        // 任务执行完毕,该对象自动销毁\n        setAutoDelete(true);\n    &#125;\n    ~MyWork();\n\n    void run() override&#123;&#125;\n&#125;\n</code></pre>\n<p>在上面的示例中 MyWork 类是一个多重继承，如果需要在这个任务中使用 Qt 的信号槽机制进行数据的传递就必须继承 QObject 这个类，如果不使用信号槽传递数据就可以不继承了，只继承 QRunnable 即可。</p>\n<pre><code class=\"language-c++\">class MyWork :public QRunnable\n&#123;\n    Q_OBJECT\npublic:\n    explicit MyWork()\n    &#123;\n        // 任务执行完毕,该对象自动销毁\n        setAutoDelete(true);\n    &#125;\n    ~MyWork();\n\n    void run() override&#123;&#125;\n&#125;\n</code></pre>\n<h3 id=\"qthreadpool\"><a class=\"markdownIt-Anchor\" href=\"#qthreadpool\">#</a> QThreadPool</h3>\n<p>Qt 中的 QThreadPool 类管理了一组 QThreads, 里边还维护了一个任务队列。QThreadPool 管理和回收各个 QThread 对象，以帮助减少使用线程的程序中的线程创建成本。每个 Qt 应用程序都有一个全局 QThreadPool 对象，可以通过调用 globalInstance () 来访问它。也可以单独创建一个 QThreadPool 对象使用。</p>\n<p>线程池常用的 API 函数如下：</p>\n<pre><code class=\"language-c++\">// 获取和设置线程中的最大线程个数\nint maxThreadCount() const;\nvoid setMaxThreadCount(int maxThreadCount);\n\n// 给线程池添加任务, 任务是一个 QRunnable 类型的对象\n// 如果线程池中没有空闲的线程了, 任务会放到任务队列中, 等待线程处理\nvoid QThreadPool::start(QRunnable * runnable, int priority = 0);\n// 如果线程池中没有空闲的线程了, 直接返回值, 任务添加失败, 任务不会添加到任务队列中\nbool QThreadPool::tryStart(QRunnable * runnable);\n\n// 线程池中被激活的线程的个数(正在工作的线程个数)\nint QThreadPool::activeThreadCount() const;\n\n// 尝试性的将某一个任务从线程池的任务队列中删除, 如果任务已经开始执行就无法删除了\nbool QThreadPool::tryTake(QRunnable *runnable);\n// 将线程池中的任务队列里边没有开始处理的所有任务删除, 如果已经开始处理了就无法通过该函数删除了\nvoid QThreadPool::clear();\n\n// 在每个Qt应用程序中都有一个全局的线程池对象, 通过这个函数直接访问这个对象\nstatic QThreadPool * QThreadPool::globalInstance();\n</code></pre>\n<p>一般情况下，我们不需要在 Qt 程序中创建线程池对象，直接使用 Qt 为每个应用程序提供的线程池全局对象即可。得到线程池对象之后，调用 start () 方法就可以将一个任务添加到线程池中，这个任务就可以被线程池内部的线程池处理掉了，使用线程池比自己创建线程的这种多种多线程方式更加简单和易于维护。</p>\n<h1 id=\"基于qt框架实现网络聊天室项目\"><a class=\"markdownIt-Anchor\" href=\"#基于qt框架实现网络聊天室项目\">#</a> 基于 Qt 框架实现网络聊天室项目</h1>\n<p>服务器：基于 TCP 协议创建服务器</p>\n",
            "tags": [
                "C++",
                "Qt"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/03/12/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/",
            "url": "https://adventure-yx.github.io/2023/03/12/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/",
            "title": "算法进阶",
            "date_published": "2023-03-12T12:42:19.000Z",
            "content_html": "<h1 id=\"排序算法总结\"><a class=\"markdownIt-Anchor\" href=\"#排序算法总结\">#</a> 排序算法总结</h1>\n<table>\n<thead>\n<tr>\n<th>排序算法</th>\n<th>英文名称</th>\n<th>时间复杂度</th>\n<th>最佳情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>排序方式</th>\n<th>稳定性</th>\n<th>排序类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>Bubble Sort</td>\n<td>O(n²)</td>\n<td>O(n)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n<td>In-place</td>\n<td>稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>Insertion Sort</td>\n<td>O(n²)</td>\n<td>O(n)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n<td>In-place</td>\n<td>稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>Selection Sort</td>\n<td>O(n²)</td>\n<td>O(n²)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n<td>In-place</td>\n<td>不稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>Shell Sort</td>\n<td>O(n^3/2)</td>\n<td>O(nlog²n)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n<td>In-place</td>\n<td>不稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>Quick Sort</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(n²)</td>\n<td>O(logn)</td>\n<td>In-place</td>\n<td>不稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>Heap Sort</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(1)</td>\n<td>In-place</td>\n<td>不稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>Merge Sort</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(n)</td>\n<td>Out-place</td>\n<td>稳定</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>Bucket Sort</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>Out-place</td>\n<td>稳定</td>\n<td>非比较</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>Radix Sort</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>Out-place</td>\n<td>稳定</td>\n<td>非比较</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>Counting Sort</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>Out-place</td>\n<td>稳定</td>\n<td>非比较</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>稳定：如果原本序列中 a 在 b 前面且 a=b，排序后 a 仍在 b 前面，顺序不变；</li>\n<li>不稳定：如果原本序列中 a 在 b 前面且 a=b，排序后 a 可能在 b 后面，顺序可能发生改变；</li>\n<li>内排序：所有排序操作均在内存中完成；</li>\n<li>外排序：由于数据量太大，将其放入磁盘中，排序过程中需要磁盘与内存之间的数据传输；</li>\n<li>时间复杂度：一个排序算法在执行过程中所耗费的时间量级的度量；</li>\n<li>空间复杂度：一个排序算法在运行过程中临时占用存储空间大小的度量；</li>\n</ul>\n<h2 id=\"冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h2>\n<p>遍历所有的数据，每次对相邻元素进行两两比较，如果顺序和预先规定的顺序不一致，则进行位置交换；这样一次遍历会将最大或最小的数据上浮至顶端，之后再重复同样的操作，直到所有的数据有序。数据反序时，耗时最长 O (n²)；数据正序时，耗时最短 O (n)。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 冒泡排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span>T data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                flag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                T t<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"快速排序\"><a class=\"markdownIt-Anchor\" href=\"#快速排序\">#</a> 快速排序</h2>\n<p>快速排序采用分治法。首先从数列中挑出一个元素作为中间值。依次遍历数据，所有比中间值小的元素放在左边，所有比中间值大的元素放在右边。然后按此方法对左右两个子序列分别进行递归操作，直到所有数据有序。最理想的情况是，每次划分所选择的中间数恰好将当前序列几乎等分（均匀排布），整个算法的时间复杂度为 O (n logn)。 最坏的情况是，每次所选的中间数是当前序列中的最大或最小元素（正序和逆序都是最坏），整个排序算法的时间复杂度为 O (n²)。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 快速排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Partition</span><span class=\"token punctuation\">(</span>T data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    T pivot<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token operator\">&amp;&amp;</span>data<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>pivot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        data<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token operator\">&amp;&amp;</span>data<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>pivot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        data<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    data<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>pivot<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>T data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span><span class=\"token function\">Partition</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"算法性能分析\"><a class=\"markdownIt-Anchor\" href=\"#算法性能分析\">#</a> 算法性能分析</h1>\n<h2 id=\"时间复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#时间复杂度分析\">#</a> 时间复杂度分析</h2>\n<h3 id=\"什么是时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#什么是时间复杂度\">#</a> 什么是时间复杂度</h3>\n<p><strong>时间复杂度是一个函数，它定性描述该算法的运行时间</strong>。</p>\n<p>我们在软件开发中，时间复杂度就是用来方便开发者估算出程序运行的答题时间。</p>\n<p>那么该如何估计程序运行时间呢，通常会估算算法的操作单元数量来代表程序消耗的时间，这里默认 CPU 的每个单元运行消耗的时间都是相同的。</p>\n<p>假设算法的问题规模为 n，那么操作单元数量便用函数 f (n) 来表示，随着数据规模 n 的增大，算法执行时间的增长率和 f (n) 的增长率相同，这称作为算法的渐近时间复杂度，简称时间复杂度，记为 O (f (n))。</p>\n<h3 id=\"什么是大o\"><a class=\"markdownIt-Anchor\" href=\"#什么是大o\">#</a> 什么是大 O</h3>\n<p>算法导论给出的解释：<strong>大 O 用来表示上界的</strong>，当用它作为算法的最坏情况运行时间的上界，就是对任意数据输入的运行时间的上界。</p>\n<p>同样算法导论给出了例子：拿插入排序来说，插入排序的时间复杂度我们都说是 O (n^2) 。</p>\n<p>输入数据的形式对程序运算时间是有很大影响的，在数据本来有序的情况下时间复杂度是 O (n)，但如果数据是逆序的话，插入排序的时间复杂度就是 O (n<sup>2)，也就对于所有输入情况来说，最坏是 O (n</sup>2) 的时间复杂度，所以称插入排序的时间复杂度为 O (n^2)。</p>\n<p>同样的同理再看一下快速排序，都知道快速排序是 O (nlogn)，但是当数据已经有序情况下，快速排序的时间复杂度是 O (n^2) 的，<strong>所以严格从大 O 的定义来讲，快速排序的时间复杂度应该是 O (n^2)</strong>。</p>\n<p><strong>但是我们依然说快速排序是 O (nlogn) 的时间复杂度，这个就是业内的一个默认规定，这里说的 O 代表的就是一般情况，而不是严格的上界</strong>。</p>\n<p>我们主要关心的还是一般情况下的数据形式。</p>\n<p><strong>面试中说道算法的时间复杂度是多少指的都是一般情况</strong>。但是如果面试官和我们深入探讨一个算法的实现以及性能的时候，就要时刻想着数据用例的不一样，时间复杂度也是不同的，这一点是一定要注意的。</p>\n<h3 id=\"不同数据规模的差异\"><a class=\"markdownIt-Anchor\" href=\"#不同数据规模的差异\">#</a> 不同数据规模的差异</h3>\n<p><img data-src=\"20230310124015324.png\" alt=\"时间复杂度，不同数据规模的差异\"></p>\n<p>如图中可以看出不同算法的时间复杂度在不同数据输入规模下的差异。</p>\n<p>在决定使用哪些算法的时候，不是时间复杂越低的越好（因为简化后的时间复杂度忽略了常数项等等），要考虑数据规模，如果数据规模很小甚至可以用 O (n^2) 的算法比 O (n) 的更合适（在有常数项的时候）。</p>\n<p>就像上图中 O (5n^2) 和 O (100n) 在 n 为 20 之前 很明显 O (5n^2) 是更优的，所花费的时间也是最少的。</p>\n<p>那为什么在计算时间复杂度的时候要忽略常数项系数呢，也就说 O (100n) 就是 O (n) 的时间复杂度，O (5n^2) 就是 O (n^2) 的时间复杂度，而且要默认 O (n) 优于 O (n^2) 呢 ？</p>\n<p>这里就又涉及到大 O 的定义，<strong>因为大 O 就是数据量级突破一个点且数据量级非常大的情况下所表现出的时间复杂度，这个数据量也就是常数项系数已经不起决定性作用的数据量</strong>。</p>\n<p>例如上图中 20 就是那个点，n 只要大于 20 常数项系数已经不起决定性作用了。</p>\n<p><strong>所以我们说的时间复杂度都是省略常数项系数的，是因为一般情况下都是默认数据规模足够的大，基于这样的事实，给出的算法时间复杂的的一个排行如下所示</strong>：</p>\n<p>O (1) 常数阶 &lt; O (logn) 对数阶 &lt; O (n) 线性阶 &lt; O (nlogn) 线性对数阶 &lt; O (n^2) 平方阶 &lt; O (n^3) 立方阶 &lt; O (2^n) 指数阶</p>\n<p>但是也要注意大常数，如果这个常数非常大，例如 10^7 ，10^9 ，那么常数就是不得不考虑的因素了。</p>\n<h1 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h1>\n<p>** 数组是存放在连续内存空间上的相同类型数据的集合。** 数组可以方便的通过下标索引的方式获取到下标下对应的数据。</p>\n<ul>\n<li><strong>数组下标都是从 0 开始的。</strong></li>\n<li><strong>数组内存空间的地址是连续的</strong></li>\n</ul>\n<p>正是<strong>因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。</strong></p>\n<p>使用 C++ 的话，要注意 vector 和 array 的区别，vector 的底层实现是 array，严格来讲 vector 是容器，不是数组。</p>\n<p><strong>数组的元素是不能删的，只能覆盖。</strong></p>\n<h2 id=\"二分查找\"><a class=\"markdownIt-Anchor\" href=\"#二分查找\">#</a> 二分查找</h2>\n<p>[leetcode.704](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9iaW5hcnktc2VhcmNoLw==\">704. 二分查找 - 力扣（LeetCode）</span>)</p>\n<blockquote>\n<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n<p>示例 1:</p>\n<p>输入: nums = [-1,0,3,5,9,12], target = 9<br>\n 输出: 4<br>\n 解释: 9 出现在 nums 中并且下标为 4</p>\n<p>示例 2:</p>\n<p>输入: nums = [-1,0,3,5,9,12], target = 2<br>\n 输出: -1<br>\n 解释: 2 不存在 nums 中因此返回 -1</p>\n<p>提示：你可以假设 nums 中的所有元素是不重复的。<br>\nn 将在 [1, 10000] 之间。<br>\nnums 的每个元素都将在 [-9999, 9999] 之间。</p>\n</blockquote>\n<p><strong>这道题目的前提是数组为有序数组</strong>，同时题目还强调<strong>数组中无重复元素</strong>，因为一旦有重复元素，使用二分查找法返回的元素下标可能不是唯一的，这些都是使用二分法的前提条件。</p>\n<p>二分查找涉及的很多的边界条件，逻辑比较简单，但就是写不好。例如到底是  <code>while(left &lt; right)</code>  还是  <code>while(left &lt;= right)</code> ，到底是 <code>right = middle</code>  呢，还是要 <code>right = middle - 1</code>  呢？</p>\n<p>大家写二分法经常写乱，主要是因为<strong>对区间的定义没有想清楚，区间的定义就是不变量</strong>。要在二分查找的过程中，保持不变量，就是在 while 寻找中每一次边界的处理都要坚持根据区间的定义来操作，这就是<strong>循环不变量</strong>规则。</p>\n<p>写二分法，区间的定义一般为两种，左闭右闭即 [left, right]，或者左闭右开即 [left, right)。</p>\n<h3 id=\"二分法第一种写法\"><a class=\"markdownIt-Anchor\" href=\"#二分法第一种写法\">#</a> 二分法第一种写法</h3>\n<p>第一种写法，我们定义 target 是在一个在左闭右闭的区间里，<strong>也就是 [left, right] （这个很重要非常重要）</strong>。</p>\n<p>区间的定义这就决定了二分法的代码应该如何写，<strong>因为定义 target 在 [left, right] 区间，所以有如下两点：</strong></p>\n<ul>\n<li>while (left &lt;= right) 要使用 &lt;= ，因为 left == right 是有意义的，所以使用 &lt;=</li>\n<li>if (nums [middle] &gt; target) right 要赋值为 middle - 1，因为当前这个 nums [middle] 一定不是 target，那么接下来要查找的左区间结束下标位置就是 middle - 1</li>\n</ul>\n<p>例如在数组：1,2,3,4,7,9,10 中查找元素 2，如图所示：</p>\n<p><img data-src=\"20210311153055723.jpg\" alt=\"704.二分查找\"></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义 target 在左闭右闭的区间里，[left, right]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 当 left==right，区间 [left, right] 依然有效，所以用 &lt;=</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">int</span> middle <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 防止溢出 等同于 (left + right)/2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                right <span class=\"token operator\">=</span> middle <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//target 在左区间，所以 [left, middle - 1]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                left <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//target 在右区间，所以 [middle + 1, right]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// nums[middle] == target</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">return</span> middle<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组中找到目标值，直接返回下标</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 未找到目标值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>时间复杂度：O (log n)</li>\n<li>空间复杂度：O (1)</li>\n</ul>\n<h3 id=\"二分法第二种写法\"><a class=\"markdownIt-Anchor\" href=\"#二分法第二种写法\">#</a> 二分法第二种写法</h3>\n<p>如果说定义 target 是在一个在左闭右开的区间里，也就是 [left, right) ，那么二分法的边界处理方式则截然不同。</p>\n<p>有如下两点：</p>\n<ul>\n<li>while (left &lt; right)，这里使用 &lt; , 因为 left == right 在区间 [left, right) 是没有意义的</li>\n<li>if (nums [middle] &gt; target) right 更新为 middle，因为当前 nums [middle] 不等于 target，去左区间继续寻找，而寻找区间是左闭右开区间，所以 right 更新为 middle，即：下一个查询区间不会去比较 nums [middle]</li>\n</ul>\n<p>在数组：1,2,3,4,7,9,10 中查找元素 2，如图所示：（<strong>注意和方法一的区别</strong>）</p>\n<p><img data-src=\"20210311153123632.jpg\" alt=\"704.二分查找1\"></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义 target 在左闭右开的区间里，即：[left, right)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 因为 left == right 的时候，在 [left, right) 是无效的空间，所以使用 &lt;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">int</span> middle <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                right <span class=\"token operator\">=</span> middle<span class=\"token punctuation\">;</span> <span class=\"token comment\">//target 在左区间，在 [left, middle) 中</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                left <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//target 在右区间，在 [middle + 1, right) 中</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// nums[middle] == target</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">return</span> middle<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组中找到目标值，直接返回下标</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 未找到目标值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>时间复杂度：O (log n)</li>\n<li>空间复杂度：O (1)</li>\n</ul>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>二分法是非常重要的基础算法，为什么会对二分法一看就会，一写就废？其实主要就是对区间的定义没有理解清楚，在循环中没有始终坚持根据查找区间的定义来做边界处理。</p>\n<p>区间的定义就是不变量，那么在循环中坚持根据查找区间的定义来做边界处理，就是循环不变量规则。</p>\n",
            "tags": [
                "C++",
                "STL",
                "算法"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/03/09/STL/",
            "url": "https://adventure-yx.github.io/2023/03/09/STL/",
            "title": "STL",
            "date_published": "2023-03-09T12:42:19.000Z",
            "content_html": "<h1 id=\"stl概述\"><a class=\"markdownIt-Anchor\" href=\"#stl概述\">#</a> STL 概述</h1>\n<p>C++ STL（标准模板库，Standard Template Library）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈。</p>\n<blockquote>\n<p>STL 从广义上讲分为三类: algorithm (算法) 、container (容器)、iterator (迭代器)。容器和算法可以通过迭代器进行无缝的连接。</p>\n</blockquote>\n<p>STL 提供了六大组件，彼此组合套用协同工作。这六大组件分别是：</p>\n<ul>\n<li>容器（Containers）：各种数据结构，如 vector、list、deque、set、map 等。从实现的角度来看，<strong>容器是一种 class template</strong>。</li>\n<li>算法（Algorithms）：各种常用算法，提供了执行各种操作的方式，包括对容器内容执行初始化、排序、搜索和转换等操作，比如 sort、search、copy、erase。从实现的角度来看，<strong>STL 算法是一种 function template</strong>。</li>\n<li>迭代器（Iterators）：迭代器用于遍历对象集合的元素，扮演容器与算法之间的胶合剂，是所谓的 “泛型指针”，共有 5 种类型，以及其他衍生变化。从实现角度来看，迭代器是一种将 operator*、operator-&gt;、operator++、operator-- 等指针操作予以重载的 class template。所有的 STL 容器附带有自己专属的迭代器，因为只有容器设计者才知道如何遍历自己的元素。</li>\n<li>仿函数（Functors）：也称为函数对象（Function object），行为类似函数，可作为算法的某种策略。从实现角度来看，仿函数是一种重载了 operator () 的 class 或者 class template。</li>\n<li>适配器（Adaptors）：一种用来修饰容器或者仿函数或迭代器接口的东西。例如 STL 提供的 queue 和 stack，就是一种空间配接器，因为它们的底部完全借助于 deque。</li>\n<li>分配器（Allocators）：也称为空间配置器，负责空间的配置与管理。从实现的角度来看，配置器是一个实现了动态配置空间、空间管理、空间释放的 class template。</li>\n</ul>\n<p>STL 六大组件的交互关系</p>\n<p><img data-src=\"picturestl1.png\" alt=\"img\"></p>\n<p>使用 STL 的好处：</p>\n<ul>\n<li>STL 是 C++ 的一部分，因此不用额外安装什么，它被内建在你的编译器之内。</li>\n<li>STL 的一个重要特点是<strong>数据结构和算法的分离</strong>。(内部使用的模板，或者说泛型编程)</li>\n<li>程序员可以不用思考 STL 具体的实现过程，只要能够熟练使用 STL，把精力用在开发上。</li>\n<li>STL 具有高可重用性、高性能、高移植性、跨平台等优点\n<ul>\n<li>高可重用性: STL 中几乎所有的代码的采用了模板类和模板函数的方式实现，这相当于传统的由函数和类组成的库来说提供了更好的代码重用机会。</li>\n<li>高性能：底层使用的数据结构和算法比较优秀，如 map 的红黑树</li>\n<li>高移植性：因为是内建在编译器之内，项目 A 中用 STL 编写的模块可以直接移植到项目 B 上。</li>\n<li>跨平台：windows 上写的可以在 Linux 上运行 (反之一同)</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"stl容器\"><a class=\"markdownIt-Anchor\" href=\"#stl容器\">#</a> STL 容器</h1>\n<h2 id=\"vector\"><a class=\"markdownIt-Anchor\" href=\"#vector\">#</a> vector</h2>\n<p>vector 为可变长数组（动态数组），定义的 vector 数组可以随时添加数值和删除元素。</p>\n<p>在局部函数中开 vector 数组，是在堆空间里面开的，与开全局变量比较类似，所以经常见到在局部函数中开大容量数组。</p>\n<ul>\n<li>\n<p>头文件</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>初始化</p>\n<ul>\n<li>\n<p>一维初始化</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义了一个名为 num 的存 int 数据的一维数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> b<span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义了一个名为 num 的存 double 数据的一维数组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span> c<span class=\"token punctuation\">;</span><span class=\"token comment\">//node 是结构体类型</span></pre></td></tr></table></figure><p>指定长度和初始值的初始化</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义一个长度为 n 的数组，初始值默认为 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 所有的元素初始值均为 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 注意：指定数组长度之后（指定长度后的数组就相当于正常的数组了）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 就不能使用 push_back () 操作了</span></pre></td></tr></table></figure><p>初始化中有多个元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 数组 a 中有五个元素</span></pre></td></tr></table></figure><p>拷贝初始化</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 两个数组中的类型必须相同，a 和 b 都是长度为 n+1，所有值都为 0 的数组</span></pre></td></tr></table></figure></li>\n<li>\n<p>二维初始化</p>\n<p>定义第一维固定长度为 5，第二维可变化的二维数组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义可变长二维数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 注意：行不可变（只有 5 行）, 而列可变，可以在指定行添加元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 第一维固定长度为 5，第二维长度可以改变</span></pre></td></tr></table></figure><p>行列均可变</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始化二维均可变长数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>vectot<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义一个行和列均可变的二维数组</span></pre></td></tr></table></figure><p>行列长度均固定 n + 1 行 m + 1 列初始值为 0</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>c++17</code>  或者 <code>c++20</code>  支持的形式（不常用）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"方法函数\"><a class=\"markdownIt-Anchor\" href=\"#方法函数\">#</a> 方法函数</h3>\n<p>知道了如何定义初始化可变数组，下面就需要知道如何添加，删除，修改数据。</p>\n<p><strong>c 指定为数组名称</strong>，含义中会注明算法复杂度。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>c.front()</code></td>\n<td style=\"text-align:left\">返回第一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c.pop_back()</code></td>\n<td style=\"text-align:left\">删除最后一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c.push_back(element)</code></td>\n<td style=\"text-align:left\">在尾部加一个数据 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c.size()</code></td>\n<td style=\"text-align:left\">返回实际数据个数（unsigned 类型）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c.clear()</code></td>\n<td style=\"text-align:left\">清除元素个数 O (N)，N 为元素个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c.resize(n, v)</code></td>\n<td style=\"text-align:left\">改变数组大小为 <code>n</code> , <code>n</code>  个空间数值赋为 <code>v</code> ，如果没有默认赋值为 <code>0</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c.insert(it, x)</code></td>\n<td style=\"text-align:left\">向任意迭代器 <code>it</code>  插入一个元素 <code>x</code>  ，O(N)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">例： <code>c.insert(c.begin()+2,-1)</code></td>\n<td style=\"text-align:left\">将 <code>-1</code>  插入 <code>c[2]</code>  的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c.erase(first,last)</code></td>\n<td style=\"text-align:left\">删除 <code>[first,last)</code>  的所有元素，O (N)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c.begin()</code></td>\n<td style=\"text-align:left\">返回首元素的迭代器（通俗来说就是地址）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c.end()</code></td>\n<td style=\"text-align:left\">返回最后一个元素后一个位置的迭代器（地址）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c.empty()</code></td>\n<td style=\"text-align:left\">判断是否为空，为空返回真，反之返回假 O (1)</td>\n</tr>\n</tbody>\n</table>\n<p>注意：  <code>end()</code>  返回的是最后一个元素的后一个位置的地址，不是最后一个元素的地址，<strong>所有 STL 容器均是如此</strong></p>\n<p>排序</p>\n<p>使用 sort 排序要：  <code>sort(c.begin(),c.end())</code> ;</p>\n<p>对所有元素进行排序，如果要对指定区间进行排序，可以对 sort () 里面的参数进行加减改动。</p>\n<h3 id=\"访问\"><a class=\"markdownIt-Anchor\" href=\"#访问\">#</a> 访问</h3>\n<p><strong>下标法</strong>： 和普通数组一样</p>\n<p>注意：一维数组的下标是从 0 到 v.size ( ) − 1，访问之外的数会出现越界错误</p>\n<p>迭代器法： 类似指针一样的访问 ，首先需要声明迭代器变量，和声明指针变量一样，可以根据代码进行理解（附有注释）。</p>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vi<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义一个 vi 数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 声明一个迭代器指向 vi 的初始位置</span></pre></td></tr></table></figure><p><strong>下标访问</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tvi<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 下标访问 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> vi<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>迭代器访问</strong></p>\n<p>类似指针。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 迭代器访问</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 相当于声明了一个迭代器类型的变量 it</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 通俗来说就是声明了一个指针变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 方式一：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 方式二：</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//vi.end () 指向尾元素地址的下一个地址</span></pre></td></tr></table></figure><p><strong>智能指针</strong></p>\n<p><strong>只能遍历完数组</strong>，如果要指定的内容进行遍历，需要另选方法。<br>\n<strong>auto</strong> 能够自动识别并获取类型。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">241</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> val <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12 241</span></pre></td></tr></table></figure><p><code>vector</code>  注意：</p>\n<ul>\n<li><code>vi[i]</code>  和  <code>*(vi.begin() + i)</code>  等价</li>\n<li><code>vector</code>  和 <code>string</code>  的 <code>STL</code>  容器支持 <code>*(it + i)</code>  的元素访问，其它容器可能也可以支持这种方式访问，但用的不多，可自行尝试。</li>\n</ul>\n<h3 id=\"vector原理\"><a class=\"markdownIt-Anchor\" href=\"#vector原理\">#</a> Vector 原理</h3>\n<ul>\n<li>vector 是动态数组，所以和数组一样拥有一段连续的内存空间，并且起始地址不变。</li>\n<li>因为 vector 地址空间是连续的，所以能高效的进行随机访问，时间复杂度为 o (1)。</li>\n<li>在 vector 中插入和删除元素，需要对现有元素进行复制、移动，时间复杂度为 o (n)。</li>\n<li>如果 vector 中存储的对象很大，或者构造函数复杂，那么插入等开销会很大。因为拷贝现有对象时需要调用拷贝构造函数。</li>\n<li>vector 扩容原理\n<ul>\n<li>新增元素：Vector 通过一个连续的数组存放元素，如果集合已满，在新增数据的时候，就会分配一块更大的内存，将原来的数据复制过来，释放之前的内存，在插入新增的元素。注意不是在原来空间后直接增加空间</li>\n<li>对 vector 的任何操作，一旦引起空间重新配置，指向原 vector 的所有迭代器就都失效了。</li>\n<li>不同的编译器实现的扩容方式不一样，VS2015 中以 1.5 倍扩容，GCC 以 2 倍扩容。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"stack\"><a class=\"markdownIt-Anchor\" href=\"#stack\">#</a> stack</h2>\n<p>栈为数据结构的一种，是 STL 中实现的一个先进后出，后进先出的容器。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件需要添加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 声明</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>stack<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>stack<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//node 是结构体类型</span></pre></td></tr></table></figure><h3 id=\"方法函数-2\"><a class=\"markdownIt-Anchor\" href=\"#方法函数-2\">#</a> 方法函数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.push(ele)</code></td>\n<td style=\"text-align:left\">元素 <code>ele</code>  入栈，增加元素 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.pop()</code></td>\n<td style=\"text-align:left\">移除栈顶元素 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.top()</code></td>\n<td style=\"text-align:left\">取得栈顶元素（但不删除）O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.empty()</code></td>\n<td style=\"text-align:left\">检测栈内是否为空，空为真 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.size()</code></td>\n<td style=\"text-align:left\">返回栈内元素的个数 O (1)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"栈遍历\"><a class=\"markdownIt-Anchor\" href=\"#栈遍历\">#</a> 栈遍历</h3>\n<p><strong>栈遍历</strong></p>\n<p>栈只能对栈顶元素进行操作，如果想要进行遍历，只能将栈中元素一个个取出来存在数组中</p>\n<p><strong>数组模拟栈进行遍历</strong></p>\n<p>通过一个<strong>数组</strong>对栈进行模拟，一个存放下标的变量 <code>top</code>  模拟指向栈顶的指针。</p>\n<p><strong>特点：</strong> 比 <code>STL</code>  的 <code>stack</code>  速度更快，遍历元素方便</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈 从左至右为栈底到栈顶</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> tt <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//tt 代表栈顶指针，初始栈内无元素，tt 为 - 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 入栈 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    s<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 出栈</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> top_element <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>tt<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 入栈操作示意</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//  0  1  2  3  4  5  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//                tt</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 出栈后示意</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//  0  1  2  3  4 </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//              tt</span></pre></td></tr></table></figure><h2 id=\"queue\"><a class=\"markdownIt-Anchor\" href=\"#queue\">#</a> queue</h2>\n<p>队列是一种先进先出的数据结构。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 定义初始化</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"方法函数-3\"><a class=\"markdownIt-Anchor\" href=\"#方法函数-3\">#</a> 方法函数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>q.front()</code></td>\n<td style=\"text-align:left\">返回队首元素 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.back()</code></td>\n<td style=\"text-align:left\">返回队尾元素 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.push(element)</code></td>\n<td style=\"text-align:left\">尾部添加一个元素 <code>element</code>  进队 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.pop()</code></td>\n<td style=\"text-align:left\">删除第一个元素 出队 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.size()</code></td>\n<td style=\"text-align:left\">返回队列中元素个数，返回值类型 <code>unsigned int</code>  O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.empty()</code></td>\n<td style=\"text-align:left\">判断是否为空，队列为空，返回 <code>true</code>  O(1)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"队列模拟\"><a class=\"markdownIt-Anchor\" href=\"#队列模拟\">#</a> 队列模拟</h3>\n<p>使用 <code>q[]</code>  数组模拟队列<br>\n <code>hh</code>  表示队首元素的下标，初始值为 <code>0</code> <br>\n <code>tt</code>  表示队尾元素的下标，初始值为 <code>-1</code> ，表示刚<strong>开始队列为空</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> q<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> hh <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>tt <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//    入队 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    q<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    q<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//    将所有元素出队 </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>hh <span class=\"token operator\">&lt;=</span> tt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> q<span class=\"token punctuation\">[</span>hh<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"deque\"><a class=\"markdownIt-Anchor\" href=\"#deque\">#</a> deque</h2>\n<p>首尾都可插入和删除的队列为双端队列。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> dq<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"方法函数-4\"><a class=\"markdownIt-Anchor\" href=\"#方法函数-4\">#</a> 方法函数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>push_back(x)/push_front(x)</code></td>\n<td style=\"text-align:left\">把 <code>x</code>  插入队尾后 / 队首 O (1)�(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>back()/front()</code></td>\n<td style=\"text-align:left\">返回队尾 / 队首元素 O (1)�(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>pop_back() / pop_front()</code></td>\n<td style=\"text-align:left\">删除队尾 / 队首元素 O (1)�(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(iterator it)</code></td>\n<td style=\"text-align:left\">删除双端队列中的某一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(iterator first,iterator last)</code></td>\n<td style=\"text-align:left\">删除双端队列中 <code>[first,last)</code>  中的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>empty()</code></td>\n<td style=\"text-align:left\">判断 deque 是否空 O (1)�(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>size()</code></td>\n<td style=\"text-align:left\">返回 deque 的元素数量 O (1)�(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>clear()</code></td>\n<td style=\"text-align:left\">清空 deque</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"注意点\"><a class=\"markdownIt-Anchor\" href=\"#注意点\">#</a> 注意点</h3>\n<p>deque 可以进行排序</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 从小到大</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 从大到小排序</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">greater</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//deque 里面的类型需要是 int 型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">greater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 高版本 C++ 才可以用</span></pre></td></tr></table></figure><h2 id=\"priority_queue\"><a class=\"markdownIt-Anchor\" href=\"#priority_queue\">#</a> priority_queue</h2>\n<p>优先队列是在正常队列的基础上加了优先级，保证每次的队首元素都是优先级最大的。</p>\n<p>可以实现每次从优先队列中取出的元素都是队列中<strong>优先级最大</strong>的一个。</p>\n<p>它的底层是通过<strong>堆</strong>来实现的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"函数方法\"><a class=\"markdownIt-Anchor\" href=\"#函数方法\">#</a> 函数方法</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>q.top()</code></td>\n<td style=\"text-align:left\">访问队首元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.push()</code></td>\n<td style=\"text-align:left\">入队</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.pop()</code></td>\n<td style=\"text-align:left\">堆顶（队首）元素出队</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.size()</code></td>\n<td style=\"text-align:left\">队列元素个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>q.empty()</code></td>\n<td style=\"text-align:left\">是否为空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>注意</strong>没有 <code>clear()</code> ！</td>\n<td style=\"text-align:left\">不提供该方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">优先队列只能通过 <code>top()</code>  访问队首元素（优先级最高的元素）</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"设置优先级\"><a class=\"markdownIt-Anchor\" href=\"#设置优先级\">#</a> 设置优先级</h3>\n<h4 id=\"基本数据类型的优先级\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型的优先级\">#</a> 基本数据类型的优先级</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> pq<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认大根堆，即每次取出的元素是队列中的最大值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小根堆，每次取出的元素是队列中的最小值</span></pre></td></tr></table></figure><p><strong>参数解释：</strong></p>\n<ul>\n<li><strong>第二个参数：</strong><br>\n <code>vector&lt; int &gt;</code>  是用来承载底层数据结构堆的容器，若优先队列中存放的是 <code>double</code>  型数据，就要填 <code>vector&lt; double &gt;</code> <br>\n<strong> 总之存的是什么类型的数据，就相应的填写对应类型。同时也要改动第三个参数里面的对应类型。</strong></li>\n<li><strong>第三个参数：</strong><br>\n <code>less&lt; int &gt;</code>  表示数字大的优先级大，堆顶为最大的数字<br>\n <code>greater&lt; int &gt;</code>  表示数字小的优先级大，堆顶为最小的数字<br>\n<strong> int 代表的是数据类型，也要填优先队列中存储的数据类型</strong></li>\n</ul>\n<p>下面介绍基础数据类型优先级设置的写法。</p>\n<p><strong>1. 基础写法（非常常用）</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认大根堆，即每次取出的元素是队列中的最大值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> less<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> q2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 大根堆，每次取出的元素是队列中的最大值，同第一行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> q3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小根堆，每次取出的元素是队列中的最小值</span></pre></td></tr></table></figure><p><strong>2. 自定义排序（不常见，主要是写着麻烦）</strong></p>\n<p>下面的代码比较长，基础类型优先级写着太麻烦，用第一种即可。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">cmp1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> x <span class=\"token operator\">></span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">cmp2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> x <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> cmp1<span class=\"token operator\">></span> q1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小根堆</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> cmp2<span class=\"token operator\">></span> q2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 大根堆</span></pre></td></tr></table></figure><h4 id=\"结构体优先级设置\"><a class=\"markdownIt-Anchor\" href=\"#结构体优先级设置\">#</a> 结构体优先级设置</h4>\n<blockquote>\n<p>即优先队列中存储结构体类型，必须要设置优先级，即结构体的比较运算（因为优先队列的堆中要比较大小，才能将对应最大或者最小元素移到堆顶）。</p>\n</blockquote>\n<p>优先级设置可以定义在<strong>结构体内</strong>进行小于号重载，也可以定义在<strong>结构体外</strong>。</p>\n<h4 id=\"存储特殊类型的优先级\"><a class=\"markdownIt-Anchor\" href=\"#存储特殊类型的优先级\">#</a> 存储特殊类型的优先级</h4>\n<h2 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> map</h2>\n<p>映射类似于函数的对应关系，每个 <code>x</code>  对应一个 <code>y</code> ，而 <code>map</code>  是每个键对应一个值。会 python 的朋友学习后就会知道这和 python 的字典非常类似。</p>\n<blockquote>\n<p>比如说：学习 对应 看书，学习 是键，看书 是值。<br>\n学习 -&gt; 看书<br>\n玩耍 对应 打游戏，玩耍 是键，打游戏 是值。<br>\n玩耍 -&gt; 打游戏</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>node<span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span><span class=\"token comment\">//node 是结构体类型</span></pre></td></tr></table></figure><blockquote>\n<p>map 特性：map 会按照键的顺序从小到大自动排序，键的类型必须可以比较大小</p>\n</blockquote>\n<h3 id=\"函数方法-2\"><a class=\"markdownIt-Anchor\" href=\"#函数方法-2\">#</a> 函数方法</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>mp.find(key)</code></td>\n<td style=\"text-align:left\">返回键为 key 的映射的迭代器 O (logN) 注意：用 find 函数来定位数据出现位置，它返回一个迭代器。当数据存在时，返回数据所在位置的迭代器，数据不存在时，返回 mp.end ()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.erase(it)</code></td>\n<td style=\"text-align:left\">删除迭代器对应的键和值 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.erase(key)</code></td>\n<td style=\"text-align:left\">根据映射的键删除键和值 O (logN)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.erase(first,last)</code></td>\n<td style=\"text-align:left\">删除左闭右开区间迭代器对应的键和值 O (last−first)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.size()</code></td>\n<td style=\"text-align:left\">返回映射的对数 O (1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.clear()</code></td>\n<td style=\"text-align:left\">清空 map 中的所有元素 O (N)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.insert()</code></td>\n<td style=\"text-align:left\">插入元素，插入时要构造键值对</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.empty()</code></td>\n<td style=\"text-align:left\">如果 map 为空，返回 true，否则返回 false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.begin()</code></td>\n<td style=\"text-align:left\">返回指向 map 第一个元素的迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.end()</code></td>\n<td style=\"text-align:left\">返回指向 map 尾部的迭代器（最后一个元素的<strong>下一个</strong>地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.rbegin()</code></td>\n<td style=\"text-align:left\">返回指向 map 最后一个元素的迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.rend()</code></td>\n<td style=\"text-align:left\">返回指向 map 第一个元素前面 (上一个）的逆向迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.count(key)</code></td>\n<td style=\"text-align:left\">查看元素是否存在，因为 map 中键是唯一的，所以存在返回 1，不存在返回 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.lower_bound()</code></td>\n<td style=\"text-align:left\">返回一个迭代器，指向键值 &gt;= <strong>key</strong> 的第一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>mp.upper_bound()</code></td>\n<td style=\"text-align:left\">返回一个迭代器，指向键值 &gt; key 的第一个元素</td>\n</tr>\n</tbody>\n</table>\n<p><strong>下面说明部分函数方法的注意点</strong></p>\n<blockquote>\n<p>注意：<br>\n查找元素是否存在时，可以使用<br>\n① <code>mp.find()</code>  ②  <code>mp.count()</code>  ③  <code>mp[key]</code> <br>\n 但是第三种情况，如果不存在对应的 <code>key</code>  时，会自动创建一个键值对（产生一个额外的键值对空间）<br>\n所以为了不增加额外的空间负担，最好使用前两种方法</p>\n</blockquote>\n<hr>\n<p><strong>使用迭代器进行正反向遍历：</strong></p>\n<p><code>mp.begin()</code>  和 <code>mp.end()</code>  用法：<br>\n<strong>用于正向遍历 map</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    it <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/* 输出</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>1 2</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>2 3</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>3 4</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr></table></figure><p><code>mp.rbegin()</code>  和 <code>mp.rend()</code> <br>\n<strong> 用于逆向遍历 map</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    it <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/* 输出</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>3 4</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>2 3</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>1 2</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>二分查找 <code>lower_bound() upper_bound()</code></p>\n<blockquote>\n<p>map 的二分查找以第一个元素（即键为准），对<strong>键</strong>进行二分查找<br>\n返回值为 map 迭代器类型</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> m<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 有序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it1 <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it1<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//it1->first=2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it2 <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it2<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//it2->first=6</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"添加元素\"><a class=\"markdownIt-Anchor\" href=\"#添加元素\">#</a> 添加元素</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 先声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 方式一</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token string\">\"学习\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"看书\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token string\">\"玩耍\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"打游戏\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 方式二：插入元素构造键值对</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>mp<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vegetable\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"蔬菜\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 方式三</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>mp<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">pair</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fruit\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"水果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 方式四</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>mp<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hahaha\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"wawawa\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"访问元素\"><a class=\"markdownIt-Anchor\" href=\"#访问元素\">#</a> 访问元素</h3>\n<p>**6.4.1 下标访问：** 大部分情况用于访问单个元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token string\">\"菜哇菜\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"强哇强\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> mp<span class=\"token punctuation\">[</span><span class=\"token string\">\"菜哇菜\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 只是简写的一个例子，程序并不完整</span></pre></td></tr></table></figure><p><strong>6.4.2 遍历访问：</strong></p>\n<p><strong>方式一：迭代器访问</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//      键                 值 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//it 是结构体指针访问所以要用 -> 访问</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//*it 是结构体变量 访问要用。访问</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//cout&lt;&lt;(*it).first&lt;&lt;\" \"&lt;&lt;(*it).second;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>方式二：智能指针访问</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> mp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 键，值</span></pre></td></tr></table></figure><p><strong>方式三：对指定单个元素访问</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> it <span class=\"token operator\">-></span> first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span>  it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>方式四：c++17 特性才具有</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> mp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//x,y 对应键和值</span></pre></td></tr></table></figure><h3 id=\"与unordered_map的比较\"><a class=\"markdownIt-Anchor\" href=\"#与unordered_map的比较\">#</a> 与 unordered_map 的比较</h3>\n<p>这里就不单开一个大目录讲 unordered_map 了，直接在 map 里面讲了。</p>\n<h4 id=\"内部实现原理\"><a class=\"markdownIt-Anchor\" href=\"#内部实现原理\">#</a> 内部实现原理</h4>\n<p><strong>map</strong>：内部用<strong>红黑树</strong>实现，具有<strong>自动排序</strong>（按键从小到大）功能。</p>\n<p><strong>unordered_map</strong>：内部用<strong>哈希表</strong>实现，内部元素无序杂乱。</p>\n<h4 id=\"效率比较\"><a class=\"markdownIt-Anchor\" href=\"#效率比较\">#</a> 效率比较</h4>\n<p><strong>map</strong>：</p>\n<ul>\n<li>优点：内部用红黑树实现，内部元素具有有序性，查询删除等操作复杂度为 O (logN)</li>\n<li>缺点：占用空间，红黑树里每个节点需要保存父子节点和红黑性质等信息，空间占用较大。</li>\n</ul>\n<p><strong>unordered_map</strong>：</p>\n<ul>\n<li>优点：内部用哈希表实现，查找速度非常快（适用于大量的查询操作）。</li>\n<li>缺点：建立哈希表比较耗时。</li>\n</ul>\n<blockquote>\n<p>两者方法函数基本一样，差别不大。</p>\n<p>注意：</p>\n<ul>\n<li>\n<p>随着内部元素越来越多，两种容器的插入删除查询操作的时间都会逐渐变大，效率逐渐变低。</p>\n</li>\n<li>\n<p>使用 <code>[]</code>  查找元素时，如果元素不存在，两种容器<strong>都是</strong>创建一个空的元素；如果存在，会正常索引对应的值。所以如果查询过多的不存在的元素值，容器内部会创建大量的空的键值对，后续查询创建删除效率会<strong>大大降低</strong>。</p>\n</li>\n<li>\n<p>查询容器内部元素的最优方法是：先判断存在与否，再索引对应值（适用于这两种容器）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 以 map 为例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">999999999</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 此处判断是否存在 x 这个键</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> mp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 只有存在才会索引对应的值，避免不存在 x 时多余空元素的创建</span></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<p>还有一种映射：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93eXF6LnRvcC9wLzg3MDEyNDU4Mi5odG1s\">multimap</span><br>\n 键可以重复，即一个键对应多个值，如要了解，可以自行搜索。</p>\n<h2 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\">#</a> set</h2>\n<p>set 容器中的元素不会重复，当插入集合中已有的元素时，并不会插入进去，而且 set 容器里的元素自动从小到大排序。</p>\n<p>即：set 里面的元素<strong>不重复 且有序</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"函数方法-3\"><a class=\"markdownIt-Anchor\" href=\"#函数方法-3\">#</a> 函数方法</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.begin()</code></td>\n<td style=\"text-align:left\">返回 set 容器的第一个元素的地址（迭代器）O (1)�(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.end()</code></td>\n<td style=\"text-align:left\">返回 set 容器的最后一个元素的下一个地址（迭代器）O (1)�(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.rbegin()</code></td>\n<td style=\"text-align:left\">返回逆序迭代器，指向容器元素最后一个位置 O (1)�(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.rend()</code></td>\n<td style=\"text-align:left\">返回逆序迭代器，指向容器第一个元素前面的位置 O (1)�(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.clear()</code></td>\n<td style=\"text-align:left\">删除 set 容器中的所有的元素，返回 unsigned int 类型 O (N)�(�)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.empty()</code></td>\n<td style=\"text-align:left\">判断 set 容器是否为空 O (1)�(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.insert()</code></td>\n<td style=\"text-align:left\">插入一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.size()</code></td>\n<td style=\"text-align:left\">返回当前 set 容器中的元素个数 O (1)�(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(iterator)</code></td>\n<td style=\"text-align:left\">删除定位器 iterator 指向的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(first,second）</code></td>\n<td style=\"text-align:left\">删除定位器 first 和 second 之间的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(key_value)</code></td>\n<td style=\"text-align:left\">删除键值 key_value 的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find(element)</code></td>\n<td style=\"text-align:left\">查找 set 中的某一元素，有则返回该元素对应的迭代器，无则返回结束迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.count(element)</code></td>\n<td style=\"text-align:left\">查找 set 中的元素出现的个数，由于 set 中元素唯一，此函数相当于查询 element 是否出现</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.lower_bound(k)</code></td>\n<td style=\"text-align:left\">返回大于等于 k 的第一个元素的迭代器 O (logN)�(����)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.upper_bound(k)</code></td>\n<td style=\"text-align:left\">返回大于 k 的第一个元素的迭代器 O (logN)�(����)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"访问-2\"><a class=\"markdownIt-Anchor\" href=\"#访问-2\">#</a> 访问</h3>\n<h2 id=\"pair\"><a class=\"markdownIt-Anchor\" href=\"#pair\">#</a> pair</h2>\n<p>pair 只含有两个元素，可以看作是只有两个元素的结构体。<br>\n<strong>应用：</strong></p>\n<ul>\n<li>代替二元结构体</li>\n<li>作为 map 键值对进行插入（代码如下）</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mp<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">pair</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xingmaqi\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;utility></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//1. 初始化定义</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wangyaqi\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 带初始值的</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">;</span><span class=\"token comment\">// 不带初始值的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//2. 赋值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"访问-3\"><a class=\"markdownIt-Anchor\" href=\"#访问-3\">#</a> 访问</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义结构体数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>p<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 和结构体类似，first 代表第一个元素，second 代表第二个元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"string\"><a class=\"markdownIt-Anchor\" href=\"#string\">#</a> string</h2>\n<p>string 是一个字符串类，和 <code>char</code>  型字符串类似。</p>\n<p>可以把 string 理解为一个字符串类型，像 int 一样可以定义</p>\n<h3 id=\"初始化及定义\"><a class=\"markdownIt-Anchor\" href=\"#初始化及定义\">#</a> 初始化及定义</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//1.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>string str1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成空字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//2.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>string <span class=\"token function\">str2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456789\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成 \"1234456789\" 的复制品 </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//3.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>string <span class=\"token function\">str3</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果为 \"123\" ，从 0 位置开始，长度为 3</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//4.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>string <span class=\"token function\">str4</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 \"12345\" ，长度为 5</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//5.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>string <span class=\"token function\">str5</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 \"22222\" , 构造 5 个字符 '2' 连接而成的字符串</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//6.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>string <span class=\"token function\">str6</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 \"3456789\"，截取第三个元素（2 对应第三位）到最后</span></pre></td></tr></table></figure><p><strong>简单使用</strong></p>\n<ul>\n<li>\n<p>访问单个字符：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"xing ma qi!!!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li>\n<p>string 数组使用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    string s<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"loading...  \"</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>loading<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token number\">9</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"string-特性\"><a class=\"markdownIt-Anchor\" href=\"#string-特性\">#</a> string 特性</h3>\n<ul>\n<li>\n<p>支持<strong>比较</strong>运算符<br>\n string 字符串支持常见的比较操作符 <code>（&gt;,&gt;=,&lt;,&lt;=,==,!=）</code> ，支持 <code>string</code>  与 <code>C-string</code>  的比较（如  <code>str &lt; &quot;hello&quot;</code> ）。<br>\n在使用 <code>&gt;,&gt;=,&lt;,&lt;=</code>  这些操作符的时候是根据 “当前字符特性” 将字符按  <code>字典顺序</code>  进行逐一得 比较。字典排序靠前的字符小， 比较的顺序是从前向后比较，遇到不相等的字符就按这个位置上的两个字符的比较结果确定两个字符串的大小（前面减后面）。</p>\n<p>同时，`string (“aaaa”) 。</p>\n<ul>\n<li>\n<p>支持 <code>+</code> <strong> 运算</strong>符，代表拼接字符串<br>\n string 字符串可以拼接，通过”+” 运算符进行拼接。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"456\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>string s <span class=\"token operator\">=</span> s1 <span class=\"token operator\">+</span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//123456</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"读入详解\"><a class=\"markdownIt-Anchor\" href=\"#读入详解\">#</a> 读入详解</h3>\n<p><strong>读入字符串，遇空格，回车结束</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>读入一行字符串（包括空格），遇回车结束</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意:  <code>getline(cin, s)</code>  会获取前一个输入的换行符，需要在前面添加读取换行符的语句。如： <code>getchar()</code>  或 <code>cin.get()</code></p>\n<p>错误读取：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此时读取相当于读取了前一个回车字符</span></pre></td></tr></table></figure><p>正确读取：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//cin.get()</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 可正确读入下一行的输入</span></pre></td></tr></table></figure><blockquote>\n<p><code>cin</code>  与 <code>cin.getline()</code>  混用</p>\n<p>cin 输入完后，回车，cin 遇到回车结束输入，但回车还在输入流中，cin 并不会清除，导致 <code>getline()</code>  读取回车，结束。<br>\n需要在 cin 后面加 <code>cin.ignore()</code> ；主动删除输入流中的换行符。（不常用）</p>\n</blockquote>\n<p><strong>cin 和 cout 解锁</strong></p>\n<p>代码（写在 main 函数开头）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>为什么要进行 <code>cin</code>  和 <code>cout</code>  的解锁，原因是：</p>\n<p>在一些题目中，读入的<strong>数据量很大</strong>，往往超过了 1e5（10<sup>5</sup>）的数据量，而 <code>cin</code>  和 <code>cout</code>  的读入输出的速度<strong>很慢</strong>（是因为 <code>cin</code>  和 <code>cout</code>  为了兼容 C 语言的读入输出在性能上做了妥协），远不如 <code>scanf</code>  和 <code>printf</code>  的速度，具体原因可以搜索相关的博客进行了解。</p>\n<p><strong>所以</strong>对 <code>cin</code>  和 <code>cout</code>  进行解锁使 <code>cin</code>  和 <code>cout</code>  的速度几乎接近 <code>scanf</code>  和 <code>printf</code> ，避免输入输出超时。</p>\n</blockquote>\n<p><strong>注意</strong>： <code>cin cout</code>  解锁使用时，不能与  <code>scanf,getchar, printf,cin.getline()</code>  混用，一定要注意，会出错。</p>\n<blockquote>\n<p><strong>string 与 C 语言字符串（C-string）的区别</strong></p>\n<ul>\n<li>string<br>\n 是 C++ 的一个类，专门实现字符串的相关操作。具有丰富的操作方法，数据类型为 <code>string</code> ，字符串结尾没有 <code>\\0</code>  字符</li>\n<li>C-string<br>\nC 语言中的字符串，用 char 数组实现，类型为 <code>const char *</code> , 字符串结尾以 <code>\\0</code>  结尾</li>\n</ul>\n</blockquote>\n<p>一般来说 string 向 char 数组转换会出现一些问题，所以为了能够实现转换，string 有一个方法 <code>c_str()</code>  实现 string 向 char 数组的转换。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s <span class=\"token operator\">=</span> <span class=\"token string\">\"xing ma qi\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> s2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"函数方法-4\"><a class=\"markdownIt-Anchor\" href=\"#函数方法-4\">#</a> 函数方法</h3>\n<ul>\n<li><strong>获取字符串长度</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.size()</code>  和 <code>s.length()</code></td>\n<td style=\"text-align:left\">返回 string 对象的字符个数，他们执行效果相同。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.max_size()</code></td>\n<td style=\"text-align:left\">返回 string 对象最多包含的字符数，超出会抛出 length_error 异常</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.capacity()</code></td>\n<td style=\"text-align:left\">重新分配内存之前，string 对象能包含的最大字符数</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>插入</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.push_back()</code></td>\n<td style=\"text-align:left\">在末尾插入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">例： <code>s.push_back('a')</code></td>\n<td style=\"text-align:left\">末尾插入一个字符 a</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.insert(pos,element)</code></td>\n<td style=\"text-align:left\">在 pos 位置插入 element</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">例： <code>s.insert(s.begin(),'1')</code></td>\n<td style=\"text-align:left\">在第一个位置插入 1 字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.append(str)</code></td>\n<td style=\"text-align:left\">在 s 字符串结尾添加 str 字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">例： <code>s.append(&quot;abc&quot;)</code></td>\n<td style=\"text-align:left\">在 s 字符串末尾添加字符串 “abc”</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>删除</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>erase(iterator p)</code></td>\n<td style=\"text-align:left\">删除字符串中 p 所指的字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(iterator first, iterator last)</code></td>\n<td style=\"text-align:left\">删除字符串中迭代器区间 <code>[first,last)</code>  上所有字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(pos, len)</code></td>\n<td style=\"text-align:left\">删除字符串中从索引位置 pos 开始的 len 个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>clear()</code></td>\n<td style=\"text-align:left\">删除字符串中所有字符</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>字符替换</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.replace(pos,n,str)</code></td>\n<td style=\"text-align:left\">把当前字符串从索引 pos 开始的 n 个字符替换为 str</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.replace(pos,n,n1,c)</code></td>\n<td style=\"text-align:left\">把当前字符串从索引 pos 开始的 n 个字符替换为 n1 个字符 c</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.replace(it1,it2,str)</code></td>\n<td style=\"text-align:left\">把当前字符串 <code>[it1,it2)</code>  区间替换为 str <strong>it1 ,it2 为迭代器哦</strong></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>大小写转换</strong></li>\n</ul>\n<p>法一：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>tolower(s[i])</code></td>\n<td style=\"text-align:left\">转换为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>toupper(s[i])</code></td>\n<td style=\"text-align:left\">转换为大写</td>\n</tr>\n</tbody>\n</table>\n<p>法二：</p>\n<p>通过 stl 的 transform 算法配合 tolower 和 toupper 实现。<br>\n有 4 个参数，前 2 个指定要转换的容器的起止范围，第 3 个参数是结果存放容器的起始位置，第 4 个参数是一元运算。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token double-colon punctuation\">::</span>tolower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 转换小写</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token double-colon punctuation\">::</span>toupper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 转换大写</span></pre></td></tr></table></figure><ul>\n<li><strong>分割</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.substr(pos,n)</code></td>\n<td style=\"text-align:left\">截取从 pos 索引开始的 n 个字符</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>查找</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s.find (str, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置（默认为 0）开始，查找子串 str，返回找到的位置索引，-1 表示查找不到子串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find (c, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置（默认为 0）开始，查找字符 c，返回找到的位置索引，-1 表示查找不到字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.rfind (str, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置开始，反向查找子串 s，返回找到的位置索引，-1 表示查找不到子串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.rfind (c,pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置开始，反向查找字符 c，返回找到的位置索引，-1 表示查找不到字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find_first_of (str, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置（默认为 0）开始，查找子串 s 的字符，返回找到的位置索引，-1 表示查找不到字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find_first_not_of (str,pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置（默认为 0）开始，查找第一个不位于子串 s 的字符，返回找到的位置索引，-1 表示查找不到字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find_last_of(str, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置开始，查找最后一个位于子串 s 的字符，返回找到的位置索引，-1 表示查找不到字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find_last_not_of ( str, pos)</code></td>\n<td style=\"text-align:left\">在当前字符串的 pos 索引位置开始，查找最后一个不位于子串 s 的字符，返回找到的位置索引，-1 表示查找不到子串</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog bird chicken bird cat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 字符串查找 ----- 找到后返回首字母在字符串中的下标</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 1. 查找一个字符串</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chicken\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：9</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 2. 从下标为 6 开始找字符 'i'，返回找到的第一个 i 的下标</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token char\">'i'</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：11</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 3. 从字符串的末尾开始查找字符串，返回的还是首字母在字符串中的下标</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">rfind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chicken\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：9</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 4. 从字符串的末尾开始查找字符</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">rfind</span><span class=\"token punctuation\">(</span><span class=\"token char\">'i'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：18 因为是从末尾开始查找，所以返回第一次找到的字符</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 5. 在该字符串中查找第一个属于字符串 s 的字符</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find_first_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"13br98\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：4---b</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 6. 在该字符串中查找第一个不属于字符串 s 的字符 ------ 先匹配 dog，然后 bird 匹配不到，所以打印 4</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find_first_not_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello dog 2006\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果是：4</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find_first_not_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog bird 2006\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 结果是：9</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 7. 在该字符串最后中查找第一个属于字符串 s 的字符</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find_last_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"13r98\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：19</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 8. 在该字符串最后中查找第一个不属于字符串 s 的字符 ------ 先匹配 t--a---c，然后空格匹配不到，所以打印 21</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find_last_not_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"teac\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果是：21</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><strong>排序</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 按 ASCII 码排序</span></pre></td></tr></table></figure><h2 id=\"bitset\"><a class=\"markdownIt-Anchor\" href=\"#bitset\">#</a> bitset</h2>\n<p>bitset 在 bitset 头文件中，它类似数组，并且每一个元素只能是０或１，每个元素只用１bit 空间</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bitset></span></span></pre></td></tr></table></figure><h3 id=\"初始化定义\"><a class=\"markdownIt-Anchor\" href=\"#初始化定义\">#</a> 初始化定义</h3>\n<p>初始化方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>bitset &lt; n &gt;a</code></td>\n<td style=\"text-align:left\">a 有 n 位，每位都为 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bitset &lt; n &gt;a(b)</code></td>\n<td style=\"text-align:left\">a 是 unsigned long 型 u 的一个副本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bitset &lt; n &gt;a(s)</code></td>\n<td style=\"text-align:left\">a 是 string 对象 s 中含有的位串的副本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bitset &lt; n &gt;a(s,pos,n)</code></td>\n<td style=\"text-align:left\">a 是 s 中从位置 pos 开始的 n 个位的副本</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意： <code>n</code>  必须为常量表达式</p>\n</blockquote>\n<p>演示代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token operator\">></span> bitset1<span class=\"token punctuation\">;</span>　　  <span class=\"token comment\">// 无参构造，长度为４，默认每一位为０</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">9</span><span class=\"token operator\">></span> <span class=\"token function\">bitset2</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　<span class=\"token comment\">// 长度为 9，二进制保存，前面用０补充</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"100101\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token operator\">></span> <span class=\"token function\">bitset3</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 长度为 10，前面用０补充</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">char</span> s2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"10101\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">13</span><span class=\"token operator\">></span> <span class=\"token function\">bitset4</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 长度为 13，前面用０补充</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> bitset1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//0000</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> bitset2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//000001100</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> bitset3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//0000100101</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> bitset4 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　<span class=\"token comment\">//0000000010101</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"特性\"><a class=\"markdownIt-Anchor\" href=\"#特性\">#</a> 特性</h3>\n<p><code>bitset</code>  可以进行<strong>位操作</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token operator\">></span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token operator\">></span> <span class=\"token function\">bar</span> <span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0011\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">^=</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 1010 (foo 对 bar 按位异或后赋值给 foo)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">&amp;=</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0010 (按位与后赋值给 foo)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">|=</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0011 (按位或后赋值给 foo)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 1100 (左移２位，低位补０，有自身赋值)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0110 (右移１位，高位补０，有自身赋值)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 1100 (按位取反)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>bar <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0110 (左移，不赋值)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>bar <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0001 (右移，不赋值)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">==</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//false (0110==0011 为 false)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">!=</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//true  (0110!=0011 为 true)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">&amp;</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0010 (按位与，不赋值)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">|</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0111 (按位或，不赋值)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">^</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 0101 (按位异或，不赋值)</span></pre></td></tr></table></figure><p><strong>访问</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 可以通过 [] 访问元素 (类似数组)，注意最低位下标为０，如下：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token operator\">></span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"1011\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">//0</span></pre></td></tr></table></figure><h3 id=\"方法函数-5\"><a class=\"markdownIt-Anchor\" href=\"#方法函数-5\">#</a> 方法函数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>b.any()</code></td>\n<td style=\"text-align:left\">b 中是否存在置为 1 的二进制位，有 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.none()</code></td>\n<td style=\"text-align:left\">b 中是否没有 1，没有 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.count()</code></td>\n<td style=\"text-align:left\">b 中为 1 的个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.size()</code></td>\n<td style=\"text-align:left\">b 中二进制位的个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.test(pos)</code></td>\n<td style=\"text-align:left\">测试 b 在 pos 位置是否为 1，是 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b[pos]</code></td>\n<td style=\"text-align:left\">返回 b 在 pos 处的二进制位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.set()</code></td>\n<td style=\"text-align:left\">把 b 中所有位都置为 1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.set(pos)</code></td>\n<td style=\"text-align:left\">把 b 中 pos 位置置为 1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.reset()</code></td>\n<td style=\"text-align:left\">把 b 中所有位都置为 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.reset(pos)</code></td>\n<td style=\"text-align:left\">把 b 中 pos 位置置为 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.flip()</code></td>\n<td style=\"text-align:left\">把 b 中所有二进制位取反</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.flip(pos)</code></td>\n<td style=\"text-align:left\">把 b 中 pos 位置取反</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b.to_ulong()</code></td>\n<td style=\"text-align:left\">用 b 中同样的二进制位返回一个 unsigned long 值</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"array\"><a class=\"markdownIt-Anchor\" href=\"#array\">#</a> array</h2>\n<p>头文件</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;array></span></span></pre></td></tr></table></figure><p><code>array</code>  是 C++11 新增的容器，效率与普通数据相差无几，比 <code>vector</code>  效率要高，自身添加了一些成员函数。</p>\n<p>和其它容器不同，array 容器的大小是<strong>固定</strong>的，无法动态的扩展或收缩，<strong>只允许访问或者替换存储的元素。</strong></p>\n<p><strong>注意：</strong></p>\n<p><code>array</code>  的使用要在 <code>std</code>  命名空间里</p>\n<h3 id=\"声明与初始化\"><a class=\"markdownIt-Anchor\" href=\"#声明与初始化\">#</a> 声明与初始化</h3>\n<p><strong>基础数据类型</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明一个大小为 100 的 `int` 型数组，元素的值不确定</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 声明一个大小为 100 的 int 型数组，初始值均为 0 初始值与默认元素类型等效</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 声明一个大小为 100 的 int 型数组，初始化部分值，其余全部为 0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 或者可以用等号</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>高级数据类型</strong></p>\n<p>不同于数组的是对元素类型不做要求，可以套结构体</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"ha\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"haha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token operator\">&lt;</span>node<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"存取元素\"><a class=\"markdownIt-Anchor\" href=\"#存取元素\">#</a> 存取元素</h3>\n<ul>\n<li>\n<p>修改元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>访问元素</p>\n<p>下标访问</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \\n\"</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>利用 <code>auto</code>  访问</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>迭代器访问</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>at()</code>  函数访问</p>\n<p>下标为 <code>1</code>  的元素加上下标为 <code>2</code>  的元素，答案为 <code>5</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>get</code>  方法访问</p>\n<p>将 <code>a</code>  数组下标为 <code>1</code>  位置处的值改为 <code>x</code></p>\n<p>注意：获取的下标只能写数字，不能填变量</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"成员函数\"><a class=\"markdownIt-Anchor\" href=\"#成员函数\">#</a> 成员函数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">成员函数</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>begin()</code></td>\n<td style=\"text-align:left\">返回容器中第一个元素的访问迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>end()</code></td>\n<td style=\"text-align:left\">返回容器最后一个元素之后一个位置的访问迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>rbegin()</code></td>\n<td style=\"text-align:left\">返回最后一个元素的访问迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>rend()</code></td>\n<td style=\"text-align:left\">返回第一个元素之前一个位置的访问迭代器（地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>size()</code></td>\n<td style=\"text-align:left\">返回容器中元素的数量，其值等于初始化 array 类的第二个模板参数 <code>N</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>max_size()</code></td>\n<td style=\"text-align:left\">返回容器可容纳元素的最大数量，其值始终等于初始化 array 类的第二个模板参数 N</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>empty()</code></td>\n<td style=\"text-align:left\">判断容器是否为空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>at(n)</code></td>\n<td style=\"text-align:left\">返回容器中 n 位置处元素的引用，函数会自动检查 n 是否在有效的范围内，如果不是则抛出 out_of_range 异常</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>front()</code></td>\n<td style=\"text-align:left\">返回容器中第一个元素的直接引用，函数不适用于空的 array 容器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>back()</code></td>\n<td style=\"text-align:left\">返回容器中最后一个元素的直接引用，函数不适用于空的 array 容器。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>data()</code></td>\n<td style=\"text-align:left\">返回一个指向容器首个元素的指针。利用该指针，可实现复制容器中所有元素等类似功能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>fill(x)</code></td>\n<td style=\"text-align:left\">将  <code>x</code>  这个值赋值给容器中的每个元素，相当于初始化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>array1.swap(array2)</code></td>\n<td style=\"text-align:left\">交换 array1 和 array2 容器中的所有元素，但前提是它们具有相同的长度和类型</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"部分用法示例\"><a class=\"markdownIt-Anchor\" href=\"#部分用法示例\">#</a> 部分用法示例</h3>\n<p><code>data()</code></p>\n<p>指向底层元素存储的指针。对于非空容器，返回的指针与首元素地址比较相等。</p>\n<p><code>at()</code></p>\n<p>下标为 <code>1</code>  的元素加上下标为 <code>2</code>  的元素，答案为 <code>5</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>fill()</code></p>\n<p>array 的 <code>fill()</code>  函数，将 <code>a</code>  数组全部元素值变为 <code>x</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>另外还有其它的 <code>fill()</code>  函数：将 <code>a</code>  数组 [begin,end) 全部值变为 <code>x</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>get 方法获取元素值</strong></p>\n<p>将 <code>a</code>  数组下标为 <code>1</code>  位置处的值改为 <code>x</code></p>\n<p>注意：获取的下标只能写数字，不能填变量</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>排序</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"tuple\"><a class=\"markdownIt-Anchor\" href=\"#tuple\">#</a> tuple</h2>\n<p>tuple 模板是 pair 的泛化，可以封装不同类型任意数量的对象。</p>\n<p>可以把 tuple 理解为 pair 的扩展，tuple 可以声明二元组，也可以声明三元组。</p>\n<p>tuple 可以等价为<strong>结构体</strong>使用</p>\n<p><strong>头文件</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;tuple></span></span></pre></td></tr></table></figure><h3 id=\"声明初始化\"><a class=\"markdownIt-Anchor\" href=\"#声明初始化\">#</a> 声明初始化</h3>\n<p>声明一个空的 <code>tuple</code>  三元组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> t1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>赋值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t1 <span class=\"token operator\">=</span> <span class=\"token function\">make_tuple</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hahaha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建的同时初始化</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以使用 pair 对象构造 tuple 对象，但 tuple 对象必须是两个元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> t3 <span class=\"token punctuation\">&#123;</span>p<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 pair 对象赋给 tuple 对象</span></pre></td></tr></table></figure><h3 id=\"元素操作\"><a class=\"markdownIt-Anchor\" href=\"#元素操作\">#</a> 元素操作</h3>\n<p>获取 tuple 对象 <code>t</code>  的第一个元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>修改 tuple 对象 <code>t</code>  的第一个元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"函数操作\"><a class=\"markdownIt-Anchor\" href=\"#函数操作\">#</a> 函数操作</h3>\n<p>获取元素个数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> tuple_size<span class=\"token operator\">&lt;</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><p>获取对应元素的值</p>\n<p>通过 <code>get(obj)</code>  方法获取， <code>n</code>  必须为数字不能是变量</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><p>通过 <code>tie</code>  解包 获取元素值</p>\n<p><code>tie</code>  可以让 tuple 变量中的三个值依次赋到 tie 中的三个变量中</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> one<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string two<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hahaha\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> one <span class=\"token operator\">&lt;&lt;</span> two <span class=\"token operator\">&lt;&lt;</span> three <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1hahaha3</span></pre></td></tr></table></figure><h1 id=\"stl函数\"><a class=\"markdownIt-Anchor\" href=\"#stl函数\">#</a> STL 函数</h1>\n<h2 id=\"accumulate\"><a class=\"markdownIt-Anchor\" href=\"#accumulate\">#</a> accumulate</h2>\n<ul>\n<li>\n<p><code> accumulate(beg, end, init)</code></p>\n</li>\n<li>\n<p>** 复杂度：**O (N)</p>\n</li>\n<li>\n<p>作用：对一个序列的元素求和</p>\n</li>\n<li>\n<p><code>init</code>  为对序列元素求和的<strong>初始值</strong></p>\n</li>\n<li>\n<p>返回值类型：与 <code>init</code>  一致</p>\n</li>\n<li>\n<p><strong>基础累加求和：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 对 [0,2] 区间求和，初始值为 0，结果为 0+1+3+5=9</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> res1 <span class=\"token operator\">=</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 对 [0,3] 区间求和，初始值为 5，结果为 5+1+3+5+9=23</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> res2 <span class=\"token operator\">=</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>** 自定义二元对象求和：** 使用 lambda 表达式</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ll num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>st<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">10000000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 返回值类型与 init 一致，同时注意参数类型（a）也要一样</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 初始值为 1，累加 1+10000000001+10000000002+10000000003=30000000007</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ll res <span class=\"token operator\">=</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>st <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> st <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1ll</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>ll a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"atoi\"><a class=\"markdownIt-Anchor\" href=\"#atoi\">#</a> atoi</h2>\n<ul>\n<li>\n<p><code>atoi(const char *)</code></p>\n</li>\n<li>\n<p>将字符串转换为 <code>int</code>  类型</p>\n</li>\n<li>\n<p>注意参数为 <code>char</code>  型数组，如果需要将 string 类型转换为 int 类型，可以使用 <code>stoi</code>  函数（参考下文），或者将 <code>string</code>  类型转换为 <code>const char *</code>  类型。</p>\n</li>\n<li>\n<p>关于输出数字的范围：<br>\n <code>atoi</code> <strong> 不做</strong>范围检查，如果超出上界，输出上界，超出下界，输出下界。<br>\n <code>stoi</code> <strong> 会做</strong>范围检查，默认必须在 <code>int</code>  范围内，如果超出范围，会出现 RE（Runtime Error）错误。</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s <span class=\"token operator\">=</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1234</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"stoi\"><a class=\"markdownIt-Anchor\" href=\"#stoi\">#</a> stoi</h2>\n<ul>\n<li>\n<p><code>stoi(const string*)</code></p>\n</li>\n<li>\n<p>将对应 string 类型字符串转换为数字</p>\n</li>\n<li>\n<p>注意参数为 <code>string</code>  字符串类型。</p>\n<p>关于输出数字的范围：<br>\n <code>stoi</code> <strong> 会做</strong>范围检查，默认必须在 <code>int</code>  范围内，如果超出范围，会出现 RE（Runtime Error）错误。<br>\n <code>atoi</code> <strong> 不做</strong>范围检查，如果超出上界，输出上界，超出下界，输出下界。</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s <span class=\"token operator\">=</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1234</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"iota\"><a class=\"markdownIt-Anchor\" href=\"#iota\">#</a> iota</h2>\n<ul>\n<li>\n<p><code>iota(beg, end)</code></p>\n</li>\n<li>\n<p>让序列递增赋值</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">iota</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 0 1 2 3 4 5 6 7 8 9</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"to_string\"><a class=\"markdownIt-Anchor\" href=\"#to_string\">#</a> to_string</h2>\n<ul>\n<li>\n<p>将数字转化为字符串，支持小数（double）</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"fill\"><a class=\"markdownIt-Anchor\" href=\"#fill\">#</a> fill</h2>\n<ul>\n<li>\n<p><code>fill(beg,end,num)</code></p>\n</li>\n<li>\n<p>对一个序列进行初始化赋值</p>\n</li>\n<li>\n<p><strong>复杂度：</strong> O(N)</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对 a 数组的所有元素赋 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//1 1 1 1 1</span></pre></td></tr></table></figure></li>\n<li>\n<p>注意区分 memset：</p>\n<p><code>memset()</code>  是按<strong>字节</strong>进行赋值，对于初始化赋 <code>0</code>  或 <code>-1</code>  有比较好的效果.</p>\n<p>如果赋某个特定的数会<strong>出错</strong>，赋值特定的数建议使用 <code>fill()</code></p>\n</li>\n</ul>\n<h2 id=\"reverse\"><a class=\"markdownIt-Anchor\" href=\"#reverse\">#</a> reverse</h2>\n<ul>\n<li>\n<p><code>reverse(beg,end)</code></p>\n</li>\n<li>\n<p>对序列进行翻转</p>\n</li>\n<li>\n<p><strong>复杂度：</strong> O(N)</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcde\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对 s 进行翻转</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//edcba</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 对 a 数组进行翻转</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4321</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"sort\"><a class=\"markdownIt-Anchor\" href=\"#sort\">#</a> sort</h2>\n<ul>\n<li>\n<p><code>sort(beg, end)</code></p>\n</li>\n<li>\n<p>``sort(beg, end, cmp)`</p>\n<p>再定义一个比较函数，通常对条件筛选进行排序，一般与结构体连用。</p>\n</li>\n<li>\n<p>对一个序列进行排序</p>\n</li>\n<li>\n<p><strong>复杂度：</strong> O(NlogN)</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对 a 数组的 [1,n] 位置进行从小到大排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 对 a 数组的 [0,n-1] 位置从大到小排序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">greater</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 对 a 数组的 [0,n-1] 位置从小到大排序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">less</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 自定义排序，定义比较函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>node a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 按结构体里面的 x 值降序排列</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> node <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 只能接受 以函数为形式的自定义排序规则，无法接受以结构体为形式的自定义排序规则</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"stable_sort\"><a class=\"markdownIt-Anchor\" href=\"#stable_sort\">#</a> stable_sort</h2>\n<h2 id=\"is_sorted\"><a class=\"markdownIt-Anchor\" href=\"#is_sorted\">#</a> is_sorted</h2>\n<h2 id=\"unique\"><a class=\"markdownIt-Anchor\" href=\"#unique\">#</a> unique</h2>\n<h2 id=\"transform\"><a class=\"markdownIt-Anchor\" href=\"#transform\">#</a> transform</h2>\n<h2 id=\"lower_bound-upper_bound\"><a class=\"markdownIt-Anchor\" href=\"#lower_bound-upper_bound\">#</a> lower_bound + upper_bound</h2>\n<ul>\n<li>\n<p>二分查找</p>\n</li>\n<li>\n<p><strong>复杂度：</strong> O(logN)</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 a 数组中查找第一个大于等于 x 的元素，返回该元素的地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 在 a 数组中查找第一个大于 x 的元素，返回该元素的地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 如果未找到，返回尾地址的下一个位置的地址</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"max_elementmin_element\"><a class=\"markdownIt-Anchor\" href=\"#max_elementmin_element\">#</a> max_element+min_element</h2>\n<h2 id=\"maxmin\"><a class=\"markdownIt-Anchor\" href=\"#maxmin\">#</a> max+min</h2>\n<h2 id=\"minmax\"><a class=\"markdownIt-Anchor\" href=\"#minmax\">#</a> minmax</h2>\n<h2 id=\"minmax_element\"><a class=\"markdownIt-Anchor\" href=\"#minmax_element\">#</a> minmax_element</h2>\n<h2 id=\"nth_element\"><a class=\"markdownIt-Anchor\" href=\"#nth_element\">#</a> nth_element</h2>\n<h2 id=\"next_permutation\"><a class=\"markdownIt-Anchor\" href=\"#next_permutation\">#</a> next_permutation</h2>\n<h2 id=\"partial_sort\"><a class=\"markdownIt-Anchor\" href=\"#partial_sort\">#</a> partial_sort</h2>\n<h2 id=\"random_shuffle\"><a class=\"markdownIt-Anchor\" href=\"#random_shuffle\">#</a> random_shuffle</h2>\n<h2 id=\"__gcd\"><a class=\"markdownIt-Anchor\" href=\"#__gcd\">#</a> __gcd</h2>\n<h2 id=\"__lg\"><a class=\"markdownIt-Anchor\" href=\"#__lg\">#</a> __lg</h2>\n<h2 id=\"_builtin-内置位运算函数\"><a class=\"markdownIt-Anchor\" href=\"#_builtin-内置位运算函数\">#</a> _<em>builtin</em> 内置位运算函数</h2>\n<h3 id=\"__builtin_ffs\"><a class=\"markdownIt-Anchor\" href=\"#__builtin_ffs\">#</a> __builtin_ffs</h3>\n<h3 id=\"__builtin_popcount\"><a class=\"markdownIt-Anchor\" href=\"#__builtin_popcount\">#</a> __builtin_popcount</h3>\n<h3 id=\"__builtin_ctz\"><a class=\"markdownIt-Anchor\" href=\"#__builtin_ctz\">#</a> __builtin_ctz</h3>\n<h3 id=\"__builtin_clz\"><a class=\"markdownIt-Anchor\" href=\"#__builtin_clz\">#</a> __builtin_clz</h3>\n<h3 id=\"__builtin_parity\"><a class=\"markdownIt-Anchor\" href=\"#__builtin_parity\">#</a> __builtin_parity</h3>\n<p>一．</p>\n<p>二 vector 扩容原理<br>\n 1 新增元素：Vector 通过一个连续的数组存放元素，如果集合已满，在新增数据的时候，就会分配一块更大的内存，将原来的数据复制过来，释放之前的内存，在插入新增的元素。注意不是在原来空间后直接增加空间<br>\n 2 对 vector 的任何操作，一旦引起空间重新配置，指向原 vector 的所有迭代器就都失效了。<br>\n3 不同的编译器实现的扩容方式不一样，VS2015 中以 1.5 倍扩容，GCC 以 2 倍扩容。</p>\n<p>三 vector 扩容为什么以 2 倍增长<br>\n 1 时间和空间的权衡，简单来说， 空间分配的多，平摊时间复杂度低，但浪费空间也多。<br>\n2 均摊添加每个元素的开销最小。</p>\n<p>四 vector 扩容为什么以 1.5 倍增长<br>\n理想分配方案是是在第 N 次分配的时候能重用之前 N-1 次释放的内存，如果按照 1.5 分配，1，1.5，3，4.5…… 当你需要分配 4.5 时，前面已分配 5.5，你可以直接利用，把旧数据 move 过去。但选择两倍的增长比如像这样：1，2，4，8，16，32，… 每次需要申请的空间都大于用到前面释放的内存 (4&gt;2+1)，无法重用。</p>\n<p>五 vector 常用接口：<br>\n・清空 vector 可以使用成员函数 c.clear ()<br>\n・判断 vector 是否为空，可以使用成员函数 empty ()，如果为空返回 true，否则返回 false<br>\n・vector 输出最后一个元素的引用可以用 back () 成员函数，如果容器为空，则行为未定义<br>\n・vector 输出第一个元素的引用可以用 front () 成员函数，如果容器为空，则行为未定义<br>\n・vector 支持用下标访问元素，类似数组一样 c [n] 其中 n 是一个无符号整数，如果 n 大于容器的长度，那么行为未定义<br>\n・vector 为了防止越界访问，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1jLWtxNmEwOGhxcGc4Z2J3M2E0bWZuc2QuYXQ=\">其中有成员函数 c.at</span> (n)，返回下标为 n 的元素的引用。如果下标越界，那么抛出 out_of_range 的异常<br>\n・pop_back () 成员函数用来删除 vector 中的最后一个元素，如果容器为空会出现未定义行为。<br>\n・c.erase (it) 成员函数，删除迭代器 it 所指向的元素，返回一个指向被删除元素之后的迭代器，如果 it 指向最后一个元素，那么返回以为尾后迭代器（通常是 end ()）。若 it 就是 end ()，那么行为未定义。<br>\n・c.erase (beg,ed) 删除 [beg,ed) 范围的元素，同时返回最后一个元素的后面的迭代器，如果 ed 就是尾后迭代器，那么还返回一个尾后迭代器。<br>\n・vector 中 begin 和 end 函数返回的是什么？<br>\nbegin 返回的是第一个元素的迭代器，end 返回的是最后一个元素后面位置的迭代器。前闭后开区间【）<br>\n・vector 中的 reserve 和 resize 的区别<br>\n reserve 是直接扩充到已经确定的大小，可以减少多次开辟、释放空间的问题（优化 push_back），就可以 提高效率，其次还可以减少多次要拷贝数据的问题。reserve 只是保证 vector 中的空间大小（capacity）最少 达到参数所指定的大小 n。reserve () 只有一个参数。<br>\nresize () 可以改变有效空间的大小，也有改变默认值的功能。capacity 的大小也会随着改变。resize () 可以有 多个参数。<br>\n・vector 中的 size 和 capacity 的区别<br>\n size 表示当前 vector 中有多少个元素（finish - start）;<br>\ncapacity 函数则表示它已经分配的内存中可以容纳多少元素（end_of_storage - start）;<br>\n・vector 迭代器失效的情况<br>\n当插入一个元素到 vector 中，由于引起了内存重新分配，所以指向原内存的迭代器全部失效。 当删除容器中一个元素后，该迭代器所指向的元素已经被删除，那么也造成迭代器失效。erase 方法会返回下 一个有效的迭代器，所以当我们要删除某个元素时，需要 it=vec.erase (it)。<br>\n・正确释放 vector 的内存 (clear (), swap (), shrink_to_fit ())<br>\n vec.clear ()：清空内容，但是不释放内存。<br>\nvector ().swap (vec)：清空内容，且释放内存，想得到一个全新的 vector。 vec.shrink_to_fit ()：请求容器降低其 capacity 和 size 匹配。 vec.clear ();vec.shrink_to_fit ();：清空内容，且释放内存。<br>\n・vector 中 erase 方法与 algorithn 中的 remove 方法区别<br>\n vector 中 erase 方法真正删除了元素，迭代器不能访问了。<br>\nremove 只是简单地将元素移到了容器的最后面，迭代器还是可以访问到。因为 algorithm 通过迭代器进行操作，不知道容器的内部结构，所以无法进行真正的删除。</p>\n<p>六 List 原理</p>\n<p>list 是由双向链表实现的，因此内存空间是不连续的。<br>\nlist 的随机访问效率不好，需要遍历元素，时间复杂度为 o (n)。<br>\n3. 底层是双向链表，所以每个元素有两个指针的额外空间开销。<br>\n4. 在任何位置都能高效地插入和删除元素。只要改变元素的指针值，不需要拷贝元素。<br>\n七 vector、list、queue 选择原则：<br>\n1 需要对数据高效地随机访问 (存取)，而不在乎插入和删除的效率，采用 vector<br>\n2 需要大量插入、删除数据，而不关心随机访问数据，采用 list<br>\n3 需要随机访问数据，而且关心前后增删数据的能力，采用 deque<br>\n4 对数据中间的增删操作比较多：采用 list，建议在排序的基础上，批量进行增删可以对运行效率提供最大的保证</p>\n<p>八 map 的底层实现<br>\n容器的数据结构是采用红黑树进行管理，插入的元素健位不允许重复，所使用的节点元素的比较函数，只对元素的健值进行比较，元素的各项数据可通过健值检索出来。map 容器是一种关联容器。</p>\n<p>九 map 和 unordered_map 的实现机理：<br>\nmap: 是基于红黑树来实现的（红黑树是非常严格的平衡二叉搜索树），红黑树具有自动排序功能，红黑树的每一个节点都代表着 map 中的一个元素，因此对于 map 的查找，删除和插入操作都是对红黑树的操作。<br>\nunordered_map: 是基于哈希表来实现的，查找的时间复杂度是 O (1), 在海量数据处理中有着广泛的应用。</p>\n<p>十 map 和 unordered_map 的优缺点<br>\n map 的优点：（1）map 是有序的（2）基于红黑树实现，查找的时间复杂度是 O (n)<br>\n map 的缺点：空间占用率比较高，因为内部实现了红黑树，虽然提高了运行效率，但是每个节点都要保存父亲节点和孩子节点和红黑树的性质，使得每一个节点都占用大量的空间。<br>\n适用的情况：对于要有序的结构，适用 map<br>\nunordered_map 的优点：因为内部是哈希表来实现的，所以查找效率会非常高<br>\n unordered_map 的缺点：哈希表的建立比较费时<br>\n适用的情况：对于查找问题，适用 unordered_map 会更好一点。</p>\n<p>十一 Map 插入元素方法<br>\n map&lt;int, string&gt; mapStudent;<br>\n1 mapStudent.insert(pair&lt;int, string&gt;(1, “student_one”));<br>\n2 mapStudent.insert(map&lt;int, string&gt;::value_type (1, “student_one”));<br>\n3 mapStudent[1] = “student_one”;<br>\n 以上三种用法，虽然都可以实现数据的插入，但是它们是有区别的，当然了第一种和第二种在效果上是完成一样的，用 insert 函数插入数据，在数据的插入上涉及到集合的唯一性这个概念，即当 map 中有这个关键字时，insert 操作是插入数据不了的，但是用数组方式就不同了，它可以覆盖以前该关键字对应的值</p>\n<p>十二 为何 map 和 set 的插入删除效率比其他序列容器高<br>\n因为不需要内存拷贝和内存移动</p>\n<p>十三 当数据元素增多时（从 10000 到 20000），map 的 set 的查找速度会怎样 变化？<br>\nRB-TREE 用二分查找法，时间复杂度为 logn，所以从 10000 增到 20000 时，查找次数从 log10000=14 次到 log20000=15 次，多了 1 次而已。</p>\n<p>十四 map 、set、multiset、multimap 的特点<br>\n set 和 multiset 会根据特定的排序准则自动将元素排序，set 中元素不允许重复，multiset 可以重复。 map 和 multimap 将 key 和 value 组成的 pair 作为元素，根据 key 的排序准则自动将元素排序（因为红黑树也是 二叉搜索树，所以 map 默认是按 key 排序的），map 中元素的 key 不允许重复，multimap 可以重复。 map 和 set 的增删改查速度为都是 logn，是比较高效的。</p>\n<p>十五 为何 map 和 set 每次 insert 之后， 以前保存的 iterator 不会失效？<br>\n存储的是结点，不需要内存拷贝和内存移动。 插入操作只是结点指针换来换去，结点内存没有改变。而 iterator 就像指向结点的指针，内存没变，指向内 存的指针也不会变。 6</p>\n<p>十六 为何 map 和 set 不能像 vector 一样有个 reserve 函数来预分配数据？<br>\n 在 map 和 set 内部存储的已经不是元素本身了，而是包含元素的结点。也就是说 map 内部使用的 Alloc 并不是 map 声明的时候从参数中传入的 Alloc。</p>\n<p>十七 set 底层实现<br>\n底层是红黑树，set 会根据待定的排序准则，自动将元素排序。不允许元素重复。</p>\n<p>十八 set, multiset (map,multimap)<br>\n set 和 multiset 会根据特定的排序准则自动将元素排序，set 中元素不允许重复，multiset 可以重复。因为是排序的，所以 set 中的元素不能被修改，只能删除后再添加。</p>\n<p>十九 set 的底层实现实现为什么不用哈希表而使用红黑树？<br>\nset 中元素是经过排序的，红黑树也是有序的，哈希是无序的 如果只是单纯的查找元素的话，那么肯定要选哈希表了，因为哈希表在的最好查找时间复杂度为 O (1)，并且 如果用到 set 中那么查找时间复杂度的一直是 O（1），因为 set 中是不允许有元素重复的。而红黑树的查找时 间复杂度为 O (lgn)</p>\n<p>二十 hash 表<br>\n hash 表的实现，包括 STL 中的哈希桶长度常数。<br>\nhash 表的实现主要涉及两个问题：散列函数和碰撞处理。<br>\n1）hash function （散列函数）。最常见的散列函数：f (x) = x % TableSize .<br>\n2）碰撞问题（不同元素的散列值相同）。解决碰撞问题的方法有许多种，包括线性探测、二次探测、开链等做法。SGL 版本使用开链法，使用一个链表保持相同散列值的元素。</p>\n<p>二十一 你怎样理解迭代器？<br>\nIterator (迭代器) 用于提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示，相当于智能指针。</p>\n<p>二十二 迭代器失效问题<br>\n vector 迭代器<br>\n当插入一个元素后，插入点之前的迭代器如果未扩容则不受影响，插入点之后的迭代器失效；<br>\n当插入一个元素后，capacity 如果有变化，则容器需要重新分配内存，所有迭代器都会失效；<br>\n当进行删除操作后，指向删除点及之后元素的迭代器全部失效。<br>\ndeque 迭代器<br>\n在容器 begin/end 插入操作所有迭代器不受影响；<br>\n在容器非 begin/end 的位置插入和删除操作都会使指向该容器元素的所有迭代器失效。<br>\n在容器 begin/end 删除元素会使指向被删除元素的迭代器失效；<br>\nList/forward_list 迭代器<br>\n list insert 操作不会使 list 迭代器失效；<br>\nlist erase 操作会使当前指向被删除元素的迭代器失效，其它迭代器正常。<br>\nset 迭代器<br>\n set 的 insert 操作不会使 set 迭代器失效；<br>\nset erase 操作会使当前指向被删除元素的迭代器失效，其它迭代器正常。<br>\nmap 迭代器<br>\n map 的 insert 操作不会使 map 迭代器失效；<br>\nmap erase 删除操作会使当前指向被删除元素的迭代器失效</p>\n<p>二十三 vector 为何每次 insert 之后，以前保存的 iterator 不会失效？<br>\n 答:iterator 这里就相当于指向节点的指针，内存没有变，指向内存的指针怎么会失效呢 (当然被删除的那个元素本身已经失效了)。相对于 vector 来说，每一次删除和插入，指针都有可能失效，调用 push_back 在尾部插入也是如此。因为为了保证内部数据的连续存放，iterator 指向的那块内存在删除和插入过程中可能已经被其他内存覆盖或者内存已经被释放了。即使时 push_back 的时候，容器内部空间可能不够，需要一块新的更大的内存，只有把以前的内存释放，申请新的更大的内存，复制已有的数据元素到新的内存，最后把需要插入的元素放到最后，那么以前的内存指针自然就不可用了。特别时在和 find 等算法在一起使用的时候，牢记这个原则：不要使用过期的 iterator。</p>\n<p>二十四 vector、list、map、deque 用 erase（it）后，迭代器的变化。<br>\nvector 和 deque 是序列式容器，其内存分别是连续空间和分段连续空间，删除迭代器 it 后，其后面的迭代器都失效了，此时 it 及其后面的迭代器会自动加 1，使 it 指向被删除元素的下一个元素。<br>\nlist 删除迭代器 it 时，其后面的迭代器都不会失效，将前面和后面连接起来即可。<br>\nmap 也是只能使当前删除的迭代器失效，其后面的迭代器依然有效。</p>\n<p>二十五 不允许有遍历行为的容器有哪些（不提供迭代器）？<br>\n1）queue，除了头部外，没有其他方法存取 deque 的其他元素。<br>\n2）stack（底层以 deque 实现），除了最顶端外，没有任何其他方法可以存取 stack 的其他元素。<br>\n3）heap，所有元素都必须遵循特别的排序规则，不提供遍历功能。</p>\n<p>二十六 stl 中 alloc<br>\nSGI 版本 STL 的默认配置器 std::alloc。参见：《STL 源码剖析》<br>\n1）考虑到小型区块所可能造成的内存碎片问题，SGI 设计了双层配置器。第一级配置器直接使用 malloc () 和 free ()；第二级则视情况采取不同的策略：当配置区块超过 128bytes 时，视为 “足够大”，便调用第一级配置器；当配置区块小于 128bytes 时，视之为 “过小”，为了降低额外负担，便采用 memory pool（内存池）整理方式，而不在求助于第一级配置器。<br>\n2）内存池的核心：内存池和 16 个自由链表（各自管理 8,16，…，128bytes 的小额区块）。在分配一个小区块时，首先在所属自由链表中寻找，如果找到，直接抽出分配；若所属自由链表为空，则请求内存池为所属自由链表分配空间；默认情况下，为该自由链表分配 20 个区块，若内存池剩余容量不足，则分配可分配的最大容量；若内存池连一个区块都无法分配，则调用 chunk_alloc 为内存池分配一大块区块；若内存不足，则尝试调用 malloc 分配，否则返回 bad_alloc 异常。</p>\n<p>二十七 STL 线程不安全的情况<br>\n在对同一个容器进行多线程的读写、写操作时；<br>\n在每次调用容器的成员函数期间都要锁定该容器；<br>\n在每个容器返回的迭代器（例如通过调用 begin 或 end）的生存期之内都要锁定该容器； 在每个在容器上调用的算法执行期间锁定该容器。</p>\n<p>二十八 priority_queue 的底层原理<br>\n priority_queue：优先队列，其底层是用堆来实现的。在优先队列中，队首元素一定是当前队列中优先级最 高的那一个。</p>\n",
            "tags": [
                "C++",
                "STL"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/03/08/Linux/",
            "url": "https://adventure-yx.github.io/2023/03/08/Linux/",
            "title": "Linux",
            "date_published": "2023-03-08T14:03:56.000Z",
            "content_html": "<h1 id=\"linux-配置\"><a class=\"markdownIt-Anchor\" href=\"#linux-配置\">#</a> Linux 配置</h1>\n<p>windows powershell</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>wsl <span class=\"token parameter variable\">--installl</span> <span class=\"token parameter variable\">-d</span> Ubuntu-20.04</pre></td></tr></table></figure><p>更新软件包</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt-get</span> update</pre></td></tr></table></figure><p>安装最常用 linux 桌面程序 gedit</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt</span> <span class=\"token function\">install</span> gedit</pre></td></tr></table></figure><p>安装编译工具 gcc+cmake</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt</span> <span class=\"token function\">install</span> build-essential</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">apt</span> <span class=\"token function\">install</span> cmake</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">vim</span></pre></td></tr></table></figure><h1 id=\"linux-系统目录结构\"><a class=\"markdownIt-Anchor\" href=\"#linux-系统目录结构\">#</a> Linux 系统目录结构</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> /</pre></td></tr></table></figure><p><img data-src=\"image-20230309080718084.png\" alt=\"image-20230309080718084\"></p>\n<p>树状目录结构：</p>\n<p><img data-src=\"d0c50-linux2bfile2bsystem2bhierarchy.jpg\" alt=\"img\"></p>\n<p><strong>系统启动必须：</strong></p>\n<ul>\n<li>\n<p><code>/boot</code> ：存放的启动 Linux 时使用的内核文件，包括连接文件以及镜像文件。</p>\n</li>\n<li>\n<p><code>/etc</code> ：<strong>存放</strong>所有<strong>的系统需要的</strong>配置文件<strong>和</strong>子目录列表，** 更改目录下的文件可能会导致系统不能启动。</p>\n</li>\n<li>\n<p><code>/lib</code> ：存放基本代码库（比如 c++ 库），其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p>\n</li>\n<li>\n<p><code>/sys</code> ： 这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。sysfs 文件系统集成了下面 3 种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中</p>\n</li>\n</ul>\n<p><strong>指令集合：</strong></p>\n<ul>\n<li>\n<p><code>/bin</code> ：存放着最常用的程序和指令</p>\n</li>\n<li>\n<p><code>/sbin</code> ：只有系统管理员能使用的程序和指令。是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p>\n</li>\n</ul>\n<p><strong>外部文件管理：</strong></p>\n<ul>\n<li>\n<p><code>/dev</code>  ：Device (设备) 的缩写，存放的是 Linux 的外部设备。** 注意：** 在 Linux 中访问设备和访问文件的方式是相同的。</p>\n</li>\n<li>\n<p><code>/media</code> ：类 windows 的 ** 其他设备，** 例如 U 盘、光驱等等，识别后 linux 会把设备放到这个目录下。</p>\n</li>\n<li>\n<p><code>/mnt</code> ：临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</p>\n</li>\n</ul>\n<p><strong>临时文件：</strong></p>\n<ul>\n<li>\n<p><code>/run</code> ：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p>\n</li>\n<li>\n<p><code>/lost+found</code> ：一般情况下为空的，系统非法关机后，这里就存放一些文件。</p>\n</li>\n<li>\n<p><code>/tmp</code> ：这个目录是用来存放一些临时文件的。</p>\n</li>\n</ul>\n<p><strong>账户：</strong></p>\n<ul>\n<li>\n<p><code>/root</code> ：系统管理员的用户主目录。</p>\n</li>\n<li>\n<p><code>/home</code> ：用户的主目录，以用户的账号命名的。</p>\n</li>\n<li>\n<p><code>/usr</code> ： usr 是 unix shared resources (共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p>\n</li>\n<li>\n<p><code>/usr/bin</code> ：系统用户使用的应用程序与指令。</p>\n</li>\n<li>\n<p><code>/usr/sbin</code> ：超级用户使用的比较高级的管理程序和系统守护程序。</p>\n</li>\n<li>\n<p><code>/usr/src</code> ：内核源代码默认的放置目录。</p>\n</li>\n</ul>\n<p><strong>运行过程中要用：</strong></p>\n<ul>\n<li>\n<p><code>/var</code> ：存放经常修改的数据，比如程序运行的日志文件（/var/log 目录下）。</p>\n</li>\n<li>\n<p><code>/proc</code> ：管理 ** 内存空间！** 虚拟的目录，是系统内存的映射，我们可以直接访问这个目录来，获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件来做修改。</p>\n</li>\n</ul>\n<p><strong>扩展用的：</strong></p>\n<ul>\n<li>\n<p><code>/opt</code> ：默认是空的，我们安装额外软件可以放在这个里面。</p>\n</li>\n<li>\n<p><code>/srv</code> ：存放服务启动后需要提取的数据 **（不用服务器就是空）**</p>\n</li>\n</ul>\n<h1 id=\"linux-文件基本属性\"><a class=\"markdownIt-Anchor\" href=\"#linux-文件基本属性\">#</a> Linux 文件基本属性</h1>\n<p>Linux 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。</p>\n<p>为了保护系统的安全性，Linux 系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>\n<p>在 Linux 中我们通常使用以下两个命令来修改文件或目录的所属用户与权限：</p>\n<ul>\n<li><code>chown</code>  (change owner) ： 修改所属用户与组。</li>\n<li><code>chmod</code>  (change mode) ： 修改用户的权限。</li>\n</ul>\n<p>在 Linux 中我们可以使用  <code>ll</code>  或者  <code>ls –l</code>  命令来显示一个文件的属性以及文件所属的用户和组，如：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root@LAPTOP-G8CK4FEN:/<span class=\"token comment\"># ll</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>total <span class=\"token number\">1480</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-xr-x  <span class=\"token number\">19</span> root root    <span class=\"token number\">4096</span> Mar  <span class=\"token number\">9</span> 08:01 ./</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x  <span class=\"token number\">19</span> root root    <span class=\"token number\">4096</span> Mar  <span class=\"token number\">9</span> 08:01 <span class=\"token punctuation\">..</span>/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lrwxrwxrwx   <span class=\"token number\">1</span> root root       <span class=\"token number\">7</span> Apr <span class=\"token number\">23</span>  <span class=\"token number\">2020</span> bin -<span class=\"token operator\">></span> usr/bin/</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>drwxr-xr-x   <span class=\"token number\">2</span> root root    <span class=\"token number\">4096</span> Apr <span class=\"token number\">23</span>  <span class=\"token number\">2020</span> boot/</pre></td></tr></table></figure><p>实例中，<strong>boot</strong> 文件的第一个属性用 <strong>d</strong> 表示。<strong>d</strong> 在 Linux 中代表该文件是一个目录文件。</p>\n<p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。</p>\n<ul>\n<li>当为 <strong>d</strong> 则是目录</li>\n<li>当为 <strong>-</strong> 则是文件；</li>\n<li>若是 <strong>l</strong> 则表示为链接文档 (link file)；</li>\n<li>若是 <strong>b</strong> 则表示为装置文件里面的可供储存的接口设备 (可随机存取装置)；</li>\n<li>若是 <strong>c</strong> 则表示为装置文件里面的串行端口设备，例如键盘、鼠标 (一次性读取装置)。</li>\n</ul>\n<p>接下来的字符中，以三个为一组，且均为 <strong>rwx</strong> 的三个参数的组合。其中， <strong>r</strong> 代表可读 (read)、 <strong>w</strong> 代表可写 (write)、 <strong>x</strong> 代表可执行 (execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 <strong>-</strong> 而已。</p>\n<p><img data-src=\"file-llls22.jpg\" alt=\"img\"></p>\n<p><img data-src=\"363003_1227493859FdXT.png\" alt=\"363003_1227493859FdXT\"></p>\n<p>从左至右用 <strong>0-9</strong> 这些数字来表示。</p>\n<p>第 <strong>0</strong> 位确定文件类型，第 <strong>1-3</strong> 位确定属主（该文件的所有者）拥有该文件的权限。</p>\n<p>第 4-6 位确定属组（所有者的同组用户）拥有该文件的权限，第 7-9 位确定其他用户拥有该文件的权限。</p>\n<p>其中，第 <strong>1、4、7</strong> 位表示读权限，如果用 <strong>r</strong> 字符表示，则有读权限，如果用 <strong>-</strong> 字符表示，则没有读权限；第 <strong>2、5、8</strong> 位表示写权限，如果用 <strong>w</strong> 字符表示，则有写权限，如果用 <strong>-</strong> 字符表示没有写权限；第 <strong>3、6、9</strong> 位表示可执行权限，如果用 <strong>x</strong> 字符表示，则有执行权限，如果用 <strong>-</strong> 字符表示，则没有执行权限。</p>\n<h1 id=\"linux-文件与目录管理\"><a class=\"markdownIt-Anchor\" href=\"#linux-文件与目录管理\">#</a> Linux 文件与目录管理</h1>\n<p>我们知道 Linux 的目录结构为树状结构，最顶级的目录为根目录 <strong>/</strong>。</p>\n<p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p>\n<ul>\n<li><strong>绝对路径：</strong><br>\n路径的写法，由根目录 <strong>/</strong> 写起，例如： <code>/usr/share/doc</code>  这个目录。</li>\n<li><strong>相对路径：</strong><br>\n路径的写法，不是由 <strong>/</strong> 写起，例如由  <code>/usr/share/doc</code>  要到  <code>/usr/share/man</code>  底下时，可以写成：  <code>cd ../man</code>  这就是相对路径的写法。</li>\n</ul>\n<p><strong>“/” 在系统文件中表示绝对路径；</strong></p>\n<p>“/” 处于 Linux 文件系统<strong>树形结构</strong>的最顶端，我们称它为 Linux 文件系统的 root，<strong>它是 Linux 文件系统的入口</strong>；<br>\n所有的目录、文件、设备都在 “/” 之下，它是 Linux 文件系统最顶层的唯一的目录；<br>\n一般建议在根目录下面只有目录，不要直接存放文件；<br>\n根目录是 linux 系统启动时系统第一个载入的分区，所以启动过程中用到的文件应该都放在这个分区中；<br>\n其中 <code>/etc</code> 、 <code>/bin</code> 、 <code>/dev</code> 、 <code>/lib</code> 、 <code>/sbin</code>  这 5 个子目录都应该要与根目录连在一起，不可独立成为某个分区。</p>\n<p><strong>“./” 代表的意思是：</strong> ./ 代表当前文件目录，某一个文件（或者目录）的查找路径是从当前目录 “.” 下面开始进行查找。</p>\n<p>**“~” 代表的意思是：** 表示代码主目录，也就是当前登录用户的用户目录。</p>\n<p><strong>“…” 代表的意思是：</strong>“…” 表示上级目录</p>\n<h2 id=\"处理目录的常用命令\"><a class=\"markdownIt-Anchor\" href=\"#处理目录的常用命令\">#</a> 处理目录的常用命令</h2>\n<ul>\n<li><code>ls</code> （英文全拼：list files）: 列出目录及文件名</li>\n<li><code>cd</code> （英文全拼：change directory）：切换目录</li>\n<li><code>pwd</code> （英文全拼：print work directory）：显示目前的目录</li>\n<li><code>mkdir</code> （英文全拼：make directory）：创建一个新的目录</li>\n<li><code>rmdir</code> （英文全拼：remove directory）：删除一个空的目录</li>\n<li><code>cp</code> （英文全拼：copy file）: 复制文件或目录</li>\n<li><code>rm</code> （英文全拼：remove）: 删除文件或目录</li>\n<li><code>mv</code> （英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称</li>\n</ul>\n<p>可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p>\n<h3 id=\"ls-列出目录\"><a class=\"markdownIt-Anchor\" href=\"#ls-列出目录\">#</a> ls (列出目录)</h3>\n<p>在 Linux 系统当中， ls 命令可能是最常被运行的。</p>\n<p>选项与参数：</p>\n<ul>\n<li>-a ：全部的文件，连同隐藏文件 (开头为。的文件) 一起列出来 (常用)</li>\n<li>-d ：仅列出目录本身，而不是列出目录内的文件数据 (常用)</li>\n<li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li>\n</ul>\n<h3 id=\"cd-切换目录\"><a class=\"markdownIt-Anchor\" href=\"#cd-切换目录\">#</a> cd (切换目录)</h3>\n<p>cd 是 Change Directory 的缩写，这是用来变换工作目录的命令。</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">[</span>相对路径或绝对路径<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#使用 mkdir 命令创建 runoob 目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir runoob</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#使用绝对路径切换到 runoob 目录</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd /root/runoob/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#使用相对路径切换到 runoob 目录</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd ./runoob/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 表示回到自己的家目录，亦即是 /root 这个目录</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>root@www runoob<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd ~</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 表示去到目前的上一级目录，亦即是 /root 的上一级目录的意思；</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd ..</span></pre></td></tr></table></figure><h3 id=\"pwd-显示目前所在的目录\"><a class=\"markdownIt-Anchor\" href=\"#pwd-显示目前所在的目录\">#</a> pwd (显示目前所在的目录)</h3>\n<p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># pwd [-P]</span></pre></td></tr></table></figure><p>选项与参数：</p>\n<ul>\n<li><strong>-P</strong> ：显示出确实的路径，而非使用链接 (link) 路径。</li>\n</ul>\n<h3 id=\"mkdir-创建新目录\"><a class=\"markdownIt-Anchor\" href=\"#mkdir-创建新目录\">#</a> mkdir (创建新目录)</h3>\n<p>如果想要创建新的目录的话，那么就使用 mkdir (make directory) 吧。</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token punctuation\">[</span>-mp<span class=\"token punctuation\">]</span> 目录名称</pre></td></tr></table></figure><p>选项与参数：</p>\n<ul>\n<li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li>\n<li>-p ：帮助你直接将所需要的目录 (包含上一级目录) 递归创建起来！</li>\n</ul>\n<p>实例：请到 /tmp 底下尝试创建数个新目录看看：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd /tmp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@www tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir test    &lt;== 创建一名为 test 的新目录</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@www tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir test1/test2/test3/test4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mkdir: cannot create directory `test1/test2/test3/test4': </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>No such <span class=\"token function\">file</span> or directory       <span class=\"token operator\">&lt;=</span><span class=\"token operator\">=</span> 没办法直接创建此目录啊！</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@www tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir -p test1/test2/test3/test4</span></pre></td></tr></table></figure><h3 id=\"rmdir-删除空的目录\"><a class=\"markdownIt-Anchor\" href=\"#rmdir-删除空的目录\">#</a> rmdir (删除空的目录)</h3>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rmdir</span> <span class=\"token punctuation\">[</span>-p<span class=\"token punctuation\">]</span> 目录名称</pre></td></tr></table></figure><p>选项与参数：</p>\n<ul>\n<li>**-p ：** 从该目录起，一次删除多级空目录</li>\n</ul>\n<p>删除 runoob 目录</p>\n<pre><code>[root@www tmp]# rmdir runoob/\n</code></pre>\n<p>将 mkdir 实例中创建的目录 (/tmp 底下) 删除掉！</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls -l   &lt;== 看看有多少目录存在？</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>drwxr-xr-x  <span class=\"token number\">3</span> root  root <span class=\"token number\">4096</span> Jul <span class=\"token number\">18</span> <span class=\"token number\">12</span>:50 <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-xr-x  <span class=\"token number\">3</span> root  root <span class=\"token number\">4096</span> Jul <span class=\"token number\">18</span> <span class=\"token number\">12</span>:53 test1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwx--x--x  <span class=\"token number\">2</span> root  root <span class=\"token number\">4096</span> Jul <span class=\"token number\">18</span> <span class=\"token number\">12</span>:54 test2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@www tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># rmdir test   &lt;== 可直接删除掉，没问题</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@www tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># rmdir test1  &lt;== 因为尚有内容，所以无法删除！</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>rmdir: `test1': Directory not empty</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>root@www tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># rmdir -p test1/test2/test3/test4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>root@www tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls -l        &lt;== 您看看，底下的输出中 test 与 test1 不见了！</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>drwx--x--x  <span class=\"token number\">2</span> root  root <span class=\"token number\">4096</span> Jul <span class=\"token number\">18</span> <span class=\"token number\">12</span>:54 test2</pre></td></tr></table></figure><p>利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 一次删除。</p>\n<p>不过要注意的是，这个 <strong>rmdir 仅能删除空的目录</strong>，你可以使用 <strong>rm 命令来删除非空目录</strong>。</p>\n<h3 id=\"cp-复制文件或目录\"><a class=\"markdownIt-Anchor\" href=\"#cp-复制文件或目录\">#</a> cp (复制文件或目录)</h3>\n<p>cp 即拷贝文件和目录。</p>\n<p>语法:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp [-adfilprsu] 来源档 (source) 目标档 (destination)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp [options] source1 source2 source3 .... directory</span></pre></td></tr></table></figure><p>选项与参数：</p>\n<ul>\n<li>**-a：** 相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li>\n<li>**-d：** 若来源档为链接档的属性 (link file)，则复制链接档属性而非文件本身；</li>\n<li>**-f：** 为强制 (force) 的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li>\n<li>**-i：** 若目标档 (destination) 已经存在时，在覆盖时会先询问动作的进行 (常用)</li>\n<li>**-l：** 进行硬式链接 (hard link) 的链接档创建，而非复制文件本身；</li>\n<li>**-p：** 连同文件的属性一起复制过去，而非使用默认属性 (备份常用)；</li>\n<li>**-r：** 递归持续复制，用於目录的复制行为；(常用)</li>\n<li>**-s：** 复制成为符号链接档 (symbolic link)，亦即『捷径』文件；</li>\n<li>**-u：** 若 destination 比 source 旧才升级 destination ！</li>\n</ul>\n<p>用 root 身份，将 root 目录下的 .bashrc 复制到 /tmp 下，并命名为 bashrc</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp ~/.bashrc /tmp/bashrc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp -i ~/.bashrc /tmp/bashrc</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cp: overwrite `/tmp/bashrc'? n  <span class=\"token operator\">&lt;=</span><span class=\"token operator\">=</span>n不覆盖，y为覆盖</pre></td></tr></table></figure><h3 id=\"rm-移除文件或目录\"><a class=\"markdownIt-Anchor\" href=\"#rm-移除文件或目录\">#</a> rm (移除文件或目录)</h3>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token punctuation\">[</span>-fir<span class=\"token punctuation\">]</span> 文件或目录</pre></td></tr></table></figure><p>选项与参数：</p>\n<ul>\n<li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li>\n<li>-i ：互动模式，在删除前会询问使用者是否动作</li>\n<li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li>\n</ul>\n<p>将刚刚在 cp 的实例中创建的 bashrc 删除掉！</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># rm -i bashrc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rm: remove regular <span class=\"token function\">file</span> `bashrc'? y</pre></td></tr></table></figure><p>如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</p>\n<h3 id=\"mv-移动文件与目录或修改名称\"><a class=\"markdownIt-Anchor\" href=\"#mv-移动文件与目录或修改名称\">#</a> mv (移动文件与目录，或修改名称)</h3>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv [-fiu] source destination</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv [options] source1 source2 source3 .... directory</span></pre></td></tr></table></figure><p>选项与参数：</p>\n<ul>\n<li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li>\n<li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li>\n<li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li>\n</ul>\n<p>复制一文件，创建一目录，将文件移动到目录中</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd /tmp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@www tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp ~/.bashrc bashrc</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@www tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir mvtest</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@www tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv bashrc mvtest</span></pre></td></tr></table></figure><p>将某个文件移动到某个目录去，就是这样做！</p>\n<p>将刚刚的目录名称更名为 mvtest2</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv mvtest mvtest2</span></pre></td></tr></table></figure><h2 id=\"linux-文件内容查看\"><a class=\"markdownIt-Anchor\" href=\"#linux-文件内容查看\">#</a> Linux 文件内容查看</h2>\n<p>Linux 系统中使用以下命令来查看文件的内容：</p>\n<ul>\n<li><code>cat</code>  由第一行开始显示文件内容</li>\n<li><code>tac</code>  从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>\n<li><code>nl</code>   显示的时候，顺道输出行号！</li>\n<li><code>more</code>  一页一页的显示文件内容</li>\n<li><code>less</code>  与  <code>more</code>  类似，但是比 more 更好的是，他可以往前翻页！</li>\n<li><code>head</code>  只看头几行</li>\n<li><code>tail</code>  只看尾巴几行</li>\n</ul>\n<p>你可以使用 *man [命令]* 来查看各个命令的使用文档，如 ：man cp。</p>\n<h3 id=\"cat\"><a class=\"markdownIt-Anchor\" href=\"#cat\">#</a> cat</h3>\n<p>由第一行开始显示文件内容</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token punctuation\">[</span>-AbEnTv<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>选项与参数：</p>\n<ul>\n<li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li>\n<li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li>\n<li>-E ：将结尾的断行字节 $ 显示出来；</li>\n<li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li>\n<li>-T ：将 [tab] 按键以 ^I 显示出来；</li>\n<li>-v ：列出一些看不出来的特殊字符</li>\n</ul>\n<p>检看 /etc/issue 这个文件的内容：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat /etc/issue</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CentOS release <span class=\"token number\">6.4</span> <span class=\"token punctuation\">(</span>Final<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Kernel <span class=\"token punctuation\">\\</span>r on an <span class=\"token punctuation\">\\</span>m</pre></td></tr></table></figure><h3 id=\"tac\"><a class=\"markdownIt-Anchor\" href=\"#tac\">#</a> tac</h3>\n<p>tac 与 cat 命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># tac /etc/issue</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Kernel <span class=\"token punctuation\">\\</span>r on an <span class=\"token punctuation\">\\</span>m</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CentOS release <span class=\"token number\">6.4</span> <span class=\"token punctuation\">(</span>Final<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"nl\"><a class=\"markdownIt-Anchor\" href=\"#nl\">#</a> nl</h3>\n<p>显示行号</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nl</span> <span class=\"token punctuation\">[</span>-bnw<span class=\"token punctuation\">]</span> 文件</pre></td></tr></table></figure><p>选项与参数：</p>\n<ul>\n<li>-b ：指定行号指定的方式，主要有两种：<br>\n-b a ：表示不论是否为空行，也同样列出行号 (类似 cat -n)；<br>\n-b t ：如果有空行，空的那一行不要列出行号 (默认值)；</li>\n<li>-n ：列出行号表示的方法，主要有三种：<br>\n-n ln ：行号在荧幕的最左方显示；<br>\n-n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>\n-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li>\n<li>-w ：行号栏位的占用的位数。</li>\n</ul>\n<p>实例一：用 nl 列出 /etc/issue 的内容</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># nl /etc/issue</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token number\">1</span>  CentOS release <span class=\"token number\">6.4</span> <span class=\"token punctuation\">(</span>Final<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token number\">2</span>  Kernel <span class=\"token punctuation\">\\</span>r on an <span class=\"token punctuation\">\\</span>m</pre></td></tr></table></figure><h3 id=\"more\"><a class=\"markdownIt-Anchor\" href=\"#more\">#</a> more</h3>\n<p>一页一页翻动</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># more /etc/man_db.config </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Generated automatically from man.conf.in by the</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># configure script.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># man.conf from man-1.6d</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">(</span>中间省略<span class=\"token punctuation\">)</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>--More--<span class=\"token punctuation\">(</span><span class=\"token number\">28</span>%<span class=\"token punctuation\">)</span>  <span class=\"token operator\">&lt;=</span><span class=\"token operator\">=</span> 重点在这一行喔！你的光标也会在这里等待你的命令</pre></td></tr></table></figure><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p>\n<ul>\n<li>空白键 (space)：代表向下翻一页；</li>\n<li>Enter     ：代表向下翻『一行』；</li>\n<li>/ 字串     ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li>\n<li>:f      ：立刻显示出档名以及目前显示的行数；</li>\n<li>q      ：代表立刻离开 more ，不再显示该文件内容。</li>\n<li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li>\n</ul>\n<h3 id=\"less\"><a class=\"markdownIt-Anchor\" href=\"#less\">#</a> less</h3>\n<p>一页一页翻动，以下实例输出 /etc/man.config 文件的内容：</p>\n<pre><code>[root@www ~]# less /etc/man.config\n#\n# Generated automatically from man.conf.in by the\n# configure script.\n#\n# man.conf from man-1.6d\n....(中间省略)....\n:   &lt;== 这里可以等待你输入命令！\n</code></pre>\n<p>less 运行时可以输入的命令有：</p>\n<ul>\n<li>空白键  ：向下翻动一页；</li>\n<li>[pagedown]：向下翻动一页；</li>\n<li>[pageup] ：向上翻动一页；</li>\n<li>/ 字串   ：向下搜寻『字串』的功能；</li>\n<li>? 字串   ：向上搜寻『字串』的功能；</li>\n<li>n     ：重复前一个搜寻 (与 / 或？有关！)</li>\n<li>N     ：反向的重复前一个搜寻 (与 / 或？有关！)</li>\n<li>q     ：离开 less 这个程序；</li>\n</ul>\n<h3 id=\"head\"><a class=\"markdownIt-Anchor\" href=\"#head\">#</a> head</h3>\n<p>取出文件前面几行</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">head</span> <span class=\"token punctuation\">[</span>-n number<span class=\"token punctuation\">]</span> 文件</pre></td></tr></table></figure><p>选项与参数：</p>\n<ul>\n<li>-n ：后面接数字，代表显示几行的意思</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># head /etc/man.config</span></pre></td></tr></table></figure><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># head -n 20 /etc/man.config</span></pre></td></tr></table></figure><h3 id=\"tail\"><a class=\"markdownIt-Anchor\" href=\"#tail\">#</a> tail</h3>\n<p>取出文件后面几行</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tail</span> <span class=\"token punctuation\">[</span>-n number<span class=\"token punctuation\">]</span> 文件</pre></td></tr></table></figure><p>选项与参数：</p>\n<ul>\n<li>-n ：后面接数字，代表显示几行的意思</li>\n<li>-f ：表示持续侦测后面所接的档名，要等到按下 [ctrl]-c 才会结束 tail 的侦测</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># tail /etc/man.config</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 默认的情况中，显示最后的十行！若要显示最后的 20 行，就得要这样：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># tail -n 20 /etc/man.config</span></pre></td></tr></table></figure><h1 id=\"linux-链接概念\"><a class=\"markdownIt-Anchor\" href=\"#linux-链接概念\">#</a> Linux 链接概念</h1>\n<p>Linux 链接分两种，一种被称为<strong>硬链接（Hard Link）</strong>，另一种被称为<strong>符号链接（Symbolic Link）</strong>。默认情况下，<strong>ln</strong> 命令产生硬链接。</p>\n<h2 id=\"硬连接\"><a class=\"markdownIt-Anchor\" href=\"#硬连接\">#</a> 硬连接</h2>\n<p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号 (Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p>\n<p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止 “误删” 的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p>\n<h2 id=\"软连接\"><a class=\"markdownIt-Anchor\" href=\"#软连接\">#</a> 软连接</h2>\n<p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是 “主从” 关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p>\n<p><strong>通过实验加深理解</strong></p>\n<pre><code>[oracle@Linux]$ touch f1          #创建一个测试文件f1\n[oracle@Linux]$ ln f1 f2          #创建f1的一个硬连接文件f2\n[oracle@Linux]$ ln -s f1 f3       #创建f1的一个符号连接文件f3\n[oracle@Linux]$ ls -li            # -i参数显示文件的inode节点信息\ntotal 0\n9797648 -rw-r--r--  2 oracle oinstall 0 Apr 21 08:11 f1\n9797648 -rw-r--r--  2 oracle oinstall 0 Apr 21 08:11 f2\n9797649 lrwxrwxrwx  1 oracle oinstall 2 Apr 21 08:11 f3 -&gt; f1\n</code></pre>\n<p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 9797648，然而符号连接文件的 inode 节点不同。</p>\n<pre><code>[oracle@Linux]$ echo &quot;I am f1 file&quot; &gt;&gt;f1\n[oracle@Linux]$ cat f1\nI am f1 file\n[oracle@Linux]$ cat f2\nI am f1 file\n[oracle@Linux]$ cat f3\nI am f1 file\n[oracle@Linux]$ rm -f f1\n[oracle@Linux]$ cat f2\nI am f1 file\n[oracle@Linux]$ cat f3\ncat: f3: No such file or directory\n</code></pre>\n<p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f3 文件无效</p>\n<p><strong>总结</strong></p>\n<p>依此您可以做一些相关的测试，可以得到以下全部结论：</p>\n<ul>\n<li>1). 删除符号连接 f3, 对 f1,f2 无影响；</li>\n<li>2). 删除硬连接 f2，对 f1,f3 也无影响；</li>\n<li>3). 删除原文件 f1，对硬连接 f2 没有影响，导致符号连接 f3 失效；</li>\n<li>4). 同时删除原文件 f1, 硬连接 f2，整个文件会真正的被删除。</li>\n</ul>\n<h1 id=\"linux-用户和用户组管理\"><a class=\"markdownIt-Anchor\" href=\"#linux-用户和用户组管理\">#</a> Linux 用户和用户组管理</h1>\n<p>Linux 系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>\n<p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>\n<p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p>\n<p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>\n<p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p>\n<ul>\n<li>用户账号的添加、删除与修改。</li>\n<li>用户口令的管理。</li>\n<li>用户组的管理。</li>\n</ul>\n<h1 id=\"linux-磁盘管理\"><a class=\"markdownIt-Anchor\" href=\"#linux-磁盘管理\">#</a> Linux 磁盘管理</h1>\n<p>Linux 磁盘管理好坏直接关系到整个系统的性能问题。</p>\n<p>Linux 磁盘管理常用三个命令为  <code>df</code> 、 <code>du</code>  和  <code>fdisk</code> 。</p>\n<ul>\n<li><code>df</code> （英文全称：disk free）：列出文件系统的整体磁盘使用量</li>\n<li><code>du</code> （英文全称：disk used）：检查磁盘空间使用量</li>\n<li><code>fdisk</code> ：用于磁盘分区</li>\n</ul>\n<h2 id=\"df\"><a class=\"markdownIt-Anchor\" href=\"#df\">#</a> df</h2>\n<p>df 命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">df</span> <span class=\"token punctuation\">[</span>-ahikHTm<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>目录或文件名<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>选项与参数：</p>\n<ul>\n<li><code>-a</code>  ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li>\n<li><code>-k</code>  ：以 KBytes 的容量显示各文件系统；</li>\n<li><code>-m</code>  ：以 MBytes 的容量显示各文件系统；</li>\n<li><code>-h</code>  ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>\n<li><code>-H</code>  ：以 M=1000K 取代 M=1024K 的进位方式；</li>\n<li><code>-T</code>  ：显示文件系统类型，连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>\n<li><code>-i</code>  ：不用硬盘容量，而以 inode 的数量来显示</li>\n</ul>\n<h2 id=\"du\"><a class=\"markdownIt-Anchor\" href=\"#du\">#</a> du</h2>\n<p>Linux du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看，还是和 df 命令有一些区别的，这里介绍 Linux du 命令。</p>\n<p>语法：</p>\n<pre><code>du [-ahskm] 文件或目录名称\n</code></pre>\n<p>选项与参数：</p>\n<ul>\n<li><code>-a</code>  ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li>\n<li><code>-h</code>  ：以人们较易读的容量格式 (G/M) 显示；</li>\n<li><code>-s</code>  ：列出总量而已，而不列出每个各别的目录占用容量；</li>\n<li><code>-S</code>  ：不包括子目录下的总计，与 -s 有点差别。</li>\n<li><code>-k</code>  ：以 KBytes 列出容量显示；</li>\n<li><code>-m</code>  ：以 MBytes 列出容量显示；</li>\n</ul>\n<h2 id=\"fdisk\"><a class=\"markdownIt-Anchor\" href=\"#fdisk\">#</a> fdisk</h2>\n<p>fdisk 是 Linux 的磁盘分区表操作工具。</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fdisk</span> <span class=\"token punctuation\">[</span>-l<span class=\"token punctuation\">]</span> 装置名称</pre></td></tr></table></figure><p>选项与参数：</p>\n<ul>\n<li><code>-l</code>  ：输出后面接的装置所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来。</li>\n</ul>\n<h1 id=\"linux-vivim\"><a class=\"markdownIt-Anchor\" href=\"#linux-vivim\">#</a> Linux vi/vim</h1>\n<p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p>\n<p>但是目前我们使用比较多的是 vim 编辑器。</p>\n<p>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p>\n<h2 id=\"什么是-vim\"><a class=\"markdownIt-Anchor\" href=\"#什么是-vim\">#</a> 什么是 vim？</h2>\n<p>Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>\n<p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p>\n<p>连 vim 的官方网站 (<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudmltLm9yZy8=\">https://www.vim.org/</span>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p>\n<p><img data-src=\"vi-vim-cheat-sheet-sch.gif\" alt=\"img\"></p>\n<h2 id=\"vivim-的使用\"><a class=\"markdownIt-Anchor\" href=\"#vivim-的使用\">#</a> vi/vim 的使用</h2>\n<p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）<strong>和</strong>底线命令模式（Last line mode）</strong>。 这三种模式的作用分别是：</p>\n<h3 id=\"命令模式\"><a class=\"markdownIt-Anchor\" href=\"#命令模式\">#</a> 命令模式：</h3>\n<p>用户刚刚启动 vi/vim，便进入了命令模式。</p>\n<p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符。比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。</p>\n<p>以下是常用的几个命令：</p>\n<ul>\n<li><code>i</code>  切换到输入模式，以输入字符。</li>\n<li><code>x</code>  删除当前光标所在处的字符。</li>\n<li><code>:</code>  切换到底线命令模式，以在最底一行输入命令。</li>\n</ul>\n<p>若想要编辑文本：启动 Vim，进入了命令模式，按下 i，切换到输入模式。</p>\n<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>\n<h3 id=\"输入模式\"><a class=\"markdownIt-Anchor\" href=\"#输入模式\">#</a> 输入模式</h3>\n<p>在命令模式下按下 i 就进入了输入模式。</p>\n<p>在输入模式中，可以使用以下按键：</p>\n<ul>\n<li><strong>字符按键以及 Shift 组合</strong>，输入字符</li>\n<li><strong>ENTER</strong>，回车键，换行</li>\n<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>\n<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>\n<li><strong>方向键</strong>，在文本中移动光标</li>\n<li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首 / 行尾</li>\n<li><strong>Page Up</strong>/<strong>Page Down</strong>，上 / 下翻页</li>\n<li><strong>Insert</strong>，切换光标为输入 / 替换模式，光标将变成竖线 / 下划线</li>\n<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>\n</ul>\n<h3 id=\"底线命令模式\"><a class=\"markdownIt-Anchor\" href=\"#底线命令模式\">#</a> 底线命令模式</h3>\n<p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p>\n<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>\n<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>\n<ul>\n<li><code>q</code>  退出程序</li>\n<li><code>w</code>  保存文件</li>\n</ul>\n<p>按 ESC 键可随时退出底线命令模式。</p>\n<p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p>\n<p><img data-src=\"vim-vi-workmodel.png\" alt=\"img\"></p>\n<h2 id=\"vivim-使用实例\"><a class=\"markdownIt-Anchor\" href=\"#vivim-使用实例\">#</a> vi/vim 使用实例</h2>\n<p><strong>使用 vi/vim 进入一般模式</strong></p>\n<p>如果你想要使用 vi 来建立一个名为 runoob.txt 的文件时，你可以这样做：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">vim</span> runoob.txt</pre></td></tr></table></figure><p>直接输入 <strong>vi 文件名</strong> 就能够进入 vi 的一般模式了。请注意，记得 <strong>vi 后面一定要加文件名，不管该文件存在与否！</strong></p>\n<p><img data-src=\"078207F0-B204-4464-AAEF-982F45EDDAE9.jpg\" alt=\"img\"></p>\n<p><strong>按下 i 进入输入模式 (也称为编辑模式)，开始编辑文字</strong></p>\n<p>在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！</p>\n<p>在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p>\n<p>这个时候，键盘上除了 <strong>Esc</strong> 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。</p>\n<p><img data-src=\"1C928383-471E-4AF1-A61E-9E2CCBD5A913.jpg\" alt=\"img\"></p>\n<p><strong>按下 ESC 按钮回到一般模式</strong></p>\n<p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 <strong>Esc</strong> 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！</p>\n<p><strong>在一般模式中按下 :wq 储存后离开 vi</strong></p>\n<p>OK，我们要存档了，存盘并离开的指令很简单，输入  <code>:wq</code>  即可保存离开！</p>\n<p><img data-src=\"B2FB5146-327C-4019-AC96-DD7A8EE7460C.jpg\" alt=\"img\"></p>\n<p>OK! 这样我们就成功创建了一个 runoob.txt 的文件。</p>\n<h1 id=\"linux-yum-命令\"><a class=\"markdownIt-Anchor\" href=\"#linux-yum-命令\">#</a> Linux yum 命令</h1>\n<p><code>yum</code> （ Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及 SUSE 中的 Shell 前端软件包管理器。</p>\n<p>基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</p>\n<p><code>yum</code>  提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p>\n<h1 id=\"linux-apt-命令\"><a class=\"markdownIt-Anchor\" href=\"#linux-apt-命令\">#</a> Linux apt 命令</h1>\n<p><code>apt</code> （Advanced Packaging Tool）是一个在 Debian 和 Ubuntu 中的 Shell 前端软件包管理器。</p>\n<p><code>apt</code>  命令提供了查找、安装、升级、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p>\n<p><code>apt</code>  命令执行需要超级管理员权限 (root)。</p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/03/06/CMU15-445/",
            "url": "https://adventure-yx.github.io/2023/03/06/CMU15-445/",
            "title": "CMU15-445",
            "date_published": "2023-03-05T16:03:56.000Z",
            "content_html": "<p>Schedule | CMU 15-445/645 :: Intro to Database Systems (Fall 2022)](<span class=\"exturl\" data-url=\"aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMjIvc2NoZWR1bGUuaHRtbA==\">https://15445.courses.cs.cmu.edu/fall2022/schedule.html</span>)</p>\n<h1 id=\"lesson01-关系模型关系代数relational-model-relational-algebra\"><a class=\"markdownIt-Anchor\" href=\"#lesson01-关系模型关系代数relational-model-relational-algebra\">#</a> Lesson#01. 关系模型 &amp; 关系代数（Relational Model &amp; Relational Algebra）</h1>\n<h2 id=\"1-database\"><a class=\"markdownIt-Anchor\" href=\"#1-database\">#</a> 1. Database</h2>\n<p>数据库 (Database,DB) 是一个有组织的、互相关联的、对现实世界的某些方面进行建模的集合。</p>\n<p>严格来讲，数据库是长期存储在计算机内、有组织的、可共享的大量数据的集合。数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度 ()、较高的数据独立性 () 和易扩展性 ()，并可为各种用户共享。</p>\n<p>本笔记中，用一个存储着艺术家和对应的专辑信息的数据库作为例子，亦即数字音乐商店 (A database that models a digital music store)。</p>\n<h2 id=\"2-flat-file-strawman\"><a class=\"markdownIt-Anchor\" href=\"#2-flat-file-strawman\">#</a> 2. Flat File Strawman</h2>\n<p>数据库常常以 CSV (comma-separated value) 文件的形式存储，由 DBMS 进行管理。每次应用程序要读取或者更新记录时，都必须解析文件 (parse files)。</p>\n<p>以数字音乐商店的例子，会有两个文件，一是艺术家，二是专辑。</p>\n<p>每个实体都有自己的属性集，所以在每个文件中，不同的记录都用新的行来划分，而一条记录中的每个相应属性都用逗号隔开。</p>\n<p>例子：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Name</th>\n<th style=\"text-align:left\">Year</th>\n<th style=\"text-align:left\">Country</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Wu-Tang Clan</td>\n<td style=\"text-align:left\">1992</td>\n<td style=\"text-align:left\">USA</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Notorious BIG</td>\n<td style=\"text-align:left\">1992</td>\n<td style=\"text-align:left\">USA</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GZE</td>\n<td style=\"text-align:left\">1990</td>\n<td style=\"text-align:left\">USA</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Issues with Flat File</strong></p>\n<ul>\n<li>\n<p>Data Integrity</p>\n<p>数据完整性</p>\n</li>\n<li>\n<p>Implementation<br>\n 执行</p>\n</li>\n<li>\n<p>Durability<br>\n 耐受性</p>\n</li>\n</ul>\n<h2 id=\"3-database-management-systemdbms\"><a class=\"markdownIt-Anchor\" href=\"#3-database-management-systemdbms\">#</a> 3. Database Management System(DBMS)</h2>\n<p>一个 DBMS 是一个能让应用在数据库中保存与分析数据的软件</p>\n<p>通常，DBMS 设计的目的是允许定义、创建、查询、更新和管理符合某种数据模型的数据库。</p>\n<ul>\n<li>\n<p><strong>Data model：</strong><br>\n数据模型是描述数据库中数据的概念的集合。A data model is a collection of concepts for describing the data in database.</p>\n<p>Example: Relational (most common), NoSQL (key/value, graph, Document, Column-family), array/matrix/vectors</p>\n<ul>\n<li><strong>Relational</strong></li>\n<li>Key/Value (Redis)</li>\n<li>Graph</li>\n<li>Document</li>\n<li>Column-family 列族数据库</li>\n<li>Array/Matrix (machine learning)</li>\n</ul>\n</li>\n<li>\n<p><strong>Schema：</strong><br>\n模式是对基于数据模型的特定数据集合的描述。</p>\n</li>\n</ul>\n<p>Early DBMSs</p>\n<p>早期，数据库应用很难建立和维护，因为逻辑层和物理层之间存在着高度耦合 (a tight coupling between logical and physical layers)。</p>\n<ul>\n<li>逻辑层：<br>\n描述了数据库有哪些实体和属性。</li>\n<li>物理层：<br>\n是这些实体和属性的存储方式。</li>\n</ul>\n<p>所以早期的数据库，一旦改变了物理层，逻辑层也得跟着变。</p>\n<h2 id=\"4-relational-model\"><a class=\"markdownIt-Anchor\" href=\"#4-relational-model\">#</a> 4. Relational Model</h2>\n<p>人们每次改变物理层都要重新写数据管理系统，故 Ted Codd 注意到后提出了关系模型。</p>\n<ul>\n<li>\n<p><strong>Relational Model：</strong></p>\n<p>关系模型定义了一个基于关系的数据库抽象概念，有 3 个关键点：</p>\n<ul>\n<li>Store database in simple data structures (relations).</li>\n<li>Access data through high-level language, DBMS figures out best execution strategy.</li>\n<li>Physical storage left up to the DBMS implementation.</li>\n</ul>\n<p>简单来说就是：用简单的数据结构保存，用高级语言来访问，并让 DBMS 来执行最优策略以及处理物理层存储。</p>\n</li>\n<li>\n<p><strong>关系模型定义的三个概念：</strong></p>\n<ul>\n<li><strong>Structure：</strong><br>\n关系定义和内容。也就是关系具有的属性以及可以有的值。</li>\n<li><strong>Integrity：</strong><br>\n确保数据库的内容满足约束条件。比如：年份必须是数字。</li>\n<li><strong>Manipulation：</strong><br>\n如何访问和修改数据库的内容。</li>\n</ul>\n</li>\n<li>\n<p><strong>关系 (relation)：</strong><br>\n关系是一个<strong>无序的集合 (an unordered set)</strong>，包含代表的实体的属性关系。因为是无序的，所以 DBMS 可以用它想要的任何方式存储它们，并允许优化。</p>\n</li>\n<li>\n<p><strong>元组 (tuple)：</strong><br>\n元组指的是<strong>关系中的一组属性值 (a set of attribute values in the relation, also known as its domain)</strong>。</p>\n<p>Originally, values had to be atomic or scalar, but now values can also be lists or nested data structures. Every attribute can be a special value, NULL, which means for a given tuple the attribute is undefined.</p>\n<p>起初，值必须是<strong>原子的 (atomic)<strong> 或者</strong>标量 (scalar)</strong>，但现在值也可以是一个特殊的值 <code>NULL</code> ，表示为定义。</p>\n</li>\n<li>\n<p><strong>有 n 个属性的关系，叫做：n-ary relation</strong>。</p>\n</li>\n<li>\n<p>一张二维表，每行对应一个元组，每列对应一个域。</p>\n</li>\n<li>\n<p><strong>Keys：</strong><br>\n一个关系的<strong> primary key</strong> 唯一的定义了单个元组。很多 DBMS 都支持 auto-generated keys，所以程序就不需要手动增加了，但 primary key 还是在某些 DBMS 是需要的。</p>\n<ul>\n<li>Primary key / 主键：唯一的定义了单个元组。</li>\n<li>Foreign key / 外键：指定一个关系中的属性必须映射到另一个关系中的元组。</li>\n</ul>\n<p><img data-src=\"C:%5CUsers%5Csatori%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230312011848991.png\" alt=\"image-20230312011848991\"></p>\n</li>\n</ul>\n<h2 id=\"5-data-manipulation-languages-dml\"><a class=\"markdownIt-Anchor\" href=\"#5-data-manipulation-languages-dml\">#</a> 5. Data Manipulation Languages (DML)</h2>\n<p>DML（data manipulation language）是数据操纵语言：它们是 SELECT、UPDATE、INSERT、DELETE，就象它的名字一样，这 4 条命令是用来对数据库里的数据进行操作的语言。</p>\n<p>DDL（data definition language）是数据定义语言：DDL 比 DML 要多，主要的命令有 CREATE、ALTER、DROP 等，DDL 主要是用在定义或改变表（TABLE）的结构，数据类型，表之间的链接和约束等初始化工作上，他们大多在建立表时使用。</p>\n<p>DCL（Data Control Language）是数据库控制语言：是用来设置或更改数据库用户或角色权限的语句，包括（grant,deny,revoke 等）语句。</p>\n<p>有两类语言去保存和检索在数据库中的信息。</p>\n<ul>\n<li>Procedural：<br>\nThe query specifies the (high-level) strategy the DBMS should use to find the desired result based on sets / bags. (<strong>relational algebra</strong>)</li>\n<li>Non-Procedural (Declarative 声明式的)：<br>\nThe query specifies only what data is wanted and not how to find it. (<strong>relational calculus</strong>)</li>\n</ul>\n<p>一般现在都是用第二种的，我不管 DBMS 用什么策略，我只需要你给我我想要的数据。</p>\n<h2 id=\"6-relational-algebra\"><a class=\"markdownIt-Anchor\" href=\"#6-relational-algebra\">#</a> 6. Relational Algebra</h2>\n<p>关系代数 (Relational Algebra) 就是一组基本操作，用于检索和操作关系中的图元。</p>\n<p>每个操作符都需要一个或多个关系作为输入，并输出一个新的关系。为了编写查询，我们可以把这些运算符 &quot;链&quot; 在一起，以创建更复杂的操作。</p>\n<p><img data-src=\"C:%5CUsers%5Csatori%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230312012338736.png\" alt=\"image-20230312012338736\"></p>\n<p><strong>Select</strong> takes in a relation and outputs a subset of the tuples from that relation that satisfy a selection predicate. The predicate acts like a filter, and we can combine multiple predicates using conjunctions and disjunctions.</p>\n<p><img data-src=\"C:%5CUsers%5Csatori%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230312012550025.png\" alt=\"image-20230312012550025\"></p>\n<p><strong>Projection</strong> takes in a relation and outputs a relation with tuples that contain only specified attributes. You can rearrange the ordering of the attributes in the input relation as well as manipulate the values.</p>\n<p><img data-src=\"C:%5CUsers%5Csatori%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230312012612509.png\" alt=\"image-20230312012612509\"></p>\n<p><strong>Union</strong> takes in two relations and outputs a relation that contains all tuples that appear in at least one of the input relations. Note: The two input relations have to have the exact same attributes.</p>\n<p><img data-src=\"C:%5CUsers%5Csatori%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230312012638191.png\" alt=\"image-20230312012638191\"></p>\n<p><strong>Intersection</strong> takes in two relations and outputs a relation that contains all tuples that appear in both of the input relations. Note: The two input relations have to have the exact same attributes.</p>\n<p><img data-src=\"C:%5CUsers%5Csatori%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230312012655770.png\" alt=\"image-20230312012655770\"></p>\n<p><strong>Difference</strong> takes in two relations and outputs a relation that contains all tuples that appear in the first relation but not the second relation. Note: The two input relations have to have the exact same attributes.</p>\n<p><img data-src=\"C:%5CUsers%5Csatori%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230312012712525.png\" alt=\"image-20230312012712525\"></p>\n<p><strong>Product</strong> (笛卡尔积) takes in two relations and outputs a relation that contains all possible combinations for tuples from the input relations.</p>\n<p><img data-src=\"C:%5CUsers%5Csatori%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230312012728132.png\" alt=\"image-20230312012728132\"></p>\n<p><strong>Join</strong> takes in two relations and outputs a relation that contains all the tuples that are a combination of two tuples where for each attribute that the two relations share, the values for that attribute of both tuples is the same.</p>\n<p><img data-src=\"C:%5CUsers%5Csatori%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230312012750042.png\" alt=\"image-20230312012750042\"></p>\n<h1 id=\"lesson02-高级sqladvanced-sql\"><a class=\"markdownIt-Anchor\" href=\"#lesson02-高级sqladvanced-sql\">#</a> Lesson#02. 高级 SQL（Advanced SQL）</h1>\n<p><strong>SQL</strong> (Structured Query Language: 结构化查询语言) 是用于管理关系数据库管理系统（RDBMS）。 SQL 的范围包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。</p>\n<p>DML（data manipulation language）是数据操纵语言：它们是 SELECT、UPDATE、INSERT、DELETE，就象它的名字一样，这 4 条命令是用来对数据库里的数据进行操作的语言。</p>\n<p>DDL（data definition language）是数据定义语言：DDL 比 DML 要多，主要的命令有 CREATE、ALTER、DROP 等，DDL 主要是用在定义或改变表（TABLE）的结构，数据类型，表之间的链接和约束等初始化工作上，他们大多在建立表时使用。</p>\n<p>DCL（Data Control Language）是数据库控制语言：是用来设置或更改数据库用户或角色权限的语句，包括（grant,deny,revoke 等）语句。</p>\n<p>用户只需要使用声明性语言（即 SQL）来指定他们想要的结果。DBMS 负责确定产生该答案的最有效计划。</p>\n<p>关系代数基于 sets (unordered, no duplicates)。<br>\nSQL 基于 bags (unordered, allows duplicates)</p>\n<h2 id=\"1sql基础语法\"><a class=\"markdownIt-Anchor\" href=\"#1sql基础语法\">#</a> 1.SQL 基础语法</h2>\n<ul>\n<li>\n<p><strong>SELECT 语句</strong></p>\n<p>SELECT 语句用于从数据库中选取数据。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> column1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> table_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> table_name<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>SELECT DISTINCT 语句用于返回唯一不同的值。在表中，一个列可能会包含多个重复值，有时您也许希望仅仅列出不同（distinct）的值。</p>\n<p><strong>DISTINCT 关键词</strong>用于返回唯一不同的值。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> column1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> table_name<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>WHERE 子句</strong></p>\n<p>WHERE 子句用于提取那些满足指定条件的记录。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> column1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> table_name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">WHERE</span> condition<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Websites <span class=\"token keyword\">WHERE</span> country<span class=\"token operator\">=</span><span class=\"token string\">'CN'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>WHERE 子句中的运算符</p>\n<p>下面的运算符可以在 WHERE 子句中使用：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">=</td>\n<td style=\"text-align:left\">等于</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;&gt;</td>\n<td style=\"text-align:left\">不等于。注释：在 SQL 的一些版本中，该操作符可被写成！=</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;</td>\n<td style=\"text-align:left\">大于</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;</td>\n<td style=\"text-align:left\">小于</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;=</td>\n<td style=\"text-align:left\">大于等于</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;=</td>\n<td style=\"text-align:left\">小于等于</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BETWEEN</td>\n<td style=\"text-align:left\">在某个范围内</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LIKE</td>\n<td style=\"text-align:left\">搜索某种模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IN</td>\n<td style=\"text-align:left\">指定针对某个列的多个可能值</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p><strong>AND &amp; OR 运算符</strong></p>\n<p>AND &amp; OR 运算符用于基于一个以上的条件对记录进行过滤。</p>\n<p>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。</p>\n<p>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Websites</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">WHERE</span> alexa <span class=\"token operator\">></span> <span class=\"token number\">15</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">AND</span> <span class=\"token punctuation\">(</span>country<span class=\"token operator\">=</span><span class=\"token string\">'CN'</span> <span class=\"token operator\">OR</span> country<span class=\"token operator\">=</span><span class=\"token string\">'USA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>ORDER BY 关键字</strong></p>\n<p>ORDER BY 关键字用于对结果集进行排序，对结果集按照一个列或者多个列进行排序。</p>\n<p>默认按照升序对记录进行排序。如果需要按照降序对记录进行排序，您可以使用 DESC 关键字。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> table_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> column1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">ASC</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> column1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>INSERT INTO 语句</strong></p>\n<p>INSERT INTO 语句用于向表中插入新记录。</p>\n<p>第一种形式无需指定要插入数据的列名，只需提供被插入的值即可（<strong>需要列出插入行的每一列数据</strong>）：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> table_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span>value2<span class=\"token punctuation\">,</span>value3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>第二种形式需要指定列名及被插入的值：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> table_name <span class=\"token punctuation\">(</span>column1<span class=\"token punctuation\">,</span>column2<span class=\"token punctuation\">,</span>column3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span>value2<span class=\"token punctuation\">,</span>value3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>UPDATE 语句</strong></p>\n<p>UPDATE 语句用于更新表中已存在的记录。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UPDATE</span> table_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SET</span> column1 <span class=\"token operator\">=</span> value1<span class=\"token punctuation\">,</span> column2 <span class=\"token operator\">=</span> value2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">WHERE</span> condition<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">UPDATE</span> Websites </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">SET</span> alexa<span class=\"token operator\">=</span><span class=\"token string\">'5000'</span><span class=\"token punctuation\">,</span> country<span class=\"token operator\">=</span><span class=\"token string\">'USA'</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">WHERE</span> name<span class=\"token operator\">=</span><span class=\"token string\">'菜鸟教程'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果我们省略了 WHERE 子句，执行以上代码会将 Websites 表中所有数据的 alexa 改为 5000，country 改为 USA。</p>\n</li>\n<li>\n<p><strong>DELETE 语句</strong></p>\n<p>DELETE 语句用于删除表中的行。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> table_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">WHERE</span> condition<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>删除所有数据</p>\n<p>您可以在不删除表的情况下，删除表中所有的行。这意味着表结构、属性、索引将保持不变：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> table_name<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>** 注释：** 在删除记录时要格外小心！因为您不能重来！</p>\n</li>\n</ul>\n<h2 id=\"2-joins\"><a class=\"markdownIt-Anchor\" href=\"#2-joins\">#</a> 2. Joins</h2>\n<p>结合一个或多个表的列，产生一个新的表。用来表达涉及跨越多个表的数据的查询，</p>\n<ul>\n<li>\n<p>本节课举例用的例子：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> student <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    sid <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    login <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNIQUE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    age <span class=\"token keyword\">SMALLINT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    gpa <span class=\"token keyword\">FLOAT</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> course <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cid <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> enrolled <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    sid <span class=\"token keyword\">INT</span> <span class=\"token keyword\">REFERENCES</span> student <span class=\"token punctuation\">(</span>sid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cid <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span> course <span class=\"token punctuation\">(</span>cid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    grade <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>哪个学生在 15-721 拿到了 A?</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> s<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> enrolled <span class=\"token keyword\">AS</span> e<span class=\"token punctuation\">,</span> student <span class=\"token keyword\">AS</span> s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">AND</span> e<span class=\"token punctuation\">.</span>cid <span class=\"token operator\">=</span> <span class=\"token string\">'15-721'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">AND</span> e<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"3-aggregate函数\"><a class=\"markdownIt-Anchor\" href=\"#3-aggregate函数\">#</a> 3. Aggregate 函数</h2>\n<p>聚合函数接受一组列表，然后产生一个单一的标量值作为其输出。基本上只能在 SELECT 输出列表中使用！</p>\n<ul>\n<li>\n<p>AVG(COL): The average of the values in COL</p>\n</li>\n<li>\n<p>MIN(COL): The minimum value in COL</p>\n</li>\n<li>\n<p>MAX(COL): The maximum value in COL</p>\n</li>\n<li>\n<p>SUM(COL)</p>\n</li>\n<li>\n<p>COUNT(COL): The number of tuples in the relation</p>\n</li>\n<li>\n<p>例子 1：</p>\n<p>Get # of students with a ‘@cs’ login.</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> login <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%@cs'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>login<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> login <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%@cs'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> login <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%@cs'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>例子 2：</p>\n<p>Get # of students and their average GPA with a ‘@cs’ login.</p>\n<p>得到 <code>@cs</code>  登录的学生的人数和平均 GPA</p>\n<pre><code class=\"language-SQL\">SELECT AVG(gpa), COUNT(sid)\n  FROM student WHERE login LIKE '%@cs';\n</code></pre>\n<p>有些聚合函数支持 <code>DISTINCT</code>  关键字</p>\n<p>Get # of unique students and their average GPA with a ‘@cs’ login.</p>\n<p>得到通过 <code>@cs</code>  登录的学生数量，以及他们的 GPA, 要求学生不能重复！</p>\n<pre><code class=\"language-SQL\">SELECT COUNT(DISTINCT login)\n  FROM student WHERE login LIKE '%@cs';\n</code></pre>\n</li>\n<li>\n<p>Non-aggregated values in SELECT output clause must appear in GROUP BY clause</p>\n<p>例子 3：Get the average GPA of students in each course.</p>\n<p>得到在每个课上的学生的平均 GPA</p>\n<pre><code class=\"language-SQL\">SELECT AVG(s.gpa), e.cid\n  FROM enrolled AS e, student AS s\n WHERE e.sid = s.sid\n GROUP BY e.cid;\n</code></pre>\n</li>\n<li>\n<p>HAVING 子句在聚合计算的基础上过滤输出结果。这使得 HAVING 的行为像一个 GROUP BY 的 WHERE 子句。</p>\n<p>The HAVING clause filters output results based on aggregation computation.</p>\n<p>This make HAVING behave like a WHERE clause for a GROUP BY.</p>\n<p>例子 5：获取学生平均 GPA 大于 3.9 的课程。</p>\n<pre><code class=\"language-SQL\">SELECT AVG(s.gpa) AS avg_gpa, e.cid\n  FROM enrolled AS e, student AS s\n WHERE e.sid = s.sid\n GROUP BY e.cid\nHAVING avg_gpa &gt; 3.9;\n</code></pre>\n<p>上述查询语法被许多主要的数据库系统所支持，但不符合 SQL 标准。</p>\n<p>为了使查询符合标准，我们必须在 AVG (S.GPA) 的主体中重复使用 HAVING 子句</p>\n<pre><code class=\"language-SQL\">SELECT AVG(s.gpa), e.cid\nFROM enrolled AS e, student AS s\nWHERE e.sid = s.sid\nGROUP BY e.cid\nHAVING AVG(s.gpa) &gt; 3.9;\n</code></pre>\n</li>\n</ul>\n<h2 id=\"4-string-operations\"><a class=\"markdownIt-Anchor\" href=\"#4-string-operations\">#</a> 4. String Operations</h2>\n<p>SQL 标准是区分大小写的，而且只能是单引号！有一些函数可以处理字符串，可以在查询的任何部分使用。</p>\n<ul>\n<li>\n<p>Pattern Matching:</p>\n<p><strong>LIKE 操作符</strong>用于在 WHERE 子句中搜索列中的指定模式。</p>\n<pre><code class=\"language-SQL\">SELECT column1, column2, ...\nFROM table_name\nWHERE column LIKE pattern;\n</code></pre>\n</li>\n<li>\n<p>通配符</p>\n<ul>\n<li><code>%</code>  替代 0 个或多个字符</li>\n<li><code>_</code> 替代一个字符</li>\n</ul>\n</li>\n<li>\n<p><strong>String Function:</strong><br>\n <code>SUBSTRING(S, B, E)</code> <br>\n <code>UPPER(S)</code></p>\n</li>\n<li>\n<p><strong>Concatenation:</strong><br>\n<img data-src=\"C:%5CUsers%5Csatori%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230313134548756.png\" alt=\"image-20230313134548756\"></p>\n</li>\n</ul>\n<h2 id=\"5-date-and-time\"><a class=\"markdownIt-Anchor\" href=\"#5-date-and-time\">#</a> 5. Date and Time</h2>\n<ul>\n<li>\n<p>时间函数</p>\n<ol>\n<li>当前日期时间<br>\n <code>NOW()</code> ,  <code>CURRENT_TIMESTAMP()</code></li>\n<li>当前 UNIX 时间戳<br>\n <code>UNIX_TIMESTAMP()</code></li>\n<li>当前日期<br>\n <code>CURRENT_DATE()</code></li>\n<li>当前时间<br>\n <code>CURRENT_TIME()</code></li>\n</ol>\n</li>\n<li>\n<p>日期时间转换函数</p>\n<ol>\n<li>\n<p>当前时间戳转换为北京时间<br>\n <code>FROM_UNIXTIME()</code></p>\n</li>\n<li>\n<p>北京时间转换为时间戳<br>\n <code>UNIX_TIMESTAMP()</code></p>\n</li>\n<li>\n<p>时间中解析年月日时间<br>\n <code>DATE_FORMAT(date, format)</code></p>\n<pre><code>select DATE_FORMAT('2021-01-01 08:30:50','%Y-%m-%d')\n</code></pre>\n</li>\n</ol>\n</li>\n<li>\n<p>日期时间运算函数</p>\n<ol>\n<li>\n<p>在某个时间的基础上加上或者减去某个时间<br>\n <code>DATE_ADD(date,INTERVAL expr unit)</code> <br>\n <code>DATE_SUB(date,INTERVAL expr unit)</code></p>\n</li>\n<li>\n<p>返回两个日期值之间的天数<br>\n <code>DATEDIFF(expr1,expr2))</code></p>\n<pre><code>select DATEDIFF('2021-01-02','2021-01-01')\n</code></pre>\n</li>\n<li>\n<p>时间差函数<br>\n <code>TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)</code></p>\n<p>unit：天 (DAY)、小时 (HOUR），分钟 (MINUTE) 和秒 (SECOND)，TIMESTAMPDIFF 函数比 DATEDIFF 函数用起来更加灵活</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"6-output-redirection输出重定向\"><a class=\"markdownIt-Anchor\" href=\"#6-output-redirection输出重定向\">#</a> 6. Output Redirection (输出重定向)</h2>\n<p>你可以告诉 DBMS 将查询结果存储到另一个表中，而不是将查询结果返回给客户端（例如，终端）。结果存储到另一个表中。然后你可以在随后的查询中访问这些数据</p>\n<ul>\n<li>\n<p>New Table: 将查询的输出存储到一个新的（永久）表中</p>\n<pre><code>SELECT DISTINCT cid INTO CourseIds FROM enrolled;\n</code></pre>\n</li>\n<li>\n<p>Exustubg Table:</p>\n<p>将查询的输出存储到数据库中已经存在的表中。该表 目标表必须有与目标表相同数量和相同类型的列，但输出查询中的列名不需要匹配。</p>\n<pre><code>INSERT INTO CourseIds (SELECT DISTINCT cid FROM enrolled)\n</code></pre>\n</li>\n</ul>\n<h2 id=\"7-output-control\"><a class=\"markdownIt-Anchor\" href=\"#7-output-control\">#</a> 7. Output Control</h2>\n<p>因为 SQL 是无序的，我们可以用 ORDER BY 来对输出进行排序</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> sid<span class=\"token punctuation\">,</span> grade <span class=\"token keyword\">FROM</span> enrolled <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'15-721'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> grade<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>后面可以加 <code>DESC</code> ,  <code>ASC</code>  来指定排序策略</p>\n<p>输出的数量可以用 <code>LIMIT n</code>  进行指定</p>\n<p>当然也可以用 <code>OFFSET</code>  来提供一个 bias。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> sid<span class=\"token punctuation\">,</span> name <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> login <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%@cs'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">LIMIT</span> <span class=\"token number\">20</span> <span class=\"token keyword\">OFFSET</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"8-nested-queries内部查询查询嵌套\"><a class=\"markdownIt-Anchor\" href=\"#8-nested-queries内部查询查询嵌套\">#</a> 8. Nested Queries（内部查询 / 查询嵌套）</h2>\n<p>在其他查询中调用查询，在单个查询中执行更复杂的逻辑。嵌套查询往往难以优化。</p>\n<p>外部查询的范围包括在内部查询中（即内部查询可以访问来自外部<br>\n查询），反之不行。</p>\n<ul>\n<li>\n<p>内部查询几乎可以出现在一个查询的任何部分。</p>\n<p><code>SELECT</code>  Output Targets</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> one <span class=\"token keyword\">FROM</span> student<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>FROM</code>  Clause:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">AS</span> s<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> sid <span class=\"token keyword\">FROM</span> enrolled<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> e</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">WHERE</span> s<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>WHERE</code>  Clause</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> name <span class=\"token keyword\">FROM</span> student</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">WHERE</span> sid <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">SELECT</span> sid <span class=\"token keyword\">FROM</span> enrolled <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>例子： 获取在 15-445 中注册的学生名字</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> name <span class=\"token keyword\">FROM</span> student</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">WHERE</span> sid <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">SELECT</span> sid <span class=\"token keyword\">FROM</span> enrolled</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'15-445'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>请注意，根据它在查询中出现的位置，sid 有不同的范围。</p>\n<ul>\n<li>\n<p>例子：<br>\n找到注册了至少一门课的最大的学生 id</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> student<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">,</span> name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">FROM</span> student</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>sid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> sid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">FROM</span> enrolled<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> max_e</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">ON</span> student<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> max_e<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>Nested Query Results Expressions:</p>\n<ul>\n<li>\n<p>关键字：</p>\n<ul>\n<li><code>ALL</code> <br>\nMust satisfy expression for all rows in sub-query</li>\n<li><code>ANY</code> <br>\nMust satisfy expression for at least one row in sub-query.</li>\n<li><code>IN</code> <br>\nEquivalent to =ANY().</li>\n<li><code>EXISTS</code> <br>\nAt least one row is returned.</li>\n</ul>\n</li>\n<li>\n<p>例子：</p>\n<p>找到所有没有学生注册的课</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> course</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">WHERE</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> enrolled</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">WHERE</span> course<span class=\"token punctuation\">.</span>cid <span class=\"token operator\">=</span> enrolled<span class=\"token punctuation\">.</span>cid</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"10-window-function\"><a class=\"markdownIt-Anchor\" href=\"#10-window-function\">#</a> 10. Window Function</h2>\n<p>A window function perform “sliding” calculation across a set of tuples that are related. Like an aggregation but tuples are not grouped into a single output tuple.</p>\n<ul>\n<li>\n<p>函数： 窗口函数可以是我们上面讨论的任何一个聚合函数。也有一些特殊的窗口函数。</p>\n<ol>\n<li><code>ROW_NUMBER</code> : 当前列的数字</li>\n<li><code>RANK</code> : 当前列的顺序</li>\n</ol>\n</li>\n<li>\n<p>Grouping: <strong>OVER 子句指定了在计算窗口函数时如何对图元进行分组</strong>。使用 PARTITION BY 来指定分组</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> cid<span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> ROW_NUMBER<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> cid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">FROM</span> enrolled <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> cid<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们也可以在 OVER 中放入 ORDER BY，以确保结果的确定性排序，即使数据库内部发生变化。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ROW_NUMBER<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> cid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">FROM</span> enrolled <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> cid<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>重要提示：</strong></p>\n</li>\n<li>\n<p>DBMS 在窗函数排序后计算 <code>RANK</code> ，而在排序前计算 <code>ROW_NUMBER</code> 。</p>\n<ul>\n<li>\n<p>找到每门课程中成绩第二高的学生</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> RANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> cid</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> grade <span class=\"token keyword\">ASC</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> rank</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">FROM</span> enrolled<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> ranking</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">WHERE</span> ranking<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"11-commom-table-expressions\"><a class=\"markdownIt-Anchor\" href=\"#11-commom-table-expressions\">#</a> 11. Commom Table Expressions</h2>\n<p>在编写更复杂的查询时，通用表表达式（CTE）是窗口或嵌套查询的一种替代方法。复杂的查询时，可以替代窗口或嵌套查询。它们提供了一种方法来为用户在一个更大的查询中编写辅助语句.</p>\n<p>可以理解为一个辅助表。</p>\n<p><code>WITH</code>  子句将内部查询的输出与一个具有该名称的临时结果绑定。</p>\n<ul>\n<li>\n<p>例子：<br>\n生成一个名为 cteName 的 CTE，其中包含一个单一属性设置为 &quot;1&quot; 的元组。从这个 CTE 中选择所有属性。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">WITH</span> cteName <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> cteName<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们可以在 AS 之前将输出列绑定到名称上</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">WITH</span> cteName <span class=\"token punctuation\">(</span>col1<span class=\"token punctuation\">,</span> col2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">SELECT</span> col1 <span class=\"token operator\">+</span> col2 <span class=\"token keyword\">FROM</span> cteName<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一个查询可能包含多个 CTE 声明</p>\n<pre><code>WITH cte1 (col1) AS (SELECT 1), cte2 (col2) AS (SELECT 2)\nSELECT * FROM cte1, cte2;\n</code></pre>\n</li>\n<li>\n<p>递归能力<br>\n在 WITH 后面添加 RECURSIVE 关键字允许 CTE 引用自己。这使得在 SQL 查询中可以实现递归。有了递归的 CTE，SQL 被证明是图灵完备的，这意味着它在计算上的表现力不亚于更多的通用编程语言</p>\n</li>\n<li>\n<p>例子：打印从 1 到 10 的数字</p>\n<pre><code>WITH RECURSIVE cteSource (counter) AS (\n    ( SELECT 1 )\n    UNION\n    ( SELECT counter + 1 FROM cteSource\n    \tWHERE counter &lt; 10 )\n)\nSELECT * FROM cteSource;\n</code></pre>\n</li>\n</ul>\n<h1 id=\"lesson0304-存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#lesson0304-存储引擎\">#</a> Lesson#03&amp;04. 存储引擎</h1>\n<h2 id=\"1-storage\"><a class=\"markdownIt-Anchor\" href=\"#1-storage\">#</a> 1. Storage</h2>\n<ul>\n<li>\n<p>我们将关注一个 &quot;面向磁盘 (disk-oriented)&quot; 的 DBMS 架构，它假定数据库的主要存储位置是在非易失性磁盘上。越接近 CPU，存储就越快，容量越小，也更贵。</p>\n<ul>\n<li>Volatile Devices （MEMORY）</li>\n<li>Non-Volatile Devices （DISK）</li>\n</ul>\n</li>\n<li>\n<p>注意：<br>\n这课不讨论 NVMe SSD – non-volatile memory express.</p>\n</li>\n<li>\n<p>We will focus on hiding the latency of the disk rather than optimizations with registers and caches since getting data from disk is so slow. 我们将专注于隐藏磁盘的延迟，而不是使用寄存器和缓存进行优化，因为从磁盘获取数据非常缓慢。</p>\n<p><img data-src=\"C:%5CUsers%5Csatori%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230313140745881.png\" alt=\"image-20230313140745881\"></p>\n</li>\n</ul>\n<h2 id=\"2-disk-oriented-dbms-overview\"><a class=\"markdownIt-Anchor\" href=\"#2-disk-oriented-dbms-overview\">#</a> 2. Disk-Oriented DBMS Overview</h2>\n<ul>\n<li>数据库都在磁盘上，数据库文件中的数据被组织成页，第一页是目录页。为了对数据进行操作，DBMS 需要将数据引入内存。\n<ul>\n<li>它通过拥有<strong>一个缓冲池来管理数据在磁盘和内存之间的交换</strong></li>\n<li>DBMS 也有一个执行查询的执行引擎。执行引擎将要求缓冲池提供一个特定的页面，而缓冲池将负责把该页面带入内存，并给执行引擎一个指向内存中该页面的指针<br>\n缓冲池管理器将确保在执行引擎对该部分内存进行操作时，该页就在那里。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-dbms-vs-os\"><a class=\"markdownIt-Anchor\" href=\"#3-dbms-vs-os\">#</a> 3. DBMS vs. OS</h2>\n<ul>\n<li>DBMS 的一个高级设计目标是支持超过可用内存量的数据库。因为访问 disk 的代价很大，所以使用 disk 应该要小心。我们不希望从磁盘上访问数据时停顿太久，从而拖慢其他一切。我们希望 DBMS 能够处理在等待从磁盘获取数据时，能够处理其他查询。</li>\n<li>这个高层次的设计目标就像虚拟内存一样，有一个大的地址空间和一个供操作系统从磁盘引入页面的地方。</li>\n<li>实现这种虚拟内存的方法之一是使用 mmap 来映射进程地址空间中的文件内容，这使得操作系统负责在磁盘和内存之间来回移动页面。<br>\n但不幸的是，如果 mmap 遇到页面故障，进程将会被阻塞。\n<ul>\n<li>如果你需要写入，你永远不想在你的 DBMS 中使用 mmap。</li>\n<li>DBMS（几乎）总是想自己控制事情，而且可以做得更好，因为它知道更多关于被访问的数据和被处理的查询。</li>\n<li>操作系统不是你的朋友。</li>\n</ul>\n</li>\n<li>可以通过使用操作系统：\n<ul>\n<li><code>madvise</code> : 告诉操作系统你打算何时读某些页面。</li>\n<li><code>mlock</code> : 告诉操作系统不要把内存范围换到磁盘上。</li>\n<li><code>msync</code> : 告诉操作系统将内存范围刷新到磁盘。</li>\n</ul>\n</li>\n</ul>\n<p><strong>出于正确性和性能的考虑，我们不建议在 DBMS 中使用 <code>mmap</code> 。</strong></p>\n<blockquote>\n<p>Even though the system will have functionalities that seem like something the OS can provide, having the DBMS implement these procedures itself gives it better control and performance</p>\n</blockquote>\n<h2 id=\"4-file-storage\"><a class=\"markdownIt-Anchor\" href=\"#4-file-storage\">#</a> 4. File Storage</h2>\n<ul>\n<li>在其最基本的形式中，DBMS 将数据库存储为磁盘上的文件。有些可能使用文件层次结构，有些则可能使用单个文件</li>\n<li>操作系统对这些文件的内容一无所知。只有 DBMS 知道如何解读它们的内容，因为它是以 DBMS 特有的方式编码的。</li>\n<li>DBMS 的存储管理器负责管理数据库的文件。它将文件表示为一个 页的集合。它还跟踪哪些数据被读和写到了页面上，以及这些页面有多少可用空间。这些页面中还有多少可用空间。</li>\n</ul>\n<h2 id=\"5-database-pages\"><a class=\"markdownIt-Anchor\" href=\"#5-database-pages\">#</a> 5. Database Pages</h2>\n<ul>\n<li>\n<p>DBMS 将数据库组织在一个或多个文件中的固定大小的数据块，称为页。页面可以包含不同种类的数据（tuple、indexes 等）。</p>\n</li>\n<li>\n<p>大多数系统不会将这些类型混合在一页中。<br>\n有些系统会要求页面是自成一体（self-contained）的，也就是说，阅读每个页面所需的所有信息都在页面本身。读取每一页的所有信息都在页面本身</p>\n</li>\n<li>\n<p>每个页面都有一个独特的标识符 identifier</p>\n<ul>\n<li>\n<p>如果数据库是一个单一的文件，那么页面 ID 可以是文件的偏移量。</p>\n</li>\n<li>\n<p>大多数 DBMS 有一个中介层（indirection layer），将页面 ID 映射到文件路径和偏移量。 系统的上层会要求提供一个特定的页号。然后，存储管理程序将把这个页号变成一个文件和一个偏移量以找到该页。</p>\n</li>\n<li>\n<p>大多数 DBMS 使用固定大小的页面，以避免支持可变大小页面所需的工程开销。</p>\n<p>因为，对于可变大小的页面，删除一个页面会在文件中产生一个 hole，而 DBMS 难以用新的页面来填补。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>页在 DBMS 的 3 个概念</p>\n<ol>\n<li>Hardware page (usually 4 KB).</li>\n<li>OS page (4 KB).</li>\n<li>Database page (1-16 KB）</li>\n</ol>\n</li>\n<li>\n<p>存储设备保证写的操作是 atomic 原子的。<br>\n这意味着，如果我们的数据库页面比我们的硬件页面大，DBMS 将不得不采取额外的措施 以确保数据被安全地写出来。 因为当系统崩溃时，程序可能已经完成了将数据库页面写入磁盘的一部分</p>\n</li>\n</ul>\n<h2 id=\"6-database-heap\"><a class=\"markdownIt-Anchor\" href=\"#6-database-heap\">#</a> 6. Database Heap</h2>\n<ul>\n<li>\n<p>有几种方法可以找到 DBMS 在磁盘上想要的页面的位置，堆文件组织是其中一种方法<br>\n堆文件是一个无序的页面集合，其中的图元是按照 随机顺序存储。</p>\n</li>\n<li>\n<p>DBMS 可以通过使用页面的链接列表或页面目录在磁盘上找到一个给定的页面 ID</p>\n<ol>\n<li>\n<p>Linked List:<br>\nHeader page 持有指向自由页列表和数据页列表的指针。然而，如果 DBMS 正在寻找一个特定的页面，它必须在数据页列表上进行顺序扫描，直到它找到它要找的页面。</p>\n</li>\n<li>\n<p>Page Directory:</p>\n<p>DBMS 维护特殊的页面，跟踪数据页的位置以及每页的可用空间。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"7-page-layout\"><a class=\"markdownIt-Anchor\" href=\"#7-page-layout\">#</a> 7. Page Layout</h2>\n<ul>\n<li>\n<p>每个页面都包括一个 header，记录关于页面内容的元数据。</p>\n<ul>\n<li>Page size</li>\n<li>Checksum</li>\n<li>DBMS version</li>\n<li>Transaction visibility</li>\n<li>Self-containment (Some systems like Oracle require this.)</li>\n</ul>\n</li>\n<li>\n<p>放置数据的一个 strawman 方法是 追踪 DBMS 在一个页面中存储了多少个 tuples，然后在每次添加新的 tuples 的时候追加到最后面。然而，问题出现在当 tuples 被删除或者是变长 variable-length 属性的时候</p>\n</li>\n<li>\n<p>有 2 个主流方法去在一个 page 中放置数据：</p>\n<ol>\n<li>\n<p><strong>slotted-page</strong><br>\n 页面将 slots 映射到 offsets</p>\n<ul>\n<li>Most common approach used in DBMSs today.</li>\n<li>Header keeps track of the number of used slots, the offset of the starting location of the last used slot, and a slot array, which keeps track of the location of the start of each tuple.</li>\n<li>To add a tuple, the slot array will grow from the beginning to the end, and the data of the tuples will grow from end to the beginning. The page is considered full when the slot array and the tuple data meet</li>\n</ul>\n</li>\n<li>\n<p><strong>log-structured</strong></p>\n<p>下一课介绍。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"8-tuple-layout\"><a class=\"markdownIt-Anchor\" href=\"#8-tuple-layout\">#</a> 8. Tuple Layout</h2>\n<p>tuples 本质上是一个字节序列。DBMS 的工作是将这些字节解释为属性类型和值。</p>\n<ul>\n<li>\n<p>Tuple Header：包含了 tuple 的元数据</p>\n<ul>\n<li>DBMS 的并发控制协议的可见性信息。关于哪个事务创建 / 修改了该元组</li>\n<li>NULL 值的位图。</li>\n<li>注意，DBMS 不需要在这里存储关于数据库模式的元数据。</li>\n</ul>\n</li>\n<li>\n<p>Tuple Data：数据的实际属性</p>\n<ul>\n<li>属性通常按照你创建表时指定的顺序存储</li>\n<li>大多数 DBMS 不允许一个 tuple 超过一个页面的大小。</li>\n</ul>\n</li>\n<li>\n<p>Unique Identifier</p>\n<ul>\n<li>数据库中的每个 tuple 都被分配一个唯一的标识符</li>\n<li>一般是： <code>page_id + (offset or slow)</code></li>\n<li>一个应用程序<strong>不能</strong>依赖这些 ID 来表示任何东西</li>\n</ul>\n</li>\n<li>\n<p>De-normalized Tuple Data:</p>\n<p>如果两个表是相关的，DBMS 可以 &quot;pre-join&quot; 它们，所以这些表最终会出现在<br>\n在同一个页面上。这使得读取速度加快，因为 DBMS 只需要加载一个页面而不是两个<br>\n独立的页面。然而，这使得更新更加昂贵，因为 DBMS 需要更多的空间给每个<br>\n tuples</p>\n</li>\n</ul>\n",
            "tags": [
                "DataBase"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/03/05/C++%E9%9D%A2%E7%BB%8F/",
            "url": "https://adventure-yx.github.io/2023/03/05/C++%E9%9D%A2%E7%BB%8F/",
            "title": "C++面经",
            "date_published": "2023-03-05T14:19:16.000Z",
            "content_html": "<h1 id=\"1编译内存相关\"><a class=\"markdownIt-Anchor\" href=\"#1编译内存相关\">#</a> 1. 编译内存相关</h1>\n<h2 id=\"11-c-程序编译过程\"><a class=\"markdownIt-Anchor\" href=\"#11-c-程序编译过程\">#</a> 1.1. C++ 程序编译过程</h2>\n<p>编译过程分为四个过程：编译（编译预处理、编译、优化），汇编，链接。</p>\n<p><strong>编译预处理</strong>：处理以 # 开头的指令，产生 .i 文件；<br>\n主要的处理操作如下：</p>\n<ul>\n<li>对全部的 #define 进行宏展开。</li>\n<li>处理全部的条件编译指令，比方 #if、#ifdef、#elif、#else、#endif;</li>\n<li>处理 #include 指令，这个过程是递归的，也就是说被包括的文件可能还包括其它文件；</li>\n<li>删除全部的注释 // 和 /**/</li>\n<li>加入行号和文件标识</li>\n<li>保留全部的 #pragma 编译器指令</li>\n</ul>\n<p>ps: 经过预处理后的 .i 文件不包括任何宏定义，由于全部的宏已经被展开。而且包括的文件也已经被插入到 .i 文件里。</p>\n<p><strong>编译、优化</strong>：将源码 .cpp 文件翻译成 .s 汇编代码；</p>\n<ul>\n<li>词法分析：将源代码的字符序列分割成一系列的记号。</li>\n<li>语法分析：对记号进行语法分析，产生语法树。</li>\n<li>语义分析：判断表达式是否有意义。</li>\n<li>代码优化：</li>\n<li>目标代码生成：生成汇编代码。</li>\n<li>目标代码优化：</li>\n</ul>\n<p>编译会将源代码由文本形式转换成机器语言，编译过程就是把预处理完的文件进行一系列词法分析、语法分析、语义分析以及优化后生成相应的汇编代码文件。编译后的.s 是 ASCII 码文件。</p>\n<p><strong>汇编</strong>：将汇编代码 .s 翻译成机器指令的 .o 或.obj 目标文件；</p>\n<ul>\n<li>\n<p>汇编过程调用汇编器 AS 来完成，是用于将汇编代码转换成机器可以执行的指令，每一个汇编语句几乎都对应一条机器指令。</p>\n</li>\n<li>\n<p>汇编后的.o 文件是纯二进制文件。</p>\n</li>\n</ul>\n<p><strong>链接</strong>：产生 .out 或 .exe 可运行文件</p>\n<ul>\n<li>汇编程序生成的目标文件，即 .o 文件，并不会立即执行，因为可能会出现：.cpp 文件中的函数引用了另一个 .cpp 文件中定义的符号或者调用了某个库文件中的函数。那链接的目的就是将这些文件对应的目标文件连接成一个整体，从而生成可执行的程序 .exe 文件。</li>\n</ul>\n<p>详细来说，链接是将所有的.o 文件和库（动态库、静态库）链接在一起，得到可以运行的可执行文件（Windows 的.exe 文件或 Linux 的.out 文件）等。它的工作就是把一些指令对其他符号地址的引用加以修正。链接过程主要包括了地址和空间分配、符号决议和重定向。</p>\n<p>* 最基本的链接叫做静态链接，就是将每个模块的源代码文件编译、汇编成目标文件（Linux：.o 文件；Windows：.obj 文件），然后将目标文件和库一起链接形成最后的可执行文件（.exe 或.out 等）。库其实就是一组目标文件的包，就是一些最常用的代码变异成目标文件后打包存放。最常见的库就是运行时库，它是支持程序运行的基本函数的集合。<br>\n<img data-src=\"b70048db13024888936d51524f0fde9d.png\" alt=\"b70048db13024888936d51524f0fde9d.png\" style=\"zoom:33%;\" /></p>\n<p>链接分为两种：</p>\n<p><strong>静态链接</strong>：代码从其所在的静态链接库中拷贝到最终的可执行程序中，在该程序被执行时，这些代码会被装入到该进程的虚拟地址空间中。</p>\n<p>把目标程序运行时需要调用的函数代码直接链接到了生成的可执行文件中，程序在运行的时候不需要其他额外的库文件，且就算你去静态库把程序执行需要的库删掉也不会影响程序的运行，因为所需要的所有东西已经被链接到了链接阶段生成的可执行文件中。</p>\n<p>Windows 下以.lib 为后缀，Linux 下以.a 为后缀。</p>\n<p><strong>动态链接</strong>：代码被放到动态链接库或共享对象的某个目标文件中，链接程序只是在最终的可执行程序中记录了共享对象的名字等一些信息。在程序执行时，动态链接库的全部内容会被映射到运行时相应进行的虚拟地址的空间。</p>\n<p>动态 “动” 在了程序在执行阶段需要去寻找相应的函数代码，即在程序运行时才会将程序安装模块链接在一起</p>\n<p>具体来说，动态链接就是把调⽤的函数所在⽂件模块（DLL）和调⽤函数在⽂件中的位置等信息链接进目标程序，程序运⾏的时候再从 DLL 中寻找相应函数代码，因此需要相应 DLL ⽂件的⽀持 。（Windows）</p>\n<p>包含函数重定位信息的文件，在 Windows 下以.dll 为后缀，Linux 下以.so 为后缀。</p>\n<p><strong>二者的区别</strong>：</p>\n<ul>\n<li>静态链接是将各个模块的 obj 和库链接成一个完整的可执行程序；</li>\n<li>动态链接是程序在运行的时候寻找动态库的函数符号（重定位），即 **DLL（Dynamic Link Library）** 不必被包含在最终的 exe 文件中；</li>\n<li><strong>链接使用工具不同</strong>:\n<ul>\n<li>静态链接由称为 “链接器” 的工具完成；</li>\n<li>动态链接由操作系统在程序运行时完成链接；</li>\n</ul>\n</li>\n<li><strong>库包含限制</strong>：\n<ul>\n<li>静态链接库中不能再包含其他的动态链接库或者静态库；</li>\n<li>动态链接库中还可以再包含其他的动态或静态链接库。</li>\n</ul>\n</li>\n<li><strong>运行速度</strong>：\n<ul>\n<li>静态链接运行速度快（因为执行过程中不用重定位），可独立运行</li>\n<li>动态链接运行速度慢、不可独立运行</li>\n</ul>\n</li>\n</ul>\n<p><strong>二者的优缺点</strong>：</p>\n<ul>\n<li>\n<p>静态链接：</p>\n<ul>\n<li>缺点：浪费空间，每个可执行程序都会有目标文件的一个副本，这样如果目标文件进行了更新操作，就需要重新进行编译链接生成可执行程序（更新困难）；</li>\n<li>优点：执行的时候运行速度快，因为可执行程序具备了程序运行的所有内容。</li>\n</ul>\n</li>\n<li>\n<p>动态链接：</p>\n<ul>\n<li>优点：节省内存、更新方便；</li>\n<li>缺点：但是动态链接是在程序运行时，每次执行都需要链接，相比静态链接会有一定的性能损失。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"12-c-内存管理\"><a class=\"markdownIt-Anchor\" href=\"#12-c-内存管理\">#</a> 1.2. C++ 内存管理</h2>\n<p>C++ 的内存分布模型：</p>\n<p><img data-src=\"d11da6f90fba4a9f9cd935ee80d62a8c.png\" alt=\"img\"></p>\n<p>从高地址到低地址，一个程序由内核空间、栈区、堆区、BSS 段、数据段（data）、代码区组成。</p>\n<p>（Block Started by Symbol 通常是指用来存放程序中未初始化的全局变量和静态变量的一块内存区域。特点是：可读写的，在程序执行之前 BSS 段会自动清 0，所以，未初始的全局变量在程序执行之前已经成 0 了。）</p>\n<p><strong>常说的 C++ 内存分区：栈、堆、全局 / 静态存储区、常量存储区、代码区。</strong></p>\n<p>可执行程序在运行时会多出两个区域：</p>\n<ul>\n<li>栈：存放函数的局部变量、函数参数、返回地址等，由编译器自动分配和释放。栈从高地址向低地址增长。是一块连续的空间。栈一般分配几 M 大小的内存。</li>\n<li>堆：动态申请的内存空间，就是由 malloc 分配的内存块，由程序员控制它的分配和释放，如果程序执行结束还没有释放，操作系统会自动回收。堆从低地址向高地址增长。一般可以分配几个 G 大小的内存。</li>\n<li>在堆栈之间有一个 共享区（文件映射区）。</li>\n<li>全局区 / 静态存储区（.BSS 段和 .data 段）：存放全局变量和静态变量，程序运行结束操作系统自动释放，在 C 语言中，程序中未初始化的全局变量和静态变量存放在.BSS 段中，已初始化的全局变量和静态变量存放在 .data 段中，C++ 中不再区分了。</li>\n<li>常量存储区（.data 段）：存放的是常量，不允许修改，程序运行结束自动释放。</li>\n<li>代码区（.text 段）：存放程序执行代码的一块内存区域。只读，不允许修改，但可以执行。编译后的二进制文件存放在这里。代码段的头部还会包含一些只读的常量，如字符串常量字面值（注意：const 变量虽然属于常量，但是本质还是变量，不存储于代码段）</li>\n</ul>\n<p>在 linux 下 size 命令可以查看一个可执行二进制文件基本情况：<br>\n<img data-src=\"8292ae6c07774a2293dda6e7ff301107.png\" alt=\"img\"></p>\n<h2 id=\"13-栈和堆的区别\"><a class=\"markdownIt-Anchor\" href=\"#13-栈和堆的区别\">#</a> 1.3. 栈和堆的区别</h2>\n<ul>\n<li>\n<p>申请方式：栈是系统自动分配，堆是程序员主动申请。</p>\n</li>\n<li>\n<p>申请后系统响应：分配栈空间，如果剩余空间大于申请空间则分配成功，否则分配失败栈溢出；申请堆空间，堆在内存中呈现的方式类似于链表（记录空闲地址空间的链表），在链表上寻找第一个大于申请空间的节点分配给程序，将该节点从链表中删除，大多数系统中该块空间的首地址存放的是本次分配空间的大小，便于释放，将该块空间上的剩余空间再次连接在空闲链表上。</p>\n</li>\n<li>\n<p>栈在内存中是连续的一块空间（向低地址扩展）最大容量是系统预定好的，堆在内存中的空间（向高地址扩展）是不连续的。</p>\n</li>\n<li>\n<p>申请效率：栈是有系统自动分配，申请效率高，但程序员无法控制；堆是由程序员主动申请，效率低，使用起来方便但是容易产生碎片。</p>\n</li>\n<li>\n<p>存放的内容：栈中存放的是局部变量，函数的参数；堆中存放的内容由程序员控制。</p>\n</li>\n</ul>\n<p>此题总结：</p>\n<ol>\n<li>申请方式的不同。 栈由系统自动分配，而堆是人为申请开辟；</li>\n<li>申请大小的不同。 栈获得的空间较小，而堆获得的空间较大；</li>\n<li>申请效率的不同。 栈由系统自动分配，速度较快，而堆一般速度比较慢；</li>\n<li>存储的内容不同。栈在函数调用时，第一个进栈的是主函数中后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，在大多数的 C 编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的。 当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。堆：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排。</li>\n</ol>\n<h2 id=\"14-变量的区别\"><a class=\"markdownIt-Anchor\" href=\"#14-变量的区别\">#</a> 1.4. 变量的区别</h2>\n<p><strong>全局变量</strong>、<strong>局部变量</strong>、<strong>静态全局变量</strong>、<strong>静态局部变量</strong>的区别：</p>\n<ul>\n<li>全局变量就是定义在函数外的变量。</li>\n<li>局部变量就是函数内定义的变量。</li>\n<li>静态变量就是加了 static 的变量。 例如：static int value = 1</li>\n</ul>\n<p><strong>各自存储的位置</strong>：</p>\n<ul>\n<li>\n<p>全局变量，存储在常量区（静态存储区）。</p>\n</li>\n<li>\n<p>局部变量，存储在栈区。</p>\n</li>\n<li>\n<p>静态变量，存储在常量区（静态存储区）。</p>\n<p>因为静态变量都在静态存储区（常量区），所以下次调用函数的时候还是能取到原来的值。</p>\n</li>\n</ul>\n<p><strong>各自初始化的值</strong>：</p>\n<ul>\n<li>局部变量，存储在栈区。局部变量一般是不初始化的。</li>\n<li>全局变量和静态变量，都是初始化为 0 的，有一个初始值。</li>\n<li>如果是类变量，会调用默认构造函数初始化。</li>\n</ul>\n<p><strong>从作用域看</strong>：</p>\n<p>C++ 变量根据定义的位置的不同的生命周期，具有不同的作用域，作用域可分为 6 种：</p>\n<p><strong>全局作用域，局部作用域，语句作用域，类作用域，命名空间作用域和文件作用域。</strong></p>\n<ul>\n<li>\n<p>全局变量：具有全局作用域。全局变量只需在一个源文件中定义，就可以作用于所有的源文件。当然，其他不包含全局变量定义的源文件需要用 extern 关键字再次声明这个全局变量。会一直存在到程序结束。</p>\n</li>\n<li>\n<p>静态全局变量：全局作用域 + 文件作用域，所以无法在其他文件中使用。它与全局变量的区别在于如果程序包含多个文件的话，它作用于定义它的文件里，不能作用到其它文件里，即被 static 关键字修饰过的变量具有文件作用域。这样即使两个不同的源文件都定义了相同名字的静态全局变量，它们也是不同的变量。</p>\n</li>\n<li>\n<p>局部变量：具有局部作用域。比如函数的参数，函数内的局部变量等等；它是自动对象（auto），在程序运行期间不是一直存在，而是只在函数执行期间存在，函数的一次调用执行结束后，变量被销毁，其所占用的内存也被收回。<br>\n静态局部变量：具有局部作用域。它只被初始化一次， 直到程序结束。自从第一次被初始化直到程序运行结束都一直存在，它和全局变量的区别在于全局变量对所有的函数都是可见的，而静态局部变量只对定义自己的函数体始终可见。</p>\n</li>\n</ul>\n<p><strong>从分配内存空间看</strong>：</p>\n<ul>\n<li><strong>静态存储区</strong>：全局变量，静态局部变量，静态全局变量。</li>\n<li><strong>栈</strong>：局部变量。</li>\n</ul>\n<p><strong>各自的应用场景</strong>：</p>\n<ul>\n<li>局部变量就是我们经常用的，进入函数，逐个构造，最后统一销毁。</li>\n<li>全局变量主要是用来给不同的文件之间进行通信。</li>\n<li>静态变量：只在本文件中使用，局部静态变量在函数内起作用，可以作为一个计数器。</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     count <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>说说静态变量在代码执行的什么阶段进行初始化？</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> value  <span class=\"token comment\">// 静态变量初始化语句</span></pre></td></tr></table></figure><p>对于 C 语言： 静态变量和全局变量均在编译期进行初始化，即初始化发生在任何代码执行之前。<br>\n对于 C++： 静态变量和全局变量仅当首次被使用的时候才进行初始化。</p>\n<p>助记： 如果你使用过 C/C<ins> 你会发现，C 语言要求在程序的最开头声明全部的变量，而 C</ins> 则可以随时使用随时声明；这个规律是不是和答案类似呢？</p>\n<h2 id=\"15-全局变量定义在头文件中有什么问题\"><a class=\"markdownIt-Anchor\" href=\"#15-全局变量定义在头文件中有什么问题\">#</a> 1.5. 全局变量定义在头文件中有什么问题？</h2>\n<p>如果在头文件中定义全局变量，当该头文件被多个文件 include 时，该头文件中的全局变量就会被定义多次，导致重复定义，因此不能再头文件中定义全局变量。</p>\n<h2 id=\"16-内存对齐\"><a class=\"markdownIt-Anchor\" href=\"#16-内存对齐\">#</a> 1.6. 内存对齐</h2>\n<p>什么是内存对齐？内存对齐的原则？为什么要进行内存对齐，有什么优点？</p>\n<p><strong>内存对齐</strong>：编译器将程序中的每个 “数据单元” 安排在字的整数倍的地址指向的内存之中</p>\n<p><strong>内存对齐的原则</strong>：</p>\n<ul>\n<li>\n<p>结构体变量的首地址能够被其最宽基本类型成员大小与对齐基数中的较小者所整除；</p>\n</li>\n<li>\n<p>结构体每个成员相对于结构体首地址的偏移量 （offset）都是该成员大小与对齐基数中的较小者的整数倍，如有需要编译器会在成员之间加上填充字节 （internal padding）；</p>\n</li>\n<li>\n<p>结构体的总大小为结构体最宽基本类型成员大小与对齐基数中的较小者的整数倍，如有需要编译器会在最末一个成员之后加上填充字节（trailing padding）。</p>\n</li>\n</ul>\n<p><strong>进行内存对齐的原因</strong>：（主要是硬件设备方面的问题）</p>\n<ul>\n<li>某些硬件设备只能存取对齐数据，存取非对齐的数据可能会引发异常；</li>\n<li>某些硬件设备不能保证在存取非对齐数据的时候的操作是原子操作；</li>\n<li>相比于存取对齐的数据，存取非对齐的数据需要花费更多的时间；</li>\n<li>某些处理器虽然支持非对齐数据的访问，但会引发对齐陷阱（alignmenttrap）；</li>\n<li>某些硬件设备只支持简单数据指令非对齐存取，不支持复杂数据指令的非对齐存取。</li>\n</ul>\n<p><strong>内存对齐的优点</strong>：</p>\n<ul>\n<li>便于在不同的平台之间进行移植，因为有些硬件平台不能够支持任意地址的数据访问，只能在某些地址处取某些特定的数据，否则会抛出异常；</li>\n<li>提高内存的访问效率，因为 CPU 在读取内存时，是一块一块的读取。</li>\n</ul>\n<h2 id=\"17-什么是内存泄露\"><a class=\"markdownIt-Anchor\" href=\"#17-什么是内存泄露\">#</a> 1.7. 什么是内存泄露</h2>\n<p><strong>内存泄漏</strong>：由于疏忽或错误导致的程序未能释放已经不再使用的内存。</p>\n<p>进一步解释：</p>\n<ul>\n<li>并非指内存从物理上消失，而是指程序在运行过程中，由于疏忽或错误而失去了对该内存的控制，从而造成了内存的浪费。</li>\n<li>常指堆内存泄漏，因为堆是动态分配的，而且是用户来控制的，如果使用不当，会产生内存泄漏。</li>\n<li>使用 malloc、calloc、realloc、new 等分配内存时，使用完后要调用相应的 free 或 delete 释放内存，否则这块内存就会造成内存泄漏。</li>\n<li>指针重新赋值</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p <span class=\"token operator\">=</span> np<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>开始时，指针 p 和 p1 分别指向一块内存空间，但指针 p 被重新赋值，导致 p 初始时指向的那块内存空间无法找到，从而发生了内存泄漏。</p>\n<h2 id=\"18-怎么防止内存泄漏内存泄漏检测工具的原理\"><a class=\"markdownIt-Anchor\" href=\"#18-怎么防止内存泄漏内存泄漏检测工具的原理\">#</a> 1.8. 怎么防止内存泄漏？内存泄漏检测工具的原理？</h2>\n<p><strong>防止内存泄漏的方法</strong>：</p>\n<ul>\n<li>内部封装：将内存的分配和释放封装到类中，在构造的时候申请内存，析构的时候释放内存。（说明：但这样做并不是最佳的做法，在类的对象复制时，程序会出现同一块内存空间释放两次的情况）</li>\n<li>智能指针：智能指针是 C++ 中已经对内存泄漏封装好了一个工具，可以直接拿来使用，将在下一个问题中对智能指针进行详细的解释。</li>\n</ul>\n<p><strong>VS 下内存泄漏的检测方法（CRT）</strong>：</p>\n<p>在 debug 模式下以 F5 运行：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CRTDBG_MAP_ALLOC</span>  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span>  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;crtdbg.h></span>  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 在入口函数中包含 _CrtDumpMemoryLeaks ();  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 即可检测到内存泄露</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 以如下测试函数为例：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pChars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">_CrtDumpMemoryLeaks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"19-智能指针有哪几种智能指针的实现原理\"><a class=\"markdownIt-Anchor\" href=\"#19-智能指针有哪几种智能指针的实现原理\">#</a> 1.9. 智能指针有哪几种？智能指针的实现原理？</h2>\n<p>智能指针是<strong>为了解决动态内存分配时忘记释放内存导致的内存泄漏以及多次释放同一块内存空间而提出的</strong>。C++11 中封装在了  <code>#include &lt; memory &gt;</code>  头文件中。</p>\n<p>C++11 引入了 3 个智能指针类型：</p>\n<ul>\n<li>\n<p>std::unique_ptr ：独占资源所有权的指针。</p>\n</li>\n<li>\n<p>std::shared_ptr ：共享资源所有权的指针。</p>\n</li>\n<li>\n<p>std::weak_ptr ：共享资源的观察者，需要和 std::shared_ptr 一起使用，不影响资源的生命周期。</p>\n<p>注：std::auto_ptr 已被废弃。</p>\n</li>\n</ul>\n<p><strong>共享指针（shared_ptr）</strong>：资源可以被多个指针共享，使用计数机制表明资源被几个指针共享。通过 use_count () 查看资源的所有者的个数，可以通过 unique_ptr、weak_ptr 来构造，调用 release () 释放资源的所有权，计数减一，当计数减为 0 时，会自动释放内存空间，从而避免了内存泄漏。</p>\n<p><strong>独占指针（unique_ptr）</strong>：独享所有权的智能指针，资源只能被一个指针占有，该指针不能拷贝构造和赋值。但可以进行移动构造和移动赋值构造（调用 move () 函数），即一个 unique_ptr 对象赋值给另一个 unique_ptr 对象，可以通过该方法进行赋值。</p>\n<p><strong>弱指针（weak_ptr）</strong>：指向 shared_ptr 指向的对象，能够解决由 shared_ptr 带来的循环引用问题。</p>\n<p><strong>智能指针的实现原理： 计数原理。</strong></p>\n<h2 id=\"110-智能指针应用举例\"><a class=\"markdownIt-Anchor\" href=\"#110-智能指针应用举例\">#</a> 1.10 智能指针应用举例</h2>\n<p><strong>unique_ptr</strong><br>\nunique_ptr 的使用比较简单，也是用得比较多的智能指针。当我们独占资源的所有权的时候，可以使用 unique_ptr 对资源进行管理 —— 离开 unique_ptr 对象的作用域时，会自动释放资源。这是很基本的 RAII 思想。（<strong>R</strong>esource <strong>A</strong>cquisition <strong>I</strong>s <strong>I</strong>nitialization）是由 c++ 之父 Bjarne Stroustrup 提出的，中文翻译为资源获取即初始化，他说：使用局部对象来管理资源的技术称为资源获取即初始化；这里的资源主要是指操作系统中有限的东西如内存、网络套接字等等，局部对象是指存储在栈的对象，它的生命周期是由操作系统来管理的，无需人工介入。</p>\n<ul>\n<li>\n<p>自动管理内存<br>\n使用裸指针时，要记得释放内存。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 要记得释放内存</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 unique_ptr 自动管理内存。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> uptr <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 离开 uptr 的作用域的时候自动释放内存</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>unique_ptr 是 move-only 的，也是实现将一个 unique_ptr 对象赋值给另一个 unique_ptr 对象的方法</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> uptr <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> uptr1 <span class=\"token operator\">=</span> uptr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 编译错误，std::unique_ptr&lt;T> 是 move-only 的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> uptr2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>uptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>uptr <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>unique_ptr 可以指向一个数组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> uptr <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        uptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> uptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//0 1 4 9 ...81</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>也可以用向量：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">p</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//n = 5, value = 6</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//6</span></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>shared_ptr</strong></p>\n<ul>\n<li>\n<p>shared_ptr 其实就是对资源做引用计数 —— 当引用计数 sptr.use_count () 为 0<br>\n 的时候，自动释放资源。其中， <code>assert(p);</code>  用于判断指针内容是否非空，空指针 nullptr 与什么未指向的野指针过不了 assert</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> sptr <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sptr<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 此时引用计数为 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> sptr1 <span class=\"token operator\">=</span> sptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sptr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> sptr1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sptr<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//sptr 和 sptr1 共享资源，引用计数为 2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sptr<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//sptr1 已经释放</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//use_count 为 0 时自动释放内存</span></pre></td></tr></table></figure></li>\n<li>\n<p>和 unique_ptr 一样，shared_ptr 也可以指向数组和自定义 deleter。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// C++20 才支持 std::make_shared&lt;int []></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// std::shared_ptr&lt;int[]> sptr = std::make_shared&lt;int[]>(100);</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token function\">sptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        sptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> sptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>附：<br>\n一个 shared_ptr 对象的内存开销要比裸指针和无自定义 deleter 的 unique_ptr 对象略大。<br>\n无自定义 deleter 的 unique_ptr 只需要将裸指针用 RAII 的手法封装好就行，无需保存其它信息，所以它的开销和裸指针是一样的。如果有自定义 deleter，还需要保存 deleter 的信息。</p>\n<p>shared_ptr 需要维护的信息有两部分：</p>\n<ul>\n<li>\n<p>指向共享资源的指针。</p>\n</li>\n<li>\n<p>引用计数等共享资源的控制信息 —— 实现上是维护一个指向控制信息的指针。</p>\n</li>\n</ul>\n<p>所以，shared_ptr 对象需要保存两个指针。shared_ptr 的 的 deleter 是保存在控制信息中，所以，是否有自定义 deleter 不影响 shared_ptr 对象的大小。</p>\n<p>当我们创建一个 shared_ptr 时，其实现一般如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">sptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>最好使用make_shared实现：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> p1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"4a8a5987e39d49b2ace73524e49bdf6b.png\" alt=\"img\"></p>\n<p>复制一个 shared_ptr ：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> sptr2 <span class=\"token operator\">=</span> sptr1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"2c2e397fb83245edab1853ea6c9b7028.png\" alt=\"img\"></p>\n<p>为什么控制信息和每个 shared_ptr 对象都需要保存指向共享资源的指针？可不可以去掉 shared_ptr 对象中指向共享资源的指针，以节省内存开销？</p>\n<p>答案是：不能。 因为 shared_ptr 对象中的指针指向的对象不一定和控制块中的指针指向的对象一样。</p>\n<p>来看一个例子。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> juice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Vegetable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> fiber<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Tomato</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vegetable</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> sauce<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// 由于继承的存在，shared_ptr 可能指向基类对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Tomato<span class=\"token operator\">></span> tomato <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Tomato<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Fruit<span class=\"token operator\">></span> fruit <span class=\"token operator\">=</span> tomato<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Vegetable<span class=\"token operator\">></span> vegetable <span class=\"token operator\">=</span> tomato<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"4a8c3bbf5a07429b933d25c1d64fa359.png\" alt=\"img\"></p>\n<p>此外，在使用 shared_ptr 时，会涉及两次内存分配：一次分配共享资源对象；一次分配控制块。C++ 标准库提供了 make_shared 函数来创建一个 shared_ptr 对象，只需要一次内存分配，所以推荐用 make_shared 函数来创建对象。</p>\n<p><strong>weak_ptr</strong></p>\n<p>weak_ptr 要与 shared_ptr 一起使用。 一个 weak_ptr 对象看做是 shared_ptr 对象管理的资源的观察者，它不影响共享资源的生命周期：</p>\n<ul>\n<li>如果需要使用 weak_ptr 正在观察的资源，可以将 weak_ptr 提升为 shared_ptr。</li>\n<li>当 shared_ptr 管理的资源被释放时，weak_ptr 会自动变成 nullptr。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Observe</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> sptr <span class=\"token operator\">=</span> wptr<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"value: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>sptr <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wptr lock fail\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>weak_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">auto</span> sptr <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    wptr <span class=\"token operator\">=</span> sptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Observe</span><span class=\"token punctuation\">(</span>wptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//sptr 指向的资源没被释放，wptr 可以成功提升为 shared_ptr</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">Observe</span><span class=\"token punctuation\">(</span>wptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//sptr 指向的资源已被释放，wptr 无法提升为 shared_ptr</span></pre></td></tr></table></figure><p><img data-src=\"eb6895f7c1454d98915dd3d0bc25607e.png\" alt=\"img\"></p>\n<p>当 shared_ptr 析构并释放共享资源的时候，只要 weak_ptr 对象还存在，控制块就会保留，weak_ptr 可以通过控制块观察到对象是否存活。</p>\n<p><img data-src=\"f2abf0cc6f8241e0bd373f109c2d1eea.png\" alt=\"img\"></p>\n<h2 id=\"111-一个-unique_ptr-怎么赋值给另一个-unique_ptr-对象\"><a class=\"markdownIt-Anchor\" href=\"#111-一个-unique_ptr-怎么赋值给另一个-unique_ptr-对象\">#</a> 1.11 一个 unique_ptr 怎么赋值给另一个 unique_ptr 对象？</h2>\n<p>借助 <strong>std::move()</strong> 可以实现将一个 unique_ptr 对象赋值给另一个 unique_ptr 对象，其目的是实现所有权的转移。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// A 作为一个类 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>A<span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>A<span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"112-使用智能指针会出现什么问题怎么解决\"><a class=\"markdownIt-Anchor\" href=\"#112-使用智能指针会出现什么问题怎么解决\">#</a> 1.12 使用智能指针会出现什么问题？怎么解决？</h2>\n<p>智能指针可能出现的问题：循环引用</p>\n<p>比如定义了两个类 Parent、Child，在两个类中分别定义另一个类的对象的共享指针，由于在程序结束后，两个指针相互指向对方的内存空间，导致内存无法释放。</p>\n<p>循环引用的解决方法： weak_ptr</p>\n<p>循环引用：该被调用的析构函数没有被调用，从而出现了内存泄漏。</p>\n<p>weak_ptr 对被 shared_ptr 管理的对象存在非拥有性（弱）引用，在访问所引用的对象前必须先转化为 shared_ptr；<br>\nweak_ptr 用来打断 shared_ptr 所管理对象的循环引用问题，若这种环被孤立（没有指向环中的外部共享指针），shared_ptr 引用计数无法抵达 0，内存被泄露；令环中的指针之一为弱指针可以避免该情况；<br>\nweak_ptr 用来表达临时所有权的概念，当某个对象只有存在时才需要被访问，而且随时可能被他人删除，可以用 weak_ptr 跟踪该对象；需要获得所有权时将其转化为 shared_ptr，此时如果原来的 shared_ptr 被销毁，则该对象的生命期被延长至这个临时的 shared_ptr 同样被销毁。</p>\n<h2 id=\"113-vs检测内存泄漏定位泄漏代码位置方法\"><a class=\"markdownIt-Anchor\" href=\"#113-vs检测内存泄漏定位泄漏代码位置方法\">#</a> 1.13 VS 检测内存泄漏，定位泄漏代码位置方法</h2>\n<p>检查方法：<br>\n在 main 函数最后面一行，加上一句_CrtDumpMemoryLeaks ()。调试程序，自然关闭程序让其退出（不要定制调试），查看输出：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Detected memory leaks<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Dumping objects <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">453</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x02432CA8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">868</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">404303374</span>       <span class=\"token operator\">></span> <span class=\"token number\">34</span> <span class=\"token number\">30</span> <span class=\"token number\">34</span> <span class=\"token number\">33</span> <span class=\"token number\">30</span> <span class=\"token number\">33</span> <span class=\"token number\">33</span> <span class=\"token number\">37</span> <span class=\"token number\">34</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">447</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x024328B0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">868</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">404303374</span>       <span class=\"token operator\">></span> <span class=\"token number\">34</span> <span class=\"token number\">30</span> <span class=\"token number\">34</span> <span class=\"token number\">33</span> <span class=\"token number\">30</span> <span class=\"token number\">33</span> <span class=\"token number\">33</span> <span class=\"token number\">37</span> <span class=\"token number\">34</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">441</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x024324B8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">868</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">404303374</span>       <span class=\"token operator\">></span> <span class=\"token number\">34</span> <span class=\"token number\">30</span> <span class=\"token number\">34</span> <span class=\"token number\">33</span> <span class=\"token number\">30</span> <span class=\"token number\">33</span> <span class=\"token number\">33</span> <span class=\"token number\">37</span> <span class=\"token number\">34</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">435</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x024320C0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">868</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">404303374</span>       <span class=\"token operator\">></span> <span class=\"token number\">34</span> <span class=\"token number\">30</span> <span class=\"token number\">34</span> <span class=\"token number\">33</span> <span class=\"token number\">30</span> <span class=\"token number\">33</span> <span class=\"token number\">33</span> <span class=\"token number\">37</span> <span class=\"token number\">34</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">429</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x02431CC8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">868</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">404303374</span>       <span class=\"token operator\">></span> <span class=\"token number\">34</span> <span class=\"token number\">30</span> <span class=\"token number\">34</span> <span class=\"token number\">33</span> <span class=\"token number\">30</span> <span class=\"token number\">33</span> <span class=\"token number\">33</span> <span class=\"token number\">37</span> <span class=\"token number\">34</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">212</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x01E1BF30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>`               <span class=\"token operator\">></span> <span class=\"token number\">60</span> B3 E1 <span class=\"token number\">01</span> CD CD CD CD CD CD CD CD CD CD CD CD </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">204</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x01E1B2C8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>                <span class=\"token operator\">></span> C8 B2 E1 <span class=\"token number\">01</span> C8 B2 E1 <span class=\"token number\">01</span> C8 B2 E1 <span class=\"token number\">01</span> CD CD CD CD </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">138</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x01E15680</span><span class=\"token punctuation\">,</span> <span class=\"token number\">332</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>                <span class=\"token operator\">></span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token number\">137</span><span class=\"token punctuation\">&#125;</span> normal block at <span class=\"token number\">0x01E15628</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span> bytes <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> Data<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token function\">V</span>  <span class=\"token punctuation\">(</span><span class=\"token function\">V</span>  <span class=\"token punctuation\">(</span>V      <span class=\"token operator\">></span> <span class=\"token number\">28</span> <span class=\"token number\">56</span> E1 <span class=\"token number\">01</span> <span class=\"token number\">28</span> <span class=\"token number\">56</span> E1 <span class=\"token number\">01</span> <span class=\"token number\">28</span> <span class=\"token number\">56</span> E1 <span class=\"token number\">01</span> CD CD CD CD </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Object dump complete<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>取其中一条详细说明：{453} normal block at 0x02432CA8, 868 bytes long.<br>\n 被 {} 包围的 453 就是我们需要的内存泄漏定位值，868 bytes long 就是说这个地方有 868 比特内存没有释放。<br>\n在 main 函数第一行加上：_CrtSetBreakAlloc (453); 意思就是在申请 453 这块内存的位置中断。然后调试程序，…… 程序中断了。查看调用堆栈<br>\n<img data-src=\"cb907778bec34cf48495f99bf0dda252.png\" alt=\"img\"></p>\n<p>双击我们的代码调用的最后一个函数，这里是 CDbQuery::UpdateDatas ()，就定位到了申请内存的代码：</p>\n<p><img data-src=\"f5ca922027ff4e3e882321fe5b8f2728.png\" alt=\"img\"></p>\n<p>好了，我们总算知道是哪里出问题了，这块内存没有释放啊。改代码，修复好这个。然后继续…………，直到调试输出中没有 normal block ，程序没有内存泄漏了。</p>\n<p>记得加上头文件：#include &lt;crtdbg.h&gt;</p>\n<p>最后要注意一点的，并不是所有 normal block 一定就有内存泄漏，当你的程序中有全局变量的时候，全局变量的释放示在 main 函数退出后，所以在 main 函数最后_CrtDumpMemoryLeaks（）会认为全局申请的内存没有释放，造成内存泄漏的假象。如何规避呢？我通常是把全局变量声明成指针在 main 函数中 new 在 main 函数中 delete，然后再调用_CrtDumpMemoryLeaks（），这样就不会误判了。</p>\n<p>请自行查阅 Linux 检测内存泄漏，定位泄漏代码位置方法</p>\n<h2 id=\"114-深拷贝与浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#114-深拷贝与浅拷贝\">#</a> 1.14 深拷贝与浅拷贝</h2>\n<ul>\n<li>\n<p><strong>c++ 默认的拷贝构造函数是浅拷贝</strong></p>\n<p>浅拷贝就是对象的数据成员之间的简单赋值，如你设计了一个类而没有提供它的复制构造函数，当用该类的一个对象去给另一个对象赋值时所执行的过程就是浅拷贝。当数据成员中没有指针时，浅拷贝是可行的；但当<strong>数据成员中有指针时，如果采用简单的浅拷贝</strong>，则两类中的两个指针将指向同一个地址，当对象快结束时，会调用两次析构函数，而导致指针悬挂现象，所以，此时，必须采用深拷贝。</p>\n</li>\n<li>\n<p>深拷贝与浅拷贝的区别就在于深拷贝会在<strong>堆内存中另外申请空间来储存数据，而不是一个简单的赋值过程</strong>，从而也就解决了指针悬挂的问题。</p>\n</li>\n</ul>\n<h2 id=\"115-虚拟内存\"><a class=\"markdownIt-Anchor\" href=\"#115-虚拟内存\">#</a> 1.15 虚拟内存</h2>\n<ul>\n<li>\n<p><strong>物理内存：</strong></p>\n<p>物理内存实际上是 CPU 中能直接寻址的地址线条数。由于物理内存是有限的，例如 32 位平台下，寻址的大小是 4G，并且是固定的。内存很快就会被分配完，于是没有得到分配资源的进程就只能等待。当一个进程执行完了以后，再将等待的进程装入内存。这种频繁的装入内存的操作是很没效率的。</p>\n</li>\n<li>\n<p><strong>虚拟内存：</strong></p>\n<p>在进程创建的时候，系统都会给每个进程分配 4G 的内存空间，这其实是虚拟内存空间。进程得到的这 4G 虚拟内存，进程自身以为是一段连续的空间，而实际上，通常被分隔成多个物理内存碎片，还有一部分存储在外部磁盘存储器上，需要的时候进行数据交换。<br>\n关于虚拟内存与物理内存的联系，下面这张图可以帮助我们巩固。</p>\n</li>\n</ul>\n<p><img data-src=\"05e4f27d295a43009d864995a3cc5e75.png\" alt=\"img\"></p>\n<p><img data-src=\"dc1766dd314f4861964db2236daa92b2.png\" alt=\"img\"></p>\n<p><strong>虚拟内存机理及优点：</strong></p>\n<ul>\n<li>\n<p><strong>虚拟内存是如何工作的？</strong></p>\n<ul>\n<li>当每个进程创建的时候，内核会为进程分配 4G 的虚拟内存，当进程还没有开始运行时，这只是一个内存布局。实际上并不立即就把虚拟内存对应位置的程序数据和代码（比如.text .data 段）拷贝到物理内存中，只是建立好虚拟内存和磁盘文件之间的映射就好（叫做存储器映射）。这个时候数据和代码还是在磁盘上的。当运行到对应的程序时，进程去寻找页表，发现页表中地址没有存放在物理内存上，而是在磁盘上，于是发生缺页异常，于是将磁盘上的数据拷贝到物理内存中。</li>\n<li>另外在进程运行过程中，要通过 malloc 来动态分配内存时，也只是分配了虚拟内存，即为这块虚拟内存对应的页表项做相应设置，当进程真正访问到此数据时，才引发缺页异常。</li>\n<li>可以认为虚拟空间都被映射到了磁盘空间中（事实上也是按需要映射到磁盘空间上，通过 mmap，mmap 是用来建立虚拟空间和磁盘空间的映射关系的）</li>\n</ul>\n</li>\n<li>\n<p><strong>利用虚拟内存机制的优点 ？</strong></p>\n<ul>\n<li>既然每个进程的内存空间都是一致而且固定的（32 位平台下都是 4G），所以链接器在链接可执行文件时，可以设定内存地址，而不用去管这些数据最终实际内存地址，这交给内核来完成映射关系</li>\n<li>当不同的进程使用同一段代码时，比如库文件的代码，在物理内存中可以只存储一份这样的代码，不同进程只要将自己的虚拟内存映射过去就好了，这样可以节省物理内存</li>\n<li>在程序需要分配连续空间的时候，只需要在虚拟内存分配连续空间，而不需要物理内存时连续的，实际上，往往物理内存都是断断续续的内存碎片。这样就可以有效地利用我们的物理内存</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2语言对比\"><a class=\"markdownIt-Anchor\" href=\"#2语言对比\">#</a> 2. 语言对比</h1>\n<h2 id=\"21-c-11-新特性\"><a class=\"markdownIt-Anchor\" href=\"#21-c-11-新特性\">#</a> 2.1 C++ 11 新特性</h2>\n<ol>\n<li>\n<p><strong>auto 类型推导</strong></p>\n<p>auto 关键字：自动类型推导，编译器会在 编译期间 通过初始值推导出变量的类型，通过 auto 定义的变量必须有初始值。</p>\n</li>\n<li>\n<p><strong>decltype 类型推导</strong></p>\n<p>decltype 关键字：decltype 是 “declare type” 的缩写，译为 “声明类型”。和 auto 的功能一样，都用来在编译时期进行自动类型推导。如果希望从表达式中推断出要定义的变量的类型，但是不想用该表达式的值初始化变量，这时就不能再用 auto。decltype 作用是选择并返回操作数的数据类型。</p>\n<p>区别：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> var <span class=\"token operator\">=</span> val1 <span class=\"token operator\">+</span> val2<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>val1 <span class=\"token operator\">+</span> val2<span class=\"token punctuation\">)</span> var1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>auto 根据 = 右边的初始值 val1 + val2 推导出变量的类型，并将该初始值赋值给变量 var；decltype 根据 val1 + val2 表达式推导出变量的类型，变量的初始值和与表达式的值无关。</li>\n<li>auto 要求变量必须初始化，因为它是根据初始化的值推导出变量的类型，而 decltype 不要求，定义变量的时候可初始化也可以不初始化。</li>\n</ul>\n</li>\n<li>\n<p><strong>lambda 表达式</strong></p>\n<p>lambda 表达式，又被称为 lambda 函数或者 lambda 匿名函数。</p>\n<p>lambda 匿名函数的定义:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>parameter list<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">return</span> type</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   function body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中：</p>\n<ul>\n<li>capture list：捕获列表，指 lambda 所在函数中定义的局部变量的列表，通常为空。</li>\n<li>return type、parameter list、function body：分别表示返回值类型、参数列表、函数体，和普通函数一样。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 对 a 数组中的元素进行升序排序</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> arr<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>范围 for 语句</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>declaration <span class=\"token operator\">:</span> expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    statement</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>参数的含义：</p>\n<ul>\n<li>expression：必须是一个序列，例如用花括号括起来的初始值列表、数组、vector ，string 等，这些类型的共同特点是拥有能返回迭代器的 beign、end 成员。</li>\n<li>declaration：此处定义一个变量，序列中的每一个元素都能转化成该变量的类型，常用 auto 类型说明符。</li>\n</ul>\n</li>\n<li>\n<p>左值和右值，左值引用和右值引用</p>\n<p><strong>左值和右值</strong></p>\n<ul>\n<li>\n<p>** 左值：指表达式结束后依然存在的持久对象，可以取地址，具名变量或对象。** 左值符号 &amp;</p>\n<p>通俗理解：左值是指具有对应的可由用户访问的存储单元，并且能由用户改变其值的量。如一个变量就是一个左值，因为它对应着一个存储单元，并可由编程者通过变量名访问和改变其值。<br>\n左值 (Lvalue) →→ Location<br>\n 表示内存中可以寻址，可以给它赋值 (const 类型的变量例外)</p>\n</li>\n<li>\n<p><strong>右值：表达式结束后就不再存在的临时对象，不可以取地址，没有名字。</strong> 右值符号 &amp;&amp;</p>\n<p>右值 (Rvalue) →→ Read<br>\n 表示可以知道它的值（例如常数）</p>\n</li>\n</ul>\n<p>通俗的讲，左值就是能够出现在赋值符号左面的东西，而右值就是那些可以出现在赋值符号右面的东西， 比如  <code>int a = b + c;</code> ，a 就是一个左值，可以对 a 取地址，而 b+c 就是一个右值，对表达式 b+c 取地址会报错。<br>\n一个典型的例子</p>\n<p><strong>a++</strong> ： 先使用 a 的值，再给 a 加 1，作为<strong>右值</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//a++ 的实现</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>++a</strong> ： 先加再用，作为<strong>左值</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 C++ 中，临时对象不能作为左值，但是可以作为常量引用，const &amp;。</p>\n<p>C++ 11 中的 std::move 可将左值引用转化成右值引用。</p>\n<p>C++11 中右值又由两个概念组成：将亡值和纯右值。</p>\n<p><strong>纯右值和将亡值</strong></p>\n<p>在 C<ins>98 中，右值是纯右值，纯右值指的是临时变量值、不跟对象关联的字面量值。包括非引用的函数返回值、表达式等，比如 2、‘ch’、int func () 等。将亡值是 C</ins>11 新增的、与右值引用相关的表达式。</p>\n<ul>\n<li>纯右值：非引用返回的临时变量 (int func (void))、运算表达式产生的临时变量 (b+c)、原始字面量 (2)、lambda 表达式等。</li>\n<li>将亡值：将要被移动的对象、T&amp;&amp; 函数返回值、std::move 返回值和转换为 T&amp;&amp; 的类型的转换函数的返回值。</li>\n</ul>\n<p>将亡值可以理解为通过 “盗取” 其他变量内存空间的方式获取到的值。在确保其他变量不再被使用、或即将被销毁时，通过 “盗取” 的方式可以避免内存空间的释放和分配，能够延长变量值的生命期。</p>\n<p><strong>右值引用和左值引用</strong></p>\n<ul>\n<li>右值引用：绑定到右值的引用，用 &amp;&amp; 来获得右值引用，右值引用只能绑定到要销毁的对象。是对一个右值进行引用的类型，标记为 T&amp;&amp;。因为右值不具名，是以引用的形式找到它，用引用来表示，右值引用也是引用的引用（我目前是这么想的）。</li>\n<li>左值引用：对一个左值进行引用的类型。常规的引用一般都是左值引用</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> var <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>l_var <span class=\"token operator\">=</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>r_var <span class=\"token operator\">=</span> var<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误：不能将右值引用绑定到左值上</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>r_var2 <span class=\"token operator\">=</span> var <span class=\"token operator\">+</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确：将 r_var2 绑定到求和结果上</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>引用本身不拥有所绑定对象的内存，只是该对象的一个别名，左值引用就是有名变量的别名，右值引用是不具名变量的别名。因此无论左值引用还是右值引用都必须立即进行初始化。</p>\n<p>通过右值引用，这个将亡的右值又 “重获新生”，它的生命周期与右值引用类型变量的生命周期一样，只要这个右值引用类型的变量还活着，那么这个右值临时量就会一直活着，这是一重要特性，可利用这一点会一些性能优化，避免临时对象的拷贝构造和析构。</p>\n<p>左值引用包括常量左值引用和非常量左值引用。非常量左值引用只能接受左值，不能接受右值；常量左值引用是一个 “万能” 的引用类型，可以接受左值（常量左值、非常量左值）、右值。不过常量左值所引用的右值在它的 “余生” 中只能是只读的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 非常量左值引用 绑定到 右值，编译失败</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//b 是非常量左值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>c <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 常量左值引用 绑定到 非常量左值，编译通过</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//d 是常量左值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>e <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 常量左值引用 绑定到 常量左值，编译通过</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>f <span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 常量左值引用 绑定到 右值，编译通过</span></pre></td></tr></table></figure><p>右值引用通常不能绑定到任何的左值，要想绑定一个左值到右值引用，通常需要 std::move () 将左值强制转换为右值。比如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>r1 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 编译失败</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>r2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 编译通过</span></pre></td></tr></table></figure><p>简单总结：</p>\n<ul>\n<li><strong>左值引用，即 &amp; i</strong>, 是一种对象类型的引用；<strong>右值引用，即 &amp;&amp;i</strong>, 是一种对象值的引用；</li>\n<li><strong>move () 函数</strong>可以把左值引用，转换为右值引用；</li>\n<li>左值引用是固定的引用，右值引用是易变的引用，只能引用字面值 (literals) 或临时对象 (temporary object);</li>\n<li>右值引用主要应用在移动构造器 (move constructor) 和移动 - 赋值操作符 (move-assignment operator) 上面；</li>\n</ul>\n<p>代码如下</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span>  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;utility></span>  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>lr <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>rr <span class=\"token operator\">=</span> i<span class=\"token operator\">*</span><span class=\"token number\">42</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>lr1 <span class=\"token operator\">=</span> i<span class=\"token operator\">*</span><span class=\"token number\">42</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>rr1 <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>rr2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>lr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"lr = \"</span> <span class=\"token operator\">&lt;&lt;</span> lr <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"rr = \"</span> <span class=\"token operator\">&lt;&lt;</span> rr <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"lr1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> lr1  <span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"rr1  = \"</span> <span class=\"token operator\">&lt;&lt;</span> rr1  <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"rr2  = \"</span> <span class=\"token operator\">&lt;&lt;</span> rr2  <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>标准库 move () 函数</p>\n<p>move () 函数：通过该函数可获得绑定到左值上的右值引用，该函数包括在 utility 头文件中。该知识点会在后续的章节中做详细的说明。</p>\n</li>\n<li>\n<p>智能指针</p>\n</li>\n<li>\n<p>delete 函数和 default 函数</p>\n<ul>\n<li>delete 函数：= delete 表示该函数不能被调用。</li>\n<li>default 函数：= default 表示编译器生成默认的函数，例如：生成默认的构造函数。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示使用默认的构造函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 表示使用默认的析构函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示类的对象禁止拷贝构造</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tA <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示类的对象禁止拷贝赋值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tA ex1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tA ex2 <span class=\"token operator\">=</span> ex1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: use of deleted function 'A::A(const A&amp;)'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tA ex3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tex3 <span class=\"token operator\">=</span> ex1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: use of deleted function 'A&amp; A::operator=(const A&amp;)'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"22-c-和-c-的区别\"><a class=\"markdownIt-Anchor\" href=\"#22-c-和-c-的区别\">#</a> 2.2 C 和 C++ 的区别</h2>\n<p>首先说一下面向对象和面向过程：</p>\n<ul>\n<li><strong>面向过程的思路</strong>：面向过程编程就是分析出解决问题的步骤，然后把这些步骤一步一步的实现，使用的时候一个一个的依次调用就可以了。</li>\n<li><strong>面向对象的思路</strong>：面向对象编程就是把问题分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描述某个事物在整个解决问题的步骤中的行为。</li>\n<li>举个例子：（玩五子棋）<br>\n（1）用面向过程的思想来考虑就是：开始游戏，白子先走，绘制画面，判断输赢，轮到黑子，绘制画面，判断输赢，重复前面的过程，输出最终结果。<br>\n（2）用面向对象的思想来考虑就是：黑白双方（两者的行为是一样的）、棋盘系统（负责绘制画面）、规定系统（规定输赢、犯规等）、输出系统（输出赢家）。<br>\n<strong>面向对象就是高度实物抽象化（功能划分）、面向过程就是自顶向下的编程（步骤划分）</strong></li>\n</ul>\n<p><strong>区别和联系：</strong></p>\n<ul>\n<li>C 和 C<ins> 一个典型的区别就在动态内存管理上了，C 语言通过 malloc 和 free 来进行堆内存的分配和释放，而 C</ins> 是通过 new 和 delete 来管理堆内存的；</li>\n<li>强制类型转换上也不一样，C 的强制类型转换使用 () 小括号里面加类型进行类型强转的，而 C++ 有四种自己的类型强转方式，分别是 const_cast，static_cast，reinterpret_cast 和 dynamic_cast；</li>\n<li>C 和 C<ins> 的输入输出方式也不一样，printf/scanf，和 C</ins> 的 cout/cin 的对别，前面一组是 C 的库函数，后面是 ostream 和 istream 类型的对象。</li>\n<li>C++ 还支持 namespace 名字空间，可以让用户自己定义新的名字空间作用域出来，避免全局的名字冲突问题。</li>\n<li>应用领域：C 语言主要用于嵌入式领域，驱动开发等与硬件直接打交道的领域，C++ 可以用于应用层开发，用户界面开发等与操作系统打交道的领域。</li>\n<li>C++ 既继承了 C 强大的底层操作特性，又被赋予了面向对象机制。它特性繁多，面向对象语言的多继承，对值传递与引用传递的区分以及 const 关键字，等等。</li>\n<li>C++ 对 C 的 “增强”，表现在以下几个方面：类型检查更为严格。增加了面向对象的机制、泛型编程的机制（Template）、异常处理、运算符重载、标准模板库（STL）、命名空间（避免全局命名冲突）。</li>\n</ul>\n<p><strong>面向过程的语言：</strong></p>\n<p><strong>优点</strong>：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源；比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发，性能是最重要的因素。<br>\n<strong>缺点</strong>：没有面向对象易维护、易复用、易扩展</p>\n<p><strong>面向对象语言：</strong></p>\n<p><strong>优点</strong>：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护<br>\n<strong>缺点</strong>：性能比面向过程低</p>\n<h2 id=\"23-python-和-c-的区别\"><a class=\"markdownIt-Anchor\" href=\"#23-python-和-c-的区别\">#</a> 2.3 Python 和 C++ 的区别</h2>\n<ul>\n<li>语言自身：Python 为脚本语言，解释执行，不需要经过编译；C++ 是一种需要编译后才能运行的语言，在特定的机器上编译后运行。</li>\n<li>运行效率：C++ 运行效率高，安全稳定。原因：Python 代码和 C++ 最终都会变成 CPU 指令来跑，但一般情况下，比如反转和合并两个字符串，Python 最终转换出来的 CPU 指令会比 C++ 多很多。首先，Python 中涉及的内容比 C++ 多，经过了更多层，Python 中甚至连数字都是 object ；其次，Python 是解释执行的，和物理机 CPU 之间多了解释器这层，而 C++ 是编译执行的，直接就是机器码，编译的时候编译器又可以进行一些优化。</li>\n<li>开发效率：Python 开发效率高。原因：Python 一两句代码就能实现的功能，C++ 往往需要更多的代码才能实现。</li>\n<li>书写格式和语法不同：Python 的语法格式不同于其 C++ 定义声明才能使用，而且极其灵活，完全面向更上层的开发者。</li>\n</ul>\n<h1 id=\"3-面向对象\"><a class=\"markdownIt-Anchor\" href=\"#3-面向对象\">#</a> 3. 面向对象</h1>\n<h2 id=\"31-什么是面向对象面向对象的三大特性\"><a class=\"markdownIt-Anchor\" href=\"#31-什么是面向对象面向对象的三大特性\">#</a> 3.1 什么是面向对象？面向对象的三大特性</h2>\n<p><strong>面向对象：对象是指具体的某一个事物，这些事物的抽象就是类，类中包含数据（成员变量）和动作（成员方法）。</strong></p>\n<p>面向对象的三大特性：</p>\n<ul>\n<li>封装：将具体的实现过程和数据封装成一个函数，只能通过接口进行访问，降低耦合性。</li>\n<li>继承：子类继承父类的特征和行为，子类有父类的非 private 方法或成员变量，子类可以对父类的方法进行重写，增强了类之间的耦合性，但是当父类中的成员变量、成员函数或者类本身被 final 关键字修饰时，修饰的类不能继承，修饰的成员不能重写或修改。</li>\n<li>多态：多态就是不同继承类的对象，对同一消息做出不同的响应，基类的指针指向或绑定到派生类的对象，使得基类指针呈现不同的表现方式。</li>\n</ul>\n<h2 id=\"32-重载-重写-隐藏的区别\"><a class=\"markdownIt-Anchor\" href=\"#32-重载-重写-隐藏的区别\">#</a> 3.2 重载、重写、隐藏的区别</h2>\n<p><strong>重载</strong>：是指同一可访问区内被声明几个具有不同参数列（参数的类型、个数、顺序）的同名函数，根据参数列表确定调用哪个函数，重载不关心函数返回类型。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 重载 参数类型不同（相对于上一个函数）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tmp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重载 参数个数不同（相对于上一个函数）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> tmp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重载 参数顺序不同（相对于上一个函数）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \t<span class=\"token keyword\">int</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">//error: 'int A::fun (int)' cannot be overloaded 错误：注意重载不关心函数返回类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>隐藏 (重定义)</strong>：是指派生类的函数屏蔽了与其同名的基类函数，主要只要同名函数，不管参数列表是否相同，基类函数都会被隐藏。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tmp1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::fun(int tmp, float tmp1)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derive</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::fun(int tmp)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 隐藏基类中的同名函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Derive ex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    ex<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// Derive::fun(int tmp)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    ex<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: candidate expects 1 argument, 2 provided</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>说明：上述代码中 ex.fun (1, 0.01); 出现错误，说明派生类中将基类的同名函数隐藏了。若是想调用基类中的同名函数，可以加上类型名指明 ex.Base::fun (1, 0.01);，这样就可以调用基类中的同名函数。</p>\n<p><strong>重写 (覆盖)</strong>：是指派生类中存在重新定义的函数。函数名、参数列表、返回值类型都必须同基类中被重写的函数一致，只有函数体不同。派生类调用时会调用派生类的重写函数，不会调用被重写函数。重写的基类中被重写的函数必须有 virtual 修饰。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::fun(int tmp) : \"</span> <span class=\"token operator\">&lt;&lt;</span> tmp <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derived::fun(int tmp) : \"</span> <span class=\"token operator\">&lt;&lt;</span> tmp <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 重写基类中的 fun 函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    Base <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p<span class=\"token operator\">-></span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Derived::fun(int) : 3</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>重写和重载的区别：</strong></p>\n<ul>\n<li>范围区别：对于类中函数的重载或者重写而言，重载发生在同一个类的内部，重写发生在不同的类之间（子类和父类之间）。</li>\n<li>参数区别：重载的函数需要与原函数有相同的函数名、不同的参数列表，不关注函数的返回值类型；重写的函数的函数名、参数列表和返回值类型都需要和原函数相同，父类中被重写的函数需要有 virtual 修饰。</li>\n<li>virtual 关键字：重写的函数基类中必须有 virtual 关键字的修饰，重载的函数可以有 virtual 关键字的修饰也可以没有。</li>\n</ul>\n<p><strong>隐藏和重写，重载的区别：</strong></p>\n<ul>\n<li>范围区别：隐藏与重载范围不同，隐藏发生在不同类中。</li>\n<li>参数区别：隐藏函数和被隐藏函数参数列表可以相同，也可以不同，但函数名一定相同；当参数不同时，无论基类中的函数是否被 virtual 修饰，基类函数都是被隐藏，而不是重写。</li>\n</ul>\n<h2 id=\"33-如何理解-c-是面向对象编程\"><a class=\"markdownIt-Anchor\" href=\"#33-如何理解-c-是面向对象编程\">#</a> 3.3 如何理解 C++ 是面向对象编程</h2>\n<p>说明：该问题最好结合自己的项目经历进行展开解释，或举一些恰当的例子，同时对比下面向过程编程。</p>\n<ul>\n<li><strong>面向过程编程</strong>：一种以执行程序操作的过程或函数为中心编写软件的方法。程序的数据通常存储在变量中，与这些过程是分开的。所以必须将变量传递给需要使用它们的函数。缺点：随着程序变得越来越复杂，程序数据与运行代码的分离可能会导致问题。例如，程序的规范经常会发生变化，从而需要更改数据的格式或数据结构的设计。当数据结构发生变化时，对数据进行操作的代码也必须更改为接受新的格式。查找需要更改的所有代码会为程序员带来额外的工作，并增加了使代码出现错误的机会。</li>\n<li><strong>面向对象编程（Object-Oriented Programming, OOP）</strong>：以创建和使用对象为中心。一个对象（Object）就是一个软件实体，它将数据和程序在一个单元中组合起来。对象的数据项，也称为其属性，存储在成员变量中。对象执行的过程被称为其成员函数。将对象的数据和过程绑定在一起则被称为封装。</li>\n</ul>\n<p>面向对象编程进一步说明：</p>\n<p>面向对象编程将数据成员和成员函数封装到一个类中，并声明数据成员和成员函数的访问级别（public、private、protected），以便控制类对象对数据成员和函数的访问，对数据成员起到一定的保护作用。而且在类的对象调用成员函数时，只需知道成员函数的名、参数列表以及返回值类型即可，无需了解其函数的实现原理。当类内部的数据成员或者成员函数发生改变时，不影响类外部的代码。</p>\n<h2 id=\"34-什么是多态多态如何实现\"><a class=\"markdownIt-Anchor\" href=\"#34-什么是多态多态如何实现\">#</a> 3.4 什么是多态？多态如何实现？</h2>\n<p>** 多态：多态就是不同继承类的对象，对同一消息做出不同的响应，基类的指针指向或绑定到派生类的对象，使得基类指针呈现不同的表现方式。** 在基类的函数前加上 virtual 关键字，在派生类中重写该函数，运行时将会根据对象的实际类型来调用相应的函数。如果对象类型是派生类，就调用派生类的函数；如果对象类型是基类，就调用基类的函数。</p>\n<p><strong>实现方法：<strong>多态是通过</strong>虚函数</strong>实现的，虚函数的地址保存在虚函数表中，虚函数表的地址保存在含有虚函数的类的实例对象的内存空间中。</p>\n<p><strong>实现过程：</strong></p>\n<ul>\n<li>在类中用 virtual 关键字声明的函数叫做虚函数；</li>\n<li>存在虚函数的类都有一个虚函数表，当创建一个该类的对象时，该对象有一个指向虚函数表的虚表指针（虚函数表和类对应的，虚表指针是和对象对应）；</li>\n<li>当基类指针指向派生类对象，基类指针调用虚函数时，基类指针指向派生类的虚表指针，由于该虚表指针指向派生类虚函数表，通过遍历虚表，寻找相应的虚函数。</li>\n</ul>\n<p><strong>静态多态与动态多态：</strong></p>\n<ul>\n<li><strong>静态多态</strong>：也称为<strong>编译期间的多态</strong>，编译器在编译期间完成的，编译器根据函数实参的类型 (可能会进行隐式类型转换)，可推断出要调用那个函数，如果有对应的函数就调用该函数，否则出现编译错误。</li>\n<li><strong>动态多态（动态绑定）</strong>：即<strong>运行时的多态</strong>，在程序执行期间 (非编译期) 判断所引用对象的实际类型，根据其实际类型调用相应的方法。：\n<ul>\n<li>基类中必须包含虚函数，并且派生类中一定要对基类中的虚函数进行重写。</li>\n<li>通过基类对象的指针或者引用调用虚函数。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::fun()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::fun1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::fun2()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derive</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::fun()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">D_fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::D_fun1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">D_fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::D_fun2()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tBase <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Derive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tp<span class=\"token operator\">-></span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Derive::fun () 调用派生类中的虚函数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>简单解释：当基类的指针指向派生类的对象时，通过派生类的对象的虚表指针找到虚函数表（派生类的对象虚函数表），进而找到相应的虚函数 Derive::f () 进行调用。</p>\n<h1 id=\"4类相关\"><a class=\"markdownIt-Anchor\" href=\"#4类相关\">#</a> 4. 类相关</h1>\n<h2 id=\"41-什么是虚函数什么是纯虚函数\"><a class=\"markdownIt-Anchor\" href=\"#41-什么是虚函数什么是纯虚函数\">#</a> 4.1 什么是虚函数？什么是纯虚函数？</h2>\n<p>** 虚函数：** 被 virtual 关键字修饰的成员函数，就是虚函数。</p>\n<p><strong>纯虚函数：</strong></p>\n<ul>\n<li>纯虚函数在类中声明时，加上 =0；</li>\n<li>含有纯虚函数的类称为抽象类（只要含有纯虚函数这个类就是抽象类），类中只有接口，没有具体的实现方法；</li>\n<li>继承纯虚函数的派生类，如果没有完全实现基类纯虚函数，依然是抽象类，不能实例化对象。</li>\n</ul>\n<p><strong>说明：</strong></p>\n<ul>\n<li>抽象类对象不能作为函数的参数，不能创建对象，不能作为函数返回类型；</li>\n<li>可以声明抽象类指针，可以声明抽象类的引用；</li>\n<li>子类必须继承父类的纯虚函数，并全部实现后，才能创建子类的对象。</li>\n</ul>\n<h2 id=\"42-虚函数和纯虚函数的区别\"><a class=\"markdownIt-Anchor\" href=\"#42-虚函数和纯虚函数的区别\">#</a> 4.2 虚函数和纯虚函数的区别？</h2>\n<ul>\n<li>虚函数和纯虚函数可以出现在同一个类中，该类称为抽象基类。（含有纯虚函数的类称为抽象基类）</li>\n<li>使用方式不同：虚函数可以直接使用，纯虚函数必须在派生类中实现后才能使用；</li>\n<li>定义形式不同：虚函数在定义时在普通函数的基础上加上 virtual 关键字，纯虚函数定义时除了加上 virtual 关键字还需要加上 =0;</li>\n<li>虚函数必须实现，否则编译器会报错；</li>\n<li>对于实现纯虚函数的派生类，该纯虚函数在派生类中被称为虚函数，虚函数和纯虚函数都可以在派生类中重写；</li>\n<li>析构函数最好定义为虚函数，特别是对于含有继承关系的类；析构函数可以定义为纯虚函数，此时，其所在的类为抽象基类，不能创建实例化对象。</li>\n</ul>\n<h2 id=\"43-虚函数的实现机制\"><a class=\"markdownIt-Anchor\" href=\"#43-虚函数的实现机制\">#</a> 4.3 虚函数的实现机制</h2>\n<p>** 实现机制：** 虚函数通过虚函数表来实现。虚函数的地址保存在虚函数表中，在类的对象所在的内存空间中，保存了指向虚函数表的指针（称为 “虚表指针”），通过虚表指针可以找到类对应的虚函数表。虚函数表解决了基类和派生类的继承问题和类中成员函数的覆盖问题，当用基类的指针来操作一个派生类的时候，这张虚函数表就指明了实际应该调用的函数</p>\n<p>虚函数表相关知识点：</p>\n<ul>\n<li>虚函数表存放的内容：类的虚函数的地址。</li>\n<li>虚函数表建立的时间：编译阶段，即程序的编译过程中会将虚函数的地址放在虚函数表中。</li>\n<li>虚表指针保存的位置：虚表指针存放在对象的内存空间中最前面的位置，这是为了保证正确取到虚函数的偏移量。</li>\n</ul>\n<p>注：虚函数表和类绑定，虚表指针和对象绑定。即类的不同的对象的虚函数表是一样的，但是每个对象都有自己的虚表指针，来指向类的虚函数表。</p>\n<p>实例：<br>\n无虚函数覆盖的情况：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">B_fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::B_fun1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">B_fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::B_fun2()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">B_fun3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::B_fun3()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derive</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">D_fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::D_fun1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">D_fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::D_fun2()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">D_fun3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::D_fun3()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Base <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Derive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    p<span class=\"token operator\">-></span><span class=\"token function\">B_fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Base::B_fun1()</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主函数中基类的指针 p 指向了派生类的对象，当调用函数 B_fun1 () 时，通过派生类的虚函数表找到该函数的地址，从而完成调用。</p>\n<h2 id=\"44-单继承和多继承的虚函数表结构\"><a class=\"markdownIt-Anchor\" href=\"#44-单继承和多继承的虚函数表结构\">#</a> 4.4 单继承和多继承的虚函数表结构</h2>\n<p>编译器处理虚函数表：</p>\n<ul>\n<li>编译器将虚函数表的指针放在类的实例对象的内存空间中，该对象调用该类的虚函数时，通过指针找到虚函数表，根据虚函数表中存放的虚函数的地址找到对应的虚函数。</li>\n<li>如果派生类没有重新定义基类的虚函数 A，则派生类的虚函数表中保存的是基类的虚函数 A 的地址，也就是说基类和派生类的虚函数 A 的地址是一样的。</li>\n<li>如果派生类重写了基类的某个虚函数 B，则派生的虚函数表中保存的是重写后的虚函数 B 的地址，也就是说虚函数 B 有两个版本，分别存放在基类和派生类的虚函数表中。</li>\n<li>如果派生类重新定义了新的虚函数 C，派生类的虚函数表保存新的虚函数 C 的地址。</li>\n</ul>\n<h2 id=\"45-为什么构造函数不能为虚函数\"><a class=\"markdownIt-Anchor\" href=\"#45-为什么构造函数不能为虚函数\">#</a> 4.5 为什么构造函数不能为虚函数？</h2>\n<p>虚函数的调用需要虚函数表指针，而该指针存放在对象的内存空间中；若构造函数声明为虚函数，那么由于对象还未创建，还没有内存空间，更没有虚函数表地址用来调用虚函数 —— 构造函数了。</p>\n<h2 id=\"46-为什么析构函数可以为虚函数如果不设为虚函数可能会存在什么问题\"><a class=\"markdownIt-Anchor\" href=\"#46-为什么析构函数可以为虚函数如果不设为虚函数可能会存在什么问题\">#</a> 4.6 为什么析构函数可以为虚函数，如果不设为虚函数可能会存在什么问题？</h2>\n<p><strong>防止内存泄露</strong>，delete p（基类）的时候，它很机智的先执行了派生类的析构函数，然后执行了基类的析构函数。</p>\n<p>如果基类的析构函数不是虚函数，在 delete p（基类）时，调用析构函数时，只会看指针的数据类型，而不会去看赋值的对象，这样就会造成内存泄露。</p>\n<p>举例说明：<br>\n子类 B 继承自基类 A； <code>A *p = new B; delete p;</code> <br>\n1） 此时，如果类 A 的析构函数不是虚函数，那么 <code>delete p；</code> 将会仅仅调用 A 的析构函数，只释放了 B 对象中的 A 部分，而派生出的新的部分未释放掉。<br>\n2） 如果类 A 的析构函数是虚函数， <code>delete p;</code>  将会先调用 B 的析构函数，再调用 A 的析构函数，释放 B 对象的所有空间。<br>\n补充：  <code>B *p = new B; delete p;</code>  时也是先调用 B 的析构函数，再调用 A 的析构函数。</p>\n<h2 id=\"47-不能声明为虚函数的有哪些\"><a class=\"markdownIt-Anchor\" href=\"#47-不能声明为虚函数的有哪些\">#</a> 4.7 . 不能声明为虚函数的有哪些</h2>\n<ol>\n<li><strong>静态成员函数；</strong></li>\n<li><strong>类外的普通函数；</strong></li>\n<li><strong>构造函数；</strong></li>\n<li><strong>友元函数</strong></li>\n</ol>\n<p>虚函数是为了实现多态特性的。虚函数的调用只有在程序运行的时候才能知道到底调用的是哪个函数，其是有有如下几点需要注意：</p>\n<ul>\n<li>类的<strong>构造函数</strong>不能是虚函数<br>\n构造函数是为了构造对象的，所以在调用构造函数时候必然知道是哪个对象调用了构造函数，所以构造函数不能为虚函数。</li>\n<li>类的<strong>静态成员函数</strong>不能是虚函数<br>\n类的静态成员函数是该类共用的，与该类的对象无关，静态函数里没有 this 指针，所以不能为虚函数。</li>\n<li><strong>内联函数</strong><br>\n内联函数的目的是为了减少函数调用时间。它是把内联函数的函数体在编译器预处理的时候替换到函数调用处，这样代码运行到这里时候就不需要花时间去调用函数。inline 是在编译器将函数类容替换到函数调用处，是静态编译的。而虚函数是动态调用的，在编译器并不知道需要调用的是父类还是子类的虚函数，所以不能够 inline 声明展开，所以编译器会忽略。</li>\n<li><strong>友元函数</strong><br>\n友元函数与该类无关，没有 this 指针，所以不能为虚函数。</li>\n</ul>\n<h1 id=\"5-关键字库函数\"><a class=\"markdownIt-Anchor\" href=\"#5-关键字库函数\">#</a> 5. 关键字库函数</h1>\n<h2 id=\"51-sizeof-和-strlen-的区别\"><a class=\"markdownIt-Anchor\" href=\"#51-sizeof-和-strlen-的区别\">#</a> 5.1 sizeof 和 strlen 的区别</h2>\n<ul>\n<li>\n<p><strong>strlen 是头文件中的函数，sizeof 是 C++ 中的运算符。</strong></p>\n</li>\n<li>\n<p><strong>strlen 测量的是字符串的实际长度（其源代码如下），以 \\0 结束。而 sizeof 测量的是字符数组的分配大小。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>strlen 源代码<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>size_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    size_t length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">++</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>若字符数组 arr 作为函数的形参，sizeof (arr) 中 arr 被当作字符指针来处理，strlen (arr) 中 arr<br>\n 依然是字符数组，从下述程序的运行结果中就可以看出。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">size_of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// warning: 'sizeof' on array function parameter 'arr' will return size of 'char*' .</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">size_of</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>输出结果：</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>8</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>5</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>*/</span></pre></td></tr></table></figure></li>\n<li>\n<p>strlen 本身是库函数，因此在程序运行过程中，计算长度；而 sizeof 在编译时，计算长度；</p>\n</li>\n<li>\n<p>sizeof 的参数可以是类型，也可以是变量；strlen 的参数必须是 char* 类型的变量。</p>\n</li>\n</ul>\n<h2 id=\"52-lambda-表达式匿名函数的具体应用和使用场景\"><a class=\"markdownIt-Anchor\" href=\"#52-lambda-表达式匿名函数的具体应用和使用场景\">#</a> 5.2 lambda 表达式（匿名函数）的具体应用和使用场景</h2>\n<p>lambda 表达式的定义形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>parameter list<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> reurn type</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   function body</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中：</p>\n<ul>\n<li>capture list：捕获列表，指 lambda 表达式所在函数中定义的局部变量的列表，通常为空，但如果函数体中用到了 lambda 表达式所在函数的局部变量，必须捕获该变量，即将此变量写在捕获列表中。捕获方式分为：引用捕获方式 [&amp;]、值捕获方式 [=]。</li>\n<li>return type、parameter list、function body：分别表示返回值类型、参数列表、函数体，和普通函数一样。</li>\n</ul>\n<p>常见使用场景：排序算法</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> testdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    testdata<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>testdata<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> data <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 排序算法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>testdata<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> testdata<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 升序</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 使用 lambda 表达式</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>testdata<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> testdata<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"53-explicit-的作用如何避免编译器进行隐式类型转换\"><a class=\"markdownIt-Anchor\" href=\"#53-explicit-的作用如何避免编译器进行隐式类型转换\">#</a> 5.3 explicit 的作用（如何避免编译器进行隐式类型转换）</h2>\n<p>作用：用来声明类构造函数是显示调用的，而非隐式调用，可以阻止调用构造函数时进行隐式转换。只可用于修饰单参构造函数，因为无参构造函数和多参构造函数本身就是显示调用的，再加上 explicit 关键字也没有什么意义。</p>\n<p>隐式转换：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        var <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    A ex <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发生了隐式转换</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述代码中， <code>A ex = 10;</code>  在编译时，进行了隐式转换，将 10 转换成 A 类型的对象，然后将该对象赋值给 ex，等同于如下操作：</p>\n<p>为了避免隐式转换，可用 explicit 关键字进行声明：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        var <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> var <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    A <span class=\"token function\">ex</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    A ex1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: conversion from 'int' to non-scalar type 'A' requested</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"54-c-和-c-static-的区别\"><a class=\"markdownIt-Anchor\" href=\"#54-c-和-c-static-的区别\">#</a> 5.4 C 和 C++ static 的区别</h2>\n<ul>\n<li>在 C 语言中，使用 static 可以定义局部静态变量、外部静态变量、静态函数</li>\n<li>在 C++ 中，使用 static 可以定义局部静态变量、外部静态变量、静态函数、静态成员变量和静态成员函数。因为 C++ 中有类的概念，静态成员变量、静态成员函数都是与类有关的概念。</li>\n</ul>\n<h2 id=\"54-static-的作用\"><a class=\"markdownIt-Anchor\" href=\"#54-static-的作用\">#</a> 5.4 static 的作用</h2>\n<p>作用：static 定义静态变量，静态函数。</p>\n<ul>\n<li>保持变量内容持久：static 作用于局部变量，改变了局部变量的生存周期，使得该变量存在于定义后直到程序运行结束的这段时间。</li>\n<li>隐藏：static 作用于全局变量和函数，改变了全局变量和函数的作用域，使得全局变量和函数<strong>只能在定义它的文件中使用</strong>，在源文件中不具有全局可见性。（注：普通全局变量和函数具有全局可见性，即其他的源文件也可以使用。）</li>\n<li>static 作用于类的成员变量和类的成员函数，使得类变量或者类成员函数和类有关，也就是说<strong>可以不定义类的对象就可以通过类访问这些静态成员</strong>。注意：类的静态成员函数中只能访问静态成员变量或者静态成员函数，不能将静态成员函数定义成虚函数。</li>\n</ul>\n<h2 id=\"55-static-在类中使用的注意事项定义-初始化和使用\"><a class=\"markdownIt-Anchor\" href=\"#55-static-在类中使用的注意事项定义-初始化和使用\">#</a> 5.5 static 在类中使用的注意事项（定义、初始化和使用）</h2>\n<p>static 静态成员变量：</p>\n<ul>\n<li>\n<p>静态成员变量是在类内进行声明，在类外进行定义和初始化，在类外进行定义和初始化的时候不要出现 static 关键字和 private、public、protected 访问规则。</p>\n</li>\n<li>\n<p>静态成员变量相当于类域中的全局变量，被类的所有对象所共享，包括派生类的对象。</p>\n</li>\n<li>\n<p>静态成员变量可以作为成员函数的参数，而普通成员变量不可以。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> s_var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> s_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，静态成员变量可以作为成员函数的参数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//  error: invalid use of non-static data member 'A::var'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>静态数据成员的类型可以是所属类的类型，而普通数据成员的类型只能是该类类型的指针或引用。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">static</span> A s_var<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，静态数据成员</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    A var<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// error: field 'var' has incomplete type 'A'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    A <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 正确，指针</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    A <span class=\"token operator\">&amp;</span>var1<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 正确，引用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>static 静态成员函数：</p>\n<ul>\n<li>静态成员函数不能调用非静态成员变量或者非静态成员函数，因为静态成员函数没有 this 指针。静态成员函数做为类作用域的全局函数。</li>\n<li>静态成员函数不能声明成虚函数（virtual）、const 函数和 volatile 函数。</li>\n</ul>\n<h2 id=\"57-static-全局变量和普通全局变量的异同\"><a class=\"markdownIt-Anchor\" href=\"#57-static-全局变量和普通全局变量的异同\">#</a> 5.7 static 全局变量和普通全局变量的异同</h2>\n<p>相同点：</p>\n<ul>\n<li>存储方式：普通全局变量和 static 全局变量都是静态存储方式。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>作用域：普通全局变量的作用域是整个源程序，当一个源程序由多个源文件组成时，普通全局变量在各个源文件中都是有效的；静态全局变量则限制了其作用域，即只在定义该变量的源文件内有效，在同一源程序的其它源文件中不能使用它。由于静态全局变量的作用域限于一个源文件内，只能为该源文件内的函数公用，因此可以避免在其他源文件中引起错误。</li>\n<li>初始化：静态全局变量只初始化一次，防止在其他文件中使用。</li>\n</ul>\n<h2 id=\"58-const-作用及用法\"><a class=\"markdownIt-Anchor\" href=\"#58-const-作用及用法\">#</a> 5.8 const 作用及用法</h2>\n<p>作用：</p>\n<ul>\n<li>const 修饰成员变量，定义成 const 常量，相较于宏常量，可进行类型检查，节省内存空间，提高了效率。</li>\n<li>const 修饰函数参数，使得传递过来的函数参数的值不能改变。</li>\n<li>const 修饰成员函数，使得成员函数不能修改任何类型的成员变量（mutable 修饰的变量除外），也不能调用非 const 成员函数，因为非 const 成员函数可能会修改成员变量。</li>\n</ul>\n<p>在类中的用法：</p>\n<p>const 成员变量：</p>\n<ul>\n<li>const 成员变量只能在类内声明、定义，在构造函数初始化列表中初始化。</li>\n<li>const 成员变量只在某个对象的生存周期内是常量，对于整个类而言却是可变的，因为类可以创建多个对象，不同类的 const 成员变量的值是不同的。因此不能在类的声明中初始化 const 成员变量，类的对象还没有创建，编译器不知道他的值。</li>\n</ul>\n<p>const 成员函数：</p>\n<ul>\n<li>不能修改成员变量的值，除非有 mutable 修饰；只能访问成员变量。</li>\n<li>不能调用非常量成员函数，以防修改成员变量的值。</li>\n</ul>\n<h2 id=\"59-define-和-const-的区别\"><a class=\"markdownIt-Anchor\" href=\"#59-define-和-const-的区别\">#</a> 5.9 define 和 const 的区别</h2>\n<p>区别：</p>\n<ul>\n<li>编译阶段：define 是在编译预处理阶段进行替换，const 是在编译阶段确定其值。</li>\n<li>安全性：define 定义的宏常量没有数据类型，只是进行简单的替换，不会进行类型安全的检查；const 定义的常量是有类型的，是要进行判断的，可以避免一些低级的错误。</li>\n<li>内存占用：define 定义的宏常量，在程序中使用多少次就会进行多少次替换，内存中有多个备份，占用的是代码段的空间；const 定义的常量占用静态存储区的空间，程序运行过程中只有一份。</li>\n<li>调试：define 定义的宏常量不能调试，因为在预编译阶段就已经进行替换了；cons 定义的常量可以进行调试。</li>\n</ul>\n<p>const 的优点：</p>\n<ul>\n<li>有数据类型，在定义式可进行安全性检查。<br>\n可调式。</li>\n<li>占用较少的空间。</li>\n</ul>\n<h2 id=\"510-define-和-typedef-的区别\"><a class=\"markdownIt-Anchor\" href=\"#510-define-和-typedef-的区别\">#</a> 5.10 define 和 typedef 的区别</h2>\n<ul>\n<li>原理：#define 作为预处理指令，在编译预处理时进行替换操作，不作正确性检查，只有在编译已被展开的源程序时才会发现可能的错误并报错。typedef 是关键字，在编译时处理，有类型检查功能，用来给一个已经存在的类型一个别名，但不能在一个函数定义里面使用 typedef 。</li>\n<li>功能：typedef 用来定义类型的别名，方便使用。#define 不仅可以为类型取别名，还可以定义常量、变量、编译开关等。</li>\n<li>作用域：#define 没有作用域的限制，只要是之前预定义过的宏，在以后的程序中都可以使用，而 typedef 有自己的作用域。</li>\n<li>指针的操作：typedef 和 #define 在处理指针时不完全一样</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INTPTR1</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> INTPTR2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    INTPTR1 p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// p1: int *; p2: int</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    INTPTR2 p3<span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// p3: int *; p4: int *</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> var <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> INTPTR1 p5 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>var<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相当于 const int * p5; 常量指针，即不可以通过 p5 去修改 p5 指向的内容，但是 p5 可以指向其他内容。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">const</span> INTPTR2 p6 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>var<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相当于 int * const p6; 指针常量，不可使 p6 再指向其他内容。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://adventure-yx.github.io/2023/02/24/C++Study/",
            "url": "https://adventure-yx.github.io/2023/02/24/C++Study/",
            "title": "C++ Study",
            "date_published": "2023-02-24T15:59:16.000Z",
            "content_html": "<h1 id=\"welcome-to-c\"><a class=\"markdownIt-Anchor\" href=\"#welcome-to-c\">#</a> Welcome to C++</h1>\n<p>C++ 融合了 3 种不同的编程方式：</p>\n<ul>\n<li>C 语言代表的过程性语言（procedural）</li>\n<li>C++ 在 C 语言基础上添加的类代表的面向对象语言（OOP，Object Oriented Programming）</li>\n<li>C++ 模板支持的泛型编程（generic programming）</li>\n</ul>\n<p><strong>IDE</strong> : Visual Studio</p>\n<p><strong>解决方案 /solution</strong> : 一个包含多个相关 project 的集合，这些 projects 可以是不同类型的（dll,exe,lib 等）。solution 就是一个工作台，而每个项目就是文件的集合，然后被编译成某种目标二进制文件，无论是库 (library) 还是可执行文件 (excutable)</p>\n<p>使用 <code>C++</code>  的最大原因在于直接控制硬件。用 <code>C++</code>  写的代码，这些代码被送去编译器去编译，这些编译器将代码输出为目标平台的机器码。机器码是你的设备在 CPU 上实际执行的指令。使用 C++ 我们完全可以控制 CPU 执行的每一条指令。</p>\n<p><code>C#</code> 和 <code>JAVA</code>  与 <code>C++</code>  不同，是因为它们运行在虚拟机上，这意味着代码首先被编译成一种中间语言，当在目标平台运行应用程序时，虚拟机在程序运行时再转换成机器码。</p>\n<p><code>C++</code>  是本地语言（native language）。比如 x64 编译器将输出 x64 机器代码，从而（也只能）在 64 位的 CPU 上运行。 <code>C++</code>  编译器为目标平台和架构生成机器码，编译后已经变成了平台上的机器语言，你只需要把机器代码指令放入 CPU，CPU 就会执行这些指令。</p>\n<p>仅仅因为代码是本地的，并不意味着它会很快，垃圾代码甚至可能比虚拟机语言更慢比如 C# 或 JAVA，因为它们倾向于运行时做系统优化。</p>\n<h2 id=\"how-c-works\"><a class=\"markdownIt-Anchor\" href=\"#how-c-works\">#</a> How C++ Works</h2>\n<ol>\n<li>\n<p>预处理：展开头文件、宏替换、去掉注释。</p>\n<p>需要文件：.cpp 文件</p>\n<p>生成产物：预处理文件 (以.i 结尾)</p>\n</li>\n<li>\n<p>编译：检查语法，生成汇编代码。</p>\n<p>需要文件：.i 文件</p>\n<p>生成产物：汇编文件 (以.s 结尾)</p>\n</li>\n<li>\n<p>汇编：把汇编代码转换为二进制的机器码。</p>\n<p>需要文件：.s 文件</p>\n<p>生成产物：机器码 (或称为 “目标代码”，以.obj 结尾)</p>\n</li>\n<li>\n<p>链接：合成可执行的程序，并对声明，在其他目标文件找到对应的定义 (把编译过程中生成的所有对象文件链接起来，还会导入可能使用的其他库。)</p>\n<p>需要文件：.obj 文件及各种动态库 (.so .dll) 或静态库 (.a .lib)</p>\n<p>生成产物：可执行程序 (.exe)</p>\n</li>\n</ol>\n<ul>\n<li>Compile（编译）：通常意味着对当前打开的文件中的代码进行编译。</li>\n<li>Build/Make（建立 / 生成）：通常意味着编译项目中所有源代码文件的代码。一个项目中只有一个文件被修改则只重新编译该文件。</li>\n<li>Build All：通常意味着重新编译所有的源代码文件。</li>\n<li>Link（链接）：将编译后的源代码和所需的库代码组合起来。</li>\n<li>Execute/Run：运行程序，如果没有执行前面的步骤，则会先执行前面的步骤。</li>\n<li>Debug：以步进方式执行程序。</li>\n<li>编译器可能让选择调试版或者发布版，调试版包含额外的代码，提供详细的调试信息。</li>\n</ul>\n<p>声明：这个符号、这个函数是存在的。</p>\n<p>定义：这个函数到底是什么。</p>\n<h2 id=\"how-to-debug-c-in-visual-studio\"><a class=\"markdownIt-Anchor\" href=\"#how-to-debug-c-in-visual-studio\">#</a> How to DEBUG C++ in Visual Studio</h2>\n<p><strong>berakpoints</strong> and <strong>reading memory</strong></p>\n<p>We can pause our program and just take a look at what is going on in its memory.Remember,the memory of a running program is pretty much all it’s got. It’s what every variable is set to. It’s what function will be called next.</p>\n<p><img data-src=\"image-20220123003457216.png\" alt=\"image-20220123003457216\"></p>\n<ul>\n<li>step into (逐语句)  会跳转进相应函数内</li>\n<li>step over (逐过程)  不会跳转</li>\n<li>step out (跳出)</li>\n</ul>\n<h2 id=\"头文件\"><a class=\"markdownIt-Anchor\" href=\"#头文件\">#</a> 头文件</h2>\n<ul>\n<li>\n<p><code>C</code>  标准库和 <code>C++</code>  标准库的区别：有.h 后缀的是 <code>C</code>  标准库， <code>C++</code>  标准库没有</p>\n</li>\n<li>\n<p>头文件（Header Files）通常只包含声明，他们不定义如何实现的东西</p>\n</li>\n<li>\n<p>header guard 文件保护符（防止头文件被包含多次）</p>\n<ul>\n<li>\n<p><code>#pragma once</code>   （常用）</p>\n</li>\n<li>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 头文件语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><code>#include&quot; &quot;</code>  和  <code>#include&lt; &gt;</code></p>\n<ul>\n<li>\n<p>一般来说， <code>#include &lt;&gt;</code>  的查找位置是标准库头文件所在目录，先去系统目录中找头文件，如果没有在到当前目录下找。</p>\n<p><code>#include&lt;iostream&gt;</code></p>\n</li>\n<li>\n<p>一般来说， <code>#include &quot; &quot;</code>  的查找位置是当前源文件所在目录，用于 include 自定义的头文件，让系统优先使用当前目录中定义的。</p>\n<p><code>#include&quot;log.h&quot;</code></p>\n<p>可以用 …/ 返回上一级目录（相对地址）</p>\n<p><code>#include&quot;../log.h&quot;</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"处理数据\"><a class=\"markdownIt-Anchor\" href=\"#处理数据\">#</a> 处理数据</h1>\n<p>存储数据时的 3 种基本属性：</p>\n<ul>\n<li>信息存储在何处</li>\n<li>存储的值是多少</li>\n<li>存储的信息是什么类型的</li>\n</ul>\n<h2 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h2>\n<p>变量允许我们命名我们存储在内存中的数据（data），继续使用它。当创建一个变量时它将被存储在内存中 —— 两个地方：堆和栈。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS93M2Nub3RlL2NwcC1rZXl3b3JkLWludHJvLmh0bWw=\">C++ 的关键字（保留字）完整介绍 | 菜鸟教程 (runoob.com)</span></p>\n<p>在 <code>C++</code>  中不同变量类型之间的唯一区别就是大小 size（这个变量会占用多少内存）。这实际上是这些原始数据类型之间的唯一区别。</p>\n<p>数据类型的实际大小取决于编译器 —— 不同的编译器会有不同。由编译器确定类型的大小。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>位</th>\n<th>范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td>1 byte</td>\n<td>-128 到 127 或者 0 到 255</td>\n</tr>\n<tr>\n<td>short (int)</td>\n<td>2 byte</td>\n<td>-32768 到 32767</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4 byte</td>\n<td>-2147483648 到 2147483647</td>\n</tr>\n<tr>\n<td>long (int)</td>\n<td>4 byte</td>\n<td>-2147483648 到 2147483647</td>\n</tr>\n<tr>\n<td>long long (int)</td>\n<td>8 byte</td>\n<td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4 byte</td>\n<td>精度型占 4 个字节（32 位）内存空间，+/- 3.4e +/- 38 (~7 个数字)</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8 byte</td>\n<td>双精度型占 8 个字节（64 位）内存空间，+/- 1.7e +/- 308 (~15 个数字)</td>\n</tr>\n<tr>\n<td>long double</td>\n<td>16 byte</td>\n<td>长双精度型 16 个字节（128 位）内存空间，可提供 18-19 位有效数字。</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>1 byte</td>\n<td>实际只占用 1bit（可以将 8 个 bools 存在一个 byte 里面，比如 bitset）</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>一些基本类型可以使用一个或多个类型修饰符进行修饰：</p>\n<ul>\n<li>signed</li>\n<li>unsigned（可以将 unsigned 添加到上述常用 5 个类型的任何一个，它会移除符号位，可以设置一个更大的数字。）</li>\n<li>short</li>\n<li>long</li>\n</ul>\n</li>\n<li>\n<p>float 和 double 定义：</p>\n<p>有一个 f 在后面才声明这是一个浮点数：</p>\n</li>\n</ul>\n<p><img data-src=\"image-20220120000333571.png\" alt=\"image-20220120000333571\"></p>\n<p><img data-src=\"image-20220120000357730.png\" alt=\"image-20220120000357730\"></p>\n<ul>\n<li>操作符 sizeof，输出类型占用字节数，sizeof (bool) 就会打印出 1，表示 bool 占用一个字节。</li>\n<li>C++ 也允许定义各种其他类型的变量，比如<strong>枚举、指针、数组、引用、数据结构、类</strong>等等</li>\n</ul>\n<h2 id=\"常量\"><a class=\"markdownIt-Anchor\" href=\"#常量\">#</a> 常量</h2>\n<p>常量是固定值，在程序执行期间不会改变。这些固定的值，又叫做<strong>字面量</strong>。</p>\n<p>常量可以是任何的基本数据类型，可分为整型数字、浮点数字、字符、字符串和布尔值。</p>\n<p>常量就像是常规的变量，只不过常量的值在定义后不能进行修改。</p>\n<ul>\n<li>\n<p>整数常量</p>\n<p>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。</p>\n<p>整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意。</p>\n</li>\n<li>\n<p>浮点常量</p>\n</li>\n<li>\n<p>布尔常量</p>\n<p>布尔常量共有两个，它们都是标准的 C++ 关键字：</p>\n<ul>\n<li><strong>true</strong> 值代表真。</li>\n<li><strong>false</strong> 值代表假。</li>\n</ul>\n</li>\n<li>\n<p>字符常量</p>\n<p>字符常量是括在单引号中。如果常量以 L（仅当大写时）开头，则表示它是一个宽字符常量（例如 L’x’），此时它必须存储在 <strong>wchar_t</strong> 类型的变量中。否则，它就是一个窄字符常量（例如 ‘x’），此时它可以存储在 <strong>char</strong> 类型的简单变量中。</p>\n<p>字符常量可以是一个普通的字符（例如 ‘x’）、一个转义序列（例如 ‘\\t’），或一个通用的字符（例如 ‘\\u02C0’）。</p>\n<p>在 C++ 中，有一些特定的字符，当它们前面有反斜杠时，它们就具有特殊的含义，被用来表示如换行符（\\n）或制表符（\\t）等。下表列出了一些这样的转义序列码：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">转义序列</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">\\\\</td>\n<td style=\"text-align:left\">\\ 字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\’</td>\n<td style=\"text-align:left\">’ 字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\&quot;</td>\n<td style=\"text-align:left\">&quot; 字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">? 字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\a</td>\n<td style=\"text-align:left\">警报铃声</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">退格键</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td style=\"text-align:left\">换页符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">换行符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:left\">回车</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:left\">水平制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td style=\"text-align:left\">垂直制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\ooo</td>\n<td style=\"text-align:left\">一到三位的八进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\xhh . . .</td>\n<td style=\"text-align:left\">一个或多个数字的十六进制数</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>字符串常量</p>\n<p>字符串字面值或常量是括在双引号 <strong>“”</strong> 中的。一个字符串包含类似于字符常量的字符：普通的字符、转义序列和通用的字符。</p>\n<p>您可以使用 *<em>*</em> 做分隔符，把一个很长的字符串常量进行分行。</p>\n</li>\n</ul>\n<p><strong>定义常量</strong></p>\n<p>在 C++ 中，有两种简单的定义常量的方式：</p>\n<ul>\n<li>使用 <strong>#define</strong> 预处理器。</li>\n<li>使用 <strong>const</strong> 关键字。</li>\n</ul>\n<h2 id=\"左值和右值\"><a class=\"markdownIt-Anchor\" href=\"#左值和右值\">#</a> 左值和右值</h2>\n<p>C++ 中有两种类型的表达式：</p>\n<ul>\n<li>** 左值（lvalue）：** 指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li>\n<li>** 右值（rvalue）：** 术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li>\n</ul>\n<p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。下面是一个有效的语句：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> g <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是下面这个就不是一个有效的语句，会生成编译时错误：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"类型限定符\"><a class=\"markdownIt-Anchor\" href=\"#类型限定符\">#</a> 类型限定符</h2>\n<p>类型限定符提供了变量的额外信息，用于在定义变量或函数时改变它们的默认行为的关键字。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">限定符</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">const</td>\n<td style=\"text-align:left\"><strong>const</strong> 定义常量，表示该变量的值不能被修改。。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">volatile</td>\n<td style=\"text-align:left\">修饰符 <strong>volatile</strong> 告诉该变量的值可能会被程序以外的因素改变，如硬件或其他线程。。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">restrict</td>\n<td style=\"text-align:left\">由 <strong>restrict</strong> 修饰的指针是唯一一种访问它所指向的对象的方式。只有 C99 增加了新的类型限定符 restrict。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mutable</td>\n<td style=\"text-align:left\">表示类中的成员变量可以在 const 成员函数中被修改。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">static</td>\n<td style=\"text-align:left\">用于定义静态变量，表示该变量的作用域仅限于当前文件或当前函数内，不会被其他文件或函数访问。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">register</td>\n<td style=\"text-align:left\">用于定义寄存器变量，表示该变量被频繁使用，可以存储在 CPU 的寄存器中，以提高程序的运行效率。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"存储类\"><a class=\"markdownIt-Anchor\" href=\"#存储类\">#</a> 存储类</h2>\n<p>存储类定义 C++ 程序中变量 / 函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C++ 程序中可用的存储类：</p>\n<ul>\n<li>auto</li>\n<li>register</li>\n<li>static</li>\n<li>extern</li>\n<li>mutable</li>\n<li>thread_local (C++11)</li>\n</ul>\n<p>从 C++ 17 开始，auto 关键字不再是 C++ 存储类说明符，且 register 关键字被弃用。</p>\n<p><strong>auto 存储类</strong></p>\n<p>自  <code>C++ 11</code>  以来，<strong>auto</strong> 关键字用于两种情况：声明变量时根据初始化表达式自动推断该变量的类型、声明函数时函数返回值的占位符。</p>\n<p><code>C++ 98</code>  标准中 auto 关键字用于自动变量的声明，但由于使用极少且多余，在  <code>C++ 17</code>  中已删除这一用法。</p>\n<p>根据初始化表达式自动推断被声明的变量的类型，如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> f<span class=\"token operator\">=</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//double </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//const char* </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> z <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">auto</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// int* </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">auto</span> x1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> x2 <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span> x3<span class=\"token operator\">=</span><span class=\"token char\">'r'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 错误，必须是初始化为同一类型</span></pre></td></tr></table></figure><p><strong>register 存储类</strong></p>\n<p><strong>register</strong> 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span>  miles<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 ‘register’ 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p>\n<p><strong>static 存储类</strong></p>\n<p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p>\n<p>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p>\n<p>在 C++ 中，当 static 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 函数声明 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 全局变量 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 函数定义</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 局部静态变量</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"变量 i 为 \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" , 变量 count 为 \"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>变量 i 为 <span class=\"token number\">6</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>变量 i 为 <span class=\"token number\">7</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>变量 i 为 <span class=\"token number\">8</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>变量 i 为 <span class=\"token number\">9</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>变量 i 为 <span class=\"token number\">10</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>变量 i 为 <span class=\"token number\">11</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>变量 i 为 <span class=\"token number\">12</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>变量 i 为 <span class=\"token number\">13</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>变量 i 为 <span class=\"token number\">14</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>变量 i 为 <span class=\"token number\">15</span> <span class=\"token punctuation\">,</span> 变量 count 为 <span class=\"token number\">0</span></pre></td></tr></table></figure><p><strong>extern 存储类</strong></p>\n<p><strong>extern</strong> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 ‘extern’ 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p>\n<p>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。</p>\n<p>extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，如下所示：</p>\n<p>第一个文件：main.cpp</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> count <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write_extern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   count <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token function\">write_extern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第二个文件：support.cpp</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">write_extern</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Count is \"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在这里，第二个文件中的 <em>extern</em> 关键字用于声明已经在第一个文件 main.cpp 中定义的 count。现在 ，编译这两个文件，如下所示：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ g++ main.cpp support.cpp <span class=\"token parameter variable\">-o</span> <span class=\"token function\">write</span></pre></td></tr></table></figure><p>这会产生 <strong>write</strong> 可执行程序，尝试执行 <strong>write</strong>，它会产生下列结果：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ./write</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Count is <span class=\"token number\">5</span></pre></td></tr></table></figure><p><strong>mutable 存储类</strong></p>\n<p><strong>mutable</strong> 说明符仅适用于类的对象，这将在本教程的最后进行讲解。它允许对象的成员替代常量。也就是说，mutable 成员可以通过 const 成员函数修改。</p>\n<p><strong>thread_local 存储类</strong></p>\n<p>使用 thread_local 说明符声明的变量仅可在它在其上创建的线程上访问。 变量在创建线程时创建，并在销毁线程时销毁。 每个线程都有其自己的变量副本。</p>\n<p>thread_local 说明符可以与 static 或 extern 合并。</p>\n<p>可以将 thread_local 仅应用于数据声明和定义，thread_local 不能用于函数声明或定义。</p>\n<p>以下演示了可以被声明为 thread_local 的变量：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">thread_local</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 命名空间下的全局变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">thread_local</span> std<span class=\"token double-colon punctuation\">::</span>string s<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类的 static 成员变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">thread_local</span> std<span class=\"token double-colon punctuation\">::</span>string X<span class=\"token double-colon punctuation\">::</span>s<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// X::s 是需要定义的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">thread_local</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 本地变量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"复合类型\"><a class=\"markdownIt-Anchor\" href=\"#复合类型\">#</a> 复合类型</h1>\n<h2 id=\"数组array\"><a class=\"markdownIt-Anchor\" href=\"#数组array\">#</a> 数组（array）</h2>\n<p>存储一个固定大小的相同类型元素的顺序集合。</p>\n<h2 id=\"字符串string\"><a class=\"markdownIt-Anchor\" href=\"#字符串string\">#</a> 字符串（string）</h2>\n<p>字符串实际上是使用  <code>null</code>  字符  <code>\\0</code>  终止的一维字符数组。</p>\n<p>C++ 提供了以下两种类型的字符串表示形式：</p>\n<ul>\n<li>C-style 字符串  <code> #include &lt;cstring&gt;</code></li>\n<li>C++ 引入的 string 类类型  <code> #include &lt;string&gt;</code></li>\n</ul>\n<h2 id=\"结构体struct\"><a class=\"markdownIt-Anchor\" href=\"#结构体struct\">#</a> 结构体（struct）</h2>\n<p>存储不同的数据类型。（int, float 和 double）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">inflatable</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">float</span> volume<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"共用体union\"><a class=\"markdownIt-Anchor\" href=\"#共用体union\">#</a> 共用体（union）</h2>\n<p>存储不同的数据类型，但只能同时存储一种。（int 或 float 或 double）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> one4all</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> int_val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">long</span> long_val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">double</span> double_val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"枚举enum\"><a class=\"markdownIt-Anchor\" href=\"#枚举enum\">#</a> 枚举（enum）</h2>\n<p>枚举类型 (enumeration) 是 C++ 中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。</p>\n<p>如果一个变量只有几种可能的值，可以定义为枚举 (enumeration) 类型。所谓 &quot;枚举&quot; 是指将变量的值一一列举出来，变量的值只能在列举出来的值的范围内。</p>\n<p>创建枚举，需要使用关键字 <strong>enum</strong>。枚举类型的一般形式为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> 枚举名<span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     标识符<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span>整型常数<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     标识符<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span>整型常数<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     标识符<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span>整型常数<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> 枚举变量<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果枚举没有初始化，即省掉 &quot;= 整型常数&quot; 时，则从第一个标识符开始。</p>\n<p>例如，下面的代码定义了一个颜色枚举，变量 c 的类型为 color。最后，c 被赋值为 “blue”。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color</span> <span class=\"token punctuation\">&#123;</span> red<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">,</span> blue <span class=\"token punctuation\">&#125;</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>c <span class=\"token operator\">=</span> blue<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>默认情况下，第一个名称的值为 0，第二个名称的值为 1，第三个名称的值为 2，以此类推。但是，您也可以给名称赋予一个特殊的值，只需要添加一个初始值即可。例如，在下面的枚举中，<strong>green</strong> 的值为 5。</p>\n<pre><code>enum color &#123; red, green=5, blue &#125;;\n</code></pre>\n<p>在这里，<strong>blue</strong> 的值为 6，因为默认情况下，每个名称都会比它前面一个名称大 1，但 red 的值依然为 0。</p>\n<h2 id=\"指针\"><a class=\"markdownIt-Anchor\" href=\"#指针\">#</a> 指针</h2>\n<p>指针（Pointers）对管理和操作内存至关重要，因为我们在代码中做的每件事，都是从内存中读取或者写入内存。</p>\n<ul>\n<li><code>&amp;</code>  地址运算符：作用于变量，获得变量地址。</li>\n<li><code> *</code>  解除引用运算符 / 间接值运算符：作用于指针，获取该地址处存储的值。</li>\n</ul>\n<p>指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，必须在使用指针存储其他变量地址之前，对其进行声明。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">int</span>  var <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 实际变量的声明</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">int</span>  <span class=\"token operator\">*</span>ip<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 指针变量的声明</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   ip <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>var<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 在指针变量中存储 var 的地址</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of var variable: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> var <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// 输出在指针变量中存储的地址</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Address stored in ip variable: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> ip <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\">// 访问指针中地址的值，通过使用一元运算符 * 来返回位于操作数所指定地址的变量的值。</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of *ip variable: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>ip <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 输出:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Value of var variable<span class=\"token operator\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Address stored in ip variable<span class=\"token operator\">:</span> <span class=\"token number\">0xbfc601ac</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Value of <span class=\"token operator\">*</span>ip variable<span class=\"token operator\">:</span> <span class=\"token number\">20</span></pre></td></tr></table></figure><h3 id=\"new\"><a class=\"markdownIt-Anchor\" href=\"#new\">#</a> new</h3>\n<p><code>int *pn = new int;</code>  运算符 <code>new</code>  根据类型来确定需要多少字节的内存，然后找到这样的内存并返回其地址。然后将地址赋给 <code>pn</code> ， <code>pn</code>  是被声明为指向 <code>int</code>  的指针。</p>\n<p>常规变量声明分配在栈（stack）的内存区域中；而 new 分配在堆（heap）或自由存储区（free store）</p>\n<h3 id=\"delete\"><a class=\"markdownIt-Anchor\" href=\"#delete\">#</a> delete</h3>\n<p>一定要配对的使用 <code>new</code>  和 <code>delete</code> ，否则将发生内存泄漏（memory leak）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//allocate memory with new</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\t\t\t\t <span class=\"token comment\">//use the memory</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span>\t\t  <span class=\"token comment\">//free memory with delete when done</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 使用 new 创建动态数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//get a block of 10 ints</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ps<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//free a ddynamic array</span></pre></td></tr></table></figure><h3 id=\"指针与数组\"><a class=\"markdownIt-Anchor\" href=\"#指针与数组\">#</a> 指针与数组</h3>\n<p>C++ 将数组名解释为数组第一个元素的地址</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> wages<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1000.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000.0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> wages<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//wages = &amp;wages[0] = address of first element of array</span></pre></td></tr></table></figure><h2 id=\"引用\"><a class=\"markdownIt-Anchor\" href=\"#引用\">#</a> 引用</h2>\n<p>引用（References）和指针的不同：</p>\n<ul>\n<li>不存在空引用。引用必须连接到一块合法的内存。</li>\n<li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li>\n<li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li>\n</ul>\n<p>引用只是其他变量的一个别名（alias）</p>\n<p>引用只在定义时绑定，如果在定义后将变量赋值给引用，则不会重新绑定，而只是赋值。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 声明简单的变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">int</span>    i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">double</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 声明引用变量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span>    r <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> s <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of i : \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of i reference : \"</span> <span class=\"token operator\">&lt;&lt;</span> r  <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   d <span class=\"token operator\">=</span> <span class=\"token number\">11.7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of d : \"</span> <span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Value of d reference : \"</span> <span class=\"token operator\">&lt;&lt;</span> s  <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Value of i <span class=\"token operator\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Value of i reference <span class=\"token operator\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Value of d <span class=\"token operator\">:</span> <span class=\"token number\">11.7</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Value of d reference <span class=\"token operator\">:</span> <span class=\"token number\">11.7</span></pre></td></tr></table></figure><p>用指针来实现引用调用函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>用引用来实现引用调用函数。通过使用引用来替代指针，会使  <code>C++</code>  程序更容易阅读和维护。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>把引用作为返回值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">double</span> vals<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50.0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> <span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> ref <span class=\"token operator\">=</span> vals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">return</span> ref<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 返回第 i 个元素的引用，ref 是一个引用变量，ref 引用 vals [i]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 要调用上面定义函数的主函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"改变前的值\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"vals[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] = \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       cout <span class=\"token operator\">&lt;&lt;</span> vals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">20.23</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 改变第 2 个元素</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">70.8</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 改变第 4 个元素</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"改变后的值\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"vals[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] = \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       cout <span class=\"token operator\">&lt;&lt;</span> vals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"循环语句\"><a class=\"markdownIt-Anchor\" href=\"#循环语句\">#</a> 循环语句</h1>\n<p>Loops in C++</p>\n<ul>\n<li>\n<p>whlie 循环</p>\n<p>当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>for 循环</p>\n<p>for 循环允许编写一个执行特定次数的循环的重复控制结构。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> init<span class=\"token punctuation\">;</span> condition<span class=\"token punctuation\">;</span> increment <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>do…while… 循环</p>\n<p>除了它是在循环主体结尾测试条件外，其他与 while 语句类似，但是 do…while 循环会确保至少执行一次循环。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> condition <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"判断语句\"><a class=\"markdownIt-Anchor\" href=\"#判断语句\">#</a> 判断语句</h1>\n<p>Conditions and Branches in C++</p>\n<ul>\n<li>\n<p>if…else…</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>boolean_expression<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 如果布尔表达式为真将执行的语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">// 如果布尔表达式为假将执行的语句</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>switch</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">case</span> constant<span class=\"token operator\">-</span>expression  <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可选的</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">case</span> constant<span class=\"token operator\">-</span>expression  <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可选的</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 可以有任意数量的 case 语句</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token operator\">:</span> <span class=\"token comment\">// 可选的</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>条件运算符？:</p>\n<p>可以用来替代 <strong>if…else</strong> 语句</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   var <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   var <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 条件运算符形式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>var <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">30</span> <span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>控制流 (Control Flow in C++)</p>\n<ul>\n<li>\n<p>break</p>\n<p>当 break 语句出现在一个循环内时，循环会立即终止，且程序流将继续执行<strong>紧接着循环的下一条语句</strong>。如果您使用的是嵌套循环（即一个循环内嵌套另一个循环），break 语句会停止执行最内层的循环，然后开始执行该块之后的下一行代码。它也可用于终止 switch 语句中的一个 case。</p>\n</li>\n<li>\n<p>continue</p>\n<p>continue 会跳过当前循环中的代码，强迫开始下一次循环。</p>\n<p>对于 for 循环，continue 语句会导致执行条件测试和循环增量部分。对于 while 和 do…while 循环，continue 语句会导致程序控制回到条件测试上。</p>\n</li>\n<li>\n<p>return</p>\n<p>没必要在循环内使用，可在代码内任何位置使用，return 之后的语句都不会执行。</p>\n</li>\n</ul>\n<h1 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h1>\n<p>函数（Functions）是一组一起执行一个任务的语句。每个 C++ 程序都至少有一个函数，即主函数 <strong>main()</strong></p>\n<p>应当需要一点经验来意识到<strong>什么时候需要一个函数</strong>，如果正在多次做一个常见的任务，那么为他创建一个函数。</p>\n<p>函数的主要目的是<strong>防止代码重复</strong>，我们不希望只是到处复制和粘贴代码。</p>\n<p>函数就是我们写的代码块，被设计为用来执行特定的任务。在 class 中这些代码块则被称为方法 method。这里所说函数单独指类外的。</p>\n<p>每次调用函数，编译器生成一个 call 指令（类外的，因此没有什么动态绑定，也暂时不考虑内联）。这基本上意义着，在一个运行的程序中，为了调用一个函数，我们需要创建一个堆栈结构，这意味着我们必须把像参数这样的东西推进堆栈。我们还需要一个叫做返回地址的东西压入堆栈。然后我们要做的是跳到二进制执行文件的不同部分，以便开始执行我们的函数指令。</p>\n<p>为了将 push 进去的结果返回，然后我们得回去到最初调用函数之前。跳跃和执行这些都需要时间，所以它会减慢我们的程序。</p>\n<p>而对于 main 函数，返回值是 int，并且只有 main 函数可以不 return—— 它会自动假设返回 0.（这是现代 C 和 C++ 的一个特性）</p>\n<p><strong>定义函数</strong></p>\n<p>C++ 中的函数定义的一般形式如下：</p>\n<p body=\"\" of=\"\" the=\"\" function=\"\">return_type function_name( parameter list )</p>\n<p>在 C++ 中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p>\n<ul>\n<li>返回类型：一个函数可以返回一个值。<strong>return_type</strong> 是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type 是关键字 <strong>void</strong>。</li>\n<li>函数名称：这是函数的实际名称。函数名和参数列表一起构成了函数签名。</li>\n<li>参数：参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数。</li>\n<li>函数主体：函数主体包含一组定义函数执行任务的语句。</li>\n</ul>\n<p><strong>函数参数</strong></p>\n<p>如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的<strong>形式参数</strong>。</p>\n<p>形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。</p>\n<p>当调用函数时，有三种向函数传递参数的方式：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">调用类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">传值调用</td>\n<td style=\"text-align:left\">该方法把参数的实际值赋值给函数的形式参数。在这种情况下，修改函数内的形式参数对实际参数没有影响。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">指针调用</td>\n<td style=\"text-align:left\">该方法把参数的地址赋值给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">引用调用</td>\n<td style=\"text-align:left\">该方法把参数的引用赋值给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>\n</tr>\n</tbody>\n</table>\n<p>默认情况下，C++ 使用<strong>传值调用</strong>来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的参数。</p>\n<p><strong>Lambda 函数与表达式</strong></p>\n<hr>\n<h1 id=\"类对象\"><a class=\"markdownIt-Anchor\" href=\"#类对象\">#</a> 类 &amp; 对象</h1>\n<p>类用于指定对象的形式，它包含了数据表示法和用于处理数据的方法。</p>\n<p>C++ 类定义</p>\n<p><img data-src=\"cpp-classes-objects-2020-12-10-11.png\" alt=\"img\"></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">double</span> length<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 长度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">double</span> breadth<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 宽度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">double</span> height<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 高度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// 成员函数声明</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">double</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> bre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> hei <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 成员函数定义</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token class-name\">Box</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> length <span class=\"token operator\">*</span> breadth <span class=\"token operator\">*</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Box</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> bre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> hei<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    length <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    breadth <span class=\"token operator\">=</span> bre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    height <span class=\"token operator\">=</span> hei<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   Box Box1<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 声明 Box1，类型为 Box</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   Box Box2<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 声明 Box2，类型为 Box</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   Box Box3<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 声明 Box3，类型为 Box</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">double</span> volume <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 用于存储体积</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token comment\">//box 1 详述</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   Box1<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   Box1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">6.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   Box1<span class=\"token punctuation\">.</span>breadth <span class=\"token operator\">=</span> <span class=\"token number\">7.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token comment\">//box 2 详述</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   Box2<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   Box2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">12.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   Box2<span class=\"token punctuation\">.</span>breadth <span class=\"token operator\">=</span> <span class=\"token number\">13.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token comment\">//box 1 的体积</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   volume <span class=\"token operator\">=</span> Box1<span class=\"token punctuation\">.</span>height <span class=\"token operator\">*</span> Box1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> Box1<span class=\"token punctuation\">.</span>breadth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Box1 的体积：\"</span> <span class=\"token operator\">&lt;&lt;</span> volume <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   <span class=\"token comment\">//box 2 的体积</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   volume <span class=\"token operator\">=</span> Box2<span class=\"token punctuation\">.</span>height <span class=\"token operator\">*</span> Box2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> Box2<span class=\"token punctuation\">.</span>breadth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Box2 的体积：\"</span> <span class=\"token operator\">&lt;&lt;</span> volume <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre> </pre></td></tr><tr><td data-num=\"52\"></td><td><pre> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   <span class=\"token comment\">//box 3 详述</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   Box3<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">16.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   volume <span class=\"token operator\">=</span> Box3<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Box3 的体积：\"</span> <span class=\"token operator\">&lt;&lt;</span> volume <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>类成员函数</th>\n<th>类的成员函数是指那些把定义和原型写在类定义内部的函数，就像类定义中的其他变量一样。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类访问修饰符</td>\n<td>类成员可以被定义为 public、private 或 protected。默认情况下是定义为 private。</td>\n</tr>\n<tr>\n<td>构造函数 &amp; 析构函数</td>\n<td>类的构造函数是一种特殊的函数，在创建一个新的对象时调用。类的析构函数也是一种特殊的函数，在删除所创建的对象时调用。</td>\n</tr>\n<tr>\n<td>C++ 拷贝构造函数</td>\n<td>拷贝构造函数，是一种特殊的构造函数，它在创建对象时，是使用同一类中之前创建的对象来初始化新创建的对象。</td>\n</tr>\n<tr>\n<td>C++ 友元函数</td>\n<td><strong>友元函数</strong>可以访问类的 private 和 protected 成员。</td>\n</tr>\n<tr>\n<td>C++ 内联函数</td>\n<td>通过内联函数，编译器试图在调用函数的地方扩展函数体中的代码。</td>\n</tr>\n<tr>\n<td>C++ 中的 this 指针</td>\n<td>每个对象都有一个特殊的指针 <strong>this</strong>，它指向对象本身。</td>\n</tr>\n<tr>\n<td>C++ 中指向类的指针</td>\n<td>指向类的指针方式如同指向结构的指针。实际上，类可以看成是一个带有函数的结构。</td>\n</tr>\n<tr>\n<td>C++ 类的静态成员</td>\n<td>类的数据成员和函数成员都可以被声明为静态的。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\">#</a> 继承</h1>\n<p>继承允许我们依据另一个类来定义一个类，这使得创建和维护一个应用程序变得更容易。这样做，也达到了重用代码功能和提高执行效率的效果。</p>\n<p>当创建一个类时，您不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为<strong>基类</strong>，新建的类称为<strong>派生类</strong>。</p>\n<p><img data-src=\"cpp-inheritance-2020-12-15-1.png\" alt=\"img\"></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 基类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//eat () 函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//sleep () 函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 派生类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//bark () 函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一个类可以派生自多个类，这意味着，它可以从多个基类继承数据和函数。定义一个派生类，我们使用一个类派生列表来指定基类。类派生列表以一个或多个基类命名，形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">derived</span><span class=\"token operator\">-</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> access<span class=\"token operator\">-</span>specifier base<span class=\"token operator\">-</span><span class=\"token keyword\">class</span></pre></td></tr></table></figure><p>其中，访问修饰符 access-specifier 是 <strong>public、protected</strong> 或 <strong>private</strong> 其中的一个，base-class 是之前定义过的某个类的名称。如果未使用访问修饰符 access-specifier，则默认为 private。</p>\n<p>举例</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 基类</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         width <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         height <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 派生类</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Shape</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">int</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   Rectangle Rect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   Rect<span class=\"token punctuation\">.</span><span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   Rect<span class=\"token punctuation\">.</span><span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token comment\">// 输出对象的面积</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Total area: \"</span> <span class=\"token operator\">&lt;&lt;</span> Rect<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">//Total area: 35</span></pre></td></tr></table></figure><h2 id=\"访问控制和继承\"><a class=\"markdownIt-Anchor\" href=\"#访问控制和继承\">#</a> 访问控制和继承</h2>\n<p>派生类可以访问基类中所有的非私有成员。因此基类成员如果不想被派生类的成员函数访问，则应在基类中声明为 private。</p>\n<p>我们可以根据访问权限总结出不同的访问类型，如下所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">访问</th>\n<th style=\"text-align:left\">public</th>\n<th style=\"text-align:left\">protected</th>\n<th style=\"text-align:left\">private</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">同一个类</td>\n<td style=\"text-align:left\">yes</td>\n<td style=\"text-align:left\">yes</td>\n<td style=\"text-align:left\">yes</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">派生类</td>\n<td style=\"text-align:left\">yes</td>\n<td style=\"text-align:left\">yes</td>\n<td style=\"text-align:left\">no</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">外部的类</td>\n<td style=\"text-align:left\">yes</td>\n<td style=\"text-align:left\">no</td>\n<td style=\"text-align:left\">no</td>\n</tr>\n</tbody>\n</table>\n<p>一个派生类继承了所有的基类方法，但下列情况除外：</p>\n<ul>\n<li>基类的构造函数、析构函数和拷贝构造函数。</li>\n<li>基类的重载运算符。</li>\n<li>基类的友元函数。</li>\n</ul>\n<p><strong>继承类型</strong></p>\n<p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p>\n<p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p>\n<ul>\n<li><strong>公有继承（public）：<strong>当一个类派生自</strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，<strong>基类的私有成员不能直接被派生类访问，但是可以通过调用基类的公有和保护成员来访问</strong>。</li>\n<li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li>\n<li><strong>私有继承（private）：<strong>当一个类派生自</strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li>\n</ul>\n<h2 id=\"多继承\"><a class=\"markdownIt-Anchor\" href=\"#多继承\">#</a> 多继承</h2>\n<p>多继承即一个子类可以有多个父类，它继承了多个父类的特性。</p>\n<p>C++ 类可以从多个类继承成员，语法如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>派生类名<span class=\"token operator\">></span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span>继承方式<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>基类名<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span>继承方式<span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>基类名<span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>…</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>派生类类体<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>实例</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 基类 Shape</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         width <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         height <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 基类 PaintCost</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PaintCost</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">int</span> <span class=\"token function\">getCost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> area<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         <span class=\"token keyword\">return</span> area <span class=\"token operator\">*</span> <span class=\"token number\">70</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 派生类</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">PaintCost</span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">int</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   Rectangle Rect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   <span class=\"token keyword\">int</span> area<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre> </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   Rect<span class=\"token punctuation\">.</span><span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   Rect<span class=\"token punctuation\">.</span><span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   area <span class=\"token operator\">=</span> Rect<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   <span class=\"token comment\">// 输出对象的面积</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Total area: \"</span> <span class=\"token operator\">&lt;&lt;</span> Rect<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   <span class=\"token comment\">// 输出总花费</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Total paint cost: $\"</span> <span class=\"token operator\">&lt;&lt;</span> Rect<span class=\"token punctuation\">.</span><span class=\"token function\">getCost</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre> </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">//Total area: 35</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">//Total paint cost: $2450</span></pre></td></tr></table></figure><h1 id=\"重载\"><a class=\"markdownIt-Anchor\" href=\"#重载\">#</a> 重载</h1>\n<p>C++ 允许在同一作用域中的某个<strong>函数</strong>和<strong>运算符</strong>指定多个定义，分别称为<strong>函数重载</strong>和<strong>运算符重载</strong>。</p>\n<p>重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有<strong>相同名称的声明</strong>，但是它们的<strong>参数列表和定义（实现）不相同</strong>。</p>\n<p>当您调用一个<strong>重载函数</strong>或<strong>重载运算符</strong>时，编译器通过把您所使用的参数类型与定义中的参数类型进行比较，决定选用最合适的定义。</p>\n<h2 id=\"c-中的函数重载\"><a class=\"markdownIt-Anchor\" href=\"#c-中的函数重载\">#</a> C++ 中的函数重载</h2>\n<p>在同一个作用域内，可以声明几个功能类似的<strong>同名函数</strong>，但是这些<strong>同名函数的形式参数</strong>（指参数的个数、类型或者顺序）<strong>必须不同</strong>。您不能仅通过返回类型的不同来重载函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">printData</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"整数为: \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span>  f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"浮点数为: \"</span> <span class=\"token operator\">&lt;&lt;</span> f <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"字符串为: \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   printData pd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token comment\">// 输出整数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   pd<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token comment\">// 输出浮点数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   pd<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">500.263</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token comment\">// 输出字符串</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello C++\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   pd<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 整数为: 5</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 浮点数为: 500.263</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 字符串为: Hello C++</span></pre></td></tr></table></figure><h2 id=\"c-中的运算符重载\"><a class=\"markdownIt-Anchor\" href=\"#c-中的运算符重载\">#</a> C++ 中的运算符重载</h2>\n<p>重载的运算符是<strong>带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的</strong>。与其他函数一样，重载运算符有一个返回类型和一个参数列表。</p>\n<p>声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Box <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Box<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 类的成员函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Box <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Box<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Box<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 普通非成员函数</span></pre></td></tr></table></figure><p>实例</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">double</span> <span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token keyword\">return</span> length <span class=\"token operator\">*</span> breadth <span class=\"token operator\">*</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">setLength</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> len <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          length <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">setBreadth</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> bre <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          breadth <span class=\"token operator\">=</span> bre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> hei <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          height <span class=\"token operator\">=</span> hei<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\">// 重载 + 运算符，用于把两个 Box 对象相加</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      Box <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Box<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         Box box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         box<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>length <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         box<span class=\"token punctuation\">.</span>breadth <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>breadth <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>breadth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         box<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>height <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         <span class=\"token keyword\">return</span> box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">double</span> length<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 长度</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">double</span> breadth<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 宽度</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">double</span> height<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 高度</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 程序的主函数</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   Box Box1<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 声明 Box1，类型为 Box</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   Box Box2<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 声明 Box2，类型为 Box</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   Box Box3<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 声明 Box3，类型为 Box</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   <span class=\"token keyword\">double</span> volume <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 把体积存储在该变量中</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   <span class=\"token comment\">// Box1 详述</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   Box1<span class=\"token punctuation\">.</span><span class=\"token function\">setLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   Box1<span class=\"token punctuation\">.</span><span class=\"token function\">setBreadth</span><span class=\"token punctuation\">(</span><span class=\"token number\">7.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   Box1<span class=\"token punctuation\">.</span><span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   <span class=\"token comment\">// Box2 详述</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   Box2<span class=\"token punctuation\">.</span><span class=\"token function\">setLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">12.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   Box2<span class=\"token punctuation\">.</span><span class=\"token function\">setBreadth</span><span class=\"token punctuation\">(</span><span class=\"token number\">13.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   Box2<span class=\"token punctuation\">.</span><span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre> </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   <span class=\"token comment\">// Box1 的体积</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   volume <span class=\"token operator\">=</span> Box1<span class=\"token punctuation\">.</span><span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Volume of Box1 : \"</span> <span class=\"token operator\">&lt;&lt;</span> volume <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre> </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   <span class=\"token comment\">// Box2 的体积</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   volume <span class=\"token operator\">=</span> Box2<span class=\"token punctuation\">.</span><span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Volume of Box2 : \"</span> <span class=\"token operator\">&lt;&lt;</span> volume <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre> </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   <span class=\"token comment\">// 把两个对象相加，得到 Box3</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   Box3 <span class=\"token operator\">=</span> Box1 <span class=\"token operator\">+</span> Box2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre> </pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   <span class=\"token comment\">// Box3 的体积</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   volume <span class=\"token operator\">=</span> Box3<span class=\"token punctuation\">.</span><span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Volume of Box3 : \"</span> <span class=\"token operator\">&lt;&lt;</span> volume <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre> </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">//Volume of Box1 : 210</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">//Volume of Box2 : 1560</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">//Volume of Box3 : 5400</span></pre></td></tr></table></figure><h2 id=\"可重载运算符不可重载运算符\"><a class=\"markdownIt-Anchor\" href=\"#可重载运算符不可重载运算符\">#</a> 可重载运算符 / 不可重载运算符</h2>\n<p>下面是可重载的运算符列表：</p>\n<table>\n<thead>\n<tr>\n<th>双目算术运算符</th>\n<th>+ (加)，-(减)，*(乘)，/(除)，% (取模)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>关系运算符</td>\n<td>==(等于)，!= (不等于)，&lt; (小于)，&gt; (大于)，&lt;=(小于等于)，&gt;=(大于等于)</td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td>||(逻辑或)，&amp;&amp;(逻辑与)，!(逻辑非)</td>\n</tr>\n<tr>\n<td>单目运算符</td>\n<td>+ (正)，-(负)，*(指针)，&amp;(取地址)</td>\n</tr>\n<tr>\n<td>自增自减运算符</td>\n<td>++(自增)，–(自减)</td>\n</tr>\n<tr>\n<td>位运算符</td>\n<td>| (按位或)，&amp; (按位与)，~(按位取反)，^(按位异或),，&lt;&lt; (左移)，&gt;&gt;(右移)</td>\n</tr>\n<tr>\n<td>赋值运算符</td>\n<td>=, +=, -=, *=, /= , % = , &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;=</td>\n</tr>\n<tr>\n<td>空间申请与释放</td>\n<td>new, delete, new[ ] , delete[]</td>\n</tr>\n<tr>\n<td>其他运算符</td>\n<td><strong>()</strong>(函数调用)，<strong>-&gt;</strong>(成员访问)，<strong>,</strong>(逗号)，<strong>[]</strong>(下标)</td>\n</tr>\n</tbody>\n</table>\n<p>下面是不可重载的运算符列表：</p>\n<ul>\n<li><strong>.</strong>：成员访问运算符</li>\n<li><strong>.*</strong>, <strong>-&gt;*</strong>：成员指针访问运算符</li>\n<li><strong>::</strong>：域运算符</li>\n<li><strong>sizeof</strong>：长度运算符</li>\n<li><strong>?:</strong>：条件运算符</li>\n<li><strong>#</strong>： 预处理符号</li>\n</ul>\n<h1 id=\"c-多态\"><a class=\"markdownIt-Anchor\" href=\"#c-多态\">#</a> C++ 多态</h1>\n<p><strong>多态</strong>按字面的意思就是多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。</p>\n<p>C++ 多态意味着<strong>调用成员函数时，会根据调用函数的对象的类型来执行不同的函数</strong>。</p>\n<p>实例</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            width <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            height <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Parent class area :\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Shape</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">area</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Retangle class area:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Triangle</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Shape</span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">Triangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Triangle class area: \"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">*</span> height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    Shape <span class=\"token operator\">*</span>shape<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    Rectangle <span class=\"token function\">rec</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    Triangle <span class=\"token function\">tri</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 存储矩形的地址</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    shape <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>rec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 调用矩形的求面积函数 area</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    shape <span class=\"token operator\">-></span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    shape <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>tri<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    shape<span class=\"token operator\">-></span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Parent <span class=\"token keyword\">class</span> <span class=\"token class-name\">area</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Parent <span class=\"token keyword\">class</span> <span class=\"token class-name\">area</span> <span class=\"token operator\">:</span></pre></td></tr></table></figure><p>导致错误输出的原因是，调用函数 area () 被编译器设置为基类中的版本，这就是所谓的<strong>静态多态</strong>，或<strong>静态链接</strong>。函数调用在程序执行前就准备好了。有时候这也被称为<strong>早绑定</strong>，因为 area () 函数在程序编译期间就已经设置好了。</p>\n<p>但现在，让我们对程序稍作修改，在 Shape 类中，area () 的声明前放置关键字 <strong>virtual</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         width <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         height <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Parent class area :\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Rectangle <span class=\"token keyword\">class</span> <span class=\"token class-name\">area</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Triangle <span class=\"token keyword\">class</span> <span class=\"token class-name\">area</span> <span class=\"token operator\">:</span></pre></td></tr></table></figure><p>此时，<strong>编译器看的是指针的内容，而不是它的类型</strong>。因此，由于 tri 和 rec 类的对象的地址存储在 *shape 中，所以会调用各自的 area () 函数。</p>\n<p>正如您所看到的，每个子类都有一个函数 area () 的独立实现。这就是<strong>多态</strong>的一般使用方式。有了多态，您可以有多个不同的类，都带有同一个名称但具有不同实现的函数，函数的参数甚至可以是相同的。</p>\n<h2 id=\"虚函数\"><a class=\"markdownIt-Anchor\" href=\"#虚函数\">#</a> 虚函数</h2>\n<p><strong>虚函数</strong> 是在基类中使用关键字 <strong>virtual</strong> 声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。</p>\n<p>我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为<strong>动态链接</strong>，或<strong>后期绑定</strong>。</p>\n<h2 id=\"纯虚函数\"><a class=\"markdownIt-Anchor\" href=\"#纯虚函数\">#</a> 纯虚函数</h2>\n<p>您可能想要在基类中定义虚函数，以便在派生类中重新定义该函数更好地适用于对象，但是您在基类中又不能对虚函数给出有意义的实现，这个时候就会用到纯虚函数。</p>\n<p>我们可以把基类中的虚函数 area () 改写如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         width <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         height <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// pure virtual function</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>= 0 告诉编译器，函数没有主体，上面的虚函数是<strong>纯虚函数</strong>。</p>\n",
            "tags": [
                "C++"
            ]
        }
    ]
}